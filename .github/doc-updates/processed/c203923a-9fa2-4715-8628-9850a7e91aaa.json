{
  "file": "docs/api/README.md",
  "mode": "replace",
  "content": "<!-- file: docs/api/README.md -->\n<!-- version: 1.1.0 -->\n<!-- guid: 3aa7517d-f590-425b-9c2d-4963faec14fd -->\n\n# API Documentation\n\nThe `docs/api` directory contains all auto-generated references for the gcommon project.\nIt consolidates documentation for gRPC services, REST endpoints, and the underlying\nProtobuf message definitions. All content in this directory is produced by automated\nprocesses and should not be edited manually.\n\n## Directory Structure\n\n```\ndocs/api/\n├── grpc/   # gRPC service and method docs with examples\n├── rest/   # REST endpoint documentation and sample payloads\n└── proto/  # Generated protobuf message and service references\n```\n\nEach subdirectory is regenerated during the release process to ensure accuracy and\nfreshness. Developers should rely on these artifacts when integrating with gcommon\nservices or generating client libraries.\n\n## Generation Pipeline\n\nThe documentation pipeline performs several steps to keep API references current:\n\n1. **Extract Comments** – Parses Go and Protobuf sources for doc comments.\n2. **Compile Examples** – Collects runnable code snippets and example requests.\n3. **Render Markdown** – Uses templates to convert metadata into human-readable pages.\n4. **Link Cross References** – Builds hyperlinks between related messages, services,\n   and REST resources.\n5. **Validate Completeness** – Ensures every public type and endpoint is documented.\n6. **Publish Artifacts** – Writes output to `docs/api/` and stages updates for commit.\n\nThe pipeline is triggered via the release script:\n\n```bash\n./scripts/release.sh docs\n```\n\nDevelopers can run the pipeline locally to preview changes.\n\n## gRPC Documentation\n\nThe `grpc/` subdirectory contains a file for each gRPC service. Pages include:\n\n- Service overview and purpose\n- List of RPC methods with request and response types\n- Example gRPC client invocations in Go and other languages\n- Error codes and retry semantics\n- Related messages and enums\n\nTo regenerate gRPC docs only:\n\n```bash\nmake docs-grpc\n```\n\n## REST Documentation\n\nREST documentation lives under `rest/` and mirrors the gRPC services where\napplicable. Pages provide:\n\n- Endpoint URLs and HTTP methods\n- Query and path parameters\n- Request and response body schemas\n- CURL examples for quick testing\n- Authentication and authorization requirements\n\nTo regenerate REST docs:\n\n```bash\nmake docs-rest\n```\n\n## Protobuf Documentation\n\nThe `proto/` directory contains detailed references for all Protobuf messages,\nservices, and enums. Each file includes:\n\n- Message and field descriptions\n- Service RPC listings\n- Cross-references to related messages\n- Generated example payloads\n\nProtobuf docs are built using `buf` and a custom renderer:\n\n```bash\nmake docs-proto\n```\n\n## Go API Documentation\n\nAlthough Go API docs are generated separately via `godoc`, this directory links to\nexternal Go package documentation for convenience. Examples are extracted from\nsource code and surfaced in the gRPC and REST docs where relevant.\n\n## Usage Guidelines\n\nWhen adding or modifying APIs:\n\n- Document all public fields and methods with clear comments.\n- Provide example requests and responses in tests.\n- Keep Protobuf comments in sync with Go structures.\n- Run the documentation pipeline before submitting changes.\n\nThe automated system will flag missing documentation during CI if sections are\nincomplete.\n\n## Interactive Features\n\nFuture iterations will include interactive API explorers:\n\n- **gRPC Playground** – Invoke RPCs directly from the docs using WebAssembly clients.\n- **REST Console** – Craft and send HTTP requests with live responses.\n- **Schema Browser** – Navigate message definitions with search and filtering.\n\nThese tools will enhance developer experience and reduce integration time.\n\n## Versioning and Release\n\nAPI documentation is versioned alongside the codebase. Each release captures the\nstate of the APIs at that point in time and publishes static assets for archival.\nOlder versions remain accessible for users pinned to previous releases.\n\n## Contribution Workflow\n\n1. Update code or Protobuf definitions with appropriate comments.\n2. Run unit tests and ensure examples compile.\n3. Execute the documentation pipeline locally:\n   ```bash\n   ./scripts/release.sh docs\n   ```\n4. Review generated files under `docs/api/`.\n5. Submit doc updates via the documentation update system.\n\n## Troubleshooting\n\n- Ensure `buf` and required generators are installed.\n- Verify that Protobuf packages have correct `go_package` options.\n- Run `go vet` to catch malformed comments.\n- Check the `docs/api` output for missing or malformed sections.\n\nBy maintaining comprehensive and up-to-date API documentation, gcommon enables\nintegrators to adopt modules quickly and confidently.",
  "guid": "c203923a-9fa2-4715-8628-9850a7e91aaa",
  "created_at": "2025-08-10T14:42:47Z",
  "options": {
    "section": null,
    "after": null,
    "before": null,
    "task_id": null,
    "badge_name": null,
    "priority": null,
    "category": null
  }
}
