# file: .github/workflows/workflow-sync.yml
# version: 1.0.0
# guid: h9i0j1k2-l3m4-n5o6-p7q8-r9s0t1u2v3w4

name: Workflow Synchronization

# DISABLED - on:
# DISABLED -   push:
    branches: [main]
    paths:
      - ".github/workflows/**"
# DISABLED -   workflow_dispatch:
    inputs:
      source_repo:
        description: "Source repository for workflow sync"
        required: true
        default: "jdfalk/gcommon"
        type: string
      target_repos:
        description: "Comma-separated target repositories"
        required: true
        default: "jdfalk/subtitle-manager,jdfalk/copilot-agent-util-rust"
        type: string
      workflows:
        description: "Specific workflows to sync (comma-separated, or 'all')"
        required: false
        default: "all"
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  # Core consolidated workflows to sync
  CORE_WORKFLOWS: |
    ci.yml
    docker.yml
    security.yml
    maintenance.yml
    release.yml
    pr-automation.yml
    docs-automation.yml
    issue-automation.yml

jobs:
  sync-workflows:
    name: Sync Workflows
    runs-on: ubuntu-latest
    if: github.repository == 'jdfalk/gcommon'
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup environment
        run: |
          echo "SOURCE_REPO=${{ github.event.inputs.source_repo || github.repository }}" >> $GITHUB_ENV
          echo "TARGET_REPOS=${{ github.event.inputs.target_repos || 'jdfalk/subtitle-manager,jdfalk/copilot-agent-util-rust' }}" >> $GITHUB_ENV
          echo "WORKFLOWS_TO_SYNC=${{ github.event.inputs.workflows || 'all' }}" >> $GITHUB_ENV

      - name: Determine changed workflows
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get changed workflow files from the push
            changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} | grep "^\.github/workflows/" | sed 's|^\.github/workflows/||' || true)
            if [ -n "$changed_files" ]; then
              workflows_json=$(echo "$changed_files" | jq -R -s 'split("\n") | map(select(length > 0))')
              echo "changed_workflows=$workflows_json" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            # Manual trigger - sync specified workflows
            if [ "$WORKFLOWS_TO_SYNC" = "all" ]; then
              workflows_json=$(echo "$CORE_WORKFLOWS" | tr '\n' ',' | sed 's/,$//' | jq -R 'split(",")')
            else
              workflows_json=$(echo "$WORKFLOWS_TO_SYNC" | jq -R 'split(",")')
            fi
            echo "changed_workflows=$workflows_json" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Sync workflows to target repositories
        if: steps.changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          workflows='${{ steps.changes.outputs.changed_workflows }}'

          echo "# 🔄 Workflow Synchronization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source**: $SOURCE_REPO" >> $GITHUB_STEP_SUMMARY
          echo "**Workflows**: $(echo "$workflows" | jq -r '.[]' | tr '\n' ', ' | sed 's/, $//')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse target repositories
          IFS=',' read -ra TARGET_ARRAY <<< "$TARGET_REPOS"

          for target_repo in "${TARGET_ARRAY[@]}"; do
            target_repo=$(echo "$target_repo" | xargs) # trim whitespace
            echo "## Syncing to $target_repo" >> $GITHUB_STEP_SUMMARY

            # Create temporary directory for target repo
            temp_dir=$(mktemp -d)
            cd "$temp_dir"

            # Clone target repository
            if git clone "https://github.com/$target_repo.git" target_repo; then
              cd target_repo
              git config user.name "Workflow Sync Bot"
              git config user.email "action@github.com"

              # Create sync branch
              sync_branch="workflow-sync-$(date +%Y%m%d-%H%M%S)"
              git checkout -b "$sync_branch"

              files_updated=0

              # Sync each workflow
              echo "$workflows" | jq -r '.[]' | while read -r workflow; do
                if [ -f "$GITHUB_WORKSPACE/.github/workflows/$workflow" ]; then
                  mkdir -p .github/workflows
                  cp "$GITHUB_WORKSPACE/.github/workflows/$workflow" ".github/workflows/$workflow"
                  echo "✅ Synced: $workflow" >> $GITHUB_STEP_SUMMARY
                  files_updated=$((files_updated + 1))
                else
                  echo "⚠️ Missing: $workflow" >> $GITHUB_STEP_SUMMARY
                fi
              done

              # Commit and push if there are changes
              if ! git diff --quiet; then
                git add .github/workflows/
                git commit -m "sync: update workflows from $SOURCE_REPO

                Updated workflows:
                $(echo "$workflows" | jq -r '.[]' | sed 's/^/- /')

                Auto-synced by workflow-sync from ${{ github.repository }}
                Source commit: ${{ github.sha }}"

                # Push branch
                git push origin "$sync_branch"

                # Create pull request using GitHub API
                pr_body="🤖 **Automated Workflow Sync**

                This PR synchronizes workflow files from \`$SOURCE_REPO\`.

                ## Updated Workflows
                $(echo "$workflows" | jq -r '.[] | "- " + .')

                ## Changes
                - Source commit: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
                - Sync triggered by: ${{ github.event_name }}

                Review and merge to apply the latest workflow improvements."

                curl -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Content-Type: application/json" \
                  "https://api.github.com/repos/$target_repo/pulls" \
                  -d "{
                    \"title\": \"Workflow Sync: Update from $SOURCE_REPO\",
                    \"head\": \"$sync_branch\",
                    \"base\": \"main\",
                    \"body\": $(echo "$pr_body" | jq -R -s .)
                  }" > pr_response.json

                pr_url=$(jq -r '.html_url // "Failed to create PR"' pr_response.json)
                echo "📝 Created PR: $pr_url" >> $GITHUB_STEP_SUMMARY
              else
                echo "ℹ️ No changes needed" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Failed to clone $target_repo" >> $GITHUB_STEP_SUMMARY
            fi

            # Cleanup
            cd "$GITHUB_WORKSPACE"
            rm -rf "$temp_dir"
          done

  validation:
    name: Validate Synchronized Workflows
    runs-on: ubuntu-latest
    needs: sync-workflows
    if: always() && needs.sync-workflows.result == 'success'
    steps:
      - name: Validation summary
        run: |
          echo "# ✅ Workflow Sync Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Workflow synchronization completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the created pull requests" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify workflow functionality in target repositories" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor for any workflow execution issues" >> $GITHUB_STEP_SUMMARY
