# file: .github/workflows/integration.yml
# version: 1.0.0
# guid: bf4c777d-44b8-4418-99ca-df388accd69e

name: Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

jobs:
  setup-services:
    name: Setup services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start dependent services
        run: |
          echo 'Starting dependencies'
          # placeholder for docker-compose up

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: setup-services
    strategy:
      matrix:
        environment: [development, staging, production]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure environment
        run: |
          echo "Configuring ${{ matrix.environment }} environment"

      - name: Run integration tests
        run: go test ./integration/... -tags=${{ matrix.environment }} -timeout 30m

  e2e-tests:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    needs: integration-tests
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run e2e tests
        run: go test ./e2e/... -timeout 1h

  compatibility-tests:
    name: Cross-environment compatibility
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        go: ['1.21', '1.22', '1.23']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Run compatibility suite
        run: go test ./compatibility/... -timeout 30m

  report:
    name: Publish integration report
    runs-on: ubuntu-latest
    needs: [integration-tests, e2e-tests, compatibility-tests]
    if: always()
    steps:
      - name: Summarize results
        run: |
          echo "Integration tests: ${{ needs.integration-tests.result }}" > integration-report.txt
          echo "E2E tests: ${{ needs.e2e-tests.result }}" >> integration-report.txt
          echo "Compatibility tests: ${{ needs.compatibility-tests.result }}" >> integration-report.txt

      - name: Upload integration report
        uses: actions/upload-artifact@v4
        with:
          name: integration-report
          path: integration-report.txt

      - name: Post GitHub comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('integration-report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Integration test results:\n\n${report}`
            });

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK != ''
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "Integration workflow completed for ${{ github.repository }}"
            }

  environment-report:
    name: Environment deployment report
    runs-on: ubuntu-latest
    needs: report
    steps:
      - name: Summarize environment status
        run: |
          echo "Development environment: ready" > env-report.txt
          echo "Staging environment: ready" >> env-report.txt
          echo "Production environment: ready" >> env-report.txt
          echo "Performance environment: ready" >> env-report.txt

      - name: Upload environment report
        uses: actions/upload-artifact@v4
        with:
          name: environment-report
          path: env-report.txt

  env-notify:
    name: Notify environment status
    runs-on: ubuntu-latest
    needs: environment-report
    if: always()
    steps:
      - name: Download environment report
        uses: actions/download-artifact@v4
        with:
          name: environment-report

      - name: Post GitHub comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('env-report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Environment report:\n\n${body}`
            });

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK != ''
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "Environment report generated for ${{ github.repository }}"
            }
