# file: .github/workflows/pr-automation-consolidated.yml
# version: 3.1.0
# guid: a7b8c9d0-e1f2-3456-a789-0123456789bc

name: PR Automation (Consolidated)

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  statuses: write
  security-events: write
  actions: write
  packages: read
  id-token: write
  repository-projects: write
  models: read

env:
  VALIDATE_ALL_CODEBASE: false
  DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  FILTER_REGEX_EXCLUDE: ".*\\.git/.*|.*\\.github/copilot/.*|.*\\.vscode/.*|.*node_modules/.*|.*\\.cache/.*|.*vendor/.*|.*dist/.*"

jobs:
  # Primary code quality check - runs on all PRs
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Super Linter environment
        run: |
          echo "Setting up Super Linter environment..."
          echo "VALIDATE_ALL_CODEBASE=false" >> $GITHUB_ENV
          echo "DEFAULT_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
          echo "FILTER_REGEX_EXCLUDE=${{ env.FILTER_REGEX_EXCLUDE }}" >> $GITHUB_ENV

          # Debug workspace contents
          echo "Current working directory: $(pwd)"
          echo "Contents of workspace:"
          ls -la
          echo "Files to be linted:"
          find . -type f -name "*.md" -o -name "*.go" -o -name "*.py" -o -name "*.js" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" | head -20

      - name: Load custom configuration
        run: |
          if [ -f ".github/super-linter.env" ]; then
            echo "Loading custom configuration from .github/super-linter.env"
            grep -v '^#' ".github/super-linter.env" | grep -v '^$' >> $GITHUB_ENV
          else
            echo "No custom configuration file found at .github/super-linter.env"
          fi

          # Ensure git is properly configured for super-linter
          git config --global --add safe.directory /github/workspace
          git config --global --add safe.directory ${{ github.workspace }}

      - name: Run Super Linter
        id: run-super-linter
        uses: super-linter/super-linter@v8
        continue-on-error: true
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          FILTER_REGEX_EXCLUDE: ${{ env.FILTER_REGEX_EXCLUDE }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          DEFAULT_WORKSPACE: ${{ github.workspace }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          SUPPRESS_POSSUM: true
          LOG_LEVEL: WARN
          OUTPUT_FORMAT: colored
          OUTPUT_FOLDER: super-linter-output
          OUTPUT_DETAILS: simpler
          CREATE_LOG_FILE: true
          SLIM_IMAGE: false
          LOG_FILE: super-linter.log
          VALIDATE_PYTHON: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_JAVASCRIPT_ES: false
          VALIDATE_TYPESCRIPT_ES: false
          VALIDATE_JAVASCRIPT_PRETTIER: false
          VALIDATE_TYPESCRIPT_PRETTIER: false
          VALIDATE_GO: false
          VALIDATE_GO_MODULES: false
          VALIDATE_CSS: false
          VALIDATE_HTML: false
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_GITLEAKS: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          FIX_GO: false
          FIX_JAVASCRIPT_ES: false
          FIX_TYPESCRIPT_ES: false
          FIX_JSON: true
          FIX_MARKDOWN: true
          FIX_PYTHON_BLACK: false
          FIX_PYTHON_ISORT: false
          FIX_SHELL_SHFMT: true

      - name: Check for auto-fixes
        id: check-fixes
        run: |
          if ! git diff --quiet; then
            echo "has_fixes=true" >> $GITHUB_OUTPUT
            echo "Auto-fixes were applied by Super Linter"
          else
            echo "has_fixes=false" >> $GITHUB_OUTPUT
            echo "No auto-fixes were applied"
          fi

      - name: Commit and push auto-fixes
        if: steps.check-fixes.outputs.has_fixes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          echo "Staging auto-fixes..."
          git add -A

          # Create detailed commit message
          FIXED_FILES=$(git diff --cached --name-only | head -10)
          TOTAL_FILES=$(git diff --cached --name-only | wc -l)

          echo "style: auto-fix linting issues [skip ci]" > commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Auto-formatting and fixes applied by Super Linter." >> commit_msg.txt
          echo "" >> commit_msg.txt
          echo "Files changed:" >> commit_msg.txt

          echo "$FIXED_FILES" | while IFS= read -r file; do
            echo "- $file - Auto-formatting applied" >> commit_msg.txt
          done

          if [ "$TOTAL_FILES" -gt 10 ]; then
            echo "- ... and $((TOTAL_FILES - 10)) more files" >> commit_msg.txt
          fi

          git commit -F commit_msg.txt
          rm commit_msg.txt

          echo "Pushing auto-fixes..."
          git push
          echo "✅ Auto-fixes committed and pushed successfully"

      - name: Create Job Summary
        if: always()
        run: |
          echo "# 🔍 Super Linter Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.run-super-linter.outcome }}" = "success" ]; then
            echo "✅ **All code quality checks passed!**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.run-super-linter.outcome }}" = "failure" ]; then
            echo "❌ **Issues found that need attention**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Linter status unknown** - check workflow logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Show auto-fixes if applied
          if [ "${{ steps.check-fixes.outputs.has_fixes }}" = "true" ]; then
            echo "## 🔧 Auto-fixes Applied" >> $GITHUB_STEP_SUMMARY
            echo "Auto-formatting fixes were applied and committed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: Changed files only" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-fix**: true" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-commit**: true" >> $GITHUB_STEP_SUMMARY

      - name: Upload Super Linter results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: super-linter-output-${{ github.run_id }}-${{ github.run_attempt }}
          path: super-linter-output/
          retention-days: 7
          if-no-files-found: warn

      - name: Comment PR with linting results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Load and execute our external script
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github/scripts/pr-linter-comment.js');
            const { updatePRComment } = require(scriptPath);
            
            const linterOutcome = '${{ steps.run-super-linter.outcome }}' || 'unknown';
            const hasAutoFixes = '${{ steps.check-fixes.outputs.has_fixes }}' === 'true';
            
            await updatePRComment(github, context, linterOutcome, hasAutoFixes);

      - name: Fail if linting errors remain
        if: steps.run-super-linter.outcome == 'failure'
        run: exit 1

  # File-based labeling - runs on PR events only
  file-labeling:
    name: File-based Labeling
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply labels
        uses: actions/labeler@v5
        with:
          configuration-path: ".github/labeler.yml"
          sync-labels: true
          dot: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  # AI-powered conflict resolution - runs only when needed
  conflict-resolution:
    name: AI Conflict Resolution
    if: (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find conflicted PRs
        id: find-conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Load and execute our external script
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github/scripts/find-conflicted-prs.js');
            const { findConflictedPRs } = require(scriptPath);
            
            const result = await findConflictedPRs(github, context, core);
            return JSON.stringify(result);

      - name: Process conflicted PRs
        if: steps.find-conflicts.outputs.result != '[]'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get the result from the previous step
            const conflictedPRsStr = '${{ steps.find-conflicts.outputs.result }}';
            if (!conflictedPRsStr || conflictedPRsStr === '[]') {
              console.log('No conflicted PRs found, skipping...');
              return;
            }
            
            // Load and execute our external script
            const scriptPath = path.join(process.env.GITHUB_WORKSPACE, '.github/scripts/process-conflicted-prs.js');
            const { processConflictedPRs } = require(scriptPath);
            
            const conflictedPRs = JSON.parse(conflictedPRsStr);
            const defaultBranch = '${{ github.event.repository.default_branch }}';
            
            await processConflictedPRs(github, context, conflictedPRs, defaultBranch);

  # Intelligent AI labeling - runs only on new issues/PRs for efficiency  
  intelligent-labeling:
    name: Intelligent Issue Labeling
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'edited'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml python-dateutil scikit-learn nltk

      - name: Download NLTK data
        run: |
          python -c "
          import nltk
          nltk.download('punkt')
          nltk.download('stopwords')
          nltk.download('vader_lexicon')
          "

      - name: Run intelligent labeling
        run: |
          echo "Running intelligent issue labeling..."
          # Here you would run your intelligent labeling script
          # python scripts/intelligent_labeling.py --batch-size 10 --confidence-threshold 0.7
