// file: proto/gcommon/v1/common/auth_service.proto
// version: 1.0.1
// guid: 9f3ae39c-bbe9-4615-b0ce-944a7b3fbe86
edition = "2023";

package common.v1;

import "commonpb/v1/authenticate_request.proto";
import "commonpb/v1/authenticate_response.proto";
import "commonpb/v1/change_password_request.proto";
import "commonpb/v1/change_password_response.proto";
import "commonpb/v1/complete_password_reset_request.proto";
import "commonpb/v1/complete_password_reset_response.proto";
import "commonpb/v1/get_user_info_request.proto";
import "commonpb/v1/get_user_info_response.proto";
import "commonpb/v1/initiate_password_reset_request.proto";
import "commonpb/v1/initiate_password_reset_response.proto";
import "commonpb/v1/refresh_token_request.proto";
import "commonpb/v1/refresh_token_response.proto";
import "commonpb/v1/revoke_token_request.proto";
import "commonpb/v1/revoke_token_response.proto";
import "commonpb/v1/validate_token_request.proto";
import "commonpb/v1/validate_token_response.proto";
import "commonpb/v1/verify_credentials_request.proto";
import "commonpb/v1/verify_credentials_response.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/pkg/commonpb";

/**
 * AuthService provides comprehensive authentication capabilities.
 * Handles user authentication, token validation, password management,
 * and credential verification for secure access control.
 */
service AuthService {
  // Authenticate a user with various credential types (password, OAuth, etc.)
  rpc Authenticate(AuthAuthenticateRequest) returns (AuthAuthenticateResponse);

  // Validate an access token and return token information
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);

  // Verify user credentials without issuing tokens (for validation only)
  rpc VerifyCredentials(VerifyCredentialsRequest) returns (VerifyCredentialsResponse);

  // Refresh an access token using a valid refresh token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // Revoke a token (access or refresh) to invalidate it
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse);

  // Get user information from a valid token
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

  // Initiate password reset flow (send reset email/token)
  rpc InitiatePasswordReset(InitiatePasswordResetRequest) returns (InitiatePasswordResetResponse);

  // Complete password reset with validation token
  rpc CompletePasswordReset(CompletePasswordResetRequest) returns (CompletePasswordResetResponse);

  // Change user password (requires current password authentication)
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
}
