#!/usr/bin/env python3
# file: scripts/setup-go-modules.py
# version: 2.9.0
# guid: f1e2d3c4-b5a6-789c-def0-123456789abc

"""
Post-generation script (minimal) ‚Äì performs ONLY:

1. Single root-level `go mod tidy` (no per-package or SDK module management)
2. Cleanup of any legacy per-package go.mod files under `sdks/go/v1/**`
3. Creation of Python package `__init__.py` files for the SDK

Removed in v2.8.0:
 - Automatic creation / overwriting of `sdks/go/go.mod`
 - Formatting (go fmt) steps
 - Replace‚Äëdirective mutation
 - Any per-package or secondary module logic

Changed in v2.9.0:
 - Fixed GUID generation to use deterministic hashes instead of random UUIDs
 - Prevents unnecessary file churn from random GUID generation

Rationale: simplify build; only root module is authoritative. Python SDK
needs consistent package markers so we (re)create missing `__init__.py` files.
"""

import hashlib
import subprocess
import sys
from pathlib import Path


def generate_deterministic_guid(file_path: str) -> str:
    """Generate a deterministic GUID based on file path to avoid churn."""
    # Use SHA256 hash of the file path to generate consistent GUID
    hash_obj = hashlib.sha256(file_path.encode("utf-8"))
    hash_hex = hash_obj.hexdigest()

    # Format as standard GUID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    return f"{hash_hex[:8]}-{hash_hex[8:12]}-{hash_hex[12:16]}-{hash_hex[16:20]}-{hash_hex[20:32]}"


# -------------------------- Go Helpers (minimal) --------------------------- #


def run_go_mod_tidy(module_path: Path):
    """Run `go mod tidy` in provided directory (root only)."""
    try:
        subprocess.run(
            ["go", "mod", "tidy"],
            cwd=module_path,
            capture_output=True,
            text=True,
            check=True,
        )
        print(f"‚úÖ go mod tidy successful (root): {module_path}")
        return True
    except subprocess.CalledProcessError as e:
        print("‚ùå go mod tidy failed at root:")
        print(f"   stdout: {e.stdout}")
        print(f"   stderr: {e.stderr}")
        return False


# -------------------------- Python Helpers --------------------------------- #


def ensure_python_init_files(python_sdk_root: Path):
    """Create missing __init__.py files (with headers) under python SDK.

    We add a lightweight header to satisfy repository identification rules.
    Existing files are left untouched.
    """
    if not python_sdk_root.exists():
        print(f"‚ÑπÔ∏è Python SDK path not found: {python_sdk_root}")
        return 0

    created = 0
    for path in python_sdk_root.rglob("*"):
        if path.is_dir():
            init_file = path / "__init__.py"
            if not init_file.exists():
                rel = init_file.relative_to(
                    python_sdk_root.parent.parent
                )  # relative under sdks/python
                guid = generate_deterministic_guid(str(rel))
                content = (
                    f"# file: {rel}\n"
                    f"# version: 1.0.0\n"
                    f"# guid: {guid}\n\n"
                    "# Package marker generated by setup-go-modules.py v2.9.0\n"
                )
                try:
                    init_file.write_text(content)
                    created += 1
                except OSError as e:
                    print(f"‚ö†Ô∏è  Could not create {init_file}: {e}")
    print(f"‚úÖ Python package __init__ verification complete (created {created})")
    return created


def main():
    script_dir = Path(__file__).parent
    project_root = script_dir.parent

    print("Minimal setup starting (v2.8.0)")

    # 1. Root go mod tidy only
    if (project_root / "go.mod").exists():
        run_go_mod_tidy(project_root)
    else:
        print("‚ö†Ô∏è Root go.mod missing ‚Äì skipping go mod tidy")

    # 2. Remove any lingering per-package go.mod files (defensive)
    go_sdk_dir = project_root / "sdks" / "go" / "v1"
    removed = []
    if go_sdk_dir.exists():
        for path in go_sdk_dir.rglob("go.mod"):
            try:
                path.unlink()
                removed.append(path)
            except OSError as e:
                print(f"‚ö†Ô∏è  Could not remove {path}: {e}")
    print(
        f"üßπ Removed {len(removed)} legacy per-package go.mod files"
        if removed
        else "‚úÖ No legacy go.mod files found under sdks/go/v1"
    )

    # 3. Ensure Python __init__.py files
    python_sdk_root = project_root / "sdks" / "python" / "gcommon" / "v1"
    ensure_python_init_files(
        python_sdk_root.parent.parent
    )  # pass sdks/python/gcommon root for full traversal

    print("\n‚úÖ Minimal setup complete (go tidy + python package markers)")
    return 0


if __name__ == "__main__":
    sys.exit(main())
