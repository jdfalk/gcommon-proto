# file: deploy/helm/gcommon-app/values-staging.yaml
# version: 1.1.0
# guid: 9e4e53f1-d0e4-4a95-91c7-450b7ff746c0

# Staging values for gcommon-app Helm chart
# Simulates production environment with moderate resources and full feature parity.

replicaCount: 2

image:
  repository: gcommon/app
  tag: staging
  pullPolicy: IfNotPresent
  pullSecrets: []

serviceAccount:
  create: true
  name: ""
  annotations: {}

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 80
  annotations: {}

resources:
  limits:
    cpu: 500m
    memory: 256Mi
  requests:
    cpu: 200m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 75

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: staging.gcommon.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

config:
  APP_ENV: staging
  LOG_LEVEL: info

secret:
  create: true
  data:
    DATABASE_URL: "postgres://staging:staging@staging-db:5432/stagingdb"

monitoring:
  prometheus:
    enabled: true
    scrapeInterval: 15s
  logging:
    fluentBit:
      enabled: true
  tracing:
    jaeger:
      enabled: true

nodeSelector: {}

tolerations: []

affinity: {}

extraEnv: []
extraVolumes: []
extraVolumeMounts: []

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 20
  periodSeconds: 20
readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10

sidecars: []

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    additionalLabels: {}

hpaMetrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

podDisruptionBudget:
  enabled: true
  minAvailable: 1

labels:
  environment: staging

persistence:
  enabled: false
  size: 1Gi
  storageClass: ""

# ------------------------------------------------------------------------
staging:
  migrations:
    runOnStartup: true
    verifyOnly: false
  canary:
    enabled: true
    steps: 5
    maxSurge: 1
  mockEndpoints:
    payment: https://sandbox-payments.example.com
    email: https://sandbox-email.example.com
  secretRotation:
    enabled: true
    schedule: "0 3 * * 0"
  syntheticMonitoring:
    enabled: true
    probes:
      - name: home-page
        path: /
        interval: 30s
      - name: login-page
        path: /login
        interval: 1m
  setupGuide:
    - "Apply database migrations using \`make migrate-staging\`"
    - "Run smoke tests with \`make test-staging\`"
  chaosEngineering:
    enabled: true
    experiments:
      - name: pod-kill
        schedule: "@daily"
      - name: network-latency
        schedule: "@weekly"
  security:
    parityWithProd: true
    networkPolicies: strict
  disasterRecovery:
    backups:
      schedule: "0 */6 * * *"
      retention: 7
    restoreProcedure: "docs/dr-staging.md"
  additionalNotes:
    - "Staging mirrors production configuration for security."
    - "Use sandbox endpoints for external integrations."
    - "Chaos experiments help validate resilience."
