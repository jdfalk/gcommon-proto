#!/bin/bash
# Script to create all missing web protobuf types

# Missing request types
declare -a MISSING_REQUESTS=(
    "AddMiddlewareRequest"
    "ConfigureGlobalRequest"
    "CreateServerRequest"
    "ExportServerConfigRequest"
    "GetAccessLogsRequest"
    "GetRouteMetricsRequest"
    "GetSSLCertificateInfoRequest"
    "GetServerHealthRequest"
    "GetServerLogsRequest"
    "GetServerMetricsRequest"
    "HandleRequestRequest"
    "ImportServerConfigRequest"
    "ListServersRequest"
    "ReloadServerConfigRequest"
    "RemoveMiddlewareRequest"
    "StreamServerEventsRequest"
    "UpdateSSLCertificateRequest"
)

# Missing response types
declare -a MISSING_RESPONSES=(
    "AddMiddlewareResponse"
    "ConfigureGlobalResponse"
    "CreateServerResponse"
    "ExportServerConfigResponse"
    "GetAccessLogsResponse"
    "GetRouteMetricsResponse"
    "GetSSLCertificateInfoResponse"
    "GetServerHealthResponse"
    "GetServerLogsResponse"
    "GetServerMetricsResponse"
    "HandleRequestResponse"
    "ImportServerConfigResponse"
    "ListServersResponse"
    "ReloadServerConfigResponse"
    "RemoveMiddlewareResponse"
    "UpdateSSLCertificateResponse"
)

# Missing message types
declare -a MISSING_MESSAGES=(
    "ServerEvent"
)

# Function to convert PascalCase to snake_case
to_snake_case() {
    echo "$1" | sed 's/\([A-Z]\)/_\1/g' | sed 's/^_//' | tr '[:upper:]' '[:lower:]'
}

# Create request files
echo "Creating request files..."
for request in "${MISSING_REQUESTS[@]}"; do
    filename=$(to_snake_case "$request")
    filepath="pkg/web/proto/requests/${filename}.proto"

    cat > "$filepath" << EOF
// file: $filepath
// version: 1.0.0
// guid: $(uuidgen | tr '[:upper:]' '[:lower:]')

edition = "2023";

package gcommon.v1.web;

option go_package = "github.com/jdfalk/gcommon/pkg/web/proto;webpb";

// Standard imports
import "google/protobuf/timestamp.proto";

// Common types
import "pkg/common/proto/common.proto";

/**
 * $request message for web service operations.
 * Auto-generated placeholder - implement specific fields as needed.
 *
 * Follows 1-1-1 pattern: one message per file.
 */
message $request {
  // Required fields (1-10)

  // Optional fields (11-50)

  /**
   * Request processing metadata including timing, request ID,
   * and other observability information.
   */
  gcommon.v1.common.RequestMetadata request_metadata = 11;

  // Timestamps (51-60)

  /**
   * Timestamp when this request was created.
   */
  google.protobuf.Timestamp requested_at = 51;
}
EOF
    echo "Created: $filepath"
done

# Create response files
echo "Creating response files..."
for response in "${MISSING_RESPONSES[@]}"; do
    filename=$(to_snake_case "$response")
    filepath="pkg/web/proto/responses/${filename}.proto"

    cat > "$filepath" << EOF
// file: $filepath
// version: 1.0.0
// guid: $(uuidgen | tr '[:upper:]' '[:lower:]')

edition = "2023";

package gcommon.v1.web;

option go_package = "github.com/jdfalk/gcommon/pkg/web/proto;webpb";

// Standard imports
import "google/protobuf/timestamp.proto";

// Common types
import "pkg/common/proto/common.proto";

/**
 * $response message for web service operations.
 * Auto-generated placeholder - implement specific fields as needed.
 *
 * Follows 1-1-1 pattern: one message per file.
 */
message $response {
  // Required fields (1-10)

  /**
   * Indicates whether the operation was successful.
   */
  bool success = 1;

  // Optional fields (11-50)

  /**
   * Request processing metadata including timing, request ID,
   * and other observability information.
   */
  gcommon.v1.common.RequestMetadata request_metadata = 11;

  // Status and error fields (61-70)

  /**
   * Error information if the operation failed
   * or completed with warnings.
   */
  gcommon.v1.common.Error error = 61;

  // Timestamps (51-60)

  /**
   * Timestamp when this response was generated.
   */
  google.protobuf.Timestamp response_generated_at = 51;
}
EOF
    echo "Created: $filepath"
done

# Create message files
echo "Creating message files..."
for message in "${MISSING_MESSAGES[@]}"; do
    filename=$(to_snake_case "$message")
    filepath="pkg/web/proto/messages/${filename}.proto"

    # Create messages directory if it doesn't exist
    mkdir -p "pkg/web/proto/messages"

    cat > "$filepath" << EOF
// file: $filepath
// version: 1.0.0
// guid: $(uuidgen | tr '[:upper:]' '[:lower:]')

edition = "2023";

package gcommon.v1.web;

option go_package = "github.com/jdfalk/gcommon/pkg/web/proto;webpb";

// Standard imports
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// Common types
import "pkg/common/proto/common.proto";

/**
 * $message represents events generated by web servers.
 * Auto-generated placeholder - implement specific fields as needed.
 *
 * Follows 1-1-1 pattern: one message per file.
 */
message $message {
  // Required fields (1-10)

  /**
   * Type of server event.
   */
  string event_type = 1;

  /**
   * Event data payload.
   */
  google.protobuf.Any event_data = 2;

  // Optional fields (11-50)

  /**
   * Server ID that generated this event.
   */
  string server_id = 11;

  /**
   * Additional event metadata.
   */
  gcommon.v1.common.RequestMetadata metadata = 12;

  // Timestamps (51-60)

  /**
   * Timestamp when this event occurred.
   */
  google.protobuf.Timestamp event_time = 51;
}
EOF
    echo "Created: $filepath"
done

echo "All missing web protobuf types created successfully!"
