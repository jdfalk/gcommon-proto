# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.auth.proto import authorize_request_pb2 as pkg_dot_auth_dot_proto_dot_authorize__request__pb2
from pkg.auth.proto import authorize_response_pb2 as pkg_dot_auth_dot_proto_dot_authorize__response__pb2
from pkg.auth.proto import get_user_permissions_request_pb2 as pkg_dot_auth_dot_proto_dot_get__user__permissions__request__pb2
from pkg.auth.proto import get_user_permissions_response_pb2 as pkg_dot_auth_dot_proto_dot_get__user__permissions__response__pb2
from pkg.auth.proto import get_user_roles_request_pb2 as pkg_dot_auth_dot_proto_dot_get__user__roles__request__pb2
from pkg.auth.proto import get_user_roles_response_pb2 as pkg_dot_auth_dot_proto_dot_get__user__roles__response__pb2


class AuthorizationServiceStub(object):
    """*
    AuthorizationService provides authorization and permission management.
    Handles role-based access control (RBAC), permission checking,
    and role lifecycle management for fine-grained access control.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Authorize = channel.unary_unary(
                '/gcommon.v1.auth.AuthorizationService/Authorize',
                request_serializer=pkg_dot_auth_dot_proto_dot_authorize__request__pb2.AuthAuthorizeRequest.SerializeToString,
                response_deserializer=pkg_dot_auth_dot_proto_dot_authorize__response__pb2.AuthAuthorizeResponse.FromString,
                _registered_method=True)
        self.GetUserPermissions = channel.unary_unary(
                '/gcommon.v1.auth.AuthorizationService/GetUserPermissions',
                request_serializer=pkg_dot_auth_dot_proto_dot_get__user__permissions__request__pb2.GetUserPermissionsRequest.SerializeToString,
                response_deserializer=pkg_dot_auth_dot_proto_dot_get__user__permissions__response__pb2.GetUserPermissionsResponse.FromString,
                _registered_method=True)
        self.GetUserRoles = channel.unary_unary(
                '/gcommon.v1.auth.AuthorizationService/GetUserRoles',
                request_serializer=pkg_dot_auth_dot_proto_dot_get__user__roles__request__pb2.GetUserRolesRequest.SerializeToString,
                response_deserializer=pkg_dot_auth_dot_proto_dot_get__user__roles__response__pb2.GetUserRolesResponse.FromString,
                _registered_method=True)


class AuthorizationServiceServicer(object):
    """*
    AuthorizationService provides authorization and permission management.
    Handles role-based access control (RBAC), permission checking,
    and role lifecycle management for fine-grained access control.
    """

    def Authorize(self, request, context):
        """Check if a user is authorized for a specific action on a resource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPermissions(self, request, context):
        """Get all permissions granted to a user (direct and via roles)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserRoles(self, request, context):
        """Get all roles assigned to a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthorizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Authorize': grpc.unary_unary_rpc_method_handler(
                    servicer.Authorize,
                    request_deserializer=pkg_dot_auth_dot_proto_dot_authorize__request__pb2.AuthAuthorizeRequest.FromString,
                    response_serializer=pkg_dot_auth_dot_proto_dot_authorize__response__pb2.AuthAuthorizeResponse.SerializeToString,
            ),
            'GetUserPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPermissions,
                    request_deserializer=pkg_dot_auth_dot_proto_dot_get__user__permissions__request__pb2.GetUserPermissionsRequest.FromString,
                    response_serializer=pkg_dot_auth_dot_proto_dot_get__user__permissions__response__pb2.GetUserPermissionsResponse.SerializeToString,
            ),
            'GetUserRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserRoles,
                    request_deserializer=pkg_dot_auth_dot_proto_dot_get__user__roles__request__pb2.GetUserRolesRequest.FromString,
                    response_serializer=pkg_dot_auth_dot_proto_dot_get__user__roles__response__pb2.GetUserRolesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.auth.AuthorizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.auth.AuthorizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthorizationService(object):
    """*
    AuthorizationService provides authorization and permission management.
    Handles role-based access control (RBAC), permission checking,
    and role lifecycle management for fine-grained access control.
    """

    @staticmethod
    def Authorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.auth.AuthorizationService/Authorize',
            pkg_dot_auth_dot_proto_dot_authorize__request__pb2.AuthAuthorizeRequest.SerializeToString,
            pkg_dot_auth_dot_proto_dot_authorize__response__pb2.AuthAuthorizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.auth.AuthorizationService/GetUserPermissions',
            pkg_dot_auth_dot_proto_dot_get__user__permissions__request__pb2.GetUserPermissionsRequest.SerializeToString,
            pkg_dot_auth_dot_proto_dot_get__user__permissions__response__pb2.GetUserPermissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.auth.AuthorizationService/GetUserRoles',
            pkg_dot_auth_dot_proto_dot_get__user__roles__request__pb2.GetUserRolesRequest.SerializeToString,
            pkg_dot_auth_dot_proto_dot_get__user__roles__response__pb2.GetUserRolesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
