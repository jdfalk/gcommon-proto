# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.db.proto import execute_batch_request_pb2 as pkg_dot_db_dot_proto_dot_execute__batch__request__pb2
from pkg.db.proto import execute_batch_response_pb2 as pkg_dot_db_dot_proto_dot_execute__batch__response__pb2
from pkg.db.proto import execute_request_pb2 as pkg_dot_db_dot_proto_dot_execute__request__pb2
from pkg.db.proto import execute_response_pb2 as pkg_dot_db_dot_proto_dot_execute__response__pb2
from pkg.db.proto import get_connection_info_request_pb2 as pkg_dot_db_dot_proto_dot_get__connection__info__request__pb2
from pkg.db.proto import get_connection_info_response_pb2 as pkg_dot_db_dot_proto_dot_get__connection__info__response__pb2
from pkg.db.proto import health_check_request_pb2 as pkg_dot_db_dot_proto_dot_health__check__request__pb2
from pkg.db.proto import health_check_response_pb2 as pkg_dot_db_dot_proto_dot_health__check__response__pb2
from pkg.db.proto import query_request_pb2 as pkg_dot_db_dot_proto_dot_query__request__pb2
from pkg.db.proto import query_response_pb2 as pkg_dot_db_dot_proto_dot_query__response__pb2
from pkg.db.proto import query_row_request_pb2 as pkg_dot_db_dot_proto_dot_query__row__request__pb2
from pkg.db.proto import query_row_response_pb2 as pkg_dot_db_dot_proto_dot_query__row__response__pb2


class DatabaseServiceStub(object):
    """*
    DatabaseService provides comprehensive database operations including
    queries, transactions, batch operations, and health monitoring.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Query = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/Query',
                request_serializer=pkg_dot_db_dot_proto_dot_query__request__pb2.QueryRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_query__response__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.QueryRow = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/QueryRow',
                request_serializer=pkg_dot_db_dot_proto_dot_query__row__request__pb2.QueryRowRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_query__row__response__pb2.QueryRowResponse.FromString,
                _registered_method=True)
        self.Execute = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/Execute',
                request_serializer=pkg_dot_db_dot_proto_dot_execute__request__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_execute__response__pb2.ExecuteResponse.FromString,
                _registered_method=True)
        self.ExecuteBatch = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/ExecuteBatch',
                request_serializer=pkg_dot_db_dot_proto_dot_execute__batch__request__pb2.ExecuteBatchRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_execute__batch__response__pb2.ExecuteBatchResponse.FromString,
                _registered_method=True)
        self.GetConnectionInfo = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/GetConnectionInfo',
                request_serializer=pkg_dot_db_dot_proto_dot_get__connection__info__request__pb2.GetConnectionInfoRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_get__connection__info__response__pb2.GetConnectionInfoResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/gcommon.v1.database.DatabaseService/HealthCheck',
                request_serializer=pkg_dot_db_dot_proto_dot_health__check__request__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=pkg_dot_db_dot_proto_dot_health__check__response__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class DatabaseServiceServicer(object):
    """*
    DatabaseService provides comprehensive database operations including
    queries, transactions, batch operations, and health monitoring.
    """

    def Query(self, request, context):
        """Execute a read-only query and return results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRow(self, request, context):
        """Execute a query expected to return at most one row
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Execute a write operation (INSERT, UPDATE, DELETE)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteBatch(self, request, context):
        """Execute multiple operations in a single batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectionInfo(self, request, context):
        """Get information about database connection pool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Check database connectivity and health
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Query': grpc.unary_unary_rpc_method_handler(
                    servicer.Query,
                    request_deserializer=pkg_dot_db_dot_proto_dot_query__request__pb2.QueryRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_query__response__pb2.QueryResponse.SerializeToString,
            ),
            'QueryRow': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRow,
                    request_deserializer=pkg_dot_db_dot_proto_dot_query__row__request__pb2.QueryRowRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_query__row__response__pb2.QueryRowResponse.SerializeToString,
            ),
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=pkg_dot_db_dot_proto_dot_execute__request__pb2.ExecuteRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_execute__response__pb2.ExecuteResponse.SerializeToString,
            ),
            'ExecuteBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteBatch,
                    request_deserializer=pkg_dot_db_dot_proto_dot_execute__batch__request__pb2.ExecuteBatchRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_execute__batch__response__pb2.ExecuteBatchResponse.SerializeToString,
            ),
            'GetConnectionInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectionInfo,
                    request_deserializer=pkg_dot_db_dot_proto_dot_get__connection__info__request__pb2.GetConnectionInfoRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_get__connection__info__response__pb2.GetConnectionInfoResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=pkg_dot_db_dot_proto_dot_health__check__request__pb2.HealthCheckRequest.FromString,
                    response_serializer=pkg_dot_db_dot_proto_dot_health__check__response__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.database.DatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.database.DatabaseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatabaseService(object):
    """*
    DatabaseService provides comprehensive database operations including
    queries, transactions, batch operations, and health monitoring.
    """

    @staticmethod
    def Query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/Query',
            pkg_dot_db_dot_proto_dot_query__request__pb2.QueryRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_query__response__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/QueryRow',
            pkg_dot_db_dot_proto_dot_query__row__request__pb2.QueryRowRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_query__row__response__pb2.QueryRowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/Execute',
            pkg_dot_db_dot_proto_dot_execute__request__pb2.ExecuteRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_execute__response__pb2.ExecuteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/ExecuteBatch',
            pkg_dot_db_dot_proto_dot_execute__batch__request__pb2.ExecuteBatchRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_execute__batch__response__pb2.ExecuteBatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConnectionInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/GetConnectionInfo',
            pkg_dot_db_dot_proto_dot_get__connection__info__request__pb2.GetConnectionInfoRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_get__connection__info__response__pb2.GetConnectionInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.database.DatabaseService/HealthCheck',
            pkg_dot_db_dot_proto_dot_health__check__request__pb2.HealthCheckRequest.SerializeToString,
            pkg_dot_db_dot_proto_dot_health__check__response__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
