# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.web.proto import flush_cache_request_pb2 as pkg_dot_web_dot_proto_dot_flush__cache__request__pb2
from pkg.web.proto import flush_cache_response_pb2 as pkg_dot_web_dot_proto_dot_flush__cache__response__pb2
from pkg.web.proto import get_cache_config_request_pb2 as pkg_dot_web_dot_proto_dot_get__cache__config__request__pb2
from pkg.web.proto import get_cache_config_response_pb2 as pkg_dot_web_dot_proto_dot_get__cache__config__response__pb2
from pkg.web.proto import update_cache_config_request_pb2 as pkg_dot_web_dot_proto_dot_update__cache__config__request__pb2
from pkg.web.proto import update_cache_config_response_pb2 as pkg_dot_web_dot_proto_dot_update__cache__config__response__pb2


class WebAdminServiceStub(object):
    """*
    WebAdminService provides cache administration endpoints
    for web server management tools.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCacheConfig = channel.unary_unary(
                '/gcommon.v1.web.WebAdminService/GetCacheConfig',
                request_serializer=pkg_dot_web_dot_proto_dot_get__cache__config__request__pb2.GetCacheConfigRequest.SerializeToString,
                response_deserializer=pkg_dot_web_dot_proto_dot_get__cache__config__response__pb2.GetCacheConfigResponse.FromString,
                _registered_method=True)
        self.UpdateCacheConfig = channel.unary_unary(
                '/gcommon.v1.web.WebAdminService/UpdateCacheConfig',
                request_serializer=pkg_dot_web_dot_proto_dot_update__cache__config__request__pb2.UpdateCacheConfigRequest.SerializeToString,
                response_deserializer=pkg_dot_web_dot_proto_dot_update__cache__config__response__pb2.UpdateCacheConfigResponse.FromString,
                _registered_method=True)
        self.FlushCache = channel.unary_unary(
                '/gcommon.v1.web.WebAdminService/FlushCache',
                request_serializer=pkg_dot_web_dot_proto_dot_flush__cache__request__pb2.FlushCacheRequest.SerializeToString,
                response_deserializer=pkg_dot_web_dot_proto_dot_flush__cache__response__pb2.FlushCacheResponse.FromString,
                _registered_method=True)


class WebAdminServiceServicer(object):
    """*
    WebAdminService provides cache administration endpoints
    for web server management tools.
    """

    def GetCacheConfig(self, request, context):
        """Retrieve current cache configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCacheConfig(self, request, context):
        """Update cache configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushCache(self, request, context):
        """Flush all cached entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCacheConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCacheConfig,
                    request_deserializer=pkg_dot_web_dot_proto_dot_get__cache__config__request__pb2.GetCacheConfigRequest.FromString,
                    response_serializer=pkg_dot_web_dot_proto_dot_get__cache__config__response__pb2.GetCacheConfigResponse.SerializeToString,
            ),
            'UpdateCacheConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCacheConfig,
                    request_deserializer=pkg_dot_web_dot_proto_dot_update__cache__config__request__pb2.UpdateCacheConfigRequest.FromString,
                    response_serializer=pkg_dot_web_dot_proto_dot_update__cache__config__response__pb2.UpdateCacheConfigResponse.SerializeToString,
            ),
            'FlushCache': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushCache,
                    request_deserializer=pkg_dot_web_dot_proto_dot_flush__cache__request__pb2.FlushCacheRequest.FromString,
                    response_serializer=pkg_dot_web_dot_proto_dot_flush__cache__response__pb2.FlushCacheResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.web.WebAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.web.WebAdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WebAdminService(object):
    """*
    WebAdminService provides cache administration endpoints
    for web server management tools.
    """

    @staticmethod
    def GetCacheConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.web.WebAdminService/GetCacheConfig',
            pkg_dot_web_dot_proto_dot_get__cache__config__request__pb2.GetCacheConfigRequest.SerializeToString,
            pkg_dot_web_dot_proto_dot_get__cache__config__response__pb2.GetCacheConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCacheConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.web.WebAdminService/UpdateCacheConfig',
            pkg_dot_web_dot_proto_dot_update__cache__config__request__pb2.UpdateCacheConfigRequest.SerializeToString,
            pkg_dot_web_dot_proto_dot_update__cache__config__response__pb2.UpdateCacheConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.web.WebAdminService/FlushCache',
            pkg_dot_web_dot_proto_dot_flush__cache__request__pb2.FlushCacheRequest.SerializeToString,
            pkg_dot_web_dot_proto_dot_flush__cache__response__pb2.FlushCacheResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
