# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from pkg.cache.proto import configure_policy_request_pb2 as pkg_dot_cache_dot_proto_dot_configure__policy__request__pb2
from pkg.cache.proto import configure_policy_response_pb2 as pkg_dot_cache_dot_proto_dot_configure__policy__response__pb2
from pkg.cache.proto import create_namespace_request_pb2 as pkg_dot_cache_dot_proto_dot_create__namespace__request__pb2
from pkg.cache.proto import create_namespace_response_pb2 as pkg_dot_cache_dot_proto_dot_create__namespace__response__pb2
from pkg.cache.proto import delete_namespace_request_pb2 as pkg_dot_cache_dot_proto_dot_delete__namespace__request__pb2
from pkg.cache.proto import get_namespace_stats_request_pb2 as pkg_dot_cache_dot_proto_dot_get__namespace__stats__request__pb2
from pkg.cache.proto import get_namespace_stats_response_pb2 as pkg_dot_cache_dot_proto_dot_get__namespace__stats__response__pb2
from pkg.cache.proto import list_namespaces_request_pb2 as pkg_dot_cache_dot_proto_dot_list__namespaces__request__pb2
from pkg.cache.proto import list_namespaces_response_pb2 as pkg_dot_cache_dot_proto_dot_list__namespaces__response__pb2


class CacheAdminServiceStub(object):
    """*
    Administrative cache management operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNamespace = channel.unary_unary(
                '/gcommon.v1.cache.CacheAdminService/CreateNamespace',
                request_serializer=pkg_dot_cache_dot_proto_dot_create__namespace__request__pb2.CreateNamespaceRequest.SerializeToString,
                response_deserializer=pkg_dot_cache_dot_proto_dot_create__namespace__response__pb2.CreateNamespaceResponse.FromString,
                _registered_method=True)
        self.DeleteNamespace = channel.unary_unary(
                '/gcommon.v1.cache.CacheAdminService/DeleteNamespace',
                request_serializer=pkg_dot_cache_dot_proto_dot_delete__namespace__request__pb2.DeleteNamespaceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListNamespaces = channel.unary_unary(
                '/gcommon.v1.cache.CacheAdminService/ListNamespaces',
                request_serializer=pkg_dot_cache_dot_proto_dot_list__namespaces__request__pb2.ListNamespacesRequest.SerializeToString,
                response_deserializer=pkg_dot_cache_dot_proto_dot_list__namespaces__response__pb2.ListNamespacesResponse.FromString,
                _registered_method=True)
        self.GetNamespaceStats = channel.unary_unary(
                '/gcommon.v1.cache.CacheAdminService/GetNamespaceStats',
                request_serializer=pkg_dot_cache_dot_proto_dot_get__namespace__stats__request__pb2.GetNamespaceStatsRequest.SerializeToString,
                response_deserializer=pkg_dot_cache_dot_proto_dot_get__namespace__stats__response__pb2.GetNamespaceStatsResponse.FromString,
                _registered_method=True)
        self.ConfigurePolicy = channel.unary_unary(
                '/gcommon.v1.cache.CacheAdminService/ConfigurePolicy',
                request_serializer=pkg_dot_cache_dot_proto_dot_configure__policy__request__pb2.ConfigurePolicyRequest.SerializeToString,
                response_deserializer=pkg_dot_cache_dot_proto_dot_configure__policy__response__pb2.ConfigurePolicyResponse.FromString,
                _registered_method=True)


class CacheAdminServiceServicer(object):
    """*
    Administrative cache management operations.
    """

    def CreateNamespace(self, request, context):
        """CreateNamespace creates a new cache namespace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNamespace(self, request, context):
        """DeleteNamespace removes a cache namespace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNamespaces(self, request, context):
        """ListNamespaces returns all available namespaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNamespaceStats(self, request, context):
        """GetNamespaceStats returns statistics for a namespace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePolicy(self, request, context):
        """ConfigurePolicy sets cache policies for a namespace
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNamespace,
                    request_deserializer=pkg_dot_cache_dot_proto_dot_create__namespace__request__pb2.CreateNamespaceRequest.FromString,
                    response_serializer=pkg_dot_cache_dot_proto_dot_create__namespace__response__pb2.CreateNamespaceResponse.SerializeToString,
            ),
            'DeleteNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNamespace,
                    request_deserializer=pkg_dot_cache_dot_proto_dot_delete__namespace__request__pb2.DeleteNamespaceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaces,
                    request_deserializer=pkg_dot_cache_dot_proto_dot_list__namespaces__request__pb2.ListNamespacesRequest.FromString,
                    response_serializer=pkg_dot_cache_dot_proto_dot_list__namespaces__response__pb2.ListNamespacesResponse.SerializeToString,
            ),
            'GetNamespaceStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespaceStats,
                    request_deserializer=pkg_dot_cache_dot_proto_dot_get__namespace__stats__request__pb2.GetNamespaceStatsRequest.FromString,
                    response_serializer=pkg_dot_cache_dot_proto_dot_get__namespace__stats__response__pb2.GetNamespaceStatsResponse.SerializeToString,
            ),
            'ConfigurePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePolicy,
                    request_deserializer=pkg_dot_cache_dot_proto_dot_configure__policy__request__pb2.ConfigurePolicyRequest.FromString,
                    response_serializer=pkg_dot_cache_dot_proto_dot_configure__policy__response__pb2.ConfigurePolicyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.cache.CacheAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.cache.CacheAdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CacheAdminService(object):
    """*
    Administrative cache management operations.
    """

    @staticmethod
    def CreateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.cache.CacheAdminService/CreateNamespace',
            pkg_dot_cache_dot_proto_dot_create__namespace__request__pb2.CreateNamespaceRequest.SerializeToString,
            pkg_dot_cache_dot_proto_dot_create__namespace__response__pb2.CreateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.cache.CacheAdminService/DeleteNamespace',
            pkg_dot_cache_dot_proto_dot_delete__namespace__request__pb2.DeleteNamespaceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.cache.CacheAdminService/ListNamespaces',
            pkg_dot_cache_dot_proto_dot_list__namespaces__request__pb2.ListNamespacesRequest.SerializeToString,
            pkg_dot_cache_dot_proto_dot_list__namespaces__response__pb2.ListNamespacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNamespaceStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.cache.CacheAdminService/GetNamespaceStats',
            pkg_dot_cache_dot_proto_dot_get__namespace__stats__request__pb2.GetNamespaceStatsRequest.SerializeToString,
            pkg_dot_cache_dot_proto_dot_get__namespace__stats__response__pb2.GetNamespaceStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigurePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.cache.CacheAdminService/ConfigurePolicy',
            pkg_dot_cache_dot_proto_dot_configure__policy__request__pb2.ConfigurePolicyRequest.SerializeToString,
            pkg_dot_cache_dot_proto_dot_configure__policy__response__pb2.ConfigurePolicyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
