# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.log.proto import configure_logger_request_pb2 as pkg_dot_log_dot_proto_dot_configure__logger__request__pb2
from pkg.log.proto import configure_logger_response_pb2 as pkg_dot_log_dot_proto_dot_configure__logger__response__pb2


class LogAdminServiceStub(object):
    """*
    LogAdminService provides log administration operations for
    managing logger configurations and settings.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConfigureLogger = channel.unary_unary(
                '/gcommon.v1.log.LogAdminService/ConfigureLogger',
                request_serializer=pkg_dot_log_dot_proto_dot_configure__logger__request__pb2.ConfigureLoggerRequest.SerializeToString,
                response_deserializer=pkg_dot_log_dot_proto_dot_configure__logger__response__pb2.ConfigureLoggerResponse.FromString,
                _registered_method=True)


class LogAdminServiceServicer(object):
    """*
    LogAdminService provides log administration operations for
    managing logger configurations and settings.
    """

    def ConfigureLogger(self, request, context):
        """Configure logger settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogAdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConfigureLogger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureLogger,
                    request_deserializer=pkg_dot_log_dot_proto_dot_configure__logger__request__pb2.ConfigureLoggerRequest.FromString,
                    response_serializer=pkg_dot_log_dot_proto_dot_configure__logger__response__pb2.ConfigureLoggerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.log.LogAdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.log.LogAdminService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogAdminService(object):
    """*
    LogAdminService provides log administration operations for
    managing logger configurations and settings.
    """

    @staticmethod
    def ConfigureLogger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.log.LogAdminService/ConfigureLogger',
            pkg_dot_log_dot_proto_dot_configure__logger__request__pb2.ConfigureLoggerRequest.SerializeToString,
            pkg_dot_log_dot_proto_dot_configure__logger__response__pb2.ConfigureLoggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
