# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg.log.proto import read_logs_request_pb2 as pkg_dot_log_dot_proto_dot_read__logs__request__pb2
from pkg.log.proto import read_logs_response_pb2 as pkg_dot_log_dot_proto_dot_read__logs__response__pb2
from pkg.log.proto import write_log_request_pb2 as pkg_dot_log_dot_proto_dot_write__log__request__pb2
from pkg.log.proto import write_log_response_pb2 as pkg_dot_log_dot_proto_dot_write__log__response__pb2


class LogServiceStub(object):
    """*
    LogService provides log management operations for
    centralized logging and log retrieval.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteLog = channel.unary_unary(
                '/gcommon.v1.log.LogService/WriteLog',
                request_serializer=pkg_dot_log_dot_proto_dot_write__log__request__pb2.WriteLogRequest.SerializeToString,
                response_deserializer=pkg_dot_log_dot_proto_dot_write__log__response__pb2.WriteLogResponse.FromString,
                _registered_method=True)
        self.ReadLogs = channel.unary_unary(
                '/gcommon.v1.log.LogService/ReadLogs',
                request_serializer=pkg_dot_log_dot_proto_dot_read__logs__request__pb2.ReadLogsRequest.SerializeToString,
                response_deserializer=pkg_dot_log_dot_proto_dot_read__logs__response__pb2.ReadLogsResponse.FromString,
                _registered_method=True)


class LogServiceServicer(object):
    """*
    LogService provides log management operations for
    centralized logging and log retrieval.
    """

    def WriteLog(self, request, context):
        """Write a log entry
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadLogs(self, request, context):
        """Read log entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteLog': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteLog,
                    request_deserializer=pkg_dot_log_dot_proto_dot_write__log__request__pb2.WriteLogRequest.FromString,
                    response_serializer=pkg_dot_log_dot_proto_dot_write__log__response__pb2.WriteLogResponse.SerializeToString,
            ),
            'ReadLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadLogs,
                    request_deserializer=pkg_dot_log_dot_proto_dot_read__logs__request__pb2.ReadLogsRequest.FromString,
                    response_serializer=pkg_dot_log_dot_proto_dot_read__logs__response__pb2.ReadLogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'gcommon.v1.log.LogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('gcommon.v1.log.LogService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogService(object):
    """*
    LogService provides log management operations for
    centralized logging and log retrieval.
    """

    @staticmethod
    def WriteLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.log.LogService/WriteLog',
            pkg_dot_log_dot_proto_dot_write__log__request__pb2.WriteLogRequest.SerializeToString,
            pkg_dot_log_dot_proto_dot_write__log__response__pb2.WriteLogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/gcommon.v1.log.LogService/ReadLogs',
            pkg_dot_log_dot_proto_dot_read__logs__request__pb2.ReadLogsRequest.SerializeToString,
            pkg_dot_log_dot_proto_dot_read__logs__response__pb2.ReadLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
