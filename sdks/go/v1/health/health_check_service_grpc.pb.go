// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/health/services/health_check_service.proto

package health

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthCheckService_RegisterCheck_FullMethodName     = "/gcommon.v1.health.HealthCheckService/RegisterCheck"
	HealthCheckService_UnregisterCheck_FullMethodName   = "/gcommon.v1.health.HealthCheckService/UnregisterCheck"
	HealthCheckService_ListChecks_FullMethodName        = "/gcommon.v1.health.HealthCheckService/ListChecks"
	HealthCheckService_CheckDependencies_FullMethodName = "/gcommon.v1.health.HealthCheckService/CheckDependencies"
)

// HealthCheckServiceClient is the client API for HealthCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// HealthCheckService provides health check management capabilities.
// Allows registration, configuration, and management of health checks.
// Follows 1-1-1 pattern: one service per file.
type HealthCheckServiceClient interface {
	// RegisterCheck registers a new health check
	RegisterCheck(ctx context.Context, in *RegisterCheckRequest, opts ...grpc.CallOption) (*RegisterCheckResponse, error)
	// UnregisterCheck removes a health check
	UnregisterCheck(ctx context.Context, in *UnregisterCheckRequest, opts ...grpc.CallOption) (*UnregisterCheckResponse, error)
	// ListChecks returns all registered health checks
	ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error)
	// CheckDependencies verifies external dependencies
	CheckDependencies(ctx context.Context, in *DependencyCheckRequest, opts ...grpc.CallOption) (*DependencyCheckResponse, error)
}

type healthCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckServiceClient(cc grpc.ClientConnInterface) HealthCheckServiceClient {
	return &healthCheckServiceClient{cc}
}

func (c *healthCheckServiceClient) RegisterCheck(ctx context.Context, in *RegisterCheckRequest, opts ...grpc.CallOption) (*RegisterCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCheckResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_RegisterCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckServiceClient) UnregisterCheck(ctx context.Context, in *UnregisterCheckRequest, opts ...grpc.CallOption) (*UnregisterCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterCheckResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_UnregisterCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckServiceClient) ListChecks(ctx context.Context, in *ListChecksRequest, opts ...grpc.CallOption) (*ListChecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChecksResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_ListChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckServiceClient) CheckDependencies(ctx context.Context, in *DependencyCheckRequest, opts ...grpc.CallOption) (*DependencyCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DependencyCheckResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_CheckDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServiceServer is the server API for HealthCheckService service.
// All implementations must embed UnimplementedHealthCheckServiceServer
// for forward compatibility.
//
// *
// HealthCheckService provides health check management capabilities.
// Allows registration, configuration, and management of health checks.
// Follows 1-1-1 pattern: one service per file.
type HealthCheckServiceServer interface {
	// RegisterCheck registers a new health check
	RegisterCheck(context.Context, *RegisterCheckRequest) (*RegisterCheckResponse, error)
	// UnregisterCheck removes a health check
	UnregisterCheck(context.Context, *UnregisterCheckRequest) (*UnregisterCheckResponse, error)
	// ListChecks returns all registered health checks
	ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error)
	// CheckDependencies verifies external dependencies
	CheckDependencies(context.Context, *DependencyCheckRequest) (*DependencyCheckResponse, error)
	mustEmbedUnimplementedHealthCheckServiceServer()
}

// UnimplementedHealthCheckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthCheckServiceServer struct{}

func (UnimplementedHealthCheckServiceServer) RegisterCheck(context.Context, *RegisterCheckRequest) (*RegisterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCheck not implemented")
}
func (UnimplementedHealthCheckServiceServer) UnregisterCheck(context.Context, *UnregisterCheckRequest) (*UnregisterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCheck not implemented")
}
func (UnimplementedHealthCheckServiceServer) ListChecks(context.Context, *ListChecksRequest) (*ListChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChecks not implemented")
}
func (UnimplementedHealthCheckServiceServer) CheckDependencies(context.Context, *DependencyCheckRequest) (*DependencyCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDependencies not implemented")
}
func (UnimplementedHealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {}
func (UnimplementedHealthCheckServiceServer) testEmbeddedByValue()                            {}

// UnsafeHealthCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServiceServer will
// result in compilation errors.
type UnsafeHealthCheckServiceServer interface {
	mustEmbedUnimplementedHealthCheckServiceServer()
}

func RegisterHealthCheckServiceServer(s grpc.ServiceRegistrar, srv HealthCheckServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthCheckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthCheckService_ServiceDesc, srv)
}

func _HealthCheckService_RegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).RegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_RegisterCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).RegisterCheck(ctx, req.(*RegisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckService_UnregisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).UnregisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_UnregisterCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).UnregisterCheck(ctx, req.(*UnregisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckService_ListChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).ListChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_ListChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).ListChecks(ctx, req.(*ListChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheckService_CheckDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DependencyCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).CheckDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_CheckDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).CheckDependencies(ctx, req.(*DependencyCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckService_ServiceDesc is the grpc.ServiceDesc for HealthCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.health.HealthCheckService",
	HandlerType: (*HealthCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCheck",
			Handler:    _HealthCheckService_RegisterCheck_Handler,
		},
		{
			MethodName: "UnregisterCheck",
			Handler:    _HealthCheckService_UnregisterCheck_Handler,
		},
		{
			MethodName: "ListChecks",
			Handler:    _HealthCheckService_ListChecks_Handler,
		},
		{
			MethodName: "CheckDependencies",
			Handler:    _HealthCheckService_CheckDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/health/services/health_check_service.proto",
}
