// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: gcommon/v1/common/partition_strategy.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Partitioning strategies for queue messages.
// Determines how messages are distributed across partitions.
type PartitionStrategy int32

const (
	// Default partitioning strategy
	PartitionStrategy_PARTITION_STRATEGY_UNSPECIFIED PartitionStrategy = 0
	// Round-robin distribution across partitions
	PartitionStrategy_PARTITION_STRATEGY_ROUND_ROBIN PartitionStrategy = 1
	// Hash-based partitioning using message key
	PartitionStrategy_PARTITION_STRATEGY_HASH PartitionStrategy = 2
	// Random partition assignment
	PartitionStrategy_PARTITION_STRATEGY_RANDOM PartitionStrategy = 3
	// Manual partition specification
	PartitionStrategy_PARTITION_STRATEGY_MANUAL PartitionStrategy = 4
	// Sticky partitioning (same producer uses same partition)
	PartitionStrategy_PARTITION_STRATEGY_STICKY PartitionStrategy = 5
	// Load-based partitioning (least loaded partition)
	PartitionStrategy_PARTITION_STRATEGY_LOAD_BALANCED PartitionStrategy = 6
)

// Enum value maps for PartitionStrategy.
var (
	PartitionStrategy_name = map[int32]string{
		0: "PARTITION_STRATEGY_UNSPECIFIED",
		1: "PARTITION_STRATEGY_ROUND_ROBIN",
		2: "PARTITION_STRATEGY_HASH",
		3: "PARTITION_STRATEGY_RANDOM",
		4: "PARTITION_STRATEGY_MANUAL",
		5: "PARTITION_STRATEGY_STICKY",
		6: "PARTITION_STRATEGY_LOAD_BALANCED",
	}
	PartitionStrategy_value = map[string]int32{
		"PARTITION_STRATEGY_UNSPECIFIED":   0,
		"PARTITION_STRATEGY_ROUND_ROBIN":   1,
		"PARTITION_STRATEGY_HASH":          2,
		"PARTITION_STRATEGY_RANDOM":        3,
		"PARTITION_STRATEGY_MANUAL":        4,
		"PARTITION_STRATEGY_STICKY":        5,
		"PARTITION_STRATEGY_LOAD_BALANCED": 6,
	}
)

func (x PartitionStrategy) Enum() *PartitionStrategy {
	p := new(PartitionStrategy)
	*p = x
	return p
}

func (x PartitionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_gcommon_v1_common_partition_strategy_proto_enumTypes[0].Descriptor()
}

func (PartitionStrategy) Type() protoreflect.EnumType {
	return &file_gcommon_v1_common_partition_strategy_proto_enumTypes[0]
}

func (x PartitionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

var File_gcommon_v1_common_partition_strategy_proto protoreflect.FileDescriptor

const file_gcommon_v1_common_partition_strategy_proto_rawDesc = "" +
	"\n" +
	"*gcommon/v1/common/partition_strategy.proto\x12\x11gcommon.v1.common\x1a!google/protobuf/go_features.proto*\xfb\x01\n" +
	"\x11PartitionStrategy\x12\"\n" +
	"\x1ePARTITION_STRATEGY_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePARTITION_STRATEGY_ROUND_ROBIN\x10\x01\x12\x1b\n" +
	"\x17PARTITION_STRATEGY_HASH\x10\x02\x12\x1d\n" +
	"\x19PARTITION_STRATEGY_RANDOM\x10\x03\x12\x1d\n" +
	"\x19PARTITION_STRATEGY_MANUAL\x10\x04\x12\x1d\n" +
	"\x19PARTITION_STRATEGY_STICKY\x10\x05\x12$\n" +
	" PARTITION_STRATEGY_LOAD_BALANCED\x10\x06B5Z+github.com/jdfalk/gcommon/sdks/go/v1/common\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_common_partition_strategy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gcommon_v1_common_partition_strategy_proto_goTypes = []any{
	(PartitionStrategy)(0), // 0: gcommon.v1.common.PartitionStrategy
}
var file_gcommon_v1_common_partition_strategy_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gcommon_v1_common_partition_strategy_proto_init() }
func file_gcommon_v1_common_partition_strategy_proto_init() {
	if File_gcommon_v1_common_partition_strategy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_common_partition_strategy_proto_rawDesc), len(file_gcommon_v1_common_partition_strategy_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_common_partition_strategy_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_common_partition_strategy_proto_depIdxs,
		EnumInfos:         file_gcommon_v1_common_partition_strategy_proto_enumTypes,
	}.Build()
	File_gcommon_v1_common_partition_strategy_proto = out.File
	file_gcommon_v1_common_partition_strategy_proto_goTypes = nil
	file_gcommon_v1_common_partition_strategy_proto_depIdxs = nil
}
