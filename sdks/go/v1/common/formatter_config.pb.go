// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: gcommon/v1/common/formatter_config.proto

package common

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogFormatterConfig struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type        FormatterType          `protobuf:"varint,1,opt,name=type,enum=gcommon.v1.common.FormatterType"`
	xxx_hidden_Pattern     *string                `protobuf:"bytes,2,opt,name=pattern"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LogFormatterConfig) Reset() {
	*x = LogFormatterConfig{}
	mi := &file_gcommon_v1_common_formatter_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogFormatterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFormatterConfig) ProtoMessage() {}

func (x *LogFormatterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_common_formatter_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LogFormatterConfig) GetType() FormatterType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return FormatterType_FORMATTER_TYPE_UNSPECIFIED
}

func (x *LogFormatterConfig) GetPattern() string {
	if x != nil {
		if x.xxx_hidden_Pattern != nil {
			return *x.xxx_hidden_Pattern
		}
		return ""
	}
	return ""
}

func (x *LogFormatterConfig) SetType(v FormatterType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *LogFormatterConfig) SetPattern(v string) {
	x.xxx_hidden_Pattern = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *LogFormatterConfig) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *LogFormatterConfig) HasPattern() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *LogFormatterConfig) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = FormatterType_FORMATTER_TYPE_UNSPECIFIED
}

func (x *LogFormatterConfig) ClearPattern() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Pattern = nil
}

type LogFormatterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Formatting strategy
	Type *FormatterType
	// Optional format pattern
	Pattern *string
}

func (b0 LogFormatterConfig_builder) Build() *LogFormatterConfig {
	m0 := &LogFormatterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Pattern != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Pattern = b.Pattern
	}
	return m0
}

var File_gcommon_v1_common_formatter_config_proto protoreflect.FileDescriptor

const file_gcommon_v1_common_formatter_config_proto_rawDesc = "" +
	"\n" +
	"(gcommon/v1/common/formatter_config.proto\x12\x11gcommon.v1.common\x1a&gcommon/v1/common/formatter_type.proto\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"m\n" +
	"\x12LogFormatterConfig\x124\n" +
	"\x04type\x18\x01 \x01(\x0e2 .gcommon.v1.common.FormatterTypeR\x04type\x12!\n" +
	"\apattern\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\apatternB5Z+github.com/jdfalk/gcommon/sdks/go/v1/common\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_common_formatter_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_common_formatter_config_proto_goTypes = []any{
	(*LogFormatterConfig)(nil), // 0: gcommon.v1.common.LogFormatterConfig
	(FormatterType)(0),         // 1: gcommon.v1.common.FormatterType
}
var file_gcommon_v1_common_formatter_config_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.LogFormatterConfig.type:type_name -> gcommon.v1.common.FormatterType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_common_formatter_config_proto_init() }
func file_gcommon_v1_common_formatter_config_proto_init() {
	if File_gcommon_v1_common_formatter_config_proto != nil {
		return
	}
	file_gcommon_v1_common_formatter_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_common_formatter_config_proto_rawDesc), len(file_gcommon_v1_common_formatter_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_common_formatter_config_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_common_formatter_config_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_common_formatter_config_proto_msgTypes,
	}.Build()
	File_gcommon_v1_common_formatter_config_proto = out.File
	file_gcommon_v1_common_formatter_config_proto_goTypes = nil
	file_gcommon_v1_common_formatter_config_proto_depIdxs = nil
}
