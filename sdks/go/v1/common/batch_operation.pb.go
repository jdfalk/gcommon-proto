// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: gcommon/v1/common/batch_operation.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Batch operation wrapper for bulk request processing.
// Enables efficient processing of multiple operations with
// configurable parallelism, error handling, and timeout policies.
type CommonBatchOperation struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BatchId       *string                `protobuf:"bytes,1,opt,name=batch_id,json=batchId"`
	xxx_hidden_OperationType *string                `protobuf:"bytes,2,opt,name=operation_type,json=operationType"`
	xxx_hidden_Operations    *[]*anypb.Any          `protobuf:"bytes,3,rep,name=operations"`
	xxx_hidden_Options       *CommonBatchOptions    `protobuf:"bytes,4,opt,name=options"`
	xxx_hidden_Metadata      *RequestMetadata       `protobuf:"bytes,5,opt,name=metadata"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CommonBatchOperation) Reset() {
	*x = CommonBatchOperation{}
	mi := &file_gcommon_v1_common_batch_operation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonBatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonBatchOperation) ProtoMessage() {}

func (x *CommonBatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_common_batch_operation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CommonBatchOperation) GetBatchId() string {
	if x != nil {
		if x.xxx_hidden_BatchId != nil {
			return *x.xxx_hidden_BatchId
		}
		return ""
	}
	return ""
}

func (x *CommonBatchOperation) GetOperationType() string {
	if x != nil {
		if x.xxx_hidden_OperationType != nil {
			return *x.xxx_hidden_OperationType
		}
		return ""
	}
	return ""
}

func (x *CommonBatchOperation) GetOperations() []*anypb.Any {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Operations) {
				protoimpl.X.UnmarshalField(x, 3)
			}
			var rv *[]*anypb.Any
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Operations), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *CommonBatchOperation) GetOptions() *CommonBatchOptions {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Options) {
				protoimpl.X.UnmarshalField(x, 4)
			}
			var rv *CommonBatchOptions
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Options), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *CommonBatchOperation) GetMetadata() *RequestMetadata {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Metadata) {
				protoimpl.X.UnmarshalField(x, 5)
			}
			var rv *RequestMetadata
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *CommonBatchOperation) SetBatchId(v string) {
	x.xxx_hidden_BatchId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *CommonBatchOperation) SetOperationType(v string) {
	x.xxx_hidden_OperationType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *CommonBatchOperation) SetOperations(v []*anypb.Any) {
	var sv *[]*anypb.Any
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Operations), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*anypb.Any{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Operations), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *CommonBatchOperation) SetOptions(v *CommonBatchOptions) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Options, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
	}
}

func (x *CommonBatchOperation) SetMetadata(v *RequestMetadata) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Metadata, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
	}
}

func (x *CommonBatchOperation) HasBatchId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CommonBatchOperation) HasOperationType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CommonBatchOperation) HasOptions() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CommonBatchOperation) HasMetadata() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *CommonBatchOperation) ClearBatchId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BatchId = nil
}

func (x *CommonBatchOperation) ClearOperationType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_OperationType = nil
}

func (x *CommonBatchOperation) ClearOptions() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Options, (*CommonBatchOptions)(nil))
}

func (x *CommonBatchOperation) ClearMetadata() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Metadata, (*RequestMetadata)(nil))
}

type CommonBatchOperation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for this batch operation
	BatchId *string
	// Type of operation being performed in batch
	OperationType *string
	// Individual operations within the batch (type-specific)
	Operations []*anypb.Any
	// Batch processing configuration options
	Options *CommonBatchOptions
	// Request metadata for tracing and correlation
	Metadata *RequestMetadata
}

func (b0 CommonBatchOperation_builder) Build() *CommonBatchOperation {
	m0 := &CommonBatchOperation{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BatchId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_BatchId = b.BatchId
	}
	if b.OperationType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_OperationType = b.OperationType
	}
	if b.Operations != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Operations = &b.Operations
	}
	if b.Options != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Options = b.Options
	}
	if b.Metadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Metadata = b.Metadata
	}
	return m0
}

var File_gcommon_v1_common_batch_operation_proto protoreflect.FileDescriptor

const file_gcommon_v1_common_batch_operation_proto_rawDesc = "" +
	"\n" +
	"'gcommon/v1/common/batch_operation.proto\x12\x11gcommon.v1.common\x1a%gcommon/v1/common/batch_options.proto\x1a(gcommon/v1/common/request_metadata.proto\x1a\x19google/protobuf/any.proto\x1a!google/protobuf/go_features.proto\"\x9b\x02\n" +
	"\x14CommonBatchOperation\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12%\n" +
	"\x0eoperation_type\x18\x02 \x01(\tR\roperationType\x128\n" +
	"\n" +
	"operations\x18\x03 \x03(\v2\x14.google.protobuf.AnyB\x02(\x01R\n" +
	"operations\x12C\n" +
	"\aoptions\x18\x04 \x01(\v2%.gcommon.v1.common.CommonBatchOptionsB\x02(\x01R\aoptions\x12B\n" +
	"\bmetadata\x18\x05 \x01(\v2\".gcommon.v1.common.RequestMetadataB\x02(\x01R\bmetadataB5Z+github.com/jdfalk/gcommon/sdks/go/v1/common\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_common_batch_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_common_batch_operation_proto_goTypes = []any{
	(*CommonBatchOperation)(nil), // 0: gcommon.v1.common.CommonBatchOperation
	(*anypb.Any)(nil),            // 1: google.protobuf.Any
	(*CommonBatchOptions)(nil),   // 2: gcommon.v1.common.CommonBatchOptions
	(*RequestMetadata)(nil),      // 3: gcommon.v1.common.RequestMetadata
}
var file_gcommon_v1_common_batch_operation_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.CommonBatchOperation.operations:type_name -> google.protobuf.Any
	2, // 1: gcommon.v1.common.CommonBatchOperation.options:type_name -> gcommon.v1.common.CommonBatchOptions
	3, // 2: gcommon.v1.common.CommonBatchOperation.metadata:type_name -> gcommon.v1.common.RequestMetadata
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gcommon_v1_common_batch_operation_proto_init() }
func file_gcommon_v1_common_batch_operation_proto_init() {
	if File_gcommon_v1_common_batch_operation_proto != nil {
		return
	}
	file_gcommon_v1_common_batch_options_proto_init()
	file_gcommon_v1_common_request_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_common_batch_operation_proto_rawDesc), len(file_gcommon_v1_common_batch_operation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_common_batch_operation_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_common_batch_operation_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_common_batch_operation_proto_msgTypes,
	}.Build()
	File_gcommon_v1_common_batch_operation_proto = out.File
	file_gcommon_v1_common_batch_operation_proto_goTypes = nil
	file_gcommon_v1_common_batch_operation_proto_depIdxs = nil
}
