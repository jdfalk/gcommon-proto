// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: gcommon/v1/common/config_value.proto

package common

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Configuration value with type information and metadata.
// Supports multiple value types with encryption and validation capabilities
// for secure and type-safe configuration management.
type ConfigValue struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value     isConfigValue_Value    `protobuf_oneof:"value"`
	xxx_hidden_Type      ValueType              `protobuf:"varint,7,opt,name=type,enum=gcommon.v1.common.ValueType"`
	xxx_hidden_Encrypted bool                   `protobuf:"varint,8,opt,name=encrypted"`
	xxx_hidden_Metadata  map[string]string      `protobuf:"bytes,9,rep,name=metadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConfigValue) Reset() {
	*x = ConfigValue{}
	mi := &file_gcommon_v1_common_config_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigValue) ProtoMessage() {}

func (x *ConfigValue) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_common_config_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConfigValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *ConfigValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *ConfigValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *ConfigValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *ConfigValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *ConfigValue) GetAnyValue() *anypb.Any {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*configValue_AnyValue); ok {
			return x.AnyValue
		}
	}
	return nil
}

func (x *ConfigValue) GetType() ValueType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Type
		}
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func (x *ConfigValue) GetEncrypted() bool {
	if x != nil {
		return x.xxx_hidden_Encrypted
	}
	return false
}

func (x *ConfigValue) GetMetadata() map[string]string {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *ConfigValue) SetStringValue(v string) {
	x.xxx_hidden_Value = &configValue_StringValue{v}
}

func (x *ConfigValue) SetIntValue(v int64) {
	x.xxx_hidden_Value = &configValue_IntValue{v}
}

func (x *ConfigValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &configValue_DoubleValue{v}
}

func (x *ConfigValue) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &configValue_BoolValue{v}
}

func (x *ConfigValue) SetBytesValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = &configValue_BytesValue{v}
}

func (x *ConfigValue) SetAnyValue(v *anypb.Any) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &configValue_AnyValue{v}
}

func (x *ConfigValue) SetType(v ValueType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *ConfigValue) SetEncrypted(v bool) {
	x.xxx_hidden_Encrypted = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *ConfigValue) SetMetadata(v map[string]string) {
	x.xxx_hidden_Metadata = v
}

func (x *ConfigValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *ConfigValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_StringValue)
	return ok
}

func (x *ConfigValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_IntValue)
	return ok
}

func (x *ConfigValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_DoubleValue)
	return ok
}

func (x *ConfigValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_BoolValue)
	return ok
}

func (x *ConfigValue) HasBytesValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_BytesValue)
	return ok
}

func (x *ConfigValue) HasAnyValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*configValue_AnyValue)
	return ok
}

func (x *ConfigValue) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConfigValue) HasEncrypted() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ConfigValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *ConfigValue) ClearStringValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_StringValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearBytesValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_BytesValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearAnyValue() {
	if _, ok := x.xxx_hidden_Value.(*configValue_AnyValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *ConfigValue) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Type = ValueType_VALUE_TYPE_UNSPECIFIED
}

func (x *ConfigValue) ClearEncrypted() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Encrypted = false
}

const ConfigValue_Value_not_set_case case_ConfigValue_Value = 0
const ConfigValue_StringValue_case case_ConfigValue_Value = 1
const ConfigValue_IntValue_case case_ConfigValue_Value = 2
const ConfigValue_DoubleValue_case case_ConfigValue_Value = 3
const ConfigValue_BoolValue_case case_ConfigValue_Value = 4
const ConfigValue_BytesValue_case case_ConfigValue_Value = 5
const ConfigValue_AnyValue_case case_ConfigValue_Value = 6

func (x *ConfigValue) WhichValue() case_ConfigValue_Value {
	if x == nil {
		return ConfigValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *configValue_StringValue:
		return ConfigValue_StringValue_case
	case *configValue_IntValue:
		return ConfigValue_IntValue_case
	case *configValue_DoubleValue:
		return ConfigValue_DoubleValue_case
	case *configValue_BoolValue:
		return ConfigValue_BoolValue_case
	case *configValue_BytesValue:
		return ConfigValue_BytesValue_case
	case *configValue_AnyValue:
		return ConfigValue_AnyValue_case
	default:
		return ConfigValue_Value_not_set_case
	}
}

type ConfigValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The configuration value (one of the supported types)

	// Fields of oneof xxx_hidden_Value:
	// String value for text configuration
	StringValue *string
	// Integer value for numeric configuration
	IntValue *int64
	// Double value for floating-point configuration
	DoubleValue *float64
	// Boolean value for true/false configuration
	BoolValue *bool
	// Binary data for complex configuration
	BytesValue []byte
	// Any protobuf message for structured configuration
	AnyValue *anypb.Any
	// -- end of xxx_hidden_Value
	// Value type for validation and serialization
	Type *ValueType
	// Whether the value is encrypted at rest
	Encrypted *bool
	// Additional metadata about the configuration value
	Metadata map[string]string
}

func (b0 ConfigValue_builder) Build() *ConfigValue {
	m0 := &ConfigValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StringValue != nil {
		x.xxx_hidden_Value = &configValue_StringValue{*b.StringValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &configValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &configValue_DoubleValue{*b.DoubleValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &configValue_BoolValue{*b.BoolValue}
	}
	if b.BytesValue != nil {
		x.xxx_hidden_Value = &configValue_BytesValue{b.BytesValue}
	}
	if b.AnyValue != nil {
		x.xxx_hidden_Value = &configValue_AnyValue{b.AnyValue}
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Encrypted != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Encrypted = *b.Encrypted
	}
	x.xxx_hidden_Metadata = b.Metadata
	return m0
}

type case_ConfigValue_Value protoreflect.FieldNumber

func (x case_ConfigValue_Value) String() string {
	md := file_gcommon_v1_common_config_value_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isConfigValue_Value interface {
	isConfigValue_Value()
}

type configValue_StringValue struct {
	// String value for text configuration
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}

type configValue_IntValue struct {
	// Integer value for numeric configuration
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type configValue_DoubleValue struct {
	// Double value for floating-point configuration
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

type configValue_BoolValue struct {
	// Boolean value for true/false configuration
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}

type configValue_BytesValue struct {
	// Binary data for complex configuration
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytes_value,json=bytesValue,oneof"`
}

type configValue_AnyValue struct {
	// Any protobuf message for structured configuration
	AnyValue *anypb.Any `protobuf:"bytes,6,opt,name=any_value,json=anyValue,oneof"`
}

func (*configValue_StringValue) isConfigValue_Value() {}

func (*configValue_IntValue) isConfigValue_Value() {}

func (*configValue_DoubleValue) isConfigValue_Value() {}

func (*configValue_BoolValue) isConfigValue_Value() {}

func (*configValue_BytesValue) isConfigValue_Value() {}

func (*configValue_AnyValue) isConfigValue_Value() {}

var File_gcommon_v1_common_config_value_proto protoreflect.FileDescriptor

const file_gcommon_v1_common_config_value_proto_rawDesc = "" +
	"\n" +
	"$gcommon/v1/common/config_value.proto\x12\x11gcommon.v1.common\x1a\"gcommon/v1/common/value_type.proto\x1a\x19google/protobuf/any.proto\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"\xf9\x03\n" +
	"\vConfigValue\x12,\n" +
	"\fstring_value\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x00R\vstringValue\x12&\n" +
	"\tint_value\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02(\x00H\x00R\bintValue\x123\n" +
	"\fdouble_value\x18\x03 \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x00\x00H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x04 \x01(\bH\x00R\tboolValue\x12!\n" +
	"\vbytes_value\x18\x05 \x01(\fH\x00R\n" +
	"bytesValue\x127\n" +
	"\tany_value\x18\x06 \x01(\v2\x14.google.protobuf.AnyB\x02(\x01H\x00R\banyValue\x120\n" +
	"\x04type\x18\a \x01(\x0e2\x1c.gcommon.v1.common.ValueTypeR\x04type\x12\x1c\n" +
	"\tencrypted\x18\b \x01(\bR\tencrypted\x12L\n" +
	"\bmetadata\x18\t \x03(\v2,.gcommon.v1.common.ConfigValue.MetadataEntryB\x02(\x01R\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05valueB5Z+github.com/jdfalk/gcommon/sdks/go/v1/common\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_common_config_value_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gcommon_v1_common_config_value_proto_goTypes = []any{
	(*ConfigValue)(nil), // 0: gcommon.v1.common.ConfigValue
	nil,                 // 1: gcommon.v1.common.ConfigValue.MetadataEntry
	(*anypb.Any)(nil),   // 2: google.protobuf.Any
	(ValueType)(0),      // 3: gcommon.v1.common.ValueType
}
var file_gcommon_v1_common_config_value_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.common.ConfigValue.any_value:type_name -> google.protobuf.Any
	3, // 1: gcommon.v1.common.ConfigValue.type:type_name -> gcommon.v1.common.ValueType
	1, // 2: gcommon.v1.common.ConfigValue.metadata:type_name -> gcommon.v1.common.ConfigValue.MetadataEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gcommon_v1_common_config_value_proto_init() }
func file_gcommon_v1_common_config_value_proto_init() {
	if File_gcommon_v1_common_config_value_proto != nil {
		return
	}
	file_gcommon_v1_common_value_type_proto_init()
	file_gcommon_v1_common_config_value_proto_msgTypes[0].OneofWrappers = []any{
		(*configValue_StringValue)(nil),
		(*configValue_IntValue)(nil),
		(*configValue_DoubleValue)(nil),
		(*configValue_BoolValue)(nil),
		(*configValue_BytesValue)(nil),
		(*configValue_AnyValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_common_config_value_proto_rawDesc), len(file_gcommon_v1_common_config_value_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_common_config_value_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_common_config_value_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_common_config_value_proto_msgTypes,
	}.Build()
	File_gcommon_v1_common_config_value_proto = out.File
	file_gcommon_v1_common_config_value_proto_goTypes = nil
	file_gcommon_v1_common_config_value_proto_depIdxs = nil
}
