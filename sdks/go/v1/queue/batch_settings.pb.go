// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: gcommon/v1/queue/batch_settings.proto

package queue

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchSettings struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Enabled         bool                   `protobuf:"varint,1,opt,name=enabled"`
	xxx_hidden_MaxBatchSize    int32                  `protobuf:"varint,2,opt,name=max_batch_size,json=maxBatchSize"`
	xxx_hidden_MaxBatchBytes   int64                  `protobuf:"varint,3,opt,name=max_batch_bytes,json=maxBatchBytes"`
	xxx_hidden_BatchTimeoutMs  int32                  `protobuf:"varint,4,opt,name=batch_timeout_ms,json=batchTimeoutMs"`
	xxx_hidden_FlushOnComplete bool                   `protobuf:"varint,5,opt,name=flush_on_complete,json=flushOnComplete"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *BatchSettings) Reset() {
	*x = BatchSettings{}
	mi := &file_gcommon_v1_queue_batch_settings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSettings) ProtoMessage() {}

func (x *BatchSettings) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_queue_batch_settings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchSettings) GetEnabled() bool {
	if x != nil {
		return x.xxx_hidden_Enabled
	}
	return false
}

func (x *BatchSettings) GetMaxBatchSize() int32 {
	if x != nil {
		return x.xxx_hidden_MaxBatchSize
	}
	return 0
}

func (x *BatchSettings) GetMaxBatchBytes() int64 {
	if x != nil {
		return x.xxx_hidden_MaxBatchBytes
	}
	return 0
}

func (x *BatchSettings) GetBatchTimeoutMs() int32 {
	if x != nil {
		return x.xxx_hidden_BatchTimeoutMs
	}
	return 0
}

func (x *BatchSettings) GetFlushOnComplete() bool {
	if x != nil {
		return x.xxx_hidden_FlushOnComplete
	}
	return false
}

func (x *BatchSettings) SetEnabled(v bool) {
	x.xxx_hidden_Enabled = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *BatchSettings) SetMaxBatchSize(v int32) {
	x.xxx_hidden_MaxBatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *BatchSettings) SetMaxBatchBytes(v int64) {
	x.xxx_hidden_MaxBatchBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *BatchSettings) SetBatchTimeoutMs(v int32) {
	x.xxx_hidden_BatchTimeoutMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *BatchSettings) SetFlushOnComplete(v bool) {
	x.xxx_hidden_FlushOnComplete = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *BatchSettings) HasEnabled() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchSettings) HasMaxBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BatchSettings) HasMaxBatchBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchSettings) HasBatchTimeoutMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BatchSettings) HasFlushOnComplete() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BatchSettings) ClearEnabled() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Enabled = false
}

func (x *BatchSettings) ClearMaxBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxBatchSize = 0
}

func (x *BatchSettings) ClearMaxBatchBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MaxBatchBytes = 0
}

func (x *BatchSettings) ClearBatchTimeoutMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_BatchTimeoutMs = 0
}

func (x *BatchSettings) ClearFlushOnComplete() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_FlushOnComplete = false
}

type BatchSettings_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Enable batch publishing
	Enabled *bool
	// Maximum messages per batch
	MaxBatchSize *int32
	// Maximum batch size in bytes
	MaxBatchBytes *int64
	// Maximum time to wait for batch completion (milliseconds)
	BatchTimeoutMs *int32
	// Flush batch on publish request completion
	FlushOnComplete *bool
}

func (b0 BatchSettings_builder) Build() *BatchSettings {
	m0 := &BatchSettings{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Enabled != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Enabled = *b.Enabled
	}
	if b.MaxBatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_MaxBatchSize = *b.MaxBatchSize
	}
	if b.MaxBatchBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_MaxBatchBytes = *b.MaxBatchBytes
	}
	if b.BatchTimeoutMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_BatchTimeoutMs = *b.BatchTimeoutMs
	}
	if b.FlushOnComplete != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_FlushOnComplete = *b.FlushOnComplete
	}
	return m0
}

var File_gcommon_v1_queue_batch_settings_proto protoreflect.FileDescriptor

const file_gcommon_v1_queue_batch_settings_proto_rawDesc = "" +
	"\n" +
	"%gcommon/v1/queue/batch_settings.proto\x12\x10gcommon.v1.queue\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"\xe8\x01\n" +
	"\rBatchSettings\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12-\n" +
	"\x0emax_batch_size\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\fmaxBatchSize\x12/\n" +
	"\x0fmax_batch_bytes\x18\x03 \x01(\x03B\a\xbaH\x04\"\x02(\x00R\rmaxBatchBytes\x121\n" +
	"\x10batch_timeout_ms\x18\x04 \x01(\x05B\a\xbaH\x04\x1a\x02 \x00R\x0ebatchTimeoutMs\x12*\n" +
	"\x11flush_on_complete\x18\x05 \x01(\bR\x0fflushOnCompleteB4Z*github.com/jdfalk/gcommon/sdks/go/v1/queue\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_queue_batch_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_queue_batch_settings_proto_goTypes = []any{
	(*BatchSettings)(nil), // 0: gcommon.v1.queue.BatchSettings
}
var file_gcommon_v1_queue_batch_settings_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gcommon_v1_queue_batch_settings_proto_init() }
func file_gcommon_v1_queue_batch_settings_proto_init() {
	if File_gcommon_v1_queue_batch_settings_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_queue_batch_settings_proto_rawDesc), len(file_gcommon_v1_queue_batch_settings_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_queue_batch_settings_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_queue_batch_settings_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_queue_batch_settings_proto_msgTypes,
	}.Build()
	File_gcommon_v1_queue_batch_settings_proto = out.File
	file_gcommon_v1_queue_batch_settings_proto_goTypes = nil
	file_gcommon_v1_queue_batch_settings_proto_depIdxs = nil
}
