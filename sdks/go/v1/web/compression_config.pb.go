// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/web/messages/compression_config.proto

package web

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
	common "v1/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CompressionConfig message definition.
type WebCompressionConfig struct {
	state                      protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_CompressionType common.LogCompressionType `protobuf:"varint,1,opt,name=compression_type,json=compressionType,enum=gcommon.v1.common.LogCompressionType"`
	xxx_hidden_MinLength       int32                     `protobuf:"varint,2,opt,name=min_length,json=minLength"`
	xxx_hidden_Level           int32                     `protobuf:"varint,3,opt,name=level"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *WebCompressionConfig) Reset() {
	*x = WebCompressionConfig{}
	mi := &file_gcommon_v1_web_messages_compression_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebCompressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebCompressionConfig) ProtoMessage() {}

func (x *WebCompressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_web_messages_compression_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *WebCompressionConfig) GetCompressionType() common.LogCompressionType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_CompressionType
		}
	}
	return common.LogCompressionType(0)
}

func (x *WebCompressionConfig) GetMinLength() int32 {
	if x != nil {
		return x.xxx_hidden_MinLength
	}
	return 0
}

func (x *WebCompressionConfig) GetLevel() int32 {
	if x != nil {
		return x.xxx_hidden_Level
	}
	return 0
}

func (x *WebCompressionConfig) SetCompressionType(v common.LogCompressionType) {
	x.xxx_hidden_CompressionType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *WebCompressionConfig) SetMinLength(v int32) {
	x.xxx_hidden_MinLength = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *WebCompressionConfig) SetLevel(v int32) {
	x.xxx_hidden_Level = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *WebCompressionConfig) HasCompressionType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *WebCompressionConfig) HasMinLength() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *WebCompressionConfig) HasLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *WebCompressionConfig) ClearCompressionType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CompressionType = common.LogCompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *WebCompressionConfig) ClearMinLength() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MinLength = 0
}

func (x *WebCompressionConfig) ClearLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Level = 0
}

type WebCompressionConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Compression algorithm to use for HTTP responses
	// Compression type to use for responses
	CompressionType *common.LogCompressionType
	// Minimum content length in bytes before compression is applied
	MinLength *int32
	// Compression level (implementation specific)
	Level *int32
}

func (b0 WebCompressionConfig_builder) Build() *WebCompressionConfig {
	m0 := &WebCompressionConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CompressionType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_CompressionType = *b.CompressionType
	}
	if b.MinLength != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_MinLength = *b.MinLength
	}
	if b.Level != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Level = *b.Level
	}
	return m0
}

var File_gcommon_v1_web_messages_compression_config_proto protoreflect.FileDescriptor

const file_gcommon_v1_web_messages_compression_config_proto_rawDesc = "" +
	"\n" +
	"0gcommon/v1/web/messages/compression_config.proto\x12\x0egcommon.v1.web\x1a.gcommon/v1/common/enums/compression_type.proto\x1a!google/protobuf/go_features.proto\"\x9d\x01\n" +
	"\x14WebCompressionConfig\x12P\n" +
	"\x10compression_type\x18\x01 \x01(\x0e2%.gcommon.v1.common.LogCompressionTypeR\x0fcompressionType\x12\x1d\n" +
	"\n" +
	"min_length\x18\x02 \x01(\x05R\tminLength\x12\x14\n" +
	"\x05level\x18\x03 \x01(\x05R\x05levelB\x10Z\x06v1/web\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_web_messages_compression_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_web_messages_compression_config_proto_goTypes = []any{
	(*WebCompressionConfig)(nil),   // 0: gcommon.v1.web.WebCompressionConfig
	(common.LogCompressionType)(0), // 1: gcommon.v1.common.LogCompressionType
}
var file_gcommon_v1_web_messages_compression_config_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.web.WebCompressionConfig.compression_type:type_name -> gcommon.v1.common.LogCompressionType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_web_messages_compression_config_proto_init() }
func file_gcommon_v1_web_messages_compression_config_proto_init() {
	if File_gcommon_v1_web_messages_compression_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_web_messages_compression_config_proto_rawDesc), len(file_gcommon_v1_web_messages_compression_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_web_messages_compression_config_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_web_messages_compression_config_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_web_messages_compression_config_proto_msgTypes,
	}.Build()
	File_gcommon_v1_web_messages_compression_config_proto = out.File
	file_gcommon_v1_web_messages_compression_config_proto_goTypes = nil
	file_gcommon_v1_web_messages_compression_config_proto_depIdxs = nil
}
