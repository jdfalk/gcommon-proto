// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: gcommon/v1/media/audio_track.proto

package media

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Audio track information.
type AudioTrack struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Index        int32                  `protobuf:"varint,1,opt,name=index"`
	xxx_hidden_Language     *string                `protobuf:"bytes,2,opt,name=language"`
	xxx_hidden_Codec        *string                `protobuf:"bytes,3,opt,name=codec"`
	xxx_hidden_Title        *string                `protobuf:"bytes,4,opt,name=title"`
	xxx_hidden_Channels     int32                  `protobuf:"varint,5,opt,name=channels"`
	xxx_hidden_SampleRate   int32                  `protobuf:"varint,6,opt,name=sample_rate,json=sampleRate"`
	xxx_hidden_DefaultTrack bool                   `protobuf:"varint,7,opt,name=default_track,json=defaultTrack"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AudioTrack) Reset() {
	*x = AudioTrack{}
	mi := &file_gcommon_v1_media_audio_track_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioTrack) ProtoMessage() {}

func (x *AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_media_audio_track_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AudioTrack) GetIndex() int32 {
	if x != nil {
		return x.xxx_hidden_Index
	}
	return 0
}

func (x *AudioTrack) GetLanguage() string {
	if x != nil {
		if x.xxx_hidden_Language != nil {
			return *x.xxx_hidden_Language
		}
		return ""
	}
	return ""
}

func (x *AudioTrack) GetCodec() string {
	if x != nil {
		if x.xxx_hidden_Codec != nil {
			return *x.xxx_hidden_Codec
		}
		return ""
	}
	return ""
}

func (x *AudioTrack) GetTitle() string {
	if x != nil {
		if x.xxx_hidden_Title != nil {
			return *x.xxx_hidden_Title
		}
		return ""
	}
	return ""
}

func (x *AudioTrack) GetChannels() int32 {
	if x != nil {
		return x.xxx_hidden_Channels
	}
	return 0
}

func (x *AudioTrack) GetSampleRate() int32 {
	if x != nil {
		return x.xxx_hidden_SampleRate
	}
	return 0
}

func (x *AudioTrack) GetDefaultTrack() bool {
	if x != nil {
		return x.xxx_hidden_DefaultTrack
	}
	return false
}

func (x *AudioTrack) SetIndex(v int32) {
	x.xxx_hidden_Index = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *AudioTrack) SetLanguage(v string) {
	x.xxx_hidden_Language = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *AudioTrack) SetCodec(v string) {
	x.xxx_hidden_Codec = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *AudioTrack) SetTitle(v string) {
	x.xxx_hidden_Title = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *AudioTrack) SetChannels(v int32) {
	x.xxx_hidden_Channels = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *AudioTrack) SetSampleRate(v int32) {
	x.xxx_hidden_SampleRate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *AudioTrack) SetDefaultTrack(v bool) {
	x.xxx_hidden_DefaultTrack = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *AudioTrack) HasIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *AudioTrack) HasLanguage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *AudioTrack) HasCodec() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *AudioTrack) HasTitle() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *AudioTrack) HasChannels() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *AudioTrack) HasSampleRate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *AudioTrack) HasDefaultTrack() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *AudioTrack) ClearIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Index = 0
}

func (x *AudioTrack) ClearLanguage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Language = nil
}

func (x *AudioTrack) ClearCodec() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Codec = nil
}

func (x *AudioTrack) ClearTitle() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Title = nil
}

func (x *AudioTrack) ClearChannels() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Channels = 0
}

func (x *AudioTrack) ClearSampleRate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_SampleRate = 0
}

func (x *AudioTrack) ClearDefaultTrack() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_DefaultTrack = false
}

type AudioTrack_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Index        *int32
	Language     *string
	Codec        *string
	Title        *string
	Channels     *int32
	SampleRate   *int32
	DefaultTrack *bool
}

func (b0 AudioTrack_builder) Build() *AudioTrack {
	m0 := &AudioTrack{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Index != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Index = *b.Index
	}
	if b.Language != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Language = b.Language
	}
	if b.Codec != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Codec = b.Codec
	}
	if b.Title != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_Title = b.Title
	}
	if b.Channels != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_Channels = *b.Channels
	}
	if b.SampleRate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_SampleRate = *b.SampleRate
	}
	if b.DefaultTrack != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_DefaultTrack = *b.DefaultTrack
	}
	return m0
}

var File_gcommon_v1_media_audio_track_proto protoreflect.FileDescriptor

const file_gcommon_v1_media_audio_track_proto_rawDesc = "" +
	"\n" +
	"\"gcommon/v1/media/audio_track.proto\x12\x10gcommon.v1.media\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"\x82\x02\n" +
	"\n" +
	"AudioTrack\x12\x1d\n" +
	"\x05index\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x05index\x12#\n" +
	"\blanguage\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\blanguage\x12\x1d\n" +
	"\x05codec\x18\x03 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x05codec\x12\x1d\n" +
	"\x05title\x18\x04 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x05title\x12#\n" +
	"\bchannels\x18\x05 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\bchannels\x12(\n" +
	"\vsample_rate\x18\x06 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\n" +
	"sampleRate\x12#\n" +
	"\rdefault_track\x18\a \x01(\bR\fdefaultTrackB4Z*github.com/jdfalk/gcommon/sdks/go/v1/media\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_media_audio_track_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_media_audio_track_proto_goTypes = []any{
	(*AudioTrack)(nil), // 0: gcommon.v1.media.AudioTrack
}
var file_gcommon_v1_media_audio_track_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gcommon_v1_media_audio_track_proto_init() }
func file_gcommon_v1_media_audio_track_proto_init() {
	if File_gcommon_v1_media_audio_track_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_media_audio_track_proto_rawDesc), len(file_gcommon_v1_media_audio_track_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_media_audio_track_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_media_audio_track_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_media_audio_track_proto_msgTypes,
	}.Build()
	File_gcommon_v1_media_audio_track_proto = out.File
	file_gcommon_v1_media_audio_track_proto_goTypes = nil
	file_gcommon_v1_media_audio_track_proto_depIdxs = nil
}
