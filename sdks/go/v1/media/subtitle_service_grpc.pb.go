// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/media/services/subtitle_service.proto

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubtitleService_MergeSubtitles_FullMethodName        = "/gcommon.v1.media.SubtitleService/MergeSubtitles"
	SubtitleService_SyncSubtitles_FullMethodName         = "/gcommon.v1.media.SubtitleService/SyncSubtitles"
	SubtitleService_AdjustSubtitleTiming_FullMethodName  = "/gcommon.v1.media.SubtitleService/AdjustSubtitleTiming"
	SubtitleService_ConvertSubtitleFormat_FullMethodName = "/gcommon.v1.media.SubtitleService/ConvertSubtitleFormat"
	SubtitleService_ValidateSubtitles_FullMethodName     = "/gcommon.v1.media.SubtitleService/ValidateSubtitles"
)

// SubtitleServiceClient is the client API for SubtitleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// SubtitleService provides subtitle management, synchronization,
// and processing operations.
type SubtitleServiceClient interface {
	// Merge multiple subtitle files
	MergeSubtitles(ctx context.Context, in *MergeSubtitlesRequest, opts ...grpc.CallOption) (*MergeSubtitlesResponse, error)
	// Synchronize subtitles with media
	SyncSubtitles(ctx context.Context, in *SyncSubtitlesRequest, opts ...grpc.CallOption) (*SyncSubtitlesResponse, error)
	// Adjust subtitle timing
	AdjustSubtitleTiming(ctx context.Context, in *AdjustSubtitleTimingRequest, opts ...grpc.CallOption) (*AdjustSubtitleTimingResponse, error)
	// Convert subtitle format
	ConvertSubtitleFormat(ctx context.Context, in *ConvertSubtitleFormatRequest, opts ...grpc.CallOption) (*ConvertSubtitleFormatResponse, error)
	// Validate subtitle file
	ValidateSubtitles(ctx context.Context, in *ValidateSubtitlesRequest, opts ...grpc.CallOption) (*ValidateSubtitlesResponse, error)
}

type subtitleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleServiceClient(cc grpc.ClientConnInterface) SubtitleServiceClient {
	return &subtitleServiceClient{cc}
}

func (c *subtitleServiceClient) MergeSubtitles(ctx context.Context, in *MergeSubtitlesRequest, opts ...grpc.CallOption) (*MergeSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeSubtitlesResponse)
	err := c.cc.Invoke(ctx, SubtitleService_MergeSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) SyncSubtitles(ctx context.Context, in *SyncSubtitlesRequest, opts ...grpc.CallOption) (*SyncSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncSubtitlesResponse)
	err := c.cc.Invoke(ctx, SubtitleService_SyncSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) AdjustSubtitleTiming(ctx context.Context, in *AdjustSubtitleTimingRequest, opts ...grpc.CallOption) (*AdjustSubtitleTimingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdjustSubtitleTimingResponse)
	err := c.cc.Invoke(ctx, SubtitleService_AdjustSubtitleTiming_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) ConvertSubtitleFormat(ctx context.Context, in *ConvertSubtitleFormatRequest, opts ...grpc.CallOption) (*ConvertSubtitleFormatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertSubtitleFormatResponse)
	err := c.cc.Invoke(ctx, SubtitleService_ConvertSubtitleFormat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleServiceClient) ValidateSubtitles(ctx context.Context, in *ValidateSubtitlesRequest, opts ...grpc.CallOption) (*ValidateSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSubtitlesResponse)
	err := c.cc.Invoke(ctx, SubtitleService_ValidateSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleServiceServer is the server API for SubtitleService service.
// All implementations must embed UnimplementedSubtitleServiceServer
// for forward compatibility.
//
// *
// SubtitleService provides subtitle management, synchronization,
// and processing operations.
type SubtitleServiceServer interface {
	// Merge multiple subtitle files
	MergeSubtitles(context.Context, *MergeSubtitlesRequest) (*MergeSubtitlesResponse, error)
	// Synchronize subtitles with media
	SyncSubtitles(context.Context, *SyncSubtitlesRequest) (*SyncSubtitlesResponse, error)
	// Adjust subtitle timing
	AdjustSubtitleTiming(context.Context, *AdjustSubtitleTimingRequest) (*AdjustSubtitleTimingResponse, error)
	// Convert subtitle format
	ConvertSubtitleFormat(context.Context, *ConvertSubtitleFormatRequest) (*ConvertSubtitleFormatResponse, error)
	// Validate subtitle file
	ValidateSubtitles(context.Context, *ValidateSubtitlesRequest) (*ValidateSubtitlesResponse, error)
	mustEmbedUnimplementedSubtitleServiceServer()
}

// UnimplementedSubtitleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubtitleServiceServer struct{}

func (UnimplementedSubtitleServiceServer) MergeSubtitles(context.Context, *MergeSubtitlesRequest) (*MergeSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSubtitles not implemented")
}
func (UnimplementedSubtitleServiceServer) SyncSubtitles(context.Context, *SyncSubtitlesRequest) (*SyncSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSubtitles not implemented")
}
func (UnimplementedSubtitleServiceServer) AdjustSubtitleTiming(context.Context, *AdjustSubtitleTimingRequest) (*AdjustSubtitleTimingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustSubtitleTiming not implemented")
}
func (UnimplementedSubtitleServiceServer) ConvertSubtitleFormat(context.Context, *ConvertSubtitleFormatRequest) (*ConvertSubtitleFormatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertSubtitleFormat not implemented")
}
func (UnimplementedSubtitleServiceServer) ValidateSubtitles(context.Context, *ValidateSubtitlesRequest) (*ValidateSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSubtitles not implemented")
}
func (UnimplementedSubtitleServiceServer) mustEmbedUnimplementedSubtitleServiceServer() {}
func (UnimplementedSubtitleServiceServer) testEmbeddedByValue()                         {}

// UnsafeSubtitleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtitleServiceServer will
// result in compilation errors.
type UnsafeSubtitleServiceServer interface {
	mustEmbedUnimplementedSubtitleServiceServer()
}

func RegisterSubtitleServiceServer(s grpc.ServiceRegistrar, srv SubtitleServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubtitleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubtitleService_ServiceDesc, srv)
}

func _SubtitleService_MergeSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).MergeSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleService_MergeSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).MergeSubtitles(ctx, req.(*MergeSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_SyncSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).SyncSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleService_SyncSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).SyncSubtitles(ctx, req.(*SyncSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_AdjustSubtitleTiming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustSubtitleTimingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).AdjustSubtitleTiming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleService_AdjustSubtitleTiming_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).AdjustSubtitleTiming(ctx, req.(*AdjustSubtitleTimingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_ConvertSubtitleFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertSubtitleFormatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).ConvertSubtitleFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleService_ConvertSubtitleFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).ConvertSubtitleFormat(ctx, req.(*ConvertSubtitleFormatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtitleService_ValidateSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServiceServer).ValidateSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubtitleService_ValidateSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServiceServer).ValidateSubtitles(ctx, req.(*ValidateSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtitleService_ServiceDesc is the grpc.ServiceDesc for SubtitleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtitleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.media.SubtitleService",
	HandlerType: (*SubtitleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeSubtitles",
			Handler:    _SubtitleService_MergeSubtitles_Handler,
		},
		{
			MethodName: "SyncSubtitles",
			Handler:    _SubtitleService_SyncSubtitles_Handler,
		},
		{
			MethodName: "AdjustSubtitleTiming",
			Handler:    _SubtitleService_AdjustSubtitleTiming_Handler,
		},
		{
			MethodName: "ConvertSubtitleFormat",
			Handler:    _SubtitleService_ConvertSubtitleFormat_Handler,
		},
		{
			MethodName: "ValidateSubtitles",
			Handler:    _SubtitleService_ValidateSubtitles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/media/services/subtitle_service.proto",
}
