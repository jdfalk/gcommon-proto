// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/media/services/media_service.proto

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_UploadMedia_FullMethodName     = "/gcommon.v1.media.MediaService/UploadMedia"
	MediaService_CreateMediaFile_FullMethodName = "/gcommon.v1.media.MediaService/CreateMediaFile"
	MediaService_GetMediaFile_FullMethodName    = "/gcommon.v1.media.MediaService/GetMediaFile"
	MediaService_UpdateMediaFile_FullMethodName = "/gcommon.v1.media.MediaService/UpdateMediaFile"
	MediaService_DeleteMediaFile_FullMethodName = "/gcommon.v1.media.MediaService/DeleteMediaFile"
	MediaService_ListMediaFiles_FullMethodName  = "/gcommon.v1.media.MediaService/ListMediaFiles"
	MediaService_SearchMedia_FullMethodName     = "/gcommon.v1.media.MediaService/SearchMedia"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// MediaService provides core media file management operations including
// upload, storage, retrieval, and basic metadata management.
type MediaServiceClient interface {
	// Upload a new media file
	UploadMedia(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMediaRequest, UploadMediaResponse], error)
	// Create a media file record
	CreateMediaFile(ctx context.Context, in *CreateMediaFileRequest, opts ...grpc.CallOption) (*CreateMediaFileResponse, error)
	// Get a specific media file
	GetMediaFile(ctx context.Context, in *GetMediaFileRequest, opts ...grpc.CallOption) (*GetMediaFileResponse, error)
	// Update media file information
	UpdateMediaFile(ctx context.Context, in *UpdateMediaFileRequest, opts ...grpc.CallOption) (*UpdateMediaFileResponse, error)
	// Delete a media file
	DeleteMediaFile(ctx context.Context, in *DeleteMediaFileRequest, opts ...grpc.CallOption) (*DeleteMediaFileResponse, error)
	// List media files with filtering
	ListMediaFiles(ctx context.Context, in *ListMediaFilesRequest, opts ...grpc.CallOption) (*ListMediaFilesResponse, error)
	// Search media files
	SearchMedia(ctx context.Context, in *SearchMediaRequest, opts ...grpc.CallOption) (*SearchMediaResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) UploadMedia(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMediaRequest, UploadMediaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[0], MediaService_UploadMedia_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadMediaRequest, UploadMediaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadMediaClient = grpc.ClientStreamingClient[UploadMediaRequest, UploadMediaResponse]

func (c *mediaServiceClient) CreateMediaFile(ctx context.Context, in *CreateMediaFileRequest, opts ...grpc.CallOption) (*CreateMediaFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMediaFileResponse)
	err := c.cc.Invoke(ctx, MediaService_CreateMediaFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMediaFile(ctx context.Context, in *GetMediaFileRequest, opts ...grpc.CallOption) (*GetMediaFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaFileResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMediaFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMediaFile(ctx context.Context, in *UpdateMediaFileRequest, opts ...grpc.CallOption) (*UpdateMediaFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMediaFileResponse)
	err := c.cc.Invoke(ctx, MediaService_UpdateMediaFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMediaFile(ctx context.Context, in *DeleteMediaFileRequest, opts ...grpc.CallOption) (*DeleteMediaFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMediaFileResponse)
	err := c.cc.Invoke(ctx, MediaService_DeleteMediaFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListMediaFiles(ctx context.Context, in *ListMediaFilesRequest, opts ...grpc.CallOption) (*ListMediaFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMediaFilesResponse)
	err := c.cc.Invoke(ctx, MediaService_ListMediaFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) SearchMedia(ctx context.Context, in *SearchMediaRequest, opts ...grpc.CallOption) (*SearchMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_SearchMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// *
// MediaService provides core media file management operations including
// upload, storage, retrieval, and basic metadata management.
type MediaServiceServer interface {
	// Upload a new media file
	UploadMedia(grpc.ClientStreamingServer[UploadMediaRequest, UploadMediaResponse]) error
	// Create a media file record
	CreateMediaFile(context.Context, *CreateMediaFileRequest) (*CreateMediaFileResponse, error)
	// Get a specific media file
	GetMediaFile(context.Context, *GetMediaFileRequest) (*GetMediaFileResponse, error)
	// Update media file information
	UpdateMediaFile(context.Context, *UpdateMediaFileRequest) (*UpdateMediaFileResponse, error)
	// Delete a media file
	DeleteMediaFile(context.Context, *DeleteMediaFileRequest) (*DeleteMediaFileResponse, error)
	// List media files with filtering
	ListMediaFiles(context.Context, *ListMediaFilesRequest) (*ListMediaFilesResponse, error)
	// Search media files
	SearchMedia(context.Context, *SearchMediaRequest) (*SearchMediaResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) UploadMedia(grpc.ClientStreamingServer[UploadMediaRequest, UploadMediaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedMediaServiceServer) CreateMediaFile(context.Context, *CreateMediaFileRequest) (*CreateMediaFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMediaFile not implemented")
}
func (UnimplementedMediaServiceServer) GetMediaFile(context.Context, *GetMediaFileRequest) (*GetMediaFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaFile not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMediaFile(context.Context, *UpdateMediaFileRequest) (*UpdateMediaFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMediaFile not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMediaFile(context.Context, *DeleteMediaFileRequest) (*DeleteMediaFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaFile not implemented")
}
func (UnimplementedMediaServiceServer) ListMediaFiles(context.Context, *ListMediaFilesRequest) (*ListMediaFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMediaFiles not implemented")
}
func (UnimplementedMediaServiceServer) SearchMedia(context.Context, *SearchMediaRequest) (*SearchMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedia not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_UploadMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).UploadMedia(&grpc.GenericServerStream[UploadMediaRequest, UploadMediaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadMediaServer = grpc.ClientStreamingServer[UploadMediaRequest, UploadMediaResponse]

func _MediaService_CreateMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CreateMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CreateMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CreateMediaFile(ctx, req.(*CreateMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMediaFile(ctx, req.(*GetMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMediaFile(ctx, req.(*UpdateMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMediaFile(ctx, req.(*DeleteMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListMediaFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediaFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListMediaFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListMediaFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListMediaFiles(ctx, req.(*ListMediaFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_SearchMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).SearchMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_SearchMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).SearchMedia(ctx, req.(*SearchMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.media.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMediaFile",
			Handler:    _MediaService_CreateMediaFile_Handler,
		},
		{
			MethodName: "GetMediaFile",
			Handler:    _MediaService_GetMediaFile_Handler,
		},
		{
			MethodName: "UpdateMediaFile",
			Handler:    _MediaService_UpdateMediaFile_Handler,
		},
		{
			MethodName: "DeleteMediaFile",
			Handler:    _MediaService_DeleteMediaFile_Handler,
		},
		{
			MethodName: "ListMediaFiles",
			Handler:    _MediaService_ListMediaFiles_Handler,
		},
		{
			MethodName: "SearchMedia",
			Handler:    _MediaService_SearchMedia_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMedia",
			Handler:       _MediaService_UploadMedia_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gcommon/v1/media/services/media_service.proto",
}
