// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/metrics/stream_options.proto

package metrics

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	common "github.com/jdfalk/gcommon/sdks/go/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamOptions struct {
	state                               protoimpl.MessageState   `protogen:"opaque.v1"`
	xxx_hidden_IncludeHistorical        bool                     `protobuf:"varint,1,opt,name=include_historical,json=includeHistorical"`
	xxx_hidden_BatchSize                int32                    `protobuf:"varint,2,opt,name=batch_size,json=batchSize"`
	xxx_hidden_BatchTimeoutMs           int32                    `protobuf:"varint,3,opt,name=batch_timeout_ms,json=batchTimeoutMs"`
	xxx_hidden_IncludeMetadata          bool                     `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata"`
	xxx_hidden_Compression              common.StreamCompression `protobuf:"varint,5,opt,name=compression,enum=gcommon.v1.common.StreamCompression"`
	xxx_hidden_SendHeartbeats           bool                     `protobuf:"varint,6,opt,name=send_heartbeats,json=sendHeartbeats"`
	xxx_hidden_HeartbeatIntervalSeconds int32                    `protobuf:"varint,7,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds"`
	xxx_hidden_AutoRetry                bool                     `protobuf:"varint,8,opt,name=auto_retry,json=autoRetry"`
	xxx_hidden_Qos                      common.StreamQOS         `protobuf:"varint,9,opt,name=qos,enum=gcommon.v1.common.StreamQOS"`
	XXX_raceDetectHookData              protoimpl.RaceDetectHookData
	XXX_presence                        [1]uint32
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	mi := &file_gcommon_v1_metrics_stream_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_metrics_stream_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StreamOptions) GetIncludeHistorical() bool {
	if x != nil {
		return x.xxx_hidden_IncludeHistorical
	}
	return false
}

func (x *StreamOptions) GetBatchSize() int32 {
	if x != nil {
		return x.xxx_hidden_BatchSize
	}
	return 0
}

func (x *StreamOptions) GetBatchTimeoutMs() int32 {
	if x != nil {
		return x.xxx_hidden_BatchTimeoutMs
	}
	return 0
}

func (x *StreamOptions) GetIncludeMetadata() bool {
	if x != nil {
		return x.xxx_hidden_IncludeMetadata
	}
	return false
}

func (x *StreamOptions) GetCompression() common.StreamCompression {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 4) {
			return x.xxx_hidden_Compression
		}
	}
	return common.StreamCompression(0)
}

func (x *StreamOptions) GetSendHeartbeats() bool {
	if x != nil {
		return x.xxx_hidden_SendHeartbeats
	}
	return false
}

func (x *StreamOptions) GetHeartbeatIntervalSeconds() int32 {
	if x != nil {
		return x.xxx_hidden_HeartbeatIntervalSeconds
	}
	return 0
}

func (x *StreamOptions) GetAutoRetry() bool {
	if x != nil {
		return x.xxx_hidden_AutoRetry
	}
	return false
}

func (x *StreamOptions) GetQos() common.StreamQOS {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			return x.xxx_hidden_Qos
		}
	}
	return common.StreamQOS(0)
}

func (x *StreamOptions) SetIncludeHistorical(v bool) {
	x.xxx_hidden_IncludeHistorical = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *StreamOptions) SetBatchSize(v int32) {
	x.xxx_hidden_BatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *StreamOptions) SetBatchTimeoutMs(v int32) {
	x.xxx_hidden_BatchTimeoutMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *StreamOptions) SetIncludeMetadata(v bool) {
	x.xxx_hidden_IncludeMetadata = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *StreamOptions) SetCompression(v common.StreamCompression) {
	x.xxx_hidden_Compression = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *StreamOptions) SetSendHeartbeats(v bool) {
	x.xxx_hidden_SendHeartbeats = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 9)
}

func (x *StreamOptions) SetHeartbeatIntervalSeconds(v int32) {
	x.xxx_hidden_HeartbeatIntervalSeconds = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *StreamOptions) SetAutoRetry(v bool) {
	x.xxx_hidden_AutoRetry = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *StreamOptions) SetQos(v common.StreamQOS) {
	x.xxx_hidden_Qos = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *StreamOptions) HasIncludeHistorical() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *StreamOptions) HasBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *StreamOptions) HasBatchTimeoutMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *StreamOptions) HasIncludeMetadata() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *StreamOptions) HasCompression() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *StreamOptions) HasSendHeartbeats() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *StreamOptions) HasHeartbeatIntervalSeconds() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *StreamOptions) HasAutoRetry() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *StreamOptions) HasQos() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *StreamOptions) ClearIncludeHistorical() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IncludeHistorical = false
}

func (x *StreamOptions) ClearBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_BatchSize = 0
}

func (x *StreamOptions) ClearBatchTimeoutMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_BatchTimeoutMs = 0
}

func (x *StreamOptions) ClearIncludeMetadata() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_IncludeMetadata = false
}

func (x *StreamOptions) ClearCompression() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Compression = common.StreamCompression_STREAM_COMPRESSION_UNSPECIFIED
}

func (x *StreamOptions) ClearSendHeartbeats() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_SendHeartbeats = false
}

func (x *StreamOptions) ClearHeartbeatIntervalSeconds() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_HeartbeatIntervalSeconds = 0
}

func (x *StreamOptions) ClearAutoRetry() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_AutoRetry = false
}

func (x *StreamOptions) ClearQos() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Qos = common.StreamQOS_STREAM_QOS_UNSPECIFIED
}

type StreamOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to include historical data or only new metrics
	IncludeHistorical *bool
	// Maximum number of metrics to send per message
	BatchSize *int32
	// Maximum time to wait before sending a batch (milliseconds)
	BatchTimeoutMs *int32
	// Whether to include metadata with each metric
	IncludeMetadata *bool
	// Compression to use for the stream
	Compression *common.StreamCompression
	// Whether to send heartbeat messages during idle periods
	SendHeartbeats *bool
	// Heartbeat interval (seconds)
	HeartbeatIntervalSeconds *int32
	// Whether to automatically retry on errors
	AutoRetry *bool
	// Quality of service level
	Qos *common.StreamQOS
}

func (b0 StreamOptions_builder) Build() *StreamOptions {
	m0 := &StreamOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IncludeHistorical != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_IncludeHistorical = *b.IncludeHistorical
	}
	if b.BatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_BatchSize = *b.BatchSize
	}
	if b.BatchTimeoutMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_BatchTimeoutMs = *b.BatchTimeoutMs
	}
	if b.IncludeMetadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_IncludeMetadata = *b.IncludeMetadata
	}
	if b.Compression != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_Compression = *b.Compression
	}
	if b.SendHeartbeats != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 9)
		x.xxx_hidden_SendHeartbeats = *b.SendHeartbeats
	}
	if b.HeartbeatIntervalSeconds != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_HeartbeatIntervalSeconds = *b.HeartbeatIntervalSeconds
	}
	if b.AutoRetry != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_AutoRetry = *b.AutoRetry
	}
	if b.Qos != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_Qos = *b.Qos
	}
	return m0
}

var File_gcommon_v1_metrics_stream_options_proto protoreflect.FileDescriptor

const file_gcommon_v1_metrics_stream_options_proto_rawDesc = "" +
	"\n" +
	"'gcommon/v1/metrics/stream_options.proto\x12\x12gcommon.v1.metrics\x1a*gcommon/v1/common/stream_compression.proto\x1a\"gcommon/v1/common/stream_qos.proto\x1a!google/protobuf/go_features.proto\x1a\x1bbuf/validate/validate.proto\"\xcb\x03\n" +
	"\rStreamOptions\x12-\n" +
	"\x12include_historical\x18\x01 \x01(\bR\x11includeHistorical\x12&\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\tbatchSize\x121\n" +
	"\x10batch_timeout_ms\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02 \x00R\x0ebatchTimeoutMs\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\x12F\n" +
	"\vcompression\x18\x05 \x01(\x0e2$.gcommon.v1.common.StreamCompressionR\vcompression\x12'\n" +
	"\x0fsend_heartbeats\x18\x06 \x01(\bR\x0esendHeartbeats\x12E\n" +
	"\x1aheartbeat_interval_seconds\x18\a \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x18heartbeatIntervalSeconds\x12\x1d\n" +
	"\n" +
	"auto_retry\x18\b \x01(\bR\tautoRetry\x12.\n" +
	"\x03qos\x18\t \x01(\x0e2\x1c.gcommon.v1.common.StreamQOSR\x03qosB6Z,github.com/jdfalk/gcommon/sdks/go/v1/metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_metrics_stream_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_metrics_stream_options_proto_goTypes = []any{
	(*StreamOptions)(nil),         // 0: gcommon.v1.metrics.StreamOptions
	(common.StreamCompression)(0), // 1: gcommon.v1.common.StreamCompression
	(common.StreamQOS)(0),         // 2: gcommon.v1.common.StreamQOS
}
var file_gcommon_v1_metrics_stream_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.StreamOptions.compression:type_name -> gcommon.v1.common.StreamCompression
	2, // 1: gcommon.v1.metrics.StreamOptions.qos:type_name -> gcommon.v1.common.StreamQOS
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_gcommon_v1_metrics_stream_options_proto_init() }
func file_gcommon_v1_metrics_stream_options_proto_init() {
	if File_gcommon_v1_metrics_stream_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_metrics_stream_options_proto_rawDesc), len(file_gcommon_v1_metrics_stream_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_metrics_stream_options_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_metrics_stream_options_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_metrics_stream_options_proto_msgTypes,
	}.Build()
	File_gcommon_v1_metrics_stream_options_proto = out.File
	file_gcommon_v1_metrics_stream_options_proto_goTypes = nil
	file_gcommon_v1_metrics_stream_options_proto_depIdxs = nil
}
