// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/metrics/batch_options.proto

package metrics

import (
	common "github.com/jdfalk/gcommon/sdks/go/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchOptions configures how batch operations should be processed.
type MetricsBatchOptions struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ParallelProcessing    bool                   `protobuf:"varint,1,opt,name=parallel_processing,json=parallelProcessing"`
	xxx_hidden_MaxConcurrency        int32                  `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency"`
	xxx_hidden_Deduplicate           bool                   `protobuf:"varint,3,opt,name=deduplicate"`
	xxx_hidden_ReturnDetailedResults bool                   `protobuf:"varint,4,opt,name=return_detailed_results,json=returnDetailedResults"`
	xxx_hidden_TimeoutSeconds        int32                  `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds"`
	xxx_hidden_Transactional         bool                   `protobuf:"varint,6,opt,name=transactional"`
	xxx_hidden_Priority              common.BatchPriority   `protobuf:"varint,7,opt,name=priority,enum=gcommon.v1.common.BatchPriority"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *MetricsBatchOptions) Reset() {
	*x = MetricsBatchOptions{}
	mi := &file_gcommon_v1_metrics_batch_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsBatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsBatchOptions) ProtoMessage() {}

func (x *MetricsBatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_metrics_batch_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricsBatchOptions) GetParallelProcessing() bool {
	if x != nil {
		return x.xxx_hidden_ParallelProcessing
	}
	return false
}

func (x *MetricsBatchOptions) GetMaxConcurrency() int32 {
	if x != nil {
		return x.xxx_hidden_MaxConcurrency
	}
	return 0
}

func (x *MetricsBatchOptions) GetDeduplicate() bool {
	if x != nil {
		return x.xxx_hidden_Deduplicate
	}
	return false
}

func (x *MetricsBatchOptions) GetReturnDetailedResults() bool {
	if x != nil {
		return x.xxx_hidden_ReturnDetailedResults
	}
	return false
}

func (x *MetricsBatchOptions) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.xxx_hidden_TimeoutSeconds
	}
	return 0
}

func (x *MetricsBatchOptions) GetTransactional() bool {
	if x != nil {
		return x.xxx_hidden_Transactional
	}
	return false
}

func (x *MetricsBatchOptions) GetPriority() common.BatchPriority {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_Priority
		}
	}
	return common.BatchPriority(0)
}

func (x *MetricsBatchOptions) SetParallelProcessing(v bool) {
	x.xxx_hidden_ParallelProcessing = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *MetricsBatchOptions) SetMaxConcurrency(v int32) {
	x.xxx_hidden_MaxConcurrency = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *MetricsBatchOptions) SetDeduplicate(v bool) {
	x.xxx_hidden_Deduplicate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *MetricsBatchOptions) SetReturnDetailedResults(v bool) {
	x.xxx_hidden_ReturnDetailedResults = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *MetricsBatchOptions) SetTimeoutSeconds(v int32) {
	x.xxx_hidden_TimeoutSeconds = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *MetricsBatchOptions) SetTransactional(v bool) {
	x.xxx_hidden_Transactional = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *MetricsBatchOptions) SetPriority(v common.BatchPriority) {
	x.xxx_hidden_Priority = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *MetricsBatchOptions) HasParallelProcessing() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MetricsBatchOptions) HasMaxConcurrency() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MetricsBatchOptions) HasDeduplicate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *MetricsBatchOptions) HasReturnDetailedResults() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *MetricsBatchOptions) HasTimeoutSeconds() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *MetricsBatchOptions) HasTransactional() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *MetricsBatchOptions) HasPriority() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *MetricsBatchOptions) ClearParallelProcessing() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ParallelProcessing = false
}

func (x *MetricsBatchOptions) ClearMaxConcurrency() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxConcurrency = 0
}

func (x *MetricsBatchOptions) ClearDeduplicate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Deduplicate = false
}

func (x *MetricsBatchOptions) ClearReturnDetailedResults() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ReturnDetailedResults = false
}

func (x *MetricsBatchOptions) ClearTimeoutSeconds() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_TimeoutSeconds = 0
}

func (x *MetricsBatchOptions) ClearTransactional() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Transactional = false
}

func (x *MetricsBatchOptions) ClearPriority() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Priority = common.BatchPriority_BATCH_PRIORITY_UNSPECIFIED
}

type MetricsBatchOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to process metrics in parallel
	ParallelProcessing *bool
	// Maximum concurrent operations (if parallel processing is enabled)
	MaxConcurrency *int32
	// Whether to deduplicate metrics within the batch
	Deduplicate *bool
	// Whether to return detailed results for each metric
	ReturnDetailedResults *bool
	// Timeout for the entire batch operation (seconds)
	TimeoutSeconds *int32
	// Whether to enable transactional semantics (all or nothing)
	Transactional *bool
	// Priority level for the batch operation
	Priority *common.BatchPriority
}

func (b0 MetricsBatchOptions_builder) Build() *MetricsBatchOptions {
	m0 := &MetricsBatchOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ParallelProcessing != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_ParallelProcessing = *b.ParallelProcessing
	}
	if b.MaxConcurrency != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_MaxConcurrency = *b.MaxConcurrency
	}
	if b.Deduplicate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Deduplicate = *b.Deduplicate
	}
	if b.ReturnDetailedResults != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ReturnDetailedResults = *b.ReturnDetailedResults
	}
	if b.TimeoutSeconds != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_TimeoutSeconds = *b.TimeoutSeconds
	}
	if b.Transactional != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Transactional = *b.Transactional
	}
	if b.Priority != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Priority = *b.Priority
	}
	return m0
}

var File_gcommon_v1_metrics_batch_options_proto protoreflect.FileDescriptor

const file_gcommon_v1_metrics_batch_options_proto_rawDesc = "" +
	"\n" +
	"&gcommon/v1/metrics/batch_options.proto\x12\x12gcommon.v1.metrics\x1a&gcommon/v1/common/batch_priority.proto\x1a!google/protobuf/go_features.proto\"\xd6\x02\n" +
	"\x13MetricsBatchOptions\x12/\n" +
	"\x13parallel_processing\x18\x01 \x01(\bR\x12parallelProcessing\x12'\n" +
	"\x0fmax_concurrency\x18\x02 \x01(\x05R\x0emaxConcurrency\x12 \n" +
	"\vdeduplicate\x18\x03 \x01(\bR\vdeduplicate\x126\n" +
	"\x17return_detailed_results\x18\x04 \x01(\bR\x15returnDetailedResults\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\x12$\n" +
	"\rtransactional\x18\x06 \x01(\bR\rtransactional\x12<\n" +
	"\bpriority\x18\a \x01(\x0e2 .gcommon.v1.common.BatchPriorityR\bpriorityB6Z,github.com/jdfalk/gcommon/sdks/go/v1/metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_metrics_batch_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_metrics_batch_options_proto_goTypes = []any{
	(*MetricsBatchOptions)(nil), // 0: gcommon.v1.metrics.MetricsBatchOptions
	(common.BatchPriority)(0),   // 1: gcommon.v1.common.BatchPriority
}
var file_gcommon_v1_metrics_batch_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.MetricsBatchOptions.priority:type_name -> gcommon.v1.common.BatchPriority
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_metrics_batch_options_proto_init() }
func file_gcommon_v1_metrics_batch_options_proto_init() {
	if File_gcommon_v1_metrics_batch_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_metrics_batch_options_proto_rawDesc), len(file_gcommon_v1_metrics_batch_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_metrics_batch_options_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_metrics_batch_options_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_metrics_batch_options_proto_msgTypes,
	}.Build()
	File_gcommon_v1_metrics_batch_options_proto = out.File
	file_gcommon_v1_metrics_batch_options_proto_goTypes = nil
	file_gcommon_v1_metrics_batch_options_proto_depIdxs = nil
}
