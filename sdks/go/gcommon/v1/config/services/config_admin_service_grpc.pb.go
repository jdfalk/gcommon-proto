// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/config/services/config_admin_service.proto

package services

import (
	context "context"
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/config/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigAdminService_BackupConfig_FullMethodName     = "/gcommon.v1.config.ConfigAdminService/BackupConfig"
	ConfigAdminService_RestoreConfig_FullMethodName    = "/gcommon.v1.config.ConfigAdminService/RestoreConfig"
	ConfigAdminService_ImportConfig_FullMethodName     = "/gcommon.v1.config.ConfigAdminService/ImportConfig"
	ConfigAdminService_ExportConfig_FullMethodName     = "/gcommon.v1.config.ConfigAdminService/ExportConfig"
	ConfigAdminService_ReloadConfig_FullMethodName     = "/gcommon.v1.config.ConfigAdminService/ReloadConfig"
	ConfigAdminService_RollbackConfig_FullMethodName   = "/gcommon.v1.config.ConfigAdminService/RollbackConfig"
	ConfigAdminService_SetConfigSchema_FullMethodName  = "/gcommon.v1.config.ConfigAdminService/SetConfigSchema"
	ConfigAdminService_GetConfigHistory_FullMethodName = "/gcommon.v1.config.ConfigAdminService/GetConfigHistory"
	ConfigAdminService_GetConfigStats_FullMethodName   = "/gcommon.v1.config.ConfigAdminService/GetConfigStats"
	ConfigAdminService_HealthCheck_FullMethodName      = "/gcommon.v1.config.ConfigAdminService/HealthCheck"
	ConfigAdminService_UnwatchConfig_FullMethodName    = "/gcommon.v1.config.ConfigAdminService/UnwatchConfig"
)

// ConfigAdminServiceClient is the client API for ConfigAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// ConfigAdminService provides administrative configuration operations.
type ConfigAdminServiceClient interface {
	// Create a configuration backup
	BackupConfig(ctx context.Context, in *messages.BackupConfigRequest, opts ...grpc.CallOption) (*messages.ConfigBackup, error)
	// Restore configuration from a backup or restore point
	RestoreConfig(ctx context.Context, in *messages.RestoreConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Import configuration values
	ImportConfig(ctx context.Context, in *messages.ImportConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Export configuration snapshot
	ExportConfig(ctx context.Context, in *messages.ExportConfigRequest, opts ...grpc.CallOption) (*messages.ConfigSnapshot, error)
	// Reload configuration from persistent storage
	ReloadConfig(ctx context.Context, in *messages.ReloadConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Roll back configuration to a previous restore point
	RollbackConfig(ctx context.Context, in *messages.RollbackConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update configuration schema
	SetConfigSchema(ctx context.Context, in *messages.SetConfigSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve configuration change history
	GetConfigHistory(ctx context.Context, in *messages.GetConfigHistoryRequest, opts ...grpc.CallOption) (*messages.GetConfigHistoryResponse, error)
	// Retrieve configuration statistics
	GetConfigStats(ctx context.Context, in *messages.GetConfigStatsRequest, opts ...grpc.CallOption) (*messages.GetConfigStatsResponse, error)
	// Perform service health check
	HealthCheck(ctx context.Context, in *messages.ConfigHealthCheckRequest, opts ...grpc.CallOption) (*messages.ConfigHealthCheckResponse, error)
	// Stop watching configuration changes
	UnwatchConfig(ctx context.Context, in *messages.UnwatchConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigAdminServiceClient(cc grpc.ClientConnInterface) ConfigAdminServiceClient {
	return &configAdminServiceClient{cc}
}

func (c *configAdminServiceClient) BackupConfig(ctx context.Context, in *messages.BackupConfigRequest, opts ...grpc.CallOption) (*messages.ConfigBackup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ConfigBackup)
	err := c.cc.Invoke(ctx, ConfigAdminService_BackupConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) RestoreConfig(ctx context.Context, in *messages.RestoreConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_RestoreConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) ImportConfig(ctx context.Context, in *messages.ImportConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_ImportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) ExportConfig(ctx context.Context, in *messages.ExportConfigRequest, opts ...grpc.CallOption) (*messages.ConfigSnapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ConfigSnapshot)
	err := c.cc.Invoke(ctx, ConfigAdminService_ExportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) ReloadConfig(ctx context.Context, in *messages.ReloadConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_ReloadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) RollbackConfig(ctx context.Context, in *messages.RollbackConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_RollbackConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) SetConfigSchema(ctx context.Context, in *messages.SetConfigSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_SetConfigSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) GetConfigHistory(ctx context.Context, in *messages.GetConfigHistoryRequest, opts ...grpc.CallOption) (*messages.GetConfigHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetConfigHistoryResponse)
	err := c.cc.Invoke(ctx, ConfigAdminService_GetConfigHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) GetConfigStats(ctx context.Context, in *messages.GetConfigStatsRequest, opts ...grpc.CallOption) (*messages.GetConfigStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetConfigStatsResponse)
	err := c.cc.Invoke(ctx, ConfigAdminService_GetConfigStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) HealthCheck(ctx context.Context, in *messages.ConfigHealthCheckRequest, opts ...grpc.CallOption) (*messages.ConfigHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ConfigHealthCheckResponse)
	err := c.cc.Invoke(ctx, ConfigAdminService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configAdminServiceClient) UnwatchConfig(ctx context.Context, in *messages.UnwatchConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigAdminService_UnwatchConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigAdminServiceServer is the server API for ConfigAdminService service.
// All implementations must embed UnimplementedConfigAdminServiceServer
// for forward compatibility.
//
// *
// ConfigAdminService provides administrative configuration operations.
type ConfigAdminServiceServer interface {
	// Create a configuration backup
	BackupConfig(context.Context, *messages.BackupConfigRequest) (*messages.ConfigBackup, error)
	// Restore configuration from a backup or restore point
	RestoreConfig(context.Context, *messages.RestoreConfigRequest) (*emptypb.Empty, error)
	// Import configuration values
	ImportConfig(context.Context, *messages.ImportConfigRequest) (*emptypb.Empty, error)
	// Export configuration snapshot
	ExportConfig(context.Context, *messages.ExportConfigRequest) (*messages.ConfigSnapshot, error)
	// Reload configuration from persistent storage
	ReloadConfig(context.Context, *messages.ReloadConfigRequest) (*emptypb.Empty, error)
	// Roll back configuration to a previous restore point
	RollbackConfig(context.Context, *messages.RollbackConfigRequest) (*emptypb.Empty, error)
	// Update configuration schema
	SetConfigSchema(context.Context, *messages.SetConfigSchemaRequest) (*emptypb.Empty, error)
	// Retrieve configuration change history
	GetConfigHistory(context.Context, *messages.GetConfigHistoryRequest) (*messages.GetConfigHistoryResponse, error)
	// Retrieve configuration statistics
	GetConfigStats(context.Context, *messages.GetConfigStatsRequest) (*messages.GetConfigStatsResponse, error)
	// Perform service health check
	HealthCheck(context.Context, *messages.ConfigHealthCheckRequest) (*messages.ConfigHealthCheckResponse, error)
	// Stop watching configuration changes
	UnwatchConfig(context.Context, *messages.UnwatchConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigAdminServiceServer()
}

// UnimplementedConfigAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigAdminServiceServer struct{}

func (UnimplementedConfigAdminServiceServer) BackupConfig(context.Context, *messages.BackupConfigRequest) (*messages.ConfigBackup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) RestoreConfig(context.Context, *messages.RestoreConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) ImportConfig(context.Context, *messages.ImportConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) ExportConfig(context.Context, *messages.ExportConfigRequest) (*messages.ConfigSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) ReloadConfig(context.Context, *messages.ReloadConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) RollbackConfig(context.Context, *messages.RollbackConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) SetConfigSchema(context.Context, *messages.SetConfigSchemaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigSchema not implemented")
}
func (UnimplementedConfigAdminServiceServer) GetConfigHistory(context.Context, *messages.GetConfigHistoryRequest) (*messages.GetConfigHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigHistory not implemented")
}
func (UnimplementedConfigAdminServiceServer) GetConfigStats(context.Context, *messages.GetConfigStatsRequest) (*messages.GetConfigStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigStats not implemented")
}
func (UnimplementedConfigAdminServiceServer) HealthCheck(context.Context, *messages.ConfigHealthCheckRequest) (*messages.ConfigHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedConfigAdminServiceServer) UnwatchConfig(context.Context, *messages.UnwatchConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchConfig not implemented")
}
func (UnimplementedConfigAdminServiceServer) mustEmbedUnimplementedConfigAdminServiceServer() {}
func (UnimplementedConfigAdminServiceServer) testEmbeddedByValue()                            {}

// UnsafeConfigAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigAdminServiceServer will
// result in compilation errors.
type UnsafeConfigAdminServiceServer interface {
	mustEmbedUnimplementedConfigAdminServiceServer()
}

func RegisterConfigAdminServiceServer(s grpc.ServiceRegistrar, srv ConfigAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigAdminService_ServiceDesc, srv)
}

func _ConfigAdminService_BackupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.BackupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).BackupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_BackupConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).BackupConfig(ctx, req.(*messages.BackupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_RestoreConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RestoreConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).RestoreConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_RestoreConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).RestoreConfig(ctx, req.(*messages.RestoreConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_ImportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ImportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).ImportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_ImportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).ImportConfig(ctx, req.(*messages.ImportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_ExportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ExportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).ExportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_ExportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).ExportConfig(ctx, req.(*messages.ExportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ReloadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_ReloadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).ReloadConfig(ctx, req.(*messages.ReloadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_RollbackConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RollbackConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).RollbackConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_RollbackConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).RollbackConfig(ctx, req.(*messages.RollbackConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_SetConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SetConfigSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).SetConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_SetConfigSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).SetConfigSchema(ctx, req.(*messages.SetConfigSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_GetConfigHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetConfigHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).GetConfigHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_GetConfigHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).GetConfigHistory(ctx, req.(*messages.GetConfigHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_GetConfigStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetConfigStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).GetConfigStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_GetConfigStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).GetConfigStats(ctx, req.(*messages.GetConfigStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ConfigHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).HealthCheck(ctx, req.(*messages.ConfigHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigAdminService_UnwatchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UnwatchConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigAdminServiceServer).UnwatchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigAdminService_UnwatchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigAdminServiceServer).UnwatchConfig(ctx, req.(*messages.UnwatchConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigAdminService_ServiceDesc is the grpc.ServiceDesc for ConfigAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.config.ConfigAdminService",
	HandlerType: (*ConfigAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BackupConfig",
			Handler:    _ConfigAdminService_BackupConfig_Handler,
		},
		{
			MethodName: "RestoreConfig",
			Handler:    _ConfigAdminService_RestoreConfig_Handler,
		},
		{
			MethodName: "ImportConfig",
			Handler:    _ConfigAdminService_ImportConfig_Handler,
		},
		{
			MethodName: "ExportConfig",
			Handler:    _ConfigAdminService_ExportConfig_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _ConfigAdminService_ReloadConfig_Handler,
		},
		{
			MethodName: "RollbackConfig",
			Handler:    _ConfigAdminService_RollbackConfig_Handler,
		},
		{
			MethodName: "SetConfigSchema",
			Handler:    _ConfigAdminService_SetConfigSchema_Handler,
		},
		{
			MethodName: "GetConfigHistory",
			Handler:    _ConfigAdminService_GetConfigHistory_Handler,
		},
		{
			MethodName: "GetConfigStats",
			Handler:    _ConfigAdminService_GetConfigStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ConfigAdminService_HealthCheck_Handler,
		},
		{
			MethodName: "UnwatchConfig",
			Handler:    _ConfigAdminService_UnwatchConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/config/services/config_admin_service.proto",
}
