// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/queue/messages/batch_publish_request.proto

package queue

import (
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/common/messages"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Request to publish multiple messages to a queue in a single operation.
// Provides better performance for high-throughput scenarios.
type BatchPublishRequest struct {
	state                     protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_QueueName      *string                   `protobuf:"bytes,1,opt,name=queue_name,json=queueName"`
	xxx_hidden_Messages       *[]*QueueMessage          `protobuf:"bytes,2,rep,name=messages"`
	xxx_hidden_UseTransaction bool                      `protobuf:"varint,3,opt,name=use_transaction,json=useTransaction"`
	xxx_hidden_TimeoutMs      int32                     `protobuf:"varint,4,opt,name=timeout_ms,json=timeoutMs"`
	xxx_hidden_WaitForAll     bool                      `protobuf:"varint,5,opt,name=wait_for_all,json=waitForAll"`
	xxx_hidden_Metadata       *messages.RequestMetadata `protobuf:"bytes,6,opt,name=metadata"`
	xxx_hidden_MaxRetries     int32                     `protobuf:"varint,7,opt,name=max_retries,json=maxRetries"`
	xxx_hidden_BatchId        *string                   `protobuf:"bytes,8,opt,name=batch_id,json=batchId"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *BatchPublishRequest) Reset() {
	*x = BatchPublishRequest{}
	mi := &file_gcommon_v1_queue_messages_batch_publish_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPublishRequest) ProtoMessage() {}

func (x *BatchPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_queue_messages_batch_publish_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchPublishRequest) GetQueueName() string {
	if x != nil {
		if x.xxx_hidden_QueueName != nil {
			return *x.xxx_hidden_QueueName
		}
		return ""
	}
	return ""
}

func (x *BatchPublishRequest) GetMessages() []*QueueMessage {
	if x != nil {
		if x.xxx_hidden_Messages != nil {
			return *x.xxx_hidden_Messages
		}
	}
	return nil
}

func (x *BatchPublishRequest) GetUseTransaction() bool {
	if x != nil {
		return x.xxx_hidden_UseTransaction
	}
	return false
}

func (x *BatchPublishRequest) GetTimeoutMs() int32 {
	if x != nil {
		return x.xxx_hidden_TimeoutMs
	}
	return 0
}

func (x *BatchPublishRequest) GetWaitForAll() bool {
	if x != nil {
		return x.xxx_hidden_WaitForAll
	}
	return false
}

func (x *BatchPublishRequest) GetMetadata() *messages.RequestMetadata {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *BatchPublishRequest) GetMaxRetries() int32 {
	if x != nil {
		return x.xxx_hidden_MaxRetries
	}
	return 0
}

func (x *BatchPublishRequest) GetBatchId() string {
	if x != nil {
		if x.xxx_hidden_BatchId != nil {
			return *x.xxx_hidden_BatchId
		}
		return ""
	}
	return ""
}

func (x *BatchPublishRequest) SetQueueName(v string) {
	x.xxx_hidden_QueueName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *BatchPublishRequest) SetMessages(v []*QueueMessage) {
	x.xxx_hidden_Messages = &v
}

func (x *BatchPublishRequest) SetUseTransaction(v bool) {
	x.xxx_hidden_UseTransaction = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *BatchPublishRequest) SetTimeoutMs(v int32) {
	x.xxx_hidden_TimeoutMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *BatchPublishRequest) SetWaitForAll(v bool) {
	x.xxx_hidden_WaitForAll = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *BatchPublishRequest) SetMetadata(v *messages.RequestMetadata) {
	x.xxx_hidden_Metadata = v
}

func (x *BatchPublishRequest) SetMaxRetries(v int32) {
	x.xxx_hidden_MaxRetries = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *BatchPublishRequest) SetBatchId(v string) {
	x.xxx_hidden_BatchId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *BatchPublishRequest) HasQueueName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchPublishRequest) HasUseTransaction() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchPublishRequest) HasTimeoutMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BatchPublishRequest) HasWaitForAll() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BatchPublishRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *BatchPublishRequest) HasMaxRetries() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *BatchPublishRequest) HasBatchId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *BatchPublishRequest) ClearQueueName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_QueueName = nil
}

func (x *BatchPublishRequest) ClearUseTransaction() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UseTransaction = false
}

func (x *BatchPublishRequest) ClearTimeoutMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_TimeoutMs = 0
}

func (x *BatchPublishRequest) ClearWaitForAll() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_WaitForAll = false
}

func (x *BatchPublishRequest) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

func (x *BatchPublishRequest) ClearMaxRetries() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_MaxRetries = 0
}

func (x *BatchPublishRequest) ClearBatchId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_BatchId = nil
}

type BatchPublishRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Queue name to publish messages to
	QueueName *string
	// Messages to publish
	Messages []*QueueMessage
	// Whether to use a transaction for the batch
	UseTransaction *bool
	// Timeout for the batch operation (milliseconds)
	TimeoutMs *int32
	// Whether to wait for acknowledgment from all brokers
	WaitForAll *bool
	// Request metadata for tracing and correlation
	Metadata *messages.RequestMetadata
	// Maximum number of retries for failed messages
	MaxRetries *int32
	// Batch ID for tracking (optional)
	BatchId *string
}

func (b0 BatchPublishRequest_builder) Build() *BatchPublishRequest {
	m0 := &BatchPublishRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.QueueName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_QueueName = b.QueueName
	}
	x.xxx_hidden_Messages = &b.Messages
	if b.UseTransaction != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_UseTransaction = *b.UseTransaction
	}
	if b.TimeoutMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_TimeoutMs = *b.TimeoutMs
	}
	if b.WaitForAll != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_WaitForAll = *b.WaitForAll
	}
	x.xxx_hidden_Metadata = b.Metadata
	if b.MaxRetries != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_MaxRetries = *b.MaxRetries
	}
	if b.BatchId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_BatchId = b.BatchId
	}
	return m0
}

var File_gcommon_v1_queue_messages_batch_publish_request_proto protoreflect.FileDescriptor

const file_gcommon_v1_queue_messages_batch_publish_request_proto_rawDesc = "" +
	"\n" +
	"5gcommon/v1/queue/messages/batch_publish_request.proto\x12\x10gcommon.v1.queue\x1a1gcommon/v1/common/messages/request_metadata.proto\x1a-gcommon/v1/queue/messages/queue_message.proto\x1a!google/protobuf/go_features.proto\"\xd6\x02\n" +
	"\x13BatchPublishRequest\x12\x1d\n" +
	"\n" +
	"queue_name\x18\x01 \x01(\tR\tqueueName\x12:\n" +
	"\bmessages\x18\x02 \x03(\v2\x1e.gcommon.v1.queue.QueueMessageR\bmessages\x12'\n" +
	"\x0fuse_transaction\x18\x03 \x01(\bR\x0euseTransaction\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x04 \x01(\x05R\ttimeoutMs\x12 \n" +
	"\fwait_for_all\x18\x05 \x01(\bR\n" +
	"waitForAll\x12>\n" +
	"\bmetadata\x18\x06 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12\x1f\n" +
	"\vmax_retries\x18\a \x01(\x05R\n" +
	"maxRetries\x12\x19\n" +
	"\bbatch_id\x18\b \x01(\tR\abatchIdB-Z#github.com/jdfalk/gcommon/pkg/queue\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_queue_messages_batch_publish_request_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_queue_messages_batch_publish_request_proto_goTypes = []any{
	(*BatchPublishRequest)(nil),      // 0: gcommon.v1.queue.BatchPublishRequest
	(*QueueMessage)(nil),             // 1: gcommon.v1.queue.QueueMessage
	(*messages.RequestMetadata)(nil), // 2: gcommon.v1.common.RequestMetadata
}
var file_gcommon_v1_queue_messages_batch_publish_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.BatchPublishRequest.messages:type_name -> gcommon.v1.queue.QueueMessage
	2, // 1: gcommon.v1.queue.BatchPublishRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_gcommon_v1_queue_messages_batch_publish_request_proto_init() }
func file_gcommon_v1_queue_messages_batch_publish_request_proto_init() {
	if File_gcommon_v1_queue_messages_batch_publish_request_proto != nil {
		return
	}
	file_gcommon_v1_queue_messages_queue_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_queue_messages_batch_publish_request_proto_rawDesc), len(file_gcommon_v1_queue_messages_batch_publish_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_queue_messages_batch_publish_request_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_queue_messages_batch_publish_request_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_queue_messages_batch_publish_request_proto_msgTypes,
	}.Build()
	File_gcommon_v1_queue_messages_batch_publish_request_proto = out.File
	file_gcommon_v1_queue_messages_batch_publish_request_proto_goTypes = nil
	file_gcommon_v1_queue_messages_batch_publish_request_proto_depIdxs = nil
}
