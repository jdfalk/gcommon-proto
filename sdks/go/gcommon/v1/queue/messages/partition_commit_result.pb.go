// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/queue/messages/partition_commit_result.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionCommitResult struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PartitionId       int32                  `protobuf:"varint,1,opt,name=partition_id,json=partitionId"`
	xxx_hidden_Success           bool                   `protobuf:"varint,2,opt,name=success"`
	xxx_hidden_CommittedOffset   int64                  `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset"`
	xxx_hidden_PreviousOffset    int64                  `protobuf:"varint,4,opt,name=previous_offset,json=previousOffset"`
	xxx_hidden_ErrorMessage      *string                `protobuf:"bytes,5,opt,name=error_message,json=errorMessage"`
	xxx_hidden_ErrorCode         *string                `protobuf:"bytes,6,opt,name=error_code,json=errorCode"`
	xxx_hidden_CommitTimestamp   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=commit_timestamp,json=commitTimestamp"`
	xxx_hidden_PartitionMetadata map[string]string      `protobuf:"bytes,8,rep,name=partition_metadata,json=partitionMetadata" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PartitionCommitResult) Reset() {
	*x = PartitionCommitResult{}
	mi := &file_gcommon_v1_queue_messages_partition_commit_result_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionCommitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionCommitResult) ProtoMessage() {}

func (x *PartitionCommitResult) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_queue_messages_partition_commit_result_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PartitionCommitResult) GetPartitionId() int32 {
	if x != nil {
		return x.xxx_hidden_PartitionId
	}
	return 0
}

func (x *PartitionCommitResult) GetSuccess() bool {
	if x != nil {
		return x.xxx_hidden_Success
	}
	return false
}

func (x *PartitionCommitResult) GetCommittedOffset() int64 {
	if x != nil {
		return x.xxx_hidden_CommittedOffset
	}
	return 0
}

func (x *PartitionCommitResult) GetPreviousOffset() int64 {
	if x != nil {
		return x.xxx_hidden_PreviousOffset
	}
	return 0
}

func (x *PartitionCommitResult) GetErrorMessage() string {
	if x != nil {
		if x.xxx_hidden_ErrorMessage != nil {
			return *x.xxx_hidden_ErrorMessage
		}
		return ""
	}
	return ""
}

func (x *PartitionCommitResult) GetErrorCode() string {
	if x != nil {
		if x.xxx_hidden_ErrorCode != nil {
			return *x.xxx_hidden_ErrorCode
		}
		return ""
	}
	return ""
}

func (x *PartitionCommitResult) GetCommitTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CommitTimestamp
	}
	return nil
}

func (x *PartitionCommitResult) GetPartitionMetadata() map[string]string {
	if x != nil {
		return x.xxx_hidden_PartitionMetadata
	}
	return nil
}

func (x *PartitionCommitResult) SetPartitionId(v int32) {
	x.xxx_hidden_PartitionId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *PartitionCommitResult) SetSuccess(v bool) {
	x.xxx_hidden_Success = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *PartitionCommitResult) SetCommittedOffset(v int64) {
	x.xxx_hidden_CommittedOffset = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *PartitionCommitResult) SetPreviousOffset(v int64) {
	x.xxx_hidden_PreviousOffset = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *PartitionCommitResult) SetErrorMessage(v string) {
	x.xxx_hidden_ErrorMessage = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *PartitionCommitResult) SetErrorCode(v string) {
	x.xxx_hidden_ErrorCode = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *PartitionCommitResult) SetCommitTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_CommitTimestamp = v
}

func (x *PartitionCommitResult) SetPartitionMetadata(v map[string]string) {
	x.xxx_hidden_PartitionMetadata = v
}

func (x *PartitionCommitResult) HasPartitionId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PartitionCommitResult) HasSuccess() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *PartitionCommitResult) HasCommittedOffset() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PartitionCommitResult) HasPreviousOffset() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *PartitionCommitResult) HasErrorMessage() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *PartitionCommitResult) HasErrorCode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *PartitionCommitResult) HasCommitTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CommitTimestamp != nil
}

func (x *PartitionCommitResult) ClearPartitionId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PartitionId = 0
}

func (x *PartitionCommitResult) ClearSuccess() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Success = false
}

func (x *PartitionCommitResult) ClearCommittedOffset() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CommittedOffset = 0
}

func (x *PartitionCommitResult) ClearPreviousOffset() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_PreviousOffset = 0
}

func (x *PartitionCommitResult) ClearErrorMessage() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ErrorMessage = nil
}

func (x *PartitionCommitResult) ClearErrorCode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_ErrorCode = nil
}

func (x *PartitionCommitResult) ClearCommitTimestamp() {
	x.xxx_hidden_CommitTimestamp = nil
}

type PartitionCommitResult_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Partition ID
	PartitionId *int32
	// Success status for this partition
	Success *bool
	// Committed offset value
	CommittedOffset *int64
	// Previous offset before commit
	PreviousOffset *int64
	// Error message if commit failed for this partition
	ErrorMessage *string
	// Error code for this partition
	ErrorCode *string
	// Timestamp when this offset was committed
	CommitTimestamp *timestamppb.Timestamp
	// Metadata for this partition commit
	PartitionMetadata map[string]string
}

func (b0 PartitionCommitResult_builder) Build() *PartitionCommitResult {
	m0 := &PartitionCommitResult{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PartitionId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_PartitionId = *b.PartitionId
	}
	if b.Success != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_Success = *b.Success
	}
	if b.CommittedOffset != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_CommittedOffset = *b.CommittedOffset
	}
	if b.PreviousOffset != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_PreviousOffset = *b.PreviousOffset
	}
	if b.ErrorMessage != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_ErrorMessage = b.ErrorMessage
	}
	if b.ErrorCode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_ErrorCode = b.ErrorCode
	}
	x.xxx_hidden_CommitTimestamp = b.CommitTimestamp
	x.xxx_hidden_PartitionMetadata = b.PartitionMetadata
	return m0
}

var File_gcommon_v1_queue_messages_partition_commit_result_proto protoreflect.FileDescriptor

const file_gcommon_v1_queue_messages_partition_commit_result_proto_rawDesc = "" +
	"\n" +
	"7gcommon/v1/queue/messages/partition_commit_result.proto\x12\x10gcommon.v1.queue\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe8\x03\n" +
	"\x15PartitionCommitResult\x12!\n" +
	"\fpartition_id\x18\x01 \x01(\x05R\vpartitionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12)\n" +
	"\x10committed_offset\x18\x03 \x01(\x03R\x0fcommittedOffset\x12'\n" +
	"\x0fprevious_offset\x18\x04 \x01(\x03R\x0epreviousOffset\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_code\x18\x06 \x01(\tR\terrorCode\x12E\n" +
	"\x10commit_timestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0fcommitTimestamp\x12m\n" +
	"\x12partition_metadata\x18\b \x03(\v2>.gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntryR\x11partitionMetadata\x1aD\n" +
	"\x16PartitionMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xd9\x01\n" +
	"\x14com.gcommon.v1.queueB\x1aPartitionCommitResultProtoP\x01Z;github.com/jdfalk/gcommon/sdks/go/gcommon/v1/queue/messages\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queue\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_queue_messages_partition_commit_result_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gcommon_v1_queue_messages_partition_commit_result_proto_goTypes = []any{
	(*PartitionCommitResult)(nil), // 0: gcommon.v1.queue.PartitionCommitResult
	nil,                           // 1: gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntry
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_gcommon_v1_queue_messages_partition_commit_result_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.queue.PartitionCommitResult.commit_timestamp:type_name -> google.protobuf.Timestamp
	1, // 1: gcommon.v1.queue.PartitionCommitResult.partition_metadata:type_name -> gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_gcommon_v1_queue_messages_partition_commit_result_proto_init() }
func file_gcommon_v1_queue_messages_partition_commit_result_proto_init() {
	if File_gcommon_v1_queue_messages_partition_commit_result_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_queue_messages_partition_commit_result_proto_rawDesc), len(file_gcommon_v1_queue_messages_partition_commit_result_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_queue_messages_partition_commit_result_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_queue_messages_partition_commit_result_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_queue_messages_partition_commit_result_proto_msgTypes,
	}.Build()
	File_gcommon_v1_queue_messages_partition_commit_result_proto = out.File
	file_gcommon_v1_queue_messages_partition_commit_result_proto_goTypes = nil
	file_gcommon_v1_queue_messages_partition_commit_result_proto_depIdxs = nil
}
