// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/queue/services/queue_monitoring_service.proto

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueueMonitoringService_GetClusterInfo_FullMethodName = "/gcommon.v1.queue.QueueMonitoringService/GetClusterInfo"
	QueueMonitoringService_GetQueueHealth_FullMethodName = "/gcommon.v1.queue.QueueMonitoringService/GetQueueHealth"
	QueueMonitoringService_GetQueueStats_FullMethodName  = "/gcommon.v1.queue.QueueMonitoringService/GetQueueStats"
	QueueMonitoringService_StreamMetrics_FullMethodName  = "/gcommon.v1.queue.QueueMonitoringService/StreamMetrics"
)

// QueueMonitoringServiceClient is the client API for QueueMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueMonitoringServiceClient interface {
	// Get information about the queue cluster
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	// Get health status of all queues
	GetQueueHealth(ctx context.Context, in *GetQueueHealthRequest, opts ...grpc.CallOption) (*GetQueueHealthResponse, error)
	// Get detailed statistics for a specific queue
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*QueueStatsResponse, error)
	// Get real-time metrics stream
	StreamMetrics(ctx context.Context, in *QueueStreamMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MetricsEvent], error)
}

type queueMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueMonitoringServiceClient(cc grpc.ClientConnInterface) QueueMonitoringServiceClient {
	return &queueMonitoringServiceClient{cc}
}

func (c *queueMonitoringServiceClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, QueueMonitoringService_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueMonitoringServiceClient) GetQueueHealth(ctx context.Context, in *GetQueueHealthRequest, opts ...grpc.CallOption) (*GetQueueHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueHealthResponse)
	err := c.cc.Invoke(ctx, QueueMonitoringService_GetQueueHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueMonitoringServiceClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*QueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueStatsResponse)
	err := c.cc.Invoke(ctx, QueueMonitoringService_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueMonitoringServiceClient) StreamMetrics(ctx context.Context, in *QueueStreamMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MetricsEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueueMonitoringService_ServiceDesc.Streams[0], QueueMonitoringService_StreamMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueueStreamMetricsRequest, MetricsEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueueMonitoringService_StreamMetricsClient = grpc.ServerStreamingClient[MetricsEvent]

// QueueMonitoringServiceServer is the server API for QueueMonitoringService service.
// All implementations must embed UnimplementedQueueMonitoringServiceServer
// for forward compatibility.
type QueueMonitoringServiceServer interface {
	// Get information about the queue cluster
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	// Get health status of all queues
	GetQueueHealth(context.Context, *GetQueueHealthRequest) (*GetQueueHealthResponse, error)
	// Get detailed statistics for a specific queue
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*QueueStatsResponse, error)
	// Get real-time metrics stream
	StreamMetrics(*QueueStreamMetricsRequest, grpc.ServerStreamingServer[MetricsEvent]) error
	mustEmbedUnimplementedQueueMonitoringServiceServer()
}

// UnimplementedQueueMonitoringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueMonitoringServiceServer struct{}

func (UnimplementedQueueMonitoringServiceServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedQueueMonitoringServiceServer) GetQueueHealth(context.Context, *GetQueueHealthRequest) (*GetQueueHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueHealth not implemented")
}
func (UnimplementedQueueMonitoringServiceServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*QueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedQueueMonitoringServiceServer) StreamMetrics(*QueueStreamMetricsRequest, grpc.ServerStreamingServer[MetricsEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMetrics not implemented")
}
func (UnimplementedQueueMonitoringServiceServer) mustEmbedUnimplementedQueueMonitoringServiceServer() {
}
func (UnimplementedQueueMonitoringServiceServer) testEmbeddedByValue() {}

// UnsafeQueueMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueMonitoringServiceServer will
// result in compilation errors.
type UnsafeQueueMonitoringServiceServer interface {
	mustEmbedUnimplementedQueueMonitoringServiceServer()
}

func RegisterQueueMonitoringServiceServer(s grpc.ServiceRegistrar, srv QueueMonitoringServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueueMonitoringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueueMonitoringService_ServiceDesc, srv)
}

func _QueueMonitoringService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueMonitoringServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueMonitoringService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueMonitoringServiceServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueMonitoringService_GetQueueHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueMonitoringServiceServer).GetQueueHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueMonitoringService_GetQueueHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueMonitoringServiceServer).GetQueueHealth(ctx, req.(*GetQueueHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueMonitoringService_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueMonitoringServiceServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueMonitoringService_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueMonitoringServiceServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueMonitoringService_StreamMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueueStreamMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueueMonitoringServiceServer).StreamMetrics(m, &grpc.GenericServerStream[QueueStreamMetricsRequest, MetricsEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueueMonitoringService_StreamMetricsServer = grpc.ServerStreamingServer[MetricsEvent]

// QueueMonitoringService_ServiceDesc is the grpc.ServiceDesc for QueueMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.queue.QueueMonitoringService",
	HandlerType: (*QueueMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterInfo",
			Handler:    _QueueMonitoringService_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetQueueHealth",
			Handler:    _QueueMonitoringService_GetQueueHealth_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _QueueMonitoringService_GetQueueStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMetrics",
			Handler:       _QueueMonitoringService_StreamMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gcommon/v1/queue/services/queue_monitoring_service.proto",
}
