// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/metrics/messages/sample_rate.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SampleRate represents different sampling rates for metrics collection
type SampleRate int32

const (
	// Unspecified sample rate
	SampleRate_SAMPLE_RATE_UNSPECIFIED SampleRate = 0
	// Collect every sample (100%)
	SampleRate_SAMPLE_RATE_FULL SampleRate = 1
	// Sample at 50% rate
	SampleRate_SAMPLE_RATE_HALF SampleRate = 2
	// Sample at 25% rate
	SampleRate_SAMPLE_RATE_QUARTER SampleRate = 3
	// Sample at 10% rate
	SampleRate_SAMPLE_RATE_TENTH SampleRate = 4
	// Sample at 5% rate
	SampleRate_SAMPLE_RATE_TWENTIETH SampleRate = 5
	// Sample at 1% rate
	SampleRate_SAMPLE_RATE_HUNDREDTH SampleRate = 6
	// Sample at 0.1% rate
	SampleRate_SAMPLE_RATE_THOUSANDTH SampleRate = 7
	// Adaptive sampling (dynamic rate)
	SampleRate_SAMPLE_RATE_ADAPTIVE SampleRate = 8
	// Custom sampling rate
	SampleRate_SAMPLE_RATE_CUSTOM SampleRate = 9
)

// Enum value maps for SampleRate.
var (
	SampleRate_name = map[int32]string{
		0: "SAMPLE_RATE_UNSPECIFIED",
		1: "SAMPLE_RATE_FULL",
		2: "SAMPLE_RATE_HALF",
		3: "SAMPLE_RATE_QUARTER",
		4: "SAMPLE_RATE_TENTH",
		5: "SAMPLE_RATE_TWENTIETH",
		6: "SAMPLE_RATE_HUNDREDTH",
		7: "SAMPLE_RATE_THOUSANDTH",
		8: "SAMPLE_RATE_ADAPTIVE",
		9: "SAMPLE_RATE_CUSTOM",
	}
	SampleRate_value = map[string]int32{
		"SAMPLE_RATE_UNSPECIFIED": 0,
		"SAMPLE_RATE_FULL":        1,
		"SAMPLE_RATE_HALF":        2,
		"SAMPLE_RATE_QUARTER":     3,
		"SAMPLE_RATE_TENTH":       4,
		"SAMPLE_RATE_TWENTIETH":   5,
		"SAMPLE_RATE_HUNDREDTH":   6,
		"SAMPLE_RATE_THOUSANDTH":  7,
		"SAMPLE_RATE_ADAPTIVE":    8,
		"SAMPLE_RATE_CUSTOM":      9,
	}
)

func (x SampleRate) Enum() *SampleRate {
	p := new(SampleRate)
	*p = x
	return p
}

func (x SampleRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleRate) Descriptor() protoreflect.EnumDescriptor {
	return file_gcommon_v1_metrics_messages_sample_rate_proto_enumTypes[0].Descriptor()
}

func (SampleRate) Type() protoreflect.EnumType {
	return &file_gcommon_v1_metrics_messages_sample_rate_proto_enumTypes[0]
}

func (x SampleRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

var File_gcommon_v1_metrics_messages_sample_rate_proto protoreflect.FileDescriptor

const file_gcommon_v1_metrics_messages_sample_rate_proto_rawDesc = "" +
	"\n" +
	"-gcommon/v1/metrics/messages/sample_rate.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto*\x89\x02\n" +
	"\n" +
	"SampleRate\x12\x1b\n" +
	"\x17SAMPLE_RATE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10SAMPLE_RATE_FULL\x10\x01\x12\x14\n" +
	"\x10SAMPLE_RATE_HALF\x10\x02\x12\x17\n" +
	"\x13SAMPLE_RATE_QUARTER\x10\x03\x12\x15\n" +
	"\x11SAMPLE_RATE_TENTH\x10\x04\x12\x19\n" +
	"\x15SAMPLE_RATE_TWENTIETH\x10\x05\x12\x19\n" +
	"\x15SAMPLE_RATE_HUNDREDTH\x10\x06\x12\x1a\n" +
	"\x16SAMPLE_RATE_THOUSANDTH\x10\a\x12\x18\n" +
	"\x14SAMPLE_RATE_ADAPTIVE\x10\b\x12\x16\n" +
	"\x12SAMPLE_RATE_CUSTOM\x10\tB\xda\x01\n" +
	"\x16com.gcommon.v1.metricsB\x0fSampleRateProtoP\x01Z=github.com/jdfalk/gcommon/sdks/go/gcommon/v1/metrics/messages\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_metrics_messages_sample_rate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gcommon_v1_metrics_messages_sample_rate_proto_goTypes = []any{
	(SampleRate)(0), // 0: gcommon.v1.metrics.SampleRate
}
var file_gcommon_v1_metrics_messages_sample_rate_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gcommon_v1_metrics_messages_sample_rate_proto_init() }
func file_gcommon_v1_metrics_messages_sample_rate_proto_init() {
	if File_gcommon_v1_metrics_messages_sample_rate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_metrics_messages_sample_rate_proto_rawDesc), len(file_gcommon_v1_metrics_messages_sample_rate_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_metrics_messages_sample_rate_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_metrics_messages_sample_rate_proto_depIdxs,
		EnumInfos:         file_gcommon_v1_metrics_messages_sample_rate_proto_enumTypes,
	}.Build()
	File_gcommon_v1_metrics_messages_sample_rate_proto = out.File
	file_gcommon_v1_metrics_messages_sample_rate_proto_goTypes = nil
	file_gcommon_v1_metrics_messages_sample_rate_proto_depIdxs = nil
}
