// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/metrics/metrics_management_service.proto

package metrics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsManagementService_CreateMetricsProvider_FullMethodName = "/gcommon.v1.metrics.MetricsManagementService/CreateMetricsProvider"
	MetricsManagementService_UpdateMetricsProvider_FullMethodName = "/gcommon.v1.metrics.MetricsManagementService/UpdateMetricsProvider"
	MetricsManagementService_DeleteMetricsProvider_FullMethodName = "/gcommon.v1.metrics.MetricsManagementService/DeleteMetricsProvider"
	MetricsManagementService_ListMetricsProviders_FullMethodName  = "/gcommon.v1.metrics.MetricsManagementService/ListMetricsProviders"
	MetricsManagementService_GetProviderStats_FullMethodName      = "/gcommon.v1.metrics.MetricsManagementService/GetProviderStats"
)

// MetricsManagementServiceClient is the client API for MetricsManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// MetricsManagementService provides administrative capabilities for metrics providers.
// This service handles provider lifecycle, configuration, and monitoring.
type MetricsManagementServiceClient interface {
	// Create a new metrics provider
	CreateMetricsProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error)
	// Update an existing metrics provider configuration
	UpdateMetricsProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error)
	// Delete a metrics provider and optionally its data
	DeleteMetricsProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	// List all configured metrics providers
	ListMetricsProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// Get statistics and status for a specific provider
	GetProviderStats(ctx context.Context, in *GetProviderStatsRequest, opts ...grpc.CallOption) (*GetProviderStatsResponse, error)
}

type metricsManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsManagementServiceClient(cc grpc.ClientConnInterface) MetricsManagementServiceClient {
	return &metricsManagementServiceClient{cc}
}

func (c *metricsManagementServiceClient) CreateMetricsProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*CreateProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProviderResponse)
	err := c.cc.Invoke(ctx, MetricsManagementService_CreateMetricsProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsManagementServiceClient) UpdateMetricsProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProviderResponse)
	err := c.cc.Invoke(ctx, MetricsManagementService_UpdateMetricsProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsManagementServiceClient) DeleteMetricsProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, MetricsManagementService_DeleteMetricsProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsManagementServiceClient) ListMetricsProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, MetricsManagementService_ListMetricsProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsManagementServiceClient) GetProviderStats(ctx context.Context, in *GetProviderStatsRequest, opts ...grpc.CallOption) (*GetProviderStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderStatsResponse)
	err := c.cc.Invoke(ctx, MetricsManagementService_GetProviderStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsManagementServiceServer is the server API for MetricsManagementService service.
// All implementations must embed UnimplementedMetricsManagementServiceServer
// for forward compatibility.
//
// *
// MetricsManagementService provides administrative capabilities for metrics providers.
// This service handles provider lifecycle, configuration, and monitoring.
type MetricsManagementServiceServer interface {
	// Create a new metrics provider
	CreateMetricsProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error)
	// Update an existing metrics provider configuration
	UpdateMetricsProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
	// Delete a metrics provider and optionally its data
	DeleteMetricsProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	// List all configured metrics providers
	ListMetricsProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// Get statistics and status for a specific provider
	GetProviderStats(context.Context, *GetProviderStatsRequest) (*GetProviderStatsResponse, error)
	mustEmbedUnimplementedMetricsManagementServiceServer()
}

// UnimplementedMetricsManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsManagementServiceServer struct{}

func (UnimplementedMetricsManagementServiceServer) CreateMetricsProvider(context.Context, *CreateProviderRequest) (*CreateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetricsProvider not implemented")
}
func (UnimplementedMetricsManagementServiceServer) UpdateMetricsProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsProvider not implemented")
}
func (UnimplementedMetricsManagementServiceServer) DeleteMetricsProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetricsProvider not implemented")
}
func (UnimplementedMetricsManagementServiceServer) ListMetricsProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricsProviders not implemented")
}
func (UnimplementedMetricsManagementServiceServer) GetProviderStats(context.Context, *GetProviderStatsRequest) (*GetProviderStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderStats not implemented")
}
func (UnimplementedMetricsManagementServiceServer) mustEmbedUnimplementedMetricsManagementServiceServer() {
}
func (UnimplementedMetricsManagementServiceServer) testEmbeddedByValue() {}

// UnsafeMetricsManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsManagementServiceServer will
// result in compilation errors.
type UnsafeMetricsManagementServiceServer interface {
	mustEmbedUnimplementedMetricsManagementServiceServer()
}

func RegisterMetricsManagementServiceServer(s grpc.ServiceRegistrar, srv MetricsManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricsManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsManagementService_ServiceDesc, srv)
}

func _MetricsManagementService_CreateMetricsProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsManagementServiceServer).CreateMetricsProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsManagementService_CreateMetricsProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsManagementServiceServer).CreateMetricsProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsManagementService_UpdateMetricsProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsManagementServiceServer).UpdateMetricsProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsManagementService_UpdateMetricsProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsManagementServiceServer).UpdateMetricsProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsManagementService_DeleteMetricsProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsManagementServiceServer).DeleteMetricsProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsManagementService_DeleteMetricsProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsManagementServiceServer).DeleteMetricsProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsManagementService_ListMetricsProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsManagementServiceServer).ListMetricsProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsManagementService_ListMetricsProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsManagementServiceServer).ListMetricsProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsManagementService_GetProviderStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsManagementServiceServer).GetProviderStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsManagementService_GetProviderStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsManagementServiceServer).GetProviderStats(ctx, req.(*GetProviderStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsManagementService_ServiceDesc is the grpc.ServiceDesc for MetricsManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.metrics.MetricsManagementService",
	HandlerType: (*MetricsManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMetricsProvider",
			Handler:    _MetricsManagementService_CreateMetricsProvider_Handler,
		},
		{
			MethodName: "UpdateMetricsProvider",
			Handler:    _MetricsManagementService_UpdateMetricsProvider_Handler,
		},
		{
			MethodName: "DeleteMetricsProvider",
			Handler:    _MetricsManagementService_DeleteMetricsProvider_Handler,
		},
		{
			MethodName: "ListMetricsProviders",
			Handler:    _MetricsManagementService_ListMetricsProviders_Handler,
		},
		{
			MethodName: "GetProviderStats",
			Handler:    _MetricsManagementService_GetProviderStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/metrics/metrics_management_service.proto",
}
