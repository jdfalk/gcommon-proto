// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/media/media_processing_service.proto

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaProcessingService_TranscodeMedia_FullMethodName      = "/gcommon.v1.media.MediaProcessingService/TranscodeMedia"
	MediaProcessingService_AnalyzeMedia_FullMethodName        = "/gcommon.v1.media.MediaProcessingService/AnalyzeMedia"
	MediaProcessingService_ExtractAudio_FullMethodName        = "/gcommon.v1.media.MediaProcessingService/ExtractAudio"
	MediaProcessingService_ExtractSubtitles_FullMethodName    = "/gcommon.v1.media.MediaProcessingService/ExtractSubtitles"
	MediaProcessingService_GetProcessingStatus_FullMethodName = "/gcommon.v1.media.MediaProcessingService/GetProcessingStatus"
)

// MediaProcessingServiceClient is the client API for MediaProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// MediaProcessingService provides media transcoding, analysis, and
// content extraction operations.
type MediaProcessingServiceClient interface {
	// Transcode media to different formats
	TranscodeMedia(ctx context.Context, in *TranscodeMediaRequest, opts ...grpc.CallOption) (*TranscodeMediaResponse, error)
	// Analyze media content for quality, metadata extraction
	AnalyzeMedia(ctx context.Context, in *AnalyzeMediaRequest, opts ...grpc.CallOption) (*AnalyzeMediaResponse, error)
	// Extract audio tracks from media
	ExtractAudio(ctx context.Context, in *ExtractAudioRequest, opts ...grpc.CallOption) (*ExtractAudioResponse, error)
	// Extract subtitle tracks from media
	ExtractSubtitles(ctx context.Context, in *ExtractSubtitlesRequest, opts ...grpc.CallOption) (*ExtractSubtitlesResponse, error)
	// Get processing job status
	GetProcessingStatus(ctx context.Context, in *GetProcessingStatusRequest, opts ...grpc.CallOption) (*GetProcessingStatusResponse, error)
}

type mediaProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaProcessingServiceClient(cc grpc.ClientConnInterface) MediaProcessingServiceClient {
	return &mediaProcessingServiceClient{cc}
}

func (c *mediaProcessingServiceClient) TranscodeMedia(ctx context.Context, in *TranscodeMediaRequest, opts ...grpc.CallOption) (*TranscodeMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscodeMediaResponse)
	err := c.cc.Invoke(ctx, MediaProcessingService_TranscodeMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaProcessingServiceClient) AnalyzeMedia(ctx context.Context, in *AnalyzeMediaRequest, opts ...grpc.CallOption) (*AnalyzeMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeMediaResponse)
	err := c.cc.Invoke(ctx, MediaProcessingService_AnalyzeMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaProcessingServiceClient) ExtractAudio(ctx context.Context, in *ExtractAudioRequest, opts ...grpc.CallOption) (*ExtractAudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractAudioResponse)
	err := c.cc.Invoke(ctx, MediaProcessingService_ExtractAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaProcessingServiceClient) ExtractSubtitles(ctx context.Context, in *ExtractSubtitlesRequest, opts ...grpc.CallOption) (*ExtractSubtitlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractSubtitlesResponse)
	err := c.cc.Invoke(ctx, MediaProcessingService_ExtractSubtitles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaProcessingServiceClient) GetProcessingStatus(ctx context.Context, in *GetProcessingStatusRequest, opts ...grpc.CallOption) (*GetProcessingStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessingStatusResponse)
	err := c.cc.Invoke(ctx, MediaProcessingService_GetProcessingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaProcessingServiceServer is the server API for MediaProcessingService service.
// All implementations must embed UnimplementedMediaProcessingServiceServer
// for forward compatibility.
//
// *
// MediaProcessingService provides media transcoding, analysis, and
// content extraction operations.
type MediaProcessingServiceServer interface {
	// Transcode media to different formats
	TranscodeMedia(context.Context, *TranscodeMediaRequest) (*TranscodeMediaResponse, error)
	// Analyze media content for quality, metadata extraction
	AnalyzeMedia(context.Context, *AnalyzeMediaRequest) (*AnalyzeMediaResponse, error)
	// Extract audio tracks from media
	ExtractAudio(context.Context, *ExtractAudioRequest) (*ExtractAudioResponse, error)
	// Extract subtitle tracks from media
	ExtractSubtitles(context.Context, *ExtractSubtitlesRequest) (*ExtractSubtitlesResponse, error)
	// Get processing job status
	GetProcessingStatus(context.Context, *GetProcessingStatusRequest) (*GetProcessingStatusResponse, error)
	mustEmbedUnimplementedMediaProcessingServiceServer()
}

// UnimplementedMediaProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaProcessingServiceServer struct{}

func (UnimplementedMediaProcessingServiceServer) TranscodeMedia(context.Context, *TranscodeMediaRequest) (*TranscodeMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscodeMedia not implemented")
}
func (UnimplementedMediaProcessingServiceServer) AnalyzeMedia(context.Context, *AnalyzeMediaRequest) (*AnalyzeMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeMedia not implemented")
}
func (UnimplementedMediaProcessingServiceServer) ExtractAudio(context.Context, *ExtractAudioRequest) (*ExtractAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractAudio not implemented")
}
func (UnimplementedMediaProcessingServiceServer) ExtractSubtitles(context.Context, *ExtractSubtitlesRequest) (*ExtractSubtitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractSubtitles not implemented")
}
func (UnimplementedMediaProcessingServiceServer) GetProcessingStatus(context.Context, *GetProcessingStatusRequest) (*GetProcessingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessingStatus not implemented")
}
func (UnimplementedMediaProcessingServiceServer) mustEmbedUnimplementedMediaProcessingServiceServer() {
}
func (UnimplementedMediaProcessingServiceServer) testEmbeddedByValue() {}

// UnsafeMediaProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaProcessingServiceServer will
// result in compilation errors.
type UnsafeMediaProcessingServiceServer interface {
	mustEmbedUnimplementedMediaProcessingServiceServer()
}

func RegisterMediaProcessingServiceServer(s grpc.ServiceRegistrar, srv MediaProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaProcessingService_ServiceDesc, srv)
}

func _MediaProcessingService_TranscodeMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodeMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaProcessingServiceServer).TranscodeMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaProcessingService_TranscodeMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaProcessingServiceServer).TranscodeMedia(ctx, req.(*TranscodeMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaProcessingService_AnalyzeMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaProcessingServiceServer).AnalyzeMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaProcessingService_AnalyzeMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaProcessingServiceServer).AnalyzeMedia(ctx, req.(*AnalyzeMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaProcessingService_ExtractAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaProcessingServiceServer).ExtractAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaProcessingService_ExtractAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaProcessingServiceServer).ExtractAudio(ctx, req.(*ExtractAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaProcessingService_ExtractSubtitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractSubtitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaProcessingServiceServer).ExtractSubtitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaProcessingService_ExtractSubtitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaProcessingServiceServer).ExtractSubtitles(ctx, req.(*ExtractSubtitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaProcessingService_GetProcessingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaProcessingServiceServer).GetProcessingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaProcessingService_GetProcessingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaProcessingServiceServer).GetProcessingStatus(ctx, req.(*GetProcessingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaProcessingService_ServiceDesc is the grpc.ServiceDesc for MediaProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.media.MediaProcessingService",
	HandlerType: (*MediaProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranscodeMedia",
			Handler:    _MediaProcessingService_TranscodeMedia_Handler,
		},
		{
			MethodName: "AnalyzeMedia",
			Handler:    _MediaProcessingService_AnalyzeMedia_Handler,
		},
		{
			MethodName: "ExtractAudio",
			Handler:    _MediaProcessingService_ExtractAudio_Handler,
		},
		{
			MethodName: "ExtractSubtitles",
			Handler:    _MediaProcessingService_ExtractSubtitles_Handler,
		},
		{
			MethodName: "GetProcessingStatus",
			Handler:    _MediaProcessingService_GetProcessingStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/media/media_processing_service.proto",
}
