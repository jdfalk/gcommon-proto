// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/common/services/health_service.proto

package services

import (
	context "context"
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/common/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthService_Check_FullMethodName            = "/gcommon.v1.common.HealthService/Check"
	HealthService_CheckAll_FullMethodName         = "/gcommon.v1.common.HealthService/CheckAll"
	HealthService_Watch_FullMethodName            = "/gcommon.v1.common.HealthService/Watch"
	HealthService_GetServiceHealth_FullMethodName = "/gcommon.v1.common.HealthService/GetServiceHealth"
	HealthService_ListServices_FullMethodName     = "/gcommon.v1.common.HealthService/ListServices"
	HealthService_RegisterCheck_FullMethodName    = "/gcommon.v1.common.HealthService/RegisterCheck"
	HealthService_UnregisterCheck_FullMethodName  = "/gcommon.v1.common.HealthService/UnregisterCheck"
	HealthService_GetHealthMetrics_FullMethodName = "/gcommon.v1.common.HealthService/GetHealthMetrics"
)

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// HealthService provides comprehensive health checking capabilities.
// Supports individual check status, system-wide health, and health monitoring.
type HealthServiceClient interface {
	// Check performs a health check for a specific service
	Check(ctx context.Context, in *messages.HealthHealthCheckRequest, opts ...grpc.CallOption) (*messages.HealthHealthCheckResponse, error)
	// CheckAll performs comprehensive health checks for all services
	CheckAll(ctx context.Context, in *messages.HealthCheckAllRequest, opts ...grpc.CallOption) (*messages.HealthCheckAllResponse, error)
	// Watch returns a stream of health check results
	Watch(ctx context.Context, in *messages.HealthWatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[messages.WatchResponse], error)
	// GetServiceHealth returns health status for a service
	GetServiceHealth(ctx context.Context, in *messages.GetServiceHealthRequest, opts ...grpc.CallOption) (*messages.GetServiceHealthResponse, error)
	// ListServices returns all monitored services
	ListServices(ctx context.Context, in *messages.ListServicesRequest, opts ...grpc.CallOption) (*messages.ListServicesResponse, error)
	// RegisterCheck registers a new health check
	RegisterCheck(ctx context.Context, in *messages.RegisterCheckRequest, opts ...grpc.CallOption) (*messages.RegisterCheckResponse, error)
	// UnregisterCheck removes a health check
	UnregisterCheck(ctx context.Context, in *messages.UnregisterCheckRequest, opts ...grpc.CallOption) (*messages.UnregisterCheckResponse, error)
	// GetHealthMetrics returns health metrics and statistics
	GetHealthMetrics(ctx context.Context, in *messages.GetHealthMetricsRequest, opts ...grpc.CallOption) (*messages.GetHealthMetricsResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Check(ctx context.Context, in *messages.HealthHealthCheckRequest, opts ...grpc.CallOption) (*messages.HealthHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HealthHealthCheckResponse)
	err := c.cc.Invoke(ctx, HealthService_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) CheckAll(ctx context.Context, in *messages.HealthCheckAllRequest, opts ...grpc.CallOption) (*messages.HealthCheckAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HealthCheckAllResponse)
	err := c.cc.Invoke(ctx, HealthService_CheckAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) Watch(ctx context.Context, in *messages.HealthWatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[messages.WatchResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HealthService_ServiceDesc.Streams[0], HealthService_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[messages.HealthWatchRequest, messages.WatchResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_WatchClient = grpc.ServerStreamingClient[messages.WatchResponse]

func (c *healthServiceClient) GetServiceHealth(ctx context.Context, in *messages.GetServiceHealthRequest, opts ...grpc.CallOption) (*messages.GetServiceHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetServiceHealthResponse)
	err := c.cc.Invoke(ctx, HealthService_GetServiceHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) ListServices(ctx context.Context, in *messages.ListServicesRequest, opts ...grpc.CallOption) (*messages.ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ListServicesResponse)
	err := c.cc.Invoke(ctx, HealthService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) RegisterCheck(ctx context.Context, in *messages.RegisterCheckRequest, opts ...grpc.CallOption) (*messages.RegisterCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RegisterCheckResponse)
	err := c.cc.Invoke(ctx, HealthService_RegisterCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) UnregisterCheck(ctx context.Context, in *messages.UnregisterCheckRequest, opts ...grpc.CallOption) (*messages.UnregisterCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UnregisterCheckResponse)
	err := c.cc.Invoke(ctx, HealthService_UnregisterCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthServiceClient) GetHealthMetrics(ctx context.Context, in *messages.GetHealthMetricsRequest, opts ...grpc.CallOption) (*messages.GetHealthMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetHealthMetricsResponse)
	err := c.cc.Invoke(ctx, HealthService_GetHealthMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations must embed UnimplementedHealthServiceServer
// for forward compatibility.
//
// *
// HealthService provides comprehensive health checking capabilities.
// Supports individual check status, system-wide health, and health monitoring.
type HealthServiceServer interface {
	// Check performs a health check for a specific service
	Check(context.Context, *messages.HealthHealthCheckRequest) (*messages.HealthHealthCheckResponse, error)
	// CheckAll performs comprehensive health checks for all services
	CheckAll(context.Context, *messages.HealthCheckAllRequest) (*messages.HealthCheckAllResponse, error)
	// Watch returns a stream of health check results
	Watch(*messages.HealthWatchRequest, grpc.ServerStreamingServer[messages.WatchResponse]) error
	// GetServiceHealth returns health status for a service
	GetServiceHealth(context.Context, *messages.GetServiceHealthRequest) (*messages.GetServiceHealthResponse, error)
	// ListServices returns all monitored services
	ListServices(context.Context, *messages.ListServicesRequest) (*messages.ListServicesResponse, error)
	// RegisterCheck registers a new health check
	RegisterCheck(context.Context, *messages.RegisterCheckRequest) (*messages.RegisterCheckResponse, error)
	// UnregisterCheck removes a health check
	UnregisterCheck(context.Context, *messages.UnregisterCheckRequest) (*messages.UnregisterCheckResponse, error)
	// GetHealthMetrics returns health metrics and statistics
	GetHealthMetrics(context.Context, *messages.GetHealthMetricsRequest) (*messages.GetHealthMetricsResponse, error)
	mustEmbedUnimplementedHealthServiceServer()
}

// UnimplementedHealthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthServiceServer struct{}

func (UnimplementedHealthServiceServer) Check(context.Context, *messages.HealthHealthCheckRequest) (*messages.HealthHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServiceServer) CheckAll(context.Context, *messages.HealthCheckAllRequest) (*messages.HealthCheckAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAll not implemented")
}
func (UnimplementedHealthServiceServer) Watch(*messages.HealthWatchRequest, grpc.ServerStreamingServer[messages.WatchResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServiceServer) GetServiceHealth(context.Context, *messages.GetServiceHealthRequest) (*messages.GetServiceHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceHealth not implemented")
}
func (UnimplementedHealthServiceServer) ListServices(context.Context, *messages.ListServicesRequest) (*messages.ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedHealthServiceServer) RegisterCheck(context.Context, *messages.RegisterCheckRequest) (*messages.RegisterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCheck not implemented")
}
func (UnimplementedHealthServiceServer) UnregisterCheck(context.Context, *messages.UnregisterCheckRequest) (*messages.UnregisterCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCheck not implemented")
}
func (UnimplementedHealthServiceServer) GetHealthMetrics(context.Context, *messages.GetHealthMetricsRequest) (*messages.GetHealthMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealthMetrics not implemented")
}
func (UnimplementedHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {}
func (UnimplementedHealthServiceServer) testEmbeddedByValue()                       {}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.HealthHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Check(ctx, req.(*messages.HealthHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_CheckAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.HealthCheckAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).CheckAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_CheckAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).CheckAll(ctx, req.(*messages.HealthCheckAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.HealthWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServiceServer).Watch(m, &grpc.GenericServerStream[messages.HealthWatchRequest, messages.WatchResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HealthService_WatchServer = grpc.ServerStreamingServer[messages.WatchResponse]

func _HealthService_GetServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetServiceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetServiceHealth(ctx, req.(*messages.GetServiceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).ListServices(ctx, req.(*messages.ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_RegisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RegisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).RegisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_RegisterCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).RegisterCheck(ctx, req.(*messages.RegisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_UnregisterCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UnregisterCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).UnregisterCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_UnregisterCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).UnregisterCheck(ctx, req.(*messages.UnregisterCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthService_GetHealthMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHealthMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).GetHealthMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthService_GetHealthMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).GetHealthMetrics(ctx, req.(*messages.GetHealthMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.common.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthService_Check_Handler,
		},
		{
			MethodName: "CheckAll",
			Handler:    _HealthService_CheckAll_Handler,
		},
		{
			MethodName: "GetServiceHealth",
			Handler:    _HealthService_GetServiceHealth_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _HealthService_ListServices_Handler,
		},
		{
			MethodName: "RegisterCheck",
			Handler:    _HealthService_RegisterCheck_Handler,
		},
		{
			MethodName: "UnregisterCheck",
			Handler:    _HealthService_UnregisterCheck_Handler,
		},
		{
			MethodName: "GetHealthMetrics",
			Handler:    _HealthService_GetHealthMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _HealthService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gcommon/v1/common/services/health_service.proto",
}
