// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/common/services/health_admin_service.proto

package services

import (
	context "context"
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/common/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HealthAdminService_ConfigureAlerting_FullMethodName = "/gcommon.v1.common.HealthAdminService/ConfigureAlerting"
	HealthAdminService_EnableCheck_FullMethodName       = "/gcommon.v1.common.HealthAdminService/EnableCheck"
	HealthAdminService_DisableCheck_FullMethodName      = "/gcommon.v1.common.HealthAdminService/DisableCheck"
	HealthAdminService_RunCheck_FullMethodName          = "/gcommon.v1.common.HealthAdminService/RunCheck"
	HealthAdminService_ResetHealthStats_FullMethodName  = "/gcommon.v1.common.HealthAdminService/ResetHealthStats"
	HealthAdminService_SetHealth_FullMethodName         = "/gcommon.v1.common.HealthAdminService/SetHealth"
)

// HealthAdminServiceClient is the client API for HealthAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// HealthAdminService provides administrative health operations
// such as enabling or disabling checks and configuring alerting.
type HealthAdminServiceClient interface {
	// Configure alerting for a check or service
	ConfigureAlerting(ctx context.Context, in *messages.ConfigureAlertingRequest, opts ...grpc.CallOption) (*messages.ConfigureAlertingResponse, error)
	// Enable a previously disabled check
	EnableCheck(ctx context.Context, in *messages.EnableCheckRequest, opts ...grpc.CallOption) (*messages.EnableCheckResponse, error)
	// Disable an existing check
	DisableCheck(ctx context.Context, in *messages.DisableCheckRequest, opts ...grpc.CallOption) (*messages.DisableCheckResponse, error)
	// Manually run a health check
	RunCheck(ctx context.Context, in *messages.RunCheckRequest, opts ...grpc.CallOption) (*messages.RunCheckResponse, error)
	// Reset stored health statistics
	ResetHealthStats(ctx context.Context, in *messages.ResetHealthStatsRequest, opts ...grpc.CallOption) (*messages.ResetHealthStatsResponse, error)
	// Manually set the overall health status
	SetHealth(ctx context.Context, in *messages.SetHealthRequest, opts ...grpc.CallOption) (*messages.SetHealthResponse, error)
}

type healthAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthAdminServiceClient(cc grpc.ClientConnInterface) HealthAdminServiceClient {
	return &healthAdminServiceClient{cc}
}

func (c *healthAdminServiceClient) ConfigureAlerting(ctx context.Context, in *messages.ConfigureAlertingRequest, opts ...grpc.CallOption) (*messages.ConfigureAlertingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ConfigureAlertingResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_ConfigureAlerting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAdminServiceClient) EnableCheck(ctx context.Context, in *messages.EnableCheckRequest, opts ...grpc.CallOption) (*messages.EnableCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.EnableCheckResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_EnableCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAdminServiceClient) DisableCheck(ctx context.Context, in *messages.DisableCheckRequest, opts ...grpc.CallOption) (*messages.DisableCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.DisableCheckResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_DisableCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAdminServiceClient) RunCheck(ctx context.Context, in *messages.RunCheckRequest, opts ...grpc.CallOption) (*messages.RunCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RunCheckResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_RunCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAdminServiceClient) ResetHealthStats(ctx context.Context, in *messages.ResetHealthStatsRequest, opts ...grpc.CallOption) (*messages.ResetHealthStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ResetHealthStatsResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_ResetHealthStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthAdminServiceClient) SetHealth(ctx context.Context, in *messages.SetHealthRequest, opts ...grpc.CallOption) (*messages.SetHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.SetHealthResponse)
	err := c.cc.Invoke(ctx, HealthAdminService_SetHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthAdminServiceServer is the server API for HealthAdminService service.
// All implementations must embed UnimplementedHealthAdminServiceServer
// for forward compatibility.
//
// *
// HealthAdminService provides administrative health operations
// such as enabling or disabling checks and configuring alerting.
type HealthAdminServiceServer interface {
	// Configure alerting for a check or service
	ConfigureAlerting(context.Context, *messages.ConfigureAlertingRequest) (*messages.ConfigureAlertingResponse, error)
	// Enable a previously disabled check
	EnableCheck(context.Context, *messages.EnableCheckRequest) (*messages.EnableCheckResponse, error)
	// Disable an existing check
	DisableCheck(context.Context, *messages.DisableCheckRequest) (*messages.DisableCheckResponse, error)
	// Manually run a health check
	RunCheck(context.Context, *messages.RunCheckRequest) (*messages.RunCheckResponse, error)
	// Reset stored health statistics
	ResetHealthStats(context.Context, *messages.ResetHealthStatsRequest) (*messages.ResetHealthStatsResponse, error)
	// Manually set the overall health status
	SetHealth(context.Context, *messages.SetHealthRequest) (*messages.SetHealthResponse, error)
	mustEmbedUnimplementedHealthAdminServiceServer()
}

// UnimplementedHealthAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthAdminServiceServer struct{}

func (UnimplementedHealthAdminServiceServer) ConfigureAlerting(context.Context, *messages.ConfigureAlertingRequest) (*messages.ConfigureAlertingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAlerting not implemented")
}
func (UnimplementedHealthAdminServiceServer) EnableCheck(context.Context, *messages.EnableCheckRequest) (*messages.EnableCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCheck not implemented")
}
func (UnimplementedHealthAdminServiceServer) DisableCheck(context.Context, *messages.DisableCheckRequest) (*messages.DisableCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCheck not implemented")
}
func (UnimplementedHealthAdminServiceServer) RunCheck(context.Context, *messages.RunCheckRequest) (*messages.RunCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCheck not implemented")
}
func (UnimplementedHealthAdminServiceServer) ResetHealthStats(context.Context, *messages.ResetHealthStatsRequest) (*messages.ResetHealthStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHealthStats not implemented")
}
func (UnimplementedHealthAdminServiceServer) SetHealth(context.Context, *messages.SetHealthRequest) (*messages.SetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHealth not implemented")
}
func (UnimplementedHealthAdminServiceServer) mustEmbedUnimplementedHealthAdminServiceServer() {}
func (UnimplementedHealthAdminServiceServer) testEmbeddedByValue()                            {}

// UnsafeHealthAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthAdminServiceServer will
// result in compilation errors.
type UnsafeHealthAdminServiceServer interface {
	mustEmbedUnimplementedHealthAdminServiceServer()
}

func RegisterHealthAdminServiceServer(s grpc.ServiceRegistrar, srv HealthAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthAdminService_ServiceDesc, srv)
}

func _HealthAdminService_ConfigureAlerting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ConfigureAlertingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).ConfigureAlerting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_ConfigureAlerting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).ConfigureAlerting(ctx, req.(*messages.ConfigureAlertingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAdminService_EnableCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.EnableCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).EnableCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_EnableCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).EnableCheck(ctx, req.(*messages.EnableCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAdminService_DisableCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.DisableCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).DisableCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_DisableCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).DisableCheck(ctx, req.(*messages.DisableCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAdminService_RunCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RunCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).RunCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_RunCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).RunCheck(ctx, req.(*messages.RunCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAdminService_ResetHealthStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ResetHealthStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).ResetHealthStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_ResetHealthStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).ResetHealthStats(ctx, req.(*messages.ResetHealthStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthAdminService_SetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthAdminServiceServer).SetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthAdminService_SetHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthAdminServiceServer).SetHealth(ctx, req.(*messages.SetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthAdminService_ServiceDesc is the grpc.ServiceDesc for HealthAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.common.HealthAdminService",
	HandlerType: (*HealthAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureAlerting",
			Handler:    _HealthAdminService_ConfigureAlerting_Handler,
		},
		{
			MethodName: "EnableCheck",
			Handler:    _HealthAdminService_EnableCheck_Handler,
		},
		{
			MethodName: "DisableCheck",
			Handler:    _HealthAdminService_DisableCheck_Handler,
		},
		{
			MethodName: "RunCheck",
			Handler:    _HealthAdminService_RunCheck_Handler,
		},
		{
			MethodName: "ResetHealthStats",
			Handler:    _HealthAdminService_ResetHealthStats_Handler,
		},
		{
			MethodName: "SetHealth",
			Handler:    _HealthAdminService_SetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/common/services/health_admin_service.proto",
}
