// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/common/services/session_service.proto

package services

import (
	context "context"
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/common/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SessionService_CreateSession_FullMethodName    = "/gcommon.v1.common.SessionService/CreateSession"
	SessionService_GetSession_FullMethodName       = "/gcommon.v1.common.SessionService/GetSession"
	SessionService_UpdateSession_FullMethodName    = "/gcommon.v1.common.SessionService/UpdateSession"
	SessionService_ValidateSession_FullMethodName  = "/gcommon.v1.common.SessionService/ValidateSession"
	SessionService_TerminateSession_FullMethodName = "/gcommon.v1.common.SessionService/TerminateSession"
	SessionService_DeleteSession_FullMethodName    = "/gcommon.v1.common.SessionService/DeleteSession"
	SessionService_ListUserSessions_FullMethodName = "/gcommon.v1.common.SessionService/ListUserSessions"
	SessionService_ListSessions_FullMethodName     = "/gcommon.v1.common.SessionService/ListSessions"
)

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// SessionService manages user sessions and session lifecycle.
// Provides session creation, validation, tracking, and termination
// for stateful authentication and user activity monitoring.
type SessionServiceClient interface {
	// Create a new session for an authenticated user
	CreateSession(ctx context.Context, in *messages.AuthCreateSessionRequest, opts ...grpc.CallOption) (*messages.AuthCreateSessionResponse, error)
	// Get detailed information about a specific session
	GetSession(ctx context.Context, in *messages.AuthGetSessionRequest, opts ...grpc.CallOption) (*messages.AuthGetSessionResponse, error)
	// Update session information (e.g., refresh activity timestamp)
	UpdateSession(ctx context.Context, in *messages.AuthUpdateSessionRequest, opts ...grpc.CallOption) (*messages.AuthUpdateSessionResponse, error)
	// Validate a session and return session information
	ValidateSession(ctx context.Context, in *messages.ValidateSessionRequest, opts ...grpc.CallOption) (*messages.ValidateSessionResponse, error)
	// Terminate a session (logout)
	TerminateSession(ctx context.Context, in *messages.TerminateSessionRequest, opts ...grpc.CallOption) (*messages.TerminateSessionResponse, error)
	// Delete a specific session
	DeleteSession(ctx context.Context, in *messages.AuthDeleteSessionRequest, opts ...grpc.CallOption) (*messages.AuthDeleteSessionResponse, error)
	// List all active sessions for a user
	ListUserSessions(ctx context.Context, in *messages.ListUserSessionsRequest, opts ...grpc.CallOption) (*messages.ListUserSessionsResponse, error)
	// List all sessions (admin only)
	ListSessions(ctx context.Context, in *messages.AuthListSessionsRequest, opts ...grpc.CallOption) (*messages.AuthListSessionsResponse, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) CreateSession(ctx context.Context, in *messages.AuthCreateSessionRequest, opts ...grpc.CallOption) (*messages.AuthCreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuthCreateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetSession(ctx context.Context, in *messages.AuthGetSessionRequest, opts ...grpc.CallOption) (*messages.AuthGetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuthGetSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) UpdateSession(ctx context.Context, in *messages.AuthUpdateSessionRequest, opts ...grpc.CallOption) (*messages.AuthUpdateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuthUpdateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ValidateSession(ctx context.Context, in *messages.ValidateSessionRequest, opts ...grpc.CallOption) (*messages.ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) TerminateSession(ctx context.Context, in *messages.TerminateSessionRequest, opts ...grpc.CallOption) (*messages.TerminateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.TerminateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_TerminateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteSession(ctx context.Context, in *messages.AuthDeleteSessionRequest, opts ...grpc.CallOption) (*messages.AuthDeleteSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuthDeleteSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ListUserSessions(ctx context.Context, in *messages.ListUserSessionsRequest, opts ...grpc.CallOption) (*messages.ListUserSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ListUserSessionsResponse)
	err := c.cc.Invoke(ctx, SessionService_ListUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ListSessions(ctx context.Context, in *messages.AuthListSessionsRequest, opts ...grpc.CallOption) (*messages.AuthListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuthListSessionsResponse)
	err := c.cc.Invoke(ctx, SessionService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations must embed UnimplementedSessionServiceServer
// for forward compatibility.
//
// *
// SessionService manages user sessions and session lifecycle.
// Provides session creation, validation, tracking, and termination
// for stateful authentication and user activity monitoring.
type SessionServiceServer interface {
	// Create a new session for an authenticated user
	CreateSession(context.Context, *messages.AuthCreateSessionRequest) (*messages.AuthCreateSessionResponse, error)
	// Get detailed information about a specific session
	GetSession(context.Context, *messages.AuthGetSessionRequest) (*messages.AuthGetSessionResponse, error)
	// Update session information (e.g., refresh activity timestamp)
	UpdateSession(context.Context, *messages.AuthUpdateSessionRequest) (*messages.AuthUpdateSessionResponse, error)
	// Validate a session and return session information
	ValidateSession(context.Context, *messages.ValidateSessionRequest) (*messages.ValidateSessionResponse, error)
	// Terminate a session (logout)
	TerminateSession(context.Context, *messages.TerminateSessionRequest) (*messages.TerminateSessionResponse, error)
	// Delete a specific session
	DeleteSession(context.Context, *messages.AuthDeleteSessionRequest) (*messages.AuthDeleteSessionResponse, error)
	// List all active sessions for a user
	ListUserSessions(context.Context, *messages.ListUserSessionsRequest) (*messages.ListUserSessionsResponse, error)
	// List all sessions (admin only)
	ListSessions(context.Context, *messages.AuthListSessionsRequest) (*messages.AuthListSessionsResponse, error)
	mustEmbedUnimplementedSessionServiceServer()
}

// UnimplementedSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionServiceServer struct{}

func (UnimplementedSessionServiceServer) CreateSession(context.Context, *messages.AuthCreateSessionRequest) (*messages.AuthCreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionServiceServer) GetSession(context.Context, *messages.AuthGetSessionRequest) (*messages.AuthGetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionServiceServer) UpdateSession(context.Context, *messages.AuthUpdateSessionRequest) (*messages.AuthUpdateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedSessionServiceServer) ValidateSession(context.Context, *messages.ValidateSessionRequest) (*messages.ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedSessionServiceServer) TerminateSession(context.Context, *messages.TerminateSessionRequest) (*messages.TerminateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}
func (UnimplementedSessionServiceServer) DeleteSession(context.Context, *messages.AuthDeleteSessionRequest) (*messages.AuthDeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSessionServiceServer) ListUserSessions(context.Context, *messages.ListUserSessionsRequest) (*messages.ListUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSessions not implemented")
}
func (UnimplementedSessionServiceServer) ListSessions(context.Context, *messages.AuthListSessionsRequest) (*messages.AuthListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {}
func (UnimplementedSessionServiceServer) testEmbeddedByValue()                        {}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthCreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CreateSession(ctx, req.(*messages.AuthCreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthGetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSession(ctx, req.(*messages.AuthGetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthUpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).UpdateSession(ctx, req.(*messages.AuthUpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ValidateSession(ctx, req.(*messages.ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.TerminateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_TerminateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).TerminateSession(ctx, req.(*messages.TerminateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthDeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteSession(ctx, req.(*messages.AuthDeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ListUserSessions(ctx, req.(*messages.ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ListSessions(ctx, req.(*messages.AuthListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.common.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionService_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SessionService_GetSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SessionService_UpdateSession_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _SessionService_ValidateSession_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _SessionService_TerminateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionService_DeleteSession_Handler,
		},
		{
			MethodName: "ListUserSessions",
			Handler:    _SessionService_ListUserSessions_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _SessionService_ListSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/common/services/session_service.proto",
}
