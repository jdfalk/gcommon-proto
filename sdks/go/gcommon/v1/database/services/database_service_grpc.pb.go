// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/database/services/database_service.proto

package services

import (
	context "context"
	messages "github.com/jdfalk/gcommon/sdks/go/gcommon/v1/database/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseService_Query_FullMethodName             = "/gcommon.v1.database.DatabaseService/Query"
	DatabaseService_QueryRow_FullMethodName          = "/gcommon.v1.database.DatabaseService/QueryRow"
	DatabaseService_Execute_FullMethodName           = "/gcommon.v1.database.DatabaseService/Execute"
	DatabaseService_ExecuteBatch_FullMethodName      = "/gcommon.v1.database.DatabaseService/ExecuteBatch"
	DatabaseService_GetConnectionInfo_FullMethodName = "/gcommon.v1.database.DatabaseService/GetConnectionInfo"
	DatabaseService_HealthCheck_FullMethodName       = "/gcommon.v1.database.DatabaseService/HealthCheck"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// DatabaseService provides comprehensive database operations including
// queries, transactions, batch operations, and health monitoring.
type DatabaseServiceClient interface {
	// Execute a read-only query and return results
	Query(ctx context.Context, in *messages.QueryRequest, opts ...grpc.CallOption) (*messages.QueryResponse, error)
	// Execute a query expected to return at most one row
	QueryRow(ctx context.Context, in *messages.QueryRowRequest, opts ...grpc.CallOption) (*messages.QueryRowResponse, error)
	// Execute a write operation (INSERT, UPDATE, DELETE)
	Execute(ctx context.Context, in *messages.ExecuteRequest, opts ...grpc.CallOption) (*messages.ExecuteResponse, error)
	// Execute multiple operations in a single batch
	ExecuteBatch(ctx context.Context, in *messages.ExecuteBatchRequest, opts ...grpc.CallOption) (*messages.ExecuteBatchResponse, error)
	// Get information about database connection pool
	GetConnectionInfo(ctx context.Context, in *messages.GetConnectionInfoRequest, opts ...grpc.CallOption) (*messages.GetConnectionInfoResponse, error)
	// Check database connectivity and health
	HealthCheck(ctx context.Context, in *messages.DatabaseHealthCheckRequest, opts ...grpc.CallOption) (*messages.DatabaseHealthCheckResponse, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) Query(ctx context.Context, in *messages.QueryRequest, opts ...grpc.CallOption) (*messages.QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.QueryResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) QueryRow(ctx context.Context, in *messages.QueryRowRequest, opts ...grpc.CallOption) (*messages.QueryRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.QueryRowResponse)
	err := c.cc.Invoke(ctx, DatabaseService_QueryRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Execute(ctx context.Context, in *messages.ExecuteRequest, opts ...grpc.CallOption) (*messages.ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ExecuteResponse)
	err := c.cc.Invoke(ctx, DatabaseService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ExecuteBatch(ctx context.Context, in *messages.ExecuteBatchRequest, opts ...grpc.CallOption) (*messages.ExecuteBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ExecuteBatchResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ExecuteBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetConnectionInfo(ctx context.Context, in *messages.GetConnectionInfoRequest, opts ...grpc.CallOption) (*messages.GetConnectionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetConnectionInfoResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetConnectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) HealthCheck(ctx context.Context, in *messages.DatabaseHealthCheckRequest, opts ...grpc.CallOption) (*messages.DatabaseHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.DatabaseHealthCheckResponse)
	err := c.cc.Invoke(ctx, DatabaseService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility.
//
// *
// DatabaseService provides comprehensive database operations including
// queries, transactions, batch operations, and health monitoring.
type DatabaseServiceServer interface {
	// Execute a read-only query and return results
	Query(context.Context, *messages.QueryRequest) (*messages.QueryResponse, error)
	// Execute a query expected to return at most one row
	QueryRow(context.Context, *messages.QueryRowRequest) (*messages.QueryRowResponse, error)
	// Execute a write operation (INSERT, UPDATE, DELETE)
	Execute(context.Context, *messages.ExecuteRequest) (*messages.ExecuteResponse, error)
	// Execute multiple operations in a single batch
	ExecuteBatch(context.Context, *messages.ExecuteBatchRequest) (*messages.ExecuteBatchResponse, error)
	// Get information about database connection pool
	GetConnectionInfo(context.Context, *messages.GetConnectionInfoRequest) (*messages.GetConnectionInfoResponse, error)
	// Check database connectivity and health
	HealthCheck(context.Context, *messages.DatabaseHealthCheckRequest) (*messages.DatabaseHealthCheckResponse, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServiceServer struct{}

func (UnimplementedDatabaseServiceServer) Query(context.Context, *messages.QueryRequest) (*messages.QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDatabaseServiceServer) QueryRow(context.Context, *messages.QueryRowRequest) (*messages.QueryRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRow not implemented")
}
func (UnimplementedDatabaseServiceServer) Execute(context.Context, *messages.ExecuteRequest) (*messages.ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDatabaseServiceServer) ExecuteBatch(context.Context, *messages.ExecuteBatchRequest) (*messages.ExecuteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBatch not implemented")
}
func (UnimplementedDatabaseServiceServer) GetConnectionInfo(context.Context, *messages.GetConnectionInfoRequest) (*messages.GetConnectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionInfo not implemented")
}
func (UnimplementedDatabaseServiceServer) HealthCheck(context.Context, *messages.DatabaseHealthCheckRequest) (*messages.DatabaseHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}
func (UnimplementedDatabaseServiceServer) testEmbeddedByValue()                         {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Query(ctx, req.(*messages.QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_QueryRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.QueryRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).QueryRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_QueryRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).QueryRow(ctx, req.(*messages.QueryRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Execute(ctx, req.(*messages.ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ExecuteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ExecuteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ExecuteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ExecuteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ExecuteBatch(ctx, req.(*messages.ExecuteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetConnectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetConnectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetConnectionInfo(ctx, req.(*messages.GetConnectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.DatabaseHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).HealthCheck(ctx, req.(*messages.DatabaseHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.database.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DatabaseService_Query_Handler,
		},
		{
			MethodName: "QueryRow",
			Handler:    _DatabaseService_QueryRow_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DatabaseService_Execute_Handler,
		},
		{
			MethodName: "ExecuteBatch",
			Handler:    _DatabaseService_ExecuteBatch_Handler,
		},
		{
			MethodName: "GetConnectionInfo",
			Handler:    _DatabaseService_GetConnectionInfo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DatabaseService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/database/services/database_service.proto",
}
