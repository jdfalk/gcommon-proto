// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/queue/publish_config.proto

package queue

import (
	common "github.com/jdfalk/gcommon/sdks/go/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublishConfig struct {
	state                         protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_WaitForAck         bool                      `protobuf:"varint,1,opt,name=wait_for_ack,json=waitForAck"`
	xxx_hidden_AckTimeoutMs       int32                     `protobuf:"varint,2,opt,name=ack_timeout_ms,json=ackTimeoutMs"`
	xxx_hidden_DuplicateDetection bool                      `protobuf:"varint,3,opt,name=duplicate_detection,json=duplicateDetection"`
	xxx_hidden_EnableCompression  bool                      `protobuf:"varint,4,opt,name=enable_compression,json=enableCompression"`
	xxx_hidden_EnableOrdering     bool                      `protobuf:"varint,5,opt,name=enable_ordering,json=enableOrdering"`
	xxx_hidden_RetryConfig        *common.CommonRetryPolicy `protobuf:"bytes,6,opt,name=retry_config,json=retryConfig"`
	xxx_hidden_PersistenceLevel   *string                   `protobuf:"bytes,7,opt,name=persistence_level,json=persistenceLevel"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *PublishConfig) Reset() {
	*x = PublishConfig{}
	mi := &file_gcommon_v1_queue_publish_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishConfig) ProtoMessage() {}

func (x *PublishConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_queue_publish_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PublishConfig) GetWaitForAck() bool {
	if x != nil {
		return x.xxx_hidden_WaitForAck
	}
	return false
}

func (x *PublishConfig) GetAckTimeoutMs() int32 {
	if x != nil {
		return x.xxx_hidden_AckTimeoutMs
	}
	return 0
}

func (x *PublishConfig) GetDuplicateDetection() bool {
	if x != nil {
		return x.xxx_hidden_DuplicateDetection
	}
	return false
}

func (x *PublishConfig) GetEnableCompression() bool {
	if x != nil {
		return x.xxx_hidden_EnableCompression
	}
	return false
}

func (x *PublishConfig) GetEnableOrdering() bool {
	if x != nil {
		return x.xxx_hidden_EnableOrdering
	}
	return false
}

func (x *PublishConfig) GetRetryConfig() *common.CommonRetryPolicy {
	if x != nil {
		return x.xxx_hidden_RetryConfig
	}
	return nil
}

func (x *PublishConfig) GetPersistenceLevel() string {
	if x != nil {
		if x.xxx_hidden_PersistenceLevel != nil {
			return *x.xxx_hidden_PersistenceLevel
		}
		return ""
	}
	return ""
}

func (x *PublishConfig) SetWaitForAck(v bool) {
	x.xxx_hidden_WaitForAck = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *PublishConfig) SetAckTimeoutMs(v int32) {
	x.xxx_hidden_AckTimeoutMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *PublishConfig) SetDuplicateDetection(v bool) {
	x.xxx_hidden_DuplicateDetection = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *PublishConfig) SetEnableCompression(v bool) {
	x.xxx_hidden_EnableCompression = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *PublishConfig) SetEnableOrdering(v bool) {
	x.xxx_hidden_EnableOrdering = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *PublishConfig) SetRetryConfig(v *common.CommonRetryPolicy) {
	x.xxx_hidden_RetryConfig = v
}

func (x *PublishConfig) SetPersistenceLevel(v string) {
	x.xxx_hidden_PersistenceLevel = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *PublishConfig) HasWaitForAck() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PublishConfig) HasAckTimeoutMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *PublishConfig) HasDuplicateDetection() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PublishConfig) HasEnableCompression() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *PublishConfig) HasEnableOrdering() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *PublishConfig) HasRetryConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RetryConfig != nil
}

func (x *PublishConfig) HasPersistenceLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *PublishConfig) ClearWaitForAck() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_WaitForAck = false
}

func (x *PublishConfig) ClearAckTimeoutMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AckTimeoutMs = 0
}

func (x *PublishConfig) ClearDuplicateDetection() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_DuplicateDetection = false
}

func (x *PublishConfig) ClearEnableCompression() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_EnableCompression = false
}

func (x *PublishConfig) ClearEnableOrdering() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_EnableOrdering = false
}

func (x *PublishConfig) ClearRetryConfig() {
	x.xxx_hidden_RetryConfig = nil
}

func (x *PublishConfig) ClearPersistenceLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_PersistenceLevel = nil
}

type PublishConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Wait for acknowledgment before returning
	WaitForAck *bool
	// Acknowledgment timeout (milliseconds)
	AckTimeoutMs *int32
	// Enable duplicate detection
	DuplicateDetection *bool
	// Compression for message batch
	EnableCompression *bool
	// Enable message ordering
	EnableOrdering *bool
	// Retry configuration for failed publishes - references existing RetryConfig
	RetryConfig *common.CommonRetryPolicy
	// Persistence level required
	PersistenceLevel *string
}

func (b0 PublishConfig_builder) Build() *PublishConfig {
	m0 := &PublishConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.WaitForAck != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_WaitForAck = *b.WaitForAck
	}
	if b.AckTimeoutMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_AckTimeoutMs = *b.AckTimeoutMs
	}
	if b.DuplicateDetection != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_DuplicateDetection = *b.DuplicateDetection
	}
	if b.EnableCompression != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_EnableCompression = *b.EnableCompression
	}
	if b.EnableOrdering != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_EnableOrdering = *b.EnableOrdering
	}
	x.xxx_hidden_RetryConfig = b.RetryConfig
	if b.PersistenceLevel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_PersistenceLevel = b.PersistenceLevel
	}
	return m0
}

var File_gcommon_v1_queue_publish_config_proto protoreflect.FileDescriptor

const file_gcommon_v1_queue_publish_config_proto_rawDesc = "" +
	"\n" +
	"%gcommon/v1/queue/publish_config.proto\x12\x10gcommon.v1.queue\x1a$gcommon/v1/common/retry_policy.proto\x1a!google/protobuf/go_features.proto\"\xd6\x02\n" +
	"\rPublishConfig\x12 \n" +
	"\fwait_for_ack\x18\x01 \x01(\bR\n" +
	"waitForAck\x12$\n" +
	"\x0eack_timeout_ms\x18\x02 \x01(\x05R\fackTimeoutMs\x12/\n" +
	"\x13duplicate_detection\x18\x03 \x01(\bR\x12duplicateDetection\x12-\n" +
	"\x12enable_compression\x18\x04 \x01(\bR\x11enableCompression\x12'\n" +
	"\x0fenable_ordering\x18\x05 \x01(\bR\x0eenableOrdering\x12G\n" +
	"\fretry_config\x18\x06 \x01(\v2$.gcommon.v1.common.CommonRetryPolicyR\vretryConfig\x12+\n" +
	"\x11persistence_level\x18\a \x01(\tR\x10persistenceLevelB4Z*github.com/jdfalk/gcommon/sdks/go/v1/queue\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_queue_publish_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_queue_publish_config_proto_goTypes = []any{
	(*PublishConfig)(nil),            // 0: gcommon.v1.queue.PublishConfig
	(*common.CommonRetryPolicy)(nil), // 1: gcommon.v1.common.CommonRetryPolicy
}
var file_gcommon_v1_queue_publish_config_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.PublishConfig.retry_config:type_name -> gcommon.v1.common.CommonRetryPolicy
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_queue_publish_config_proto_init() }
func file_gcommon_v1_queue_publish_config_proto_init() {
	if File_gcommon_v1_queue_publish_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_queue_publish_config_proto_rawDesc), len(file_gcommon_v1_queue_publish_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_queue_publish_config_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_queue_publish_config_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_queue_publish_config_proto_msgTypes,
	}.Build()
	File_gcommon_v1_queue_publish_config_proto = out.File
	file_gcommon_v1_queue_publish_config_proto_goTypes = nil
	file_gcommon_v1_queue_publish_config_proto_depIdxs = nil
}
