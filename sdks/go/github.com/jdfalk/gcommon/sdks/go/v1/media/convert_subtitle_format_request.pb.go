// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/media/convert_subtitle_format_request.proto

package media

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to convert subtitle format.
type ConvertSubtitleFormatRequest struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_SubtitleFileId *string                `protobuf:"bytes,1,opt,name=subtitle_file_id,json=subtitleFileId"`
	xxx_hidden_TargetFormat   *string                `protobuf:"bytes,2,opt,name=target_format,json=targetFormat"`
	xxx_hidden_Options        *ConversionOptions     `protobuf:"bytes,3,opt,name=options"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ConvertSubtitleFormatRequest) Reset() {
	*x = ConvertSubtitleFormatRequest{}
	mi := &file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertSubtitleFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertSubtitleFormatRequest) ProtoMessage() {}

func (x *ConvertSubtitleFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConvertSubtitleFormatRequest) GetSubtitleFileId() string {
	if x != nil {
		if x.xxx_hidden_SubtitleFileId != nil {
			return *x.xxx_hidden_SubtitleFileId
		}
		return ""
	}
	return ""
}

func (x *ConvertSubtitleFormatRequest) GetTargetFormat() string {
	if x != nil {
		if x.xxx_hidden_TargetFormat != nil {
			return *x.xxx_hidden_TargetFormat
		}
		return ""
	}
	return ""
}

func (x *ConvertSubtitleFormatRequest) GetOptions() *ConversionOptions {
	if x != nil {
		return x.xxx_hidden_Options
	}
	return nil
}

func (x *ConvertSubtitleFormatRequest) SetSubtitleFileId(v string) {
	x.xxx_hidden_SubtitleFileId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConvertSubtitleFormatRequest) SetTargetFormat(v string) {
	x.xxx_hidden_TargetFormat = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConvertSubtitleFormatRequest) SetOptions(v *ConversionOptions) {
	x.xxx_hidden_Options = v
}

func (x *ConvertSubtitleFormatRequest) HasSubtitleFileId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConvertSubtitleFormatRequest) HasTargetFormat() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConvertSubtitleFormatRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Options != nil
}

func (x *ConvertSubtitleFormatRequest) ClearSubtitleFileId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_SubtitleFileId = nil
}

func (x *ConvertSubtitleFormatRequest) ClearTargetFormat() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_TargetFormat = nil
}

func (x *ConvertSubtitleFormatRequest) ClearOptions() {
	x.xxx_hidden_Options = nil
}

type ConvertSubtitleFormatRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	SubtitleFileId *string
	TargetFormat   *string
	Options        *ConversionOptions
}

func (b0 ConvertSubtitleFormatRequest_builder) Build() *ConvertSubtitleFormatRequest {
	m0 := &ConvertSubtitleFormatRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.SubtitleFileId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_SubtitleFileId = b.SubtitleFileId
	}
	if b.TargetFormat != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_TargetFormat = b.TargetFormat
	}
	x.xxx_hidden_Options = b.Options
	return m0
}

// Options for subtitle format conversion.
type ConversionOptions struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PreserveFormatting bool                   `protobuf:"varint,1,opt,name=preserve_formatting,json=preserveFormatting"`
	xxx_hidden_IncludeMetadata    bool                   `protobuf:"varint,2,opt,name=include_metadata,json=includeMetadata"`
	xxx_hidden_Encoding           *string                `protobuf:"bytes,3,opt,name=encoding"`
	XXX_raceDetectHookData        protoimpl.RaceDetectHookData
	XXX_presence                  [1]uint32
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ConversionOptions) Reset() {
	*x = ConversionOptions{}
	mi := &file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionOptions) ProtoMessage() {}

func (x *ConversionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConversionOptions) GetPreserveFormatting() bool {
	if x != nil {
		return x.xxx_hidden_PreserveFormatting
	}
	return false
}

func (x *ConversionOptions) GetIncludeMetadata() bool {
	if x != nil {
		return x.xxx_hidden_IncludeMetadata
	}
	return false
}

func (x *ConversionOptions) GetEncoding() string {
	if x != nil {
		if x.xxx_hidden_Encoding != nil {
			return *x.xxx_hidden_Encoding
		}
		return ""
	}
	return ""
}

func (x *ConversionOptions) SetPreserveFormatting(v bool) {
	x.xxx_hidden_PreserveFormatting = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *ConversionOptions) SetIncludeMetadata(v bool) {
	x.xxx_hidden_IncludeMetadata = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *ConversionOptions) SetEncoding(v string) {
	x.xxx_hidden_Encoding = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *ConversionOptions) HasPreserveFormatting() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ConversionOptions) HasIncludeMetadata() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ConversionOptions) HasEncoding() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ConversionOptions) ClearPreserveFormatting() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PreserveFormatting = false
}

func (x *ConversionOptions) ClearIncludeMetadata() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_IncludeMetadata = false
}

func (x *ConversionOptions) ClearEncoding() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Encoding = nil
}

type ConversionOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	PreserveFormatting *bool
	IncludeMetadata    *bool
	Encoding           *string
}

func (b0 ConversionOptions_builder) Build() *ConversionOptions {
	m0 := &ConversionOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PreserveFormatting != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_PreserveFormatting = *b.PreserveFormatting
	}
	if b.IncludeMetadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_IncludeMetadata = *b.IncludeMetadata
	}
	if b.Encoding != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Encoding = b.Encoding
	}
	return m0
}

var File_gcommon_v1_media_convert_subtitle_format_request_proto protoreflect.FileDescriptor

const file_gcommon_v1_media_convert_subtitle_format_request_proto_rawDesc = "" +
	"\n" +
	"6gcommon/v1/media/convert_subtitle_format_request.proto\x12\x10gcommon.v1.media\x1a!google/protobuf/go_features.proto\"\xac\x01\n" +
	"\x1cConvertSubtitleFormatRequest\x12(\n" +
	"\x10subtitle_file_id\x18\x01 \x01(\tR\x0esubtitleFileId\x12#\n" +
	"\rtarget_format\x18\x02 \x01(\tR\ftargetFormat\x12=\n" +
	"\aoptions\x18\x03 \x01(\v2#.gcommon.v1.media.ConversionOptionsR\aoptions\"\x8b\x01\n" +
	"\x11ConversionOptions\x12/\n" +
	"\x13preserve_formatting\x18\x01 \x01(\bR\x12preserveFormatting\x12)\n" +
	"\x10include_metadata\x18\x02 \x01(\bR\x0fincludeMetadata\x12\x1a\n" +
	"\bencoding\x18\x03 \x01(\tR\bencodingB4Z*github.com/jdfalk/gcommon/sdks/go/v1/media\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gcommon_v1_media_convert_subtitle_format_request_proto_goTypes = []any{
	(*ConvertSubtitleFormatRequest)(nil), // 0: gcommon.v1.media.ConvertSubtitleFormatRequest
	(*ConversionOptions)(nil),            // 1: gcommon.v1.media.ConversionOptions
}
var file_gcommon_v1_media_convert_subtitle_format_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.media.ConvertSubtitleFormatRequest.options:type_name -> gcommon.v1.media.ConversionOptions
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_media_convert_subtitle_format_request_proto_init() }
func file_gcommon_v1_media_convert_subtitle_format_request_proto_init() {
	if File_gcommon_v1_media_convert_subtitle_format_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_media_convert_subtitle_format_request_proto_rawDesc), len(file_gcommon_v1_media_convert_subtitle_format_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_media_convert_subtitle_format_request_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_media_convert_subtitle_format_request_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_media_convert_subtitle_format_request_proto_msgTypes,
	}.Build()
	File_gcommon_v1_media_convert_subtitle_format_request_proto = out.File
	file_gcommon_v1_media_convert_subtitle_format_request_proto_goTypes = nil
	file_gcommon_v1_media_convert_subtitle_format_request_proto_depIdxs = nil
}
