// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/web/services/web_admin_service.proto

package web

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebAdminService_GetCacheConfig_FullMethodName    = "/gcommon.v1.web.WebAdminService/GetCacheConfig"
	WebAdminService_UpdateCacheConfig_FullMethodName = "/gcommon.v1.web.WebAdminService/UpdateCacheConfig"
	WebAdminService_FlushCache_FullMethodName        = "/gcommon.v1.web.WebAdminService/FlushCache"
)

// WebAdminServiceClient is the client API for WebAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// WebAdminService provides cache administration endpoints
// for web server management tools.
type WebAdminServiceClient interface {
	// Retrieve current cache configuration
	GetCacheConfig(ctx context.Context, in *GetCacheConfigRequest, opts ...grpc.CallOption) (*GetCacheConfigResponse, error)
	// Update cache configuration
	UpdateCacheConfig(ctx context.Context, in *UpdateCacheConfigRequest, opts ...grpc.CallOption) (*UpdateCacheConfigResponse, error)
	// Flush all cached entries
	FlushCache(ctx context.Context, in *FlushCacheRequest, opts ...grpc.CallOption) (*FlushCacheResponse, error)
}

type webAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebAdminServiceClient(cc grpc.ClientConnInterface) WebAdminServiceClient {
	return &webAdminServiceClient{cc}
}

func (c *webAdminServiceClient) GetCacheConfig(ctx context.Context, in *GetCacheConfigRequest, opts ...grpc.CallOption) (*GetCacheConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCacheConfigResponse)
	err := c.cc.Invoke(ctx, WebAdminService_GetCacheConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAdminServiceClient) UpdateCacheConfig(ctx context.Context, in *UpdateCacheConfigRequest, opts ...grpc.CallOption) (*UpdateCacheConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCacheConfigResponse)
	err := c.cc.Invoke(ctx, WebAdminService_UpdateCacheConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAdminServiceClient) FlushCache(ctx context.Context, in *FlushCacheRequest, opts ...grpc.CallOption) (*FlushCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlushCacheResponse)
	err := c.cc.Invoke(ctx, WebAdminService_FlushCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAdminServiceServer is the server API for WebAdminService service.
// All implementations must embed UnimplementedWebAdminServiceServer
// for forward compatibility.
//
// *
// WebAdminService provides cache administration endpoints
// for web server management tools.
type WebAdminServiceServer interface {
	// Retrieve current cache configuration
	GetCacheConfig(context.Context, *GetCacheConfigRequest) (*GetCacheConfigResponse, error)
	// Update cache configuration
	UpdateCacheConfig(context.Context, *UpdateCacheConfigRequest) (*UpdateCacheConfigResponse, error)
	// Flush all cached entries
	FlushCache(context.Context, *FlushCacheRequest) (*FlushCacheResponse, error)
	mustEmbedUnimplementedWebAdminServiceServer()
}

// UnimplementedWebAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebAdminServiceServer struct{}

func (UnimplementedWebAdminServiceServer) GetCacheConfig(context.Context, *GetCacheConfigRequest) (*GetCacheConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCacheConfig not implemented")
}
func (UnimplementedWebAdminServiceServer) UpdateCacheConfig(context.Context, *UpdateCacheConfigRequest) (*UpdateCacheConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCacheConfig not implemented")
}
func (UnimplementedWebAdminServiceServer) FlushCache(context.Context, *FlushCacheRequest) (*FlushCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushCache not implemented")
}
func (UnimplementedWebAdminServiceServer) mustEmbedUnimplementedWebAdminServiceServer() {}
func (UnimplementedWebAdminServiceServer) testEmbeddedByValue()                         {}

// UnsafeWebAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebAdminServiceServer will
// result in compilation errors.
type UnsafeWebAdminServiceServer interface {
	mustEmbedUnimplementedWebAdminServiceServer()
}

func RegisterWebAdminServiceServer(s grpc.ServiceRegistrar, srv WebAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebAdminService_ServiceDesc, srv)
}

func _WebAdminService_GetCacheConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAdminServiceServer).GetCacheConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebAdminService_GetCacheConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAdminServiceServer).GetCacheConfig(ctx, req.(*GetCacheConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAdminService_UpdateCacheConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCacheConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAdminServiceServer).UpdateCacheConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebAdminService_UpdateCacheConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAdminServiceServer).UpdateCacheConfig(ctx, req.(*UpdateCacheConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAdminService_FlushCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAdminServiceServer).FlushCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebAdminService_FlushCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAdminServiceServer).FlushCache(ctx, req.(*FlushCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebAdminService_ServiceDesc is the grpc.ServiceDesc for WebAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.web.WebAdminService",
	HandlerType: (*WebAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCacheConfig",
			Handler:    _WebAdminService_GetCacheConfig_Handler,
		},
		{
			MethodName: "UpdateCacheConfig",
			Handler:    _WebAdminService_UpdateCacheConfig_Handler,
		},
		{
			MethodName: "FlushCache",
			Handler:    _WebAdminService_FlushCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/web/services/web_admin_service.proto",
}
