// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: gcommon/v1/queue/messages/batch_config.proto

package queue

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Configuration for batch operations in queue processing.
type BatchConfig struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MaxBatchSize      uint32                 `protobuf:"varint,1,opt,name=max_batch_size,json=maxBatchSize"`
	xxx_hidden_MaxWaitTime       *durationpb.Duration   `protobuf:"bytes,2,opt,name=max_wait_time,json=maxWaitTime"`
	xxx_hidden_MaxBatchBytes     uint64                 `protobuf:"varint,3,opt,name=max_batch_bytes,json=maxBatchBytes"`
	xxx_hidden_EnableCompression bool                   `protobuf:"varint,4,opt,name=enable_compression,json=enableCompression"`
	xxx_hidden_WorkerCount       uint32                 `protobuf:"varint,5,opt,name=worker_count,json=workerCount"`
	xxx_hidden_BufferSize        uint32                 `protobuf:"varint,6,opt,name=buffer_size,json=bufferSize"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	mi := &file_gcommon_v1_queue_messages_batch_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_gcommon_v1_queue_messages_batch_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchConfig) GetMaxBatchSize() uint32 {
	if x != nil {
		return x.xxx_hidden_MaxBatchSize
	}
	return 0
}

func (x *BatchConfig) GetMaxWaitTime() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_MaxWaitTime
	}
	return nil
}

func (x *BatchConfig) GetMaxBatchBytes() uint64 {
	if x != nil {
		return x.xxx_hidden_MaxBatchBytes
	}
	return 0
}

func (x *BatchConfig) GetEnableCompression() bool {
	if x != nil {
		return x.xxx_hidden_EnableCompression
	}
	return false
}

func (x *BatchConfig) GetWorkerCount() uint32 {
	if x != nil {
		return x.xxx_hidden_WorkerCount
	}
	return 0
}

func (x *BatchConfig) GetBufferSize() uint32 {
	if x != nil {
		return x.xxx_hidden_BufferSize
	}
	return 0
}

func (x *BatchConfig) SetMaxBatchSize(v uint32) {
	x.xxx_hidden_MaxBatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *BatchConfig) SetMaxWaitTime(v *durationpb.Duration) {
	x.xxx_hidden_MaxWaitTime = v
}

func (x *BatchConfig) SetMaxBatchBytes(v uint64) {
	x.xxx_hidden_MaxBatchBytes = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *BatchConfig) SetEnableCompression(v bool) {
	x.xxx_hidden_EnableCompression = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *BatchConfig) SetWorkerCount(v uint32) {
	x.xxx_hidden_WorkerCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *BatchConfig) SetBufferSize(v uint32) {
	x.xxx_hidden_BufferSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *BatchConfig) HasMaxBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchConfig) HasMaxWaitTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MaxWaitTime != nil
}

func (x *BatchConfig) HasMaxBatchBytes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchConfig) HasEnableCompression() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BatchConfig) HasWorkerCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BatchConfig) HasBufferSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *BatchConfig) ClearMaxBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MaxBatchSize = 0
}

func (x *BatchConfig) ClearMaxWaitTime() {
	x.xxx_hidden_MaxWaitTime = nil
}

func (x *BatchConfig) ClearMaxBatchBytes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MaxBatchBytes = 0
}

func (x *BatchConfig) ClearEnableCompression() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_EnableCompression = false
}

func (x *BatchConfig) ClearWorkerCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_WorkerCount = 0
}

func (x *BatchConfig) ClearBufferSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_BufferSize = 0
}

type BatchConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum number of messages per batch
	MaxBatchSize *uint32
	// Maximum time to wait before sending partial batch
	MaxWaitTime *durationpb.Duration
	// Maximum total size of batch in bytes
	MaxBatchBytes *uint64
	// Whether to enable batch compression
	EnableCompression *bool
	// Number of parallel batch workers
	WorkerCount *uint32
	// Buffer size for pending batches
	BufferSize *uint32
}

func (b0 BatchConfig_builder) Build() *BatchConfig {
	m0 := &BatchConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MaxBatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_MaxBatchSize = *b.MaxBatchSize
	}
	x.xxx_hidden_MaxWaitTime = b.MaxWaitTime
	if b.MaxBatchBytes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_MaxBatchBytes = *b.MaxBatchBytes
	}
	if b.EnableCompression != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_EnableCompression = *b.EnableCompression
	}
	if b.WorkerCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_WorkerCount = *b.WorkerCount
	}
	if b.BufferSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_BufferSize = *b.BufferSize
	}
	return m0
}

var File_gcommon_v1_queue_messages_batch_config_proto protoreflect.FileDescriptor

const file_gcommon_v1_queue_messages_batch_config_proto_rawDesc = "" +
	"\n" +
	",gcommon/v1/queue/messages/batch_config.proto\x12\x10gcommon.v1.queue\x1a\x1egoogle/protobuf/duration.proto\x1a!google/protobuf/go_features.proto\"\x8d\x02\n" +
	"\vBatchConfig\x12$\n" +
	"\x0emax_batch_size\x18\x01 \x01(\rR\fmaxBatchSize\x12=\n" +
	"\rmax_wait_time\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vmaxWaitTime\x12&\n" +
	"\x0fmax_batch_bytes\x18\x03 \x01(\x04R\rmaxBatchBytes\x12-\n" +
	"\x12enable_compression\x18\x04 \x01(\bR\x11enableCompression\x12!\n" +
	"\fworker_count\x18\x05 \x01(\rR\vworkerCount\x12\x1f\n" +
	"\vbuffer_size\x18\x06 \x01(\rR\n" +
	"bufferSizeB\xc6\x01\n" +
	"\x14com.gcommon.v1.queueB\x10BatchConfigProtoP\x01Z2github.com/jdfalk/gcommon/sdks/go/gcommon/v1/queue\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queue\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_gcommon_v1_queue_messages_batch_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gcommon_v1_queue_messages_batch_config_proto_goTypes = []any{
	(*BatchConfig)(nil),         // 0: gcommon.v1.queue.BatchConfig
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_gcommon_v1_queue_messages_batch_config_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.BatchConfig.max_wait_time:type_name -> google.protobuf.Duration
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gcommon_v1_queue_messages_batch_config_proto_init() }
func file_gcommon_v1_queue_messages_batch_config_proto_init() {
	if File_gcommon_v1_queue_messages_batch_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gcommon_v1_queue_messages_batch_config_proto_rawDesc), len(file_gcommon_v1_queue_messages_batch_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gcommon_v1_queue_messages_batch_config_proto_goTypes,
		DependencyIndexes: file_gcommon_v1_queue_messages_batch_config_proto_depIdxs,
		MessageInfos:      file_gcommon_v1_queue_messages_batch_config_proto_msgTypes,
	}.Build()
	File_gcommon_v1_queue_messages_batch_config_proto = out.File
	file_gcommon_v1_queue_messages_batch_config_proto_goTypes = nil
	file_gcommon_v1_queue_messages_batch_config_proto_depIdxs = nil
}
