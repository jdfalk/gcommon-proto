// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/database/services/migration_service.proto

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MigrationService_ApplyMigration_FullMethodName     = "/gcommon.v1.database.MigrationService/ApplyMigration"
	MigrationService_RevertMigration_FullMethodName    = "/gcommon.v1.database.MigrationService/RevertMigration"
	MigrationService_GetMigrationStatus_FullMethodName = "/gcommon.v1.database.MigrationService/GetMigrationStatus"
	MigrationService_ListMigrations_FullMethodName     = "/gcommon.v1.database.MigrationService/ListMigrations"
)

// MigrationServiceClient is the client API for MigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// MigrationService manages database schema migrations.
type MigrationServiceClient interface {
	// Apply one or more migration scripts
	ApplyMigration(ctx context.Context, in *RunMigrationRequest, opts ...grpc.CallOption) (*RunMigrationResponse, error)
	// Revert to a previous migration version
	RevertMigration(ctx context.Context, in *RevertMigrationRequest, opts ...grpc.CallOption) (*RevertMigrationResponse, error)
	// Retrieve migration status for a database
	GetMigrationStatus(ctx context.Context, in *GetMigrationStatusRequest, opts ...grpc.CallOption) (*GetMigrationStatusResponse, error)
	// List migrations and their status
	ListMigrations(ctx context.Context, in *ListMigrationsRequest, opts ...grpc.CallOption) (*ListMigrationsResponse, error)
}

type migrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationServiceClient(cc grpc.ClientConnInterface) MigrationServiceClient {
	return &migrationServiceClient{cc}
}

func (c *migrationServiceClient) ApplyMigration(ctx context.Context, in *RunMigrationRequest, opts ...grpc.CallOption) (*RunMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_ApplyMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) RevertMigration(ctx context.Context, in *RevertMigrationRequest, opts ...grpc.CallOption) (*RevertMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertMigrationResponse)
	err := c.cc.Invoke(ctx, MigrationService_RevertMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) GetMigrationStatus(ctx context.Context, in *GetMigrationStatusRequest, opts ...grpc.CallOption) (*GetMigrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMigrationStatusResponse)
	err := c.cc.Invoke(ctx, MigrationService_GetMigrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) ListMigrations(ctx context.Context, in *ListMigrationsRequest, opts ...grpc.CallOption) (*ListMigrationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMigrationsResponse)
	err := c.cc.Invoke(ctx, MigrationService_ListMigrations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServiceServer is the server API for MigrationService service.
// All implementations must embed UnimplementedMigrationServiceServer
// for forward compatibility.
//
// *
// MigrationService manages database schema migrations.
type MigrationServiceServer interface {
	// Apply one or more migration scripts
	ApplyMigration(context.Context, *RunMigrationRequest) (*RunMigrationResponse, error)
	// Revert to a previous migration version
	RevertMigration(context.Context, *RevertMigrationRequest) (*RevertMigrationResponse, error)
	// Retrieve migration status for a database
	GetMigrationStatus(context.Context, *GetMigrationStatusRequest) (*GetMigrationStatusResponse, error)
	// List migrations and their status
	ListMigrations(context.Context, *ListMigrationsRequest) (*ListMigrationsResponse, error)
	mustEmbedUnimplementedMigrationServiceServer()
}

// UnimplementedMigrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrationServiceServer struct{}

func (UnimplementedMigrationServiceServer) ApplyMigration(context.Context, *RunMigrationRequest) (*RunMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMigration not implemented")
}
func (UnimplementedMigrationServiceServer) RevertMigration(context.Context, *RevertMigrationRequest) (*RevertMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertMigration not implemented")
}
func (UnimplementedMigrationServiceServer) GetMigrationStatus(context.Context, *GetMigrationStatusRequest) (*GetMigrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrationStatus not implemented")
}
func (UnimplementedMigrationServiceServer) ListMigrations(context.Context, *ListMigrationsRequest) (*ListMigrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMigrations not implemented")
}
func (UnimplementedMigrationServiceServer) mustEmbedUnimplementedMigrationServiceServer() {}
func (UnimplementedMigrationServiceServer) testEmbeddedByValue()                          {}

// UnsafeMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServiceServer will
// result in compilation errors.
type UnsafeMigrationServiceServer interface {
	mustEmbedUnimplementedMigrationServiceServer()
}

func RegisterMigrationServiceServer(s grpc.ServiceRegistrar, srv MigrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMigrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MigrationService_ServiceDesc, srv)
}

func _MigrationService_ApplyMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ApplyMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_ApplyMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ApplyMigration(ctx, req.(*RunMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_RevertMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).RevertMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_RevertMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).RevertMigration(ctx, req.(*RevertMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_GetMigrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).GetMigrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_GetMigrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).GetMigrationStatus(ctx, req.(*GetMigrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_ListMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMigrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).ListMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationService_ListMigrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).ListMigrations(ctx, req.(*ListMigrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationService_ServiceDesc is the grpc.ServiceDesc for MigrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.database.MigrationService",
	HandlerType: (*MigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyMigration",
			Handler:    _MigrationService_ApplyMigration_Handler,
		},
		{
			MethodName: "RevertMigration",
			Handler:    _MigrationService_RevertMigration_Handler,
		},
		{
			MethodName: "GetMigrationStatus",
			Handler:    _MigrationService_GetMigrationStatus_Handler,
		},
		{
			MethodName: "ListMigrations",
			Handler:    _MigrationService_ListMigrations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/database/services/migration_service.proto",
}
