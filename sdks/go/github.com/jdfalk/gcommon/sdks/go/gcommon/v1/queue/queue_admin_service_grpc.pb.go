// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gcommon/v1/queue/services/queue_admin_service.proto

package queue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueueAdminService_CreateQueue_FullMethodName     = "/gcommon.v1.queue.QueueAdminService/CreateQueue"
	QueueAdminService_DeleteTopic_FullMethodName     = "/gcommon.v1.queue.QueueAdminService/DeleteTopic"
	QueueAdminService_PauseQueue_FullMethodName      = "/gcommon.v1.queue.QueueAdminService/PauseQueue"
	QueueAdminService_ResumeQueue_FullMethodName     = "/gcommon.v1.queue.QueueAdminService/ResumeQueue"
	QueueAdminService_PurgeQueue_FullMethodName      = "/gcommon.v1.queue.QueueAdminService/PurgeQueue"
	QueueAdminService_ResetQueueStats_FullMethodName = "/gcommon.v1.queue.QueueAdminService/ResetQueueStats"
)

// QueueAdminServiceClient is the client API for QueueAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Administrative service for queue management operations
type QueueAdminServiceClient interface {
	// Create a new queue
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	// Delete a queue/topic
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	// Pause queue operations
	PauseQueue(ctx context.Context, in *PauseQueueRequest, opts ...grpc.CallOption) (*PauseQueueResponse, error)
	// Resume queue operations
	ResumeQueue(ctx context.Context, in *ResumeQueueRequest, opts ...grpc.CallOption) (*ResumeQueueResponse, error)
	// Purge queue contents
	PurgeQueue(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error)
	// Reset queue statistics
	ResetQueueStats(ctx context.Context, in *ResetQueueStatsRequest, opts ...grpc.CallOption) (*ResetQueueStatsResponse, error)
}

type queueAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueAdminServiceClient(cc grpc.ClientConnInterface) QueueAdminServiceClient {
	return &queueAdminServiceClient{cc}
}

func (c *queueAdminServiceClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueAdminServiceClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueAdminServiceClient) PauseQueue(ctx context.Context, in *PauseQueueRequest, opts ...grpc.CallOption) (*PauseQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseQueueResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_PauseQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueAdminServiceClient) ResumeQueue(ctx context.Context, in *ResumeQueueRequest, opts ...grpc.CallOption) (*ResumeQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeQueueResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_ResumeQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueAdminServiceClient) PurgeQueue(ctx context.Context, in *PurgeRequest, opts ...grpc.CallOption) (*PurgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_PurgeQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueAdminServiceClient) ResetQueueStats(ctx context.Context, in *ResetQueueStatsRequest, opts ...grpc.CallOption) (*ResetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetQueueStatsResponse)
	err := c.cc.Invoke(ctx, QueueAdminService_ResetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueAdminServiceServer is the server API for QueueAdminService service.
// All implementations must embed UnimplementedQueueAdminServiceServer
// for forward compatibility.
//
// Administrative service for queue management operations
type QueueAdminServiceServer interface {
	// Create a new queue
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	// Delete a queue/topic
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	// Pause queue operations
	PauseQueue(context.Context, *PauseQueueRequest) (*PauseQueueResponse, error)
	// Resume queue operations
	ResumeQueue(context.Context, *ResumeQueueRequest) (*ResumeQueueResponse, error)
	// Purge queue contents
	PurgeQueue(context.Context, *PurgeRequest) (*PurgeResponse, error)
	// Reset queue statistics
	ResetQueueStats(context.Context, *ResetQueueStatsRequest) (*ResetQueueStatsResponse, error)
	mustEmbedUnimplementedQueueAdminServiceServer()
}

// UnimplementedQueueAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueAdminServiceServer struct{}

func (UnimplementedQueueAdminServiceServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedQueueAdminServiceServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedQueueAdminServiceServer) PauseQueue(context.Context, *PauseQueueRequest) (*PauseQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseQueue not implemented")
}
func (UnimplementedQueueAdminServiceServer) ResumeQueue(context.Context, *ResumeQueueRequest) (*ResumeQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeQueue not implemented")
}
func (UnimplementedQueueAdminServiceServer) PurgeQueue(context.Context, *PurgeRequest) (*PurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueue not implemented")
}
func (UnimplementedQueueAdminServiceServer) ResetQueueStats(context.Context, *ResetQueueStatsRequest) (*ResetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetQueueStats not implemented")
}
func (UnimplementedQueueAdminServiceServer) mustEmbedUnimplementedQueueAdminServiceServer() {}
func (UnimplementedQueueAdminServiceServer) testEmbeddedByValue()                           {}

// UnsafeQueueAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueAdminServiceServer will
// result in compilation errors.
type UnsafeQueueAdminServiceServer interface {
	mustEmbedUnimplementedQueueAdminServiceServer()
}

func RegisterQueueAdminServiceServer(s grpc.ServiceRegistrar, srv QueueAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueueAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueueAdminService_ServiceDesc, srv)
}

func _QueueAdminService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueAdminService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueAdminService_PauseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).PauseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_PauseQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).PauseQueue(ctx, req.(*PauseQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueAdminService_ResumeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).ResumeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_ResumeQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).ResumeQueue(ctx, req.(*ResumeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueAdminService_PurgeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).PurgeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_PurgeQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).PurgeQueue(ctx, req.(*PurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueAdminService_ResetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueAdminServiceServer).ResetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueAdminService_ResetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueAdminServiceServer).ResetQueueStats(ctx, req.(*ResetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueAdminService_ServiceDesc is the grpc.ServiceDesc for QueueAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.queue.QueueAdminService",
	HandlerType: (*QueueAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _QueueAdminService_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _QueueAdminService_DeleteTopic_Handler,
		},
		{
			MethodName: "PauseQueue",
			Handler:    _QueueAdminService_PauseQueue_Handler,
		},
		{
			MethodName: "ResumeQueue",
			Handler:    _QueueAdminService_ResumeQueue_Handler,
		},
		{
			MethodName: "PurgeQueue",
			Handler:    _QueueAdminService_PurgeQueue_Handler,
		},
		{
			MethodName: "ResetQueueStats",
			Handler:    _QueueAdminService_ResetQueueStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcommon/v1/queue/services/queue_admin_service.proto",
}
