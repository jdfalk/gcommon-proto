// file: proto/gcommon/v2/queue/enqueue_request.proto
// version: 1.0.0
// guid: bd5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a

edition = "2023";

package queue.v2;

import "common/v2/request_metadata.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";
// Standard imports
// Common types

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/queue/v2";

/**
 * EnqueueRequest adds a message to a queue.
 * Supports both simple message enqueuing and advanced features
 * like scheduling, priority, and message grouping.
 *
 * Follows 1-1-1 pattern: one message per file.
 */
message EnqueueRequest {
  // Required fields (1-10)

  /**
   * The name/identifier of the queue to send the message to.
   * Must be a valid queue that exists or will be created.
   */
  string queue_name = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 100
    ];

  /**
   * The message payload. Can contain any data type.
   * The receiving application is responsible for deserializing.
   */
  google.protobuf.Any payload = 2;

  // Optional fields (11-50)

  /**
   * Standard request metadata including authentication context,
   * tracing information, and client details.
   */
  common.v1.RequestMetadata metadata = 11;

  /**
   * Message priority (0-255, where 255 is highest priority).
   * Higher priority messages are delivered first. Default: 128.
   */
  int32 priority = 12;

  /**
   * Delay before the message becomes available for consumption.
   * Use for scheduled message delivery.
   */
  google.protobuf.Duration delay = 13;

  /**
   * Message expiration time. Message will be removed if not
   * consumed before this time. If not set, uses queue default.
   */
  google.protobuf.Timestamp expires_at = 14;

  /**
   * Message group ID for ordered processing. Messages with
   * the same group_id are processed in FIFO order.
   */
  string group_id = 15;

  /**
   * Deduplication ID to prevent duplicate message processing.
   * If a message with the same dedup_id is already in the queue,
   * this request will be ignored.
   */
  string deduplication_id = 16;

  /**
   * Maximum number of delivery attempts before the message
   * is moved to dead letter queue. Default: queue configuration.
   */
  int32 max_delivery_attempts = 17;

  /**
   * Custom attributes/headers for the message.
   * Can be used for routing, filtering, or application-specific metadata.
   */
  map<string, string> attributes = 18;

  /**
   * Content type of the payload (e.g., "application/json", "text/plain").
   * Helps consumers understand how to process the message.
   */
  string content_type = 19;

  /**
   * Message source identifier. Useful for tracking which
   * application or service generated the message.
   */
  string source = 20;

  /**
   * Message type/event name. Helps consumers route messages
   * to appropriate handlers.
   */
  string message_type = 21;

  /**
   * Correlation ID for linking related messages across
   * different queues or processing stages.
   */
  string correlation_id = 22;

  /**
   * Reply-to queue name for request-response patterns.
   * If set, response should be sent to this queue.
   */
  string reply_to = 23;
}
