// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/log/proto/log.proto

package logpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogService_Log_FullMethodName         = "/gcommon.v1.log.LogService/Log"
	LogService_LogBatch_FullMethodName    = "/gcommon.v1.log.LogService/LogBatch"
	LogService_Query_FullMethodName       = "/gcommon.v1.log.LogService/Query"
	LogService_Stream_FullMethodName      = "/gcommon.v1.log.LogService/Stream"
	LogService_GetLogLevel_FullMethodName = "/gcommon.v1.log.LogService/GetLogLevel"
	LogService_SetLogLevel_FullMethodName = "/gcommon.v1.log.LogService/SetLogLevel"
	LogService_GetLogStats_FullMethodName = "/gcommon.v1.log.LogService/GetLogStats"
)

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LogService provides comprehensive logging capabilities
type LogServiceClient interface {
	// Log writes a log entry
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// LogBatch writes multiple log entries
	LogBatch(ctx context.Context, in *LogBatchRequest, opts ...grpc.CallOption) (*LogBatchResponse, error)
	// Query searches and retrieves log entries
	Query(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (*QueryLogResponse, error)
	// Stream returns a real-time stream of log entries
	Stream(ctx context.Context, in *StreamLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// GetLogLevel returns the current log level
	GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*GetLogLevelResponse, error)
	// SetLogLevel changes the log level
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	// GetLogStats returns logging statistics
	GetLogStats(ctx context.Context, in *GetLogStatsRequest, opts ...grpc.CallOption) (*GetLogStatsResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, LogService_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) LogBatch(ctx context.Context, in *LogBatchRequest, opts ...grpc.CallOption) (*LogBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogBatchResponse)
	err := c.cc.Invoke(ctx, LogService_LogBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Query(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (*QueryLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryLogResponse)
	err := c.cc.Invoke(ctx, LogService_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Stream(ctx context.Context, in *StreamLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogService_ServiceDesc.Streams[0], LogService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLogRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_StreamClient = grpc.ServerStreamingClient[LogEntry]

func (c *logServiceClient) GetLogLevel(ctx context.Context, in *GetLogLevelRequest, opts ...grpc.CallOption) (*GetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogLevelResponse)
	err := c.cc.Invoke(ctx, LogService_GetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, LogService_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogStats(ctx context.Context, in *GetLogStatsRequest, opts ...grpc.CallOption) (*GetLogStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogStatsResponse)
	err := c.cc.Invoke(ctx, LogService_GetLogStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
// All implementations should embed UnimplementedLogServiceServer
// for forward compatibility.
//
// LogService provides comprehensive logging capabilities
type LogServiceServer interface {
	// Log writes a log entry
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// LogBatch writes multiple log entries
	LogBatch(context.Context, *LogBatchRequest) (*LogBatchResponse, error)
	// Query searches and retrieves log entries
	Query(context.Context, *QueryLogRequest) (*QueryLogResponse, error)
	// Stream returns a real-time stream of log entries
	Stream(*StreamLogRequest, grpc.ServerStreamingServer[LogEntry]) error
	// GetLogLevel returns the current log level
	GetLogLevel(context.Context, *GetLogLevelRequest) (*GetLogLevelResponse, error)
	// SetLogLevel changes the log level
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	// GetLogStats returns logging statistics
	GetLogStats(context.Context, *GetLogStatsRequest) (*GetLogStatsResponse, error)
}

// UnimplementedLogServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogServiceServer struct{}

func (UnimplementedLogServiceServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedLogServiceServer) LogBatch(context.Context, *LogBatchRequest) (*LogBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogBatch not implemented")
}
func (UnimplementedLogServiceServer) Query(context.Context, *QueryLogRequest) (*QueryLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedLogServiceServer) Stream(*StreamLogRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedLogServiceServer) GetLogLevel(context.Context, *GetLogLevelRequest) (*GetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (UnimplementedLogServiceServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedLogServiceServer) GetLogStats(context.Context, *GetLogStatsRequest) (*GetLogStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogStats not implemented")
}
func (UnimplementedLogServiceServer) testEmbeddedByValue() {}

// UnsafeLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServiceServer will
// result in compilation errors.
type UnsafeLogServiceServer interface {
	mustEmbedUnimplementedLogServiceServer()
}

func RegisterLogServiceServer(s grpc.ServiceRegistrar, srv LogServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogService_ServiceDesc, srv)
}

func _LogService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_LogBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).LogBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_LogBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).LogBatch(ctx, req.(*LogBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Query(ctx, req.(*QueryLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Stream(m, &grpc.GenericServerStream[StreamLogRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogService_StreamServer = grpc.ServerStreamingServer[LogEntry]

func _LogService_GetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_GetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogLevel(ctx, req.(*GetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogService_GetLogStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogStats(ctx, req.(*GetLogStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogService_ServiceDesc is the grpc.ServiceDesc for LogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.log.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _LogService_Log_Handler,
		},
		{
			MethodName: "LogBatch",
			Handler:    _LogService_LogBatch_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _LogService_Query_Handler,
		},
		{
			MethodName: "GetLogLevel",
			Handler:    _LogService_GetLogLevel_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _LogService_SetLogLevel_Handler,
		},
		{
			MethodName: "GetLogStats",
			Handler:    _LogService_GetLogStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _LogService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/log/proto/log.proto",
}

const (
	LogAdminService_CreateLogger_FullMethodName      = "/gcommon.v1.log.LogAdminService/CreateLogger"
	LogAdminService_UpdateLogger_FullMethodName      = "/gcommon.v1.log.LogAdminService/UpdateLogger"
	LogAdminService_DeleteLogger_FullMethodName      = "/gcommon.v1.log.LogAdminService/DeleteLogger"
	LogAdminService_ListLoggers_FullMethodName       = "/gcommon.v1.log.LogAdminService/ListLoggers"
	LogAdminService_ConfigureAppender_FullMethodName = "/gcommon.v1.log.LogAdminService/ConfigureAppender"
)

// LogAdminServiceClient is the client API for LogAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LogAdminService provides administrative logging operations
type LogAdminServiceClient interface {
	// CreateLogger creates a new logger instance
	CreateLogger(ctx context.Context, in *CreateLoggerRequest, opts ...grpc.CallOption) (*CreateLoggerResponse, error)
	// UpdateLogger updates logger configuration
	UpdateLogger(ctx context.Context, in *UpdateLoggerRequest, opts ...grpc.CallOption) (*UpdateLoggerResponse, error)
	// DeleteLogger removes a logger instance
	DeleteLogger(ctx context.Context, in *DeleteLoggerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListLoggers returns all available loggers
	ListLoggers(ctx context.Context, in *ListLoggersRequest, opts ...grpc.CallOption) (*ListLoggersResponse, error)
	// ConfigureAppender configures log output destinations
	ConfigureAppender(ctx context.Context, in *ConfigureAppenderRequest, opts ...grpc.CallOption) (*ConfigureAppenderResponse, error)
}

type logAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogAdminServiceClient(cc grpc.ClientConnInterface) LogAdminServiceClient {
	return &logAdminServiceClient{cc}
}

func (c *logAdminServiceClient) CreateLogger(ctx context.Context, in *CreateLoggerRequest, opts ...grpc.CallOption) (*CreateLoggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoggerResponse)
	err := c.cc.Invoke(ctx, LogAdminService_CreateLogger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logAdminServiceClient) UpdateLogger(ctx context.Context, in *UpdateLoggerRequest, opts ...grpc.CallOption) (*UpdateLoggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoggerResponse)
	err := c.cc.Invoke(ctx, LogAdminService_UpdateLogger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logAdminServiceClient) DeleteLogger(ctx context.Context, in *DeleteLoggerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LogAdminService_DeleteLogger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logAdminServiceClient) ListLoggers(ctx context.Context, in *ListLoggersRequest, opts ...grpc.CallOption) (*ListLoggersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoggersResponse)
	err := c.cc.Invoke(ctx, LogAdminService_ListLoggers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logAdminServiceClient) ConfigureAppender(ctx context.Context, in *ConfigureAppenderRequest, opts ...grpc.CallOption) (*ConfigureAppenderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureAppenderResponse)
	err := c.cc.Invoke(ctx, LogAdminService_ConfigureAppender_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogAdminServiceServer is the server API for LogAdminService service.
// All implementations should embed UnimplementedLogAdminServiceServer
// for forward compatibility.
//
// LogAdminService provides administrative logging operations
type LogAdminServiceServer interface {
	// CreateLogger creates a new logger instance
	CreateLogger(context.Context, *CreateLoggerRequest) (*CreateLoggerResponse, error)
	// UpdateLogger updates logger configuration
	UpdateLogger(context.Context, *UpdateLoggerRequest) (*UpdateLoggerResponse, error)
	// DeleteLogger removes a logger instance
	DeleteLogger(context.Context, *DeleteLoggerRequest) (*emptypb.Empty, error)
	// ListLoggers returns all available loggers
	ListLoggers(context.Context, *ListLoggersRequest) (*ListLoggersResponse, error)
	// ConfigureAppender configures log output destinations
	ConfigureAppender(context.Context, *ConfigureAppenderRequest) (*ConfigureAppenderResponse, error)
}

// UnimplementedLogAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogAdminServiceServer struct{}

func (UnimplementedLogAdminServiceServer) CreateLogger(context.Context, *CreateLoggerRequest) (*CreateLoggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogger not implemented")
}
func (UnimplementedLogAdminServiceServer) UpdateLogger(context.Context, *UpdateLoggerRequest) (*UpdateLoggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogger not implemented")
}
func (UnimplementedLogAdminServiceServer) DeleteLogger(context.Context, *DeleteLoggerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogger not implemented")
}
func (UnimplementedLogAdminServiceServer) ListLoggers(context.Context, *ListLoggersRequest) (*ListLoggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoggers not implemented")
}
func (UnimplementedLogAdminServiceServer) ConfigureAppender(context.Context, *ConfigureAppenderRequest) (*ConfigureAppenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAppender not implemented")
}
func (UnimplementedLogAdminServiceServer) testEmbeddedByValue() {}

// UnsafeLogAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogAdminServiceServer will
// result in compilation errors.
type UnsafeLogAdminServiceServer interface {
	mustEmbedUnimplementedLogAdminServiceServer()
}

func RegisterLogAdminServiceServer(s grpc.ServiceRegistrar, srv LogAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogAdminService_ServiceDesc, srv)
}

func _LogAdminService_CreateLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAdminServiceServer).CreateLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogAdminService_CreateLogger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAdminServiceServer).CreateLogger(ctx, req.(*CreateLoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogAdminService_UpdateLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAdminServiceServer).UpdateLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogAdminService_UpdateLogger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAdminServiceServer).UpdateLogger(ctx, req.(*UpdateLoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogAdminService_DeleteLogger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAdminServiceServer).DeleteLogger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogAdminService_DeleteLogger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAdminServiceServer).DeleteLogger(ctx, req.(*DeleteLoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogAdminService_ListLoggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAdminServiceServer).ListLoggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogAdminService_ListLoggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAdminServiceServer).ListLoggers(ctx, req.(*ListLoggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogAdminService_ConfigureAppender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureAppenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogAdminServiceServer).ConfigureAppender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogAdminService_ConfigureAppender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogAdminServiceServer).ConfigureAppender(ctx, req.(*ConfigureAppenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogAdminService_ServiceDesc is the grpc.ServiceDesc for LogAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.log.LogAdminService",
	HandlerType: (*LogAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogger",
			Handler:    _LogAdminService_CreateLogger_Handler,
		},
		{
			MethodName: "UpdateLogger",
			Handler:    _LogAdminService_UpdateLogger_Handler,
		},
		{
			MethodName: "DeleteLogger",
			Handler:    _LogAdminService_DeleteLogger_Handler,
		},
		{
			MethodName: "ListLoggers",
			Handler:    _LogAdminService_ListLoggers_Handler,
		},
		{
			MethodName: "ConfigureAppender",
			Handler:    _LogAdminService_ConfigureAppender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/log/proto/log.proto",
}
