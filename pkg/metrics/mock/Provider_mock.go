// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"
	"net/http"

	"github.com/jdfalk/gcommon/pkg/metrics"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Counter provides a mock function for the type MockProvider
func (_mock *MockProvider) Counter(name string, options ...metrics.Option) metrics.Counter {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, options)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Counter")
	}

	var r0 metrics.Counter
	if returnFunc, ok := ret.Get(0).(func(string, ...metrics.Option) metrics.Counter); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}
	return r0
}

// MockProvider_Counter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Counter'
type MockProvider_Counter_Call struct {
	*mock.Call
}

// Counter is a helper method to define mock.On call
//   - name string
//   - options ...metrics.Option
func (_e *MockProvider_Expecter) Counter(name interface{}, options ...interface{}) *MockProvider_Counter_Call {
	return &MockProvider_Counter_Call{Call: _e.mock.On("Counter",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockProvider_Counter_Call) Run(run func(name string, options ...metrics.Option)) *MockProvider_Counter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 1 {
			variadicArgs = args[1].([]metrics.Option)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvider_Counter_Call) Return(counter metrics.Counter) *MockProvider_Counter_Call {
	_c.Call.Return(counter)
	return _c
}

func (_c *MockProvider_Counter_Call) RunAndReturn(run func(name string, options ...metrics.Option) metrics.Counter) *MockProvider_Counter_Call {
	_c.Call.Return(run)
	return _c
}

// Gauge provides a mock function for the type MockProvider
func (_mock *MockProvider) Gauge(name string, options ...metrics.Option) metrics.Gauge {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, options)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Gauge")
	}

	var r0 metrics.Gauge
	if returnFunc, ok := ret.Get(0).(func(string, ...metrics.Option) metrics.Gauge); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Gauge)
		}
	}
	return r0
}

// MockProvider_Gauge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gauge'
type MockProvider_Gauge_Call struct {
	*mock.Call
}

// Gauge is a helper method to define mock.On call
//   - name string
//   - options ...metrics.Option
func (_e *MockProvider_Expecter) Gauge(name interface{}, options ...interface{}) *MockProvider_Gauge_Call {
	return &MockProvider_Gauge_Call{Call: _e.mock.On("Gauge",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockProvider_Gauge_Call) Run(run func(name string, options ...metrics.Option)) *MockProvider_Gauge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 1 {
			variadicArgs = args[1].([]metrics.Option)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvider_Gauge_Call) Return(gauge metrics.Gauge) *MockProvider_Gauge_Call {
	_c.Call.Return(gauge)
	return _c
}

func (_c *MockProvider_Gauge_Call) RunAndReturn(run func(name string, options ...metrics.Option) metrics.Gauge) *MockProvider_Gauge_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function for the type MockProvider
func (_mock *MockProvider) Handler() http.Handler {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 http.Handler
	if returnFunc, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}
	return r0
}

// MockProvider_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type MockProvider_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Handler() *MockProvider_Handler_Call {
	return &MockProvider_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *MockProvider_Handler_Call) Run(run func()) *MockProvider_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Handler_Call) Return(handler http.Handler) *MockProvider_Handler_Call {
	_c.Call.Return(handler)
	return _c
}

func (_c *MockProvider_Handler_Call) RunAndReturn(run func() http.Handler) *MockProvider_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Histogram provides a mock function for the type MockProvider
func (_mock *MockProvider) Histogram(name string, options ...metrics.Option) metrics.Histogram {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, options)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Histogram")
	}

	var r0 metrics.Histogram
	if returnFunc, ok := ret.Get(0).(func(string, ...metrics.Option) metrics.Histogram); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Histogram)
		}
	}
	return r0
}

// MockProvider_Histogram_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Histogram'
type MockProvider_Histogram_Call struct {
	*mock.Call
}

// Histogram is a helper method to define mock.On call
//   - name string
//   - options ...metrics.Option
func (_e *MockProvider_Expecter) Histogram(name interface{}, options ...interface{}) *MockProvider_Histogram_Call {
	return &MockProvider_Histogram_Call{Call: _e.mock.On("Histogram",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockProvider_Histogram_Call) Run(run func(name string, options ...metrics.Option)) *MockProvider_Histogram_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 1 {
			variadicArgs = args[1].([]metrics.Option)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvider_Histogram_Call) Return(histogram metrics.Histogram) *MockProvider_Histogram_Call {
	_c.Call.Return(histogram)
	return _c
}

func (_c *MockProvider_Histogram_Call) RunAndReturn(run func(name string, options ...metrics.Option) metrics.Histogram) *MockProvider_Histogram_Call {
	_c.Call.Return(run)
	return _c
}

// Registry provides a mock function for the type MockProvider
func (_mock *MockProvider) Registry() metrics.Registry {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Registry")
	}

	var r0 metrics.Registry
	if returnFunc, ok := ret.Get(0).(func() metrics.Registry); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Registry)
		}
	}
	return r0
}

// MockProvider_Registry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registry'
type MockProvider_Registry_Call struct {
	*mock.Call
}

// Registry is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Registry() *MockProvider_Registry_Call {
	return &MockProvider_Registry_Call{Call: _e.mock.On("Registry")}
}

func (_c *MockProvider_Registry_Call) Run(run func()) *MockProvider_Registry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Registry_Call) Return(registry metrics.Registry) *MockProvider_Registry_Call {
	_c.Call.Return(registry)
	return _c
}

func (_c *MockProvider_Registry_Call) RunAndReturn(run func() metrics.Registry) *MockProvider_Registry_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockProvider
func (_mock *MockProvider) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockProvider_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) Start(ctx interface{}) *MockProvider_Start_Call {
	return &MockProvider_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockProvider_Start_Call) Run(run func(ctx context.Context)) *MockProvider_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_Start_Call) Return(err error) *MockProvider_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockProvider_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockProvider
func (_mock *MockProvider) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProvider_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockProvider_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvider_Expecter) Stop(ctx interface{}) *MockProvider_Stop_Call {
	return &MockProvider_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockProvider_Stop_Call) Run(run func(ctx context.Context)) *MockProvider_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProvider_Stop_Call) Return(err error) *MockProvider_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProvider_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockProvider_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Summary provides a mock function for the type MockProvider
func (_mock *MockProvider) Summary(name string, options ...metrics.Option) metrics.Summary {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, options)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Summary")
	}

	var r0 metrics.Summary
	if returnFunc, ok := ret.Get(0).(func(string, ...metrics.Option) metrics.Summary); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Summary)
		}
	}
	return r0
}

// MockProvider_Summary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Summary'
type MockProvider_Summary_Call struct {
	*mock.Call
}

// Summary is a helper method to define mock.On call
//   - name string
//   - options ...metrics.Option
func (_e *MockProvider_Expecter) Summary(name interface{}, options ...interface{}) *MockProvider_Summary_Call {
	return &MockProvider_Summary_Call{Call: _e.mock.On("Summary",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockProvider_Summary_Call) Run(run func(name string, options ...metrics.Option)) *MockProvider_Summary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 1 {
			variadicArgs = args[1].([]metrics.Option)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvider_Summary_Call) Return(summary metrics.Summary) *MockProvider_Summary_Call {
	_c.Call.Return(summary)
	return _c
}

func (_c *MockProvider_Summary_Call) RunAndReturn(run func(name string, options ...metrics.Option) metrics.Summary) *MockProvider_Summary_Call {
	_c.Call.Return(run)
	return _c
}

// Timer provides a mock function for the type MockProvider
func (_mock *MockProvider) Timer(name string, options ...metrics.Option) metrics.Timer {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, options)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Timer")
	}

	var r0 metrics.Timer
	if returnFunc, ok := ret.Get(0).(func(string, ...metrics.Option) metrics.Timer); ok {
		r0 = returnFunc(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Timer)
		}
	}
	return r0
}

// MockProvider_Timer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timer'
type MockProvider_Timer_Call struct {
	*mock.Call
}

// Timer is a helper method to define mock.On call
//   - name string
//   - options ...metrics.Option
func (_e *MockProvider_Expecter) Timer(name interface{}, options ...interface{}) *MockProvider_Timer_Call {
	return &MockProvider_Timer_Call{Call: _e.mock.On("Timer",
		append([]interface{}{name}, options...)...)}
}

func (_c *MockProvider_Timer_Call) Run(run func(name string, options ...metrics.Option)) *MockProvider_Timer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 1 {
			variadicArgs = args[1].([]metrics.Option)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockProvider_Timer_Call) Return(timer metrics.Timer) *MockProvider_Timer_Call {
	_c.Call.Return(timer)
	return _c
}

func (_c *MockProvider_Timer_Call) RunAndReturn(run func(name string, options ...metrics.Option) metrics.Timer) *MockProvider_Timer_Call {
	_c.Call.Return(run)
	return _c
}

// WithTags provides a mock function for the type MockProvider
func (_mock *MockProvider) WithTags(tags ...metrics.Tag) metrics.Provider {
	var tmpRet mock.Arguments
	if len(tags) > 0 {
		tmpRet = _mock.Called(tags)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WithTags")
	}

	var r0 metrics.Provider
	if returnFunc, ok := ret.Get(0).(func(...metrics.Tag) metrics.Provider); ok {
		r0 = returnFunc(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Provider)
		}
	}
	return r0
}

// MockProvider_WithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTags'
type MockProvider_WithTags_Call struct {
	*mock.Call
}

// WithTags is a helper method to define mock.On call
//   - tags ...metrics.Tag
func (_e *MockProvider_Expecter) WithTags(tags ...interface{}) *MockProvider_WithTags_Call {
	return &MockProvider_WithTags_Call{Call: _e.mock.On("WithTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockProvider_WithTags_Call) Run(run func(tags ...metrics.Tag)) *MockProvider_WithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []metrics.Tag
		var variadicArgs []metrics.Tag
		if len(args) > 0 {
			variadicArgs = args[0].([]metrics.Tag)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockProvider_WithTags_Call) Return(provider metrics.Provider) *MockProvider_WithTags_Call {
	_c.Call.Return(provider)
	return _c
}

func (_c *MockProvider_WithTags_Call) RunAndReturn(run func(tags ...metrics.Tag) metrics.Provider) *MockProvider_WithTags_Call {
	_c.Call.Return(run)
	return _c
}
