// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/jdfalk/gcommon/pkg/metrics"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGauge creates a new instance of MockGauge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGauge(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGauge {
	mock := &MockGauge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGauge is an autogenerated mock type for the Gauge type
type MockGauge struct {
	mock.Mock
}

type MockGauge_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGauge) EXPECT() *MockGauge_Expecter {
	return &MockGauge_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockGauge
func (_mock *MockGauge) Add(value float64) {
	_mock.Called(value)
	return
}

// MockGauge_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockGauge_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - value float64
func (_e *MockGauge_Expecter) Add(value interface{}) *MockGauge_Add_Call {
	return &MockGauge_Add_Call{Call: _e.mock.On("Add", value)}
}

func (_c *MockGauge_Add_Call) Run(run func(value float64)) *MockGauge_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGauge_Add_Call) Return() *MockGauge_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGauge_Add_Call) RunAndReturn(run func(value float64)) *MockGauge_Add_Call {
	_c.Run(run)
	return _c
}

// Dec provides a mock function for the type MockGauge
func (_mock *MockGauge) Dec() {
	_mock.Called()
	return
}

// MockGauge_Dec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dec'
type MockGauge_Dec_Call struct {
	*mock.Call
}

// Dec is a helper method to define mock.On call
func (_e *MockGauge_Expecter) Dec() *MockGauge_Dec_Call {
	return &MockGauge_Dec_Call{Call: _e.mock.On("Dec")}
}

func (_c *MockGauge_Dec_Call) Run(run func()) *MockGauge_Dec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGauge_Dec_Call) Return() *MockGauge_Dec_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGauge_Dec_Call) RunAndReturn(run func()) *MockGauge_Dec_Call {
	_c.Run(run)
	return _c
}

// Inc provides a mock function for the type MockGauge
func (_mock *MockGauge) Inc() {
	_mock.Called()
	return
}

// MockGauge_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type MockGauge_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
func (_e *MockGauge_Expecter) Inc() *MockGauge_Inc_Call {
	return &MockGauge_Inc_Call{Call: _e.mock.On("Inc")}
}

func (_c *MockGauge_Inc_Call) Run(run func()) *MockGauge_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGauge_Inc_Call) Return() *MockGauge_Inc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGauge_Inc_Call) RunAndReturn(run func()) *MockGauge_Inc_Call {
	_c.Run(run)
	return _c
}

// Set provides a mock function for the type MockGauge
func (_mock *MockGauge) Set(value float64) {
	_mock.Called(value)
	return
}

// MockGauge_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockGauge_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - value float64
func (_e *MockGauge_Expecter) Set(value interface{}) *MockGauge_Set_Call {
	return &MockGauge_Set_Call{Call: _e.mock.On("Set", value)}
}

func (_c *MockGauge_Set_Call) Run(run func(value float64)) *MockGauge_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGauge_Set_Call) Return() *MockGauge_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGauge_Set_Call) RunAndReturn(run func(value float64)) *MockGauge_Set_Call {
	_c.Run(run)
	return _c
}

// Sub provides a mock function for the type MockGauge
func (_mock *MockGauge) Sub(value float64) {
	_mock.Called(value)
	return
}

// MockGauge_Sub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sub'
type MockGauge_Sub_Call struct {
	*mock.Call
}

// Sub is a helper method to define mock.On call
//   - value float64
func (_e *MockGauge_Expecter) Sub(value interface{}) *MockGauge_Sub_Call {
	return &MockGauge_Sub_Call{Call: _e.mock.On("Sub", value)}
}

func (_c *MockGauge_Sub_Call) Run(run func(value float64)) *MockGauge_Sub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockGauge_Sub_Call) Return() *MockGauge_Sub_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGauge_Sub_Call) RunAndReturn(run func(value float64)) *MockGauge_Sub_Call {
	_c.Run(run)
	return _c
}

// Value provides a mock function for the type MockGauge
func (_mock *MockGauge) Value() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockGauge_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockGauge_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockGauge_Expecter) Value() *MockGauge_Value_Call {
	return &MockGauge_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockGauge_Value_Call) Run(run func()) *MockGauge_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGauge_Value_Call) Return(f float64) *MockGauge_Value_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockGauge_Value_Call) RunAndReturn(run func() float64) *MockGauge_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithTags provides a mock function for the type MockGauge
func (_mock *MockGauge) WithTags(tags ...metrics.Tag) metrics.Gauge {
	var tmpRet mock.Arguments
	if len(tags) > 0 {
		tmpRet = _mock.Called(tags)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WithTags")
	}

	var r0 metrics.Gauge
	if returnFunc, ok := ret.Get(0).(func(...metrics.Tag) metrics.Gauge); ok {
		r0 = returnFunc(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Gauge)
		}
	}
	return r0
}

// MockGauge_WithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTags'
type MockGauge_WithTags_Call struct {
	*mock.Call
}

// WithTags is a helper method to define mock.On call
//   - tags ...metrics.Tag
func (_e *MockGauge_Expecter) WithTags(tags ...interface{}) *MockGauge_WithTags_Call {
	return &MockGauge_WithTags_Call{Call: _e.mock.On("WithTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockGauge_WithTags_Call) Run(run func(tags ...metrics.Tag)) *MockGauge_WithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []metrics.Tag
		var variadicArgs []metrics.Tag
		if len(args) > 0 {
			variadicArgs = args[0].([]metrics.Tag)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockGauge_WithTags_Call) Return(gauge metrics.Gauge) *MockGauge_WithTags_Call {
	_c.Call.Return(gauge)
	return _c
}

func (_c *MockGauge_WithTags_Call) RunAndReturn(run func(tags ...metrics.Tag) metrics.Gauge) *MockGauge_WithTags_Call {
	_c.Call.Return(run)
	return _c
}
