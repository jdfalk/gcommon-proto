// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockMetricsServiceServer creates a new instance of MockMetricsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsServiceServer {
	mock := &MockMetricsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsServiceServer is an autogenerated mock type for the MetricsServiceServer type
type MockMetricsServiceServer struct {
	mock.Mock
}

type MockMetricsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsServiceServer) EXPECT() *MockMetricsServiceServer_Expecter {
	return &MockMetricsServiceServer_Expecter{mock: &_m.Mock}
}

// CollectMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) CollectMetrics(context1 context.Context, collectMetricsRequest *proto.CollectMetricsRequest) (*proto.CollectMetricsResponse, error) {
	ret := _mock.Called(context1, collectMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for CollectMetrics")
	}

	var r0 *proto.CollectMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CollectMetricsRequest) (*proto.CollectMetricsResponse, error)); ok {
		return returnFunc(context1, collectMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CollectMetricsRequest) *proto.CollectMetricsResponse); ok {
		r0 = returnFunc(context1, collectMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CollectMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CollectMetricsRequest) error); ok {
		r1 = returnFunc(context1, collectMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_CollectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectMetrics'
type MockMetricsServiceServer_CollectMetrics_Call struct {
	*mock.Call
}

// CollectMetrics is a helper method to define mock.On call
//   - context1
//   - collectMetricsRequest
func (_e *MockMetricsServiceServer_Expecter) CollectMetrics(context1 interface{}, collectMetricsRequest interface{}) *MockMetricsServiceServer_CollectMetrics_Call {
	return &MockMetricsServiceServer_CollectMetrics_Call{Call: _e.mock.On("CollectMetrics", context1, collectMetricsRequest)}
}

func (_c *MockMetricsServiceServer_CollectMetrics_Call) Run(run func(context1 context.Context, collectMetricsRequest *proto.CollectMetricsRequest)) *MockMetricsServiceServer_CollectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CollectMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsServiceServer_CollectMetrics_Call) Return(collectMetricsResponse *proto.CollectMetricsResponse, err error) *MockMetricsServiceServer_CollectMetrics_Call {
	_c.Call.Return(collectMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_CollectMetrics_Call) RunAndReturn(run func(context1 context.Context, collectMetricsRequest *proto.CollectMetricsRequest) (*proto.CollectMetricsResponse, error)) *MockMetricsServiceServer_CollectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) GetMetrics(getMetricsRequest *proto.GetMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData]) error {
	ret := _mock.Called(getMetricsRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.GetMetricsRequest, grpc.ServerStreamingServer[proto.MetricData]) error); ok {
		r0 = returnFunc(getMetricsRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricsServiceServer_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockMetricsServiceServer_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - getMetricsRequest
//   - serverStreamingServer
func (_e *MockMetricsServiceServer_Expecter) GetMetrics(getMetricsRequest interface{}, serverStreamingServer interface{}) *MockMetricsServiceServer_GetMetrics_Call {
	return &MockMetricsServiceServer_GetMetrics_Call{Call: _e.mock.On("GetMetrics", getMetricsRequest, serverStreamingServer)}
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) Run(run func(getMetricsRequest *proto.GetMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData])) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.GetMetricsRequest), args[1].(grpc.ServerStreamingServer[proto.MetricData]))
	})
	return _c
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) Return(err error) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) RunAndReturn(run func(getMetricsRequest *proto.GetMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData]) error) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) ListMetrics(context1 context.Context, listMetricsRequest *proto.ListMetricsRequest) (*proto.ListMetricsResponse, error) {
	ret := _mock.Called(context1, listMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListMetrics")
	}

	var r0 *proto.ListMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMetricsRequest) (*proto.ListMetricsResponse, error)); ok {
		return returnFunc(context1, listMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMetricsRequest) *proto.ListMetricsResponse); ok {
		r0 = returnFunc(context1, listMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListMetricsRequest) error); ok {
		r1 = returnFunc(context1, listMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_ListMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetrics'
type MockMetricsServiceServer_ListMetrics_Call struct {
	*mock.Call
}

// ListMetrics is a helper method to define mock.On call
//   - context1
//   - listMetricsRequest
func (_e *MockMetricsServiceServer_Expecter) ListMetrics(context1 interface{}, listMetricsRequest interface{}) *MockMetricsServiceServer_ListMetrics_Call {
	return &MockMetricsServiceServer_ListMetrics_Call{Call: _e.mock.On("ListMetrics", context1, listMetricsRequest)}
}

func (_c *MockMetricsServiceServer_ListMetrics_Call) Run(run func(context1 context.Context, listMetricsRequest *proto.ListMetricsRequest)) *MockMetricsServiceServer_ListMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ListMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsServiceServer_ListMetrics_Call) Return(listMetricsResponse *proto.ListMetricsResponse, err error) *MockMetricsServiceServer_ListMetrics_Call {
	_c.Call.Return(listMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_ListMetrics_Call) RunAndReturn(run func(context1 context.Context, listMetricsRequest *proto.ListMetricsRequest) (*proto.ListMetricsResponse, error)) *MockMetricsServiceServer_ListMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordEvent provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) RecordEvent(context1 context.Context, recordEventRequest *proto.RecordEventRequest) (*proto.RecordEventResponse, error) {
	ret := _mock.Called(context1, recordEventRequest)

	if len(ret) == 0 {
		panic("no return value specified for RecordEvent")
	}

	var r0 *proto.RecordEventResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordEventRequest) (*proto.RecordEventResponse, error)); ok {
		return returnFunc(context1, recordEventRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordEventRequest) *proto.RecordEventResponse); ok {
		r0 = returnFunc(context1, recordEventRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordEventResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordEventRequest) error); ok {
		r1 = returnFunc(context1, recordEventRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_RecordEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordEvent'
type MockMetricsServiceServer_RecordEvent_Call struct {
	*mock.Call
}

// RecordEvent is a helper method to define mock.On call
//   - context1
//   - recordEventRequest
func (_e *MockMetricsServiceServer_Expecter) RecordEvent(context1 interface{}, recordEventRequest interface{}) *MockMetricsServiceServer_RecordEvent_Call {
	return &MockMetricsServiceServer_RecordEvent_Call{Call: _e.mock.On("RecordEvent", context1, recordEventRequest)}
}

func (_c *MockMetricsServiceServer_RecordEvent_Call) Run(run func(context1 context.Context, recordEventRequest *proto.RecordEventRequest)) *MockMetricsServiceServer_RecordEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.RecordEventRequest))
	})
	return _c
}

func (_c *MockMetricsServiceServer_RecordEvent_Call) Return(recordEventResponse *proto.RecordEventResponse, err error) *MockMetricsServiceServer_RecordEvent_Call {
	_c.Call.Return(recordEventResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_RecordEvent_Call) RunAndReturn(run func(context1 context.Context, recordEventRequest *proto.RecordEventRequest) (*proto.RecordEventResponse, error)) *MockMetricsServiceServer_RecordEvent_Call {
	_c.Call.Return(run)
	return _c
}

// WatchMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) WatchMetrics(watchMetricsRequest *proto.WatchMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricUpdate]) error {
	ret := _mock.Called(watchMetricsRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for WatchMetrics")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.WatchMetricsRequest, grpc.ServerStreamingServer[proto.MetricUpdate]) error); ok {
		r0 = returnFunc(watchMetricsRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricsServiceServer_WatchMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchMetrics'
type MockMetricsServiceServer_WatchMetrics_Call struct {
	*mock.Call
}

// WatchMetrics is a helper method to define mock.On call
//   - watchMetricsRequest
//   - serverStreamingServer
func (_e *MockMetricsServiceServer_Expecter) WatchMetrics(watchMetricsRequest interface{}, serverStreamingServer interface{}) *MockMetricsServiceServer_WatchMetrics_Call {
	return &MockMetricsServiceServer_WatchMetrics_Call{Call: _e.mock.On("WatchMetrics", watchMetricsRequest, serverStreamingServer)}
}

func (_c *MockMetricsServiceServer_WatchMetrics_Call) Run(run func(watchMetricsRequest *proto.WatchMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricUpdate])) *MockMetricsServiceServer_WatchMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.WatchMetricsRequest), args[1].(grpc.ServerStreamingServer[proto.MetricUpdate]))
	})
	return _c
}

func (_c *MockMetricsServiceServer_WatchMetrics_Call) Return(err error) *MockMetricsServiceServer_WatchMetrics_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricsServiceServer_WatchMetrics_Call) RunAndReturn(run func(watchMetricsRequest *proto.WatchMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricUpdate]) error) *MockMetricsServiceServer_WatchMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedMetricsServiceServer provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {
	_mock.Called()
	return
}

// MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedMetricsServiceServer'
type MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedMetricsServiceServer is a helper method to define mock.On call
func (_e *MockMetricsServiceServer_Expecter) mustEmbedUnimplementedMetricsServiceServer() *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call {
	return &MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedMetricsServiceServer")}
}

func (_c *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call) Run(run func()) *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call) Return() *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call) RunAndReturn(run func()) *MockMetricsServiceServer_mustEmbedUnimplementedMetricsServiceServer_Call {
	_c.Run(run)
	return _c
}
