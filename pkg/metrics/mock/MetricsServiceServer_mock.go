// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockMetricsServiceServer creates a new instance of MockMetricsServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsServiceServer {
	mock := &MockMetricsServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsServiceServer is an autogenerated mock type for the MetricsServiceServer type
type MockMetricsServiceServer struct {
	mock.Mock
}

type MockMetricsServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsServiceServer) EXPECT() *MockMetricsServiceServer_Expecter {
	return &MockMetricsServiceServer_Expecter{mock: &_m.Mock}
}

// GetMetricMetadata provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) GetMetricMetadata(context1 context.Context, getMetricMetadataRequest *proto.GetMetricMetadataRequest) (*proto.GetMetricMetadataResponse, error) {
	ret := _mock.Called(context1, getMetricMetadataRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricMetadata")
	}

	var r0 *proto.GetMetricMetadataResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricMetadataRequest) (*proto.GetMetricMetadataResponse, error)); ok {
		return returnFunc(context1, getMetricMetadataRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricMetadataRequest) *proto.GetMetricMetadataResponse); ok {
		r0 = returnFunc(context1, getMetricMetadataRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricMetadataResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricMetadataRequest) error); ok {
		r1 = returnFunc(context1, getMetricMetadataRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_GetMetricMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricMetadata'
type MockMetricsServiceServer_GetMetricMetadata_Call struct {
	*mock.Call
}

// GetMetricMetadata is a helper method to define mock.On call
//   - context1 context.Context
//   - getMetricMetadataRequest *proto.GetMetricMetadataRequest
func (_e *MockMetricsServiceServer_Expecter) GetMetricMetadata(context1 interface{}, getMetricMetadataRequest interface{}) *MockMetricsServiceServer_GetMetricMetadata_Call {
	return &MockMetricsServiceServer_GetMetricMetadata_Call{Call: _e.mock.On("GetMetricMetadata", context1, getMetricMetadataRequest)}
}

func (_c *MockMetricsServiceServer_GetMetricMetadata_Call) Run(run func(context1 context.Context, getMetricMetadataRequest *proto.GetMetricMetadataRequest)) *MockMetricsServiceServer_GetMetricMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricMetadataRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricMetadataRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_GetMetricMetadata_Call) Return(getMetricMetadataResponse *proto.GetMetricMetadataResponse, err error) *MockMetricsServiceServer_GetMetricMetadata_Call {
	_c.Call.Return(getMetricMetadataResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_GetMetricMetadata_Call) RunAndReturn(run func(context1 context.Context, getMetricMetadataRequest *proto.GetMetricMetadataRequest) (*proto.GetMetricMetadataResponse, error)) *MockMetricsServiceServer_GetMetricMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) GetMetrics(context1 context.Context, getMetricsRequest *proto.GetMetricsRequest) (*proto.GetMetricsResponse, error) {
	ret := _mock.Called(context1, getMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 *proto.GetMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest) (*proto.GetMetricsResponse, error)); ok {
		return returnFunc(context1, getMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest) *proto.GetMetricsResponse); ok {
		r0 = returnFunc(context1, getMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricsRequest) error); ok {
		r1 = returnFunc(context1, getMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockMetricsServiceServer_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - context1 context.Context
//   - getMetricsRequest *proto.GetMetricsRequest
func (_e *MockMetricsServiceServer_Expecter) GetMetrics(context1 interface{}, getMetricsRequest interface{}) *MockMetricsServiceServer_GetMetrics_Call {
	return &MockMetricsServiceServer_GetMetrics_Call{Call: _e.mock.On("GetMetrics", context1, getMetricsRequest)}
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) Run(run func(context1 context.Context, getMetricsRequest *proto.GetMetricsRequest)) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) Return(getMetricsResponse *proto.GetMetricsResponse, err error) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Return(getMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_GetMetrics_Call) RunAndReturn(run func(context1 context.Context, getMetricsRequest *proto.GetMetricsRequest) (*proto.GetMetricsResponse, error)) *MockMetricsServiceServer_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsSummary provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) GetMetricsSummary(context1 context.Context, getMetricsSummaryRequest *proto.GetMetricsSummaryRequest) (*proto.GetMetricsSummaryResponse, error) {
	ret := _mock.Called(context1, getMetricsSummaryRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsSummary")
	}

	var r0 *proto.GetMetricsSummaryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsSummaryRequest) (*proto.GetMetricsSummaryResponse, error)); ok {
		return returnFunc(context1, getMetricsSummaryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsSummaryRequest) *proto.GetMetricsSummaryResponse); ok {
		r0 = returnFunc(context1, getMetricsSummaryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricsSummaryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricsSummaryRequest) error); ok {
		r1 = returnFunc(context1, getMetricsSummaryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_GetMetricsSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsSummary'
type MockMetricsServiceServer_GetMetricsSummary_Call struct {
	*mock.Call
}

// GetMetricsSummary is a helper method to define mock.On call
//   - context1 context.Context
//   - getMetricsSummaryRequest *proto.GetMetricsSummaryRequest
func (_e *MockMetricsServiceServer_Expecter) GetMetricsSummary(context1 interface{}, getMetricsSummaryRequest interface{}) *MockMetricsServiceServer_GetMetricsSummary_Call {
	return &MockMetricsServiceServer_GetMetricsSummary_Call{Call: _e.mock.On("GetMetricsSummary", context1, getMetricsSummaryRequest)}
}

func (_c *MockMetricsServiceServer_GetMetricsSummary_Call) Run(run func(context1 context.Context, getMetricsSummaryRequest *proto.GetMetricsSummaryRequest)) *MockMetricsServiceServer_GetMetricsSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricsSummaryRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricsSummaryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_GetMetricsSummary_Call) Return(getMetricsSummaryResponse *proto.GetMetricsSummaryResponse, err error) *MockMetricsServiceServer_GetMetricsSummary_Call {
	_c.Call.Return(getMetricsSummaryResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_GetMetricsSummary_Call) RunAndReturn(run func(context1 context.Context, getMetricsSummaryRequest *proto.GetMetricsSummaryRequest) (*proto.GetMetricsSummaryResponse, error)) *MockMetricsServiceServer_GetMetricsSummary_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) QueryMetrics(context1 context.Context, queryMetricsRequest *proto.QueryMetricsRequest) (*proto.QueryMetricsResponse, error) {
	ret := _mock.Called(context1, queryMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for QueryMetrics")
	}

	var r0 *proto.QueryMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryMetricsRequest) (*proto.QueryMetricsResponse, error)); ok {
		return returnFunc(context1, queryMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryMetricsRequest) *proto.QueryMetricsResponse); ok {
		r0 = returnFunc(context1, queryMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryMetricsRequest) error); ok {
		r1 = returnFunc(context1, queryMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_QueryMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMetrics'
type MockMetricsServiceServer_QueryMetrics_Call struct {
	*mock.Call
}

// QueryMetrics is a helper method to define mock.On call
//   - context1 context.Context
//   - queryMetricsRequest *proto.QueryMetricsRequest
func (_e *MockMetricsServiceServer_Expecter) QueryMetrics(context1 interface{}, queryMetricsRequest interface{}) *MockMetricsServiceServer_QueryMetrics_Call {
	return &MockMetricsServiceServer_QueryMetrics_Call{Call: _e.mock.On("QueryMetrics", context1, queryMetricsRequest)}
}

func (_c *MockMetricsServiceServer_QueryMetrics_Call) Run(run func(context1 context.Context, queryMetricsRequest *proto.QueryMetricsRequest)) *MockMetricsServiceServer_QueryMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryMetricsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_QueryMetrics_Call) Return(queryMetricsResponse *proto.QueryMetricsResponse, err error) *MockMetricsServiceServer_QueryMetrics_Call {
	_c.Call.Return(queryMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_QueryMetrics_Call) RunAndReturn(run func(context1 context.Context, queryMetricsRequest *proto.QueryMetricsRequest) (*proto.QueryMetricsResponse, error)) *MockMetricsServiceServer_QueryMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordBatchMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) RecordBatchMetrics(context1 context.Context, recordMetricsRequest *proto.RecordMetricsRequest) (*proto.RecordMetricsResponse, error) {
	ret := _mock.Called(context1, recordMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for RecordBatchMetrics")
	}

	var r0 *proto.RecordMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricsRequest) (*proto.RecordMetricsResponse, error)); ok {
		return returnFunc(context1, recordMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricsRequest) *proto.RecordMetricsResponse); ok {
		r0 = returnFunc(context1, recordMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordMetricsRequest) error); ok {
		r1 = returnFunc(context1, recordMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_RecordBatchMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordBatchMetrics'
type MockMetricsServiceServer_RecordBatchMetrics_Call struct {
	*mock.Call
}

// RecordBatchMetrics is a helper method to define mock.On call
//   - context1 context.Context
//   - recordMetricsRequest *proto.RecordMetricsRequest
func (_e *MockMetricsServiceServer_Expecter) RecordBatchMetrics(context1 interface{}, recordMetricsRequest interface{}) *MockMetricsServiceServer_RecordBatchMetrics_Call {
	return &MockMetricsServiceServer_RecordBatchMetrics_Call{Call: _e.mock.On("RecordBatchMetrics", context1, recordMetricsRequest)}
}

func (_c *MockMetricsServiceServer_RecordBatchMetrics_Call) Run(run func(context1 context.Context, recordMetricsRequest *proto.RecordMetricsRequest)) *MockMetricsServiceServer_RecordBatchMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RecordMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RecordMetricsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_RecordBatchMetrics_Call) Return(recordMetricsResponse *proto.RecordMetricsResponse, err error) *MockMetricsServiceServer_RecordBatchMetrics_Call {
	_c.Call.Return(recordMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_RecordBatchMetrics_Call) RunAndReturn(run func(context1 context.Context, recordMetricsRequest *proto.RecordMetricsRequest) (*proto.RecordMetricsResponse, error)) *MockMetricsServiceServer_RecordBatchMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordMetric provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) RecordMetric(context1 context.Context, recordMetricRequest *proto.RecordMetricRequest) (*proto.RecordMetricResponse, error) {
	ret := _mock.Called(context1, recordMetricRequest)

	if len(ret) == 0 {
		panic("no return value specified for RecordMetric")
	}

	var r0 *proto.RecordMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricRequest) (*proto.RecordMetricResponse, error)); ok {
		return returnFunc(context1, recordMetricRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricRequest) *proto.RecordMetricResponse); ok {
		r0 = returnFunc(context1, recordMetricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordMetricRequest) error); ok {
		r1 = returnFunc(context1, recordMetricRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_RecordMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordMetric'
type MockMetricsServiceServer_RecordMetric_Call struct {
	*mock.Call
}

// RecordMetric is a helper method to define mock.On call
//   - context1 context.Context
//   - recordMetricRequest *proto.RecordMetricRequest
func (_e *MockMetricsServiceServer_Expecter) RecordMetric(context1 interface{}, recordMetricRequest interface{}) *MockMetricsServiceServer_RecordMetric_Call {
	return &MockMetricsServiceServer_RecordMetric_Call{Call: _e.mock.On("RecordMetric", context1, recordMetricRequest)}
}

func (_c *MockMetricsServiceServer_RecordMetric_Call) Run(run func(context1 context.Context, recordMetricRequest *proto.RecordMetricRequest)) *MockMetricsServiceServer_RecordMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RecordMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RecordMetricRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_RecordMetric_Call) Return(recordMetricResponse *proto.RecordMetricResponse, err error) *MockMetricsServiceServer_RecordMetric_Call {
	_c.Call.Return(recordMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_RecordMetric_Call) RunAndReturn(run func(context1 context.Context, recordMetricRequest *proto.RecordMetricRequest) (*proto.RecordMetricResponse, error)) *MockMetricsServiceServer_RecordMetric_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterMetric provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) RegisterMetric(context1 context.Context, registerMetricRequest *proto.RegisterMetricRequest) (*proto.RegisterMetricResponse, error) {
	ret := _mock.Called(context1, registerMetricRequest)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMetric")
	}

	var r0 *proto.RegisterMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterMetricRequest) (*proto.RegisterMetricResponse, error)); ok {
		return returnFunc(context1, registerMetricRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterMetricRequest) *proto.RegisterMetricResponse); ok {
		r0 = returnFunc(context1, registerMetricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RegisterMetricRequest) error); ok {
		r1 = returnFunc(context1, registerMetricRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_RegisterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterMetric'
type MockMetricsServiceServer_RegisterMetric_Call struct {
	*mock.Call
}

// RegisterMetric is a helper method to define mock.On call
//   - context1 context.Context
//   - registerMetricRequest *proto.RegisterMetricRequest
func (_e *MockMetricsServiceServer_Expecter) RegisterMetric(context1 interface{}, registerMetricRequest interface{}) *MockMetricsServiceServer_RegisterMetric_Call {
	return &MockMetricsServiceServer_RegisterMetric_Call{Call: _e.mock.On("RegisterMetric", context1, registerMetricRequest)}
}

func (_c *MockMetricsServiceServer_RegisterMetric_Call) Run(run func(context1 context.Context, registerMetricRequest *proto.RegisterMetricRequest)) *MockMetricsServiceServer_RegisterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RegisterMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RegisterMetricRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_RegisterMetric_Call) Return(registerMetricResponse *proto.RegisterMetricResponse, err error) *MockMetricsServiceServer_RegisterMetric_Call {
	_c.Call.Return(registerMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_RegisterMetric_Call) RunAndReturn(run func(context1 context.Context, registerMetricRequest *proto.RegisterMetricRequest) (*proto.RegisterMetricResponse, error)) *MockMetricsServiceServer_RegisterMetric_Call {
	_c.Call.Return(run)
	return _c
}

// StreamMetrics provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) StreamMetrics(streamMetricsRequest *proto.StreamMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData]) error {
	ret := _mock.Called(streamMetricsRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for StreamMetrics")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.StreamMetricsRequest, grpc.ServerStreamingServer[proto.MetricData]) error); ok {
		r0 = returnFunc(streamMetricsRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricsServiceServer_StreamMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamMetrics'
type MockMetricsServiceServer_StreamMetrics_Call struct {
	*mock.Call
}

// StreamMetrics is a helper method to define mock.On call
//   - streamMetricsRequest *proto.StreamMetricsRequest
//   - serverStreamingServer grpc.ServerStreamingServer[proto.MetricData]
func (_e *MockMetricsServiceServer_Expecter) StreamMetrics(streamMetricsRequest interface{}, serverStreamingServer interface{}) *MockMetricsServiceServer_StreamMetrics_Call {
	return &MockMetricsServiceServer_StreamMetrics_Call{Call: _e.mock.On("StreamMetrics", streamMetricsRequest, serverStreamingServer)}
}

func (_c *MockMetricsServiceServer_StreamMetrics_Call) Run(run func(streamMetricsRequest *proto.StreamMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData])) *MockMetricsServiceServer_StreamMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *proto.StreamMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(*proto.StreamMetricsRequest)
		}
		var arg1 grpc.ServerStreamingServer[proto.MetricData]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[proto.MetricData])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_StreamMetrics_Call) Return(err error) *MockMetricsServiceServer_StreamMetrics_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricsServiceServer_StreamMetrics_Call) RunAndReturn(run func(streamMetricsRequest *proto.StreamMetricsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.MetricData]) error) *MockMetricsServiceServer_StreamMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterMetric provides a mock function for the type MockMetricsServiceServer
func (_mock *MockMetricsServiceServer) UnregisterMetric(context1 context.Context, unregisterMetricRequest *proto.UnregisterMetricRequest) (*proto.UnregisterMetricResponse, error) {
	ret := _mock.Called(context1, unregisterMetricRequest)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterMetric")
	}

	var r0 *proto.UnregisterMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterMetricRequest) (*proto.UnregisterMetricResponse, error)); ok {
		return returnFunc(context1, unregisterMetricRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterMetricRequest) *proto.UnregisterMetricResponse); ok {
		r0 = returnFunc(context1, unregisterMetricRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UnregisterMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UnregisterMetricRequest) error); ok {
		r1 = returnFunc(context1, unregisterMetricRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceServer_UnregisterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterMetric'
type MockMetricsServiceServer_UnregisterMetric_Call struct {
	*mock.Call
}

// UnregisterMetric is a helper method to define mock.On call
//   - context1 context.Context
//   - unregisterMetricRequest *proto.UnregisterMetricRequest
func (_e *MockMetricsServiceServer_Expecter) UnregisterMetric(context1 interface{}, unregisterMetricRequest interface{}) *MockMetricsServiceServer_UnregisterMetric_Call {
	return &MockMetricsServiceServer_UnregisterMetric_Call{Call: _e.mock.On("UnregisterMetric", context1, unregisterMetricRequest)}
}

func (_c *MockMetricsServiceServer_UnregisterMetric_Call) Run(run func(context1 context.Context, unregisterMetricRequest *proto.UnregisterMetricRequest)) *MockMetricsServiceServer_UnregisterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UnregisterMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UnregisterMetricRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsServiceServer_UnregisterMetric_Call) Return(unregisterMetricResponse *proto.UnregisterMetricResponse, err error) *MockMetricsServiceServer_UnregisterMetric_Call {
	_c.Call.Return(unregisterMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceServer_UnregisterMetric_Call) RunAndReturn(run func(context1 context.Context, unregisterMetricRequest *proto.UnregisterMetricRequest) (*proto.UnregisterMetricResponse, error)) *MockMetricsServiceServer_UnregisterMetric_Call {
	_c.Call.Return(run)
	return _c
}
