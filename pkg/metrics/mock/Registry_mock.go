// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/jdfalk/gcommon/pkg/metrics"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Get(name string, typ metrics.MetricType) (interface{}, bool) {
	ret := _mock.Called(name, typ)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string, metrics.MetricType) (interface{}, bool)); ok {
		return returnFunc(name, typ)
	}
	if returnFunc, ok := ret.Get(0).(func(string, metrics.MetricType) interface{}); ok {
		r0 = returnFunc(name, typ)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, metrics.MetricType) bool); ok {
		r1 = returnFunc(name, typ)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockRegistry_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRegistry_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
//   - typ metrics.MetricType
func (_e *MockRegistry_Expecter) Get(name interface{}, typ interface{}) *MockRegistry_Get_Call {
	return &MockRegistry_Get_Call{Call: _e.mock.On("Get", name, typ)}
}

func (_c *MockRegistry_Get_Call) Run(run func(name string, typ metrics.MetricType)) *MockRegistry_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 metrics.MetricType
		if args[1] != nil {
			arg1 = args[1].(metrics.MetricType)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRegistry_Get_Call) Return(ifaceVal interface{}, b bool) *MockRegistry_Get_Call {
	_c.Call.Return(ifaceVal, b)
	return _c
}

func (_c *MockRegistry_Get_Call) RunAndReturn(run func(name string, typ metrics.MetricType) (interface{}, bool)) *MockRegistry_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreate provides a mock function for the type MockRegistry
func (_mock *MockRegistry) GetOrCreate(name string, typ metrics.MetricType, options ...metrics.Option) interface{} {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, typ, options)
	} else {
		tmpRet = _mock.Called(name, typ)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func(string, metrics.MetricType, ...metrics.Option) interface{}); ok {
		r0 = returnFunc(name, typ, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockRegistry_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type MockRegistry_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - name string
//   - typ metrics.MetricType
//   - options ...metrics.Option
func (_e *MockRegistry_Expecter) GetOrCreate(name interface{}, typ interface{}, options ...interface{}) *MockRegistry_GetOrCreate_Call {
	return &MockRegistry_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate",
		append([]interface{}{name, typ}, options...)...)}
}

func (_c *MockRegistry_GetOrCreate_Call) Run(run func(name string, typ metrics.MetricType, options ...metrics.Option)) *MockRegistry_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 metrics.MetricType
		if args[1] != nil {
			arg1 = args[1].(metrics.MetricType)
		}
		var arg2 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]metrics.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRegistry_GetOrCreate_Call) Return(ifaceVal interface{}) *MockRegistry_GetOrCreate_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockRegistry_GetOrCreate_Call) RunAndReturn(run func(name string, typ metrics.MetricType, options ...metrics.Option) interface{}) *MockRegistry_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Register(name string, metric interface{}, options ...metrics.Option) error {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(name, metric, options)
	} else {
		tmpRet = _mock.Called(name, metric)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}, ...metrics.Option) error); ok {
		r0 = returnFunc(name, metric, options...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRegistry_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockRegistry_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - name string
//   - metric interface{}
//   - options ...metrics.Option
func (_e *MockRegistry_Expecter) Register(name interface{}, metric interface{}, options ...interface{}) *MockRegistry_Register_Call {
	return &MockRegistry_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{name, metric}, options...)...)}
}

func (_c *MockRegistry_Register_Call) Run(run func(name string, metric interface{}, options ...metrics.Option)) *MockRegistry_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []metrics.Option
		var variadicArgs []metrics.Option
		if len(args) > 2 {
			variadicArgs = args[2].([]metrics.Option)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockRegistry_Register_Call) Return(err error) *MockRegistry_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRegistry_Register_Call) RunAndReturn(run func(name string, metric interface{}, options ...metrics.Option) error) *MockRegistry_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Snapshot() metrics.Snapshot {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 metrics.Snapshot
	if returnFunc, ok := ret.Get(0).(func() metrics.Snapshot); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Snapshot)
		}
	}
	return r0
}

// MockRegistry_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockRegistry_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) Snapshot() *MockRegistry_Snapshot_Call {
	return &MockRegistry_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *MockRegistry_Snapshot_Call) Run(run func()) *MockRegistry_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_Snapshot_Call) Return(snapshot metrics.Snapshot) *MockRegistry_Snapshot_Call {
	_c.Call.Return(snapshot)
	return _c
}

func (_c *MockRegistry_Snapshot_Call) RunAndReturn(run func() metrics.Snapshot) *MockRegistry_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Unregister(name string) bool {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Unregister")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockRegistry_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type MockRegistry_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - name string
func (_e *MockRegistry_Expecter) Unregister(name interface{}) *MockRegistry_Unregister_Call {
	return &MockRegistry_Unregister_Call{Call: _e.mock.On("Unregister", name)}
}

func (_c *MockRegistry_Unregister_Call) Run(run func(name string)) *MockRegistry_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Unregister_Call) Return(b bool) *MockRegistry_Unregister_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockRegistry_Unregister_Call) RunAndReturn(run func(name string) bool) *MockRegistry_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// Visit provides a mock function for the type MockRegistry
func (_mock *MockRegistry) Visit(visitor metrics.MetricVisitor) {
	_mock.Called(visitor)
	return
}

// MockRegistry_Visit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Visit'
type MockRegistry_Visit_Call struct {
	*mock.Call
}

// Visit is a helper method to define mock.On call
//   - visitor metrics.MetricVisitor
func (_e *MockRegistry_Expecter) Visit(visitor interface{}) *MockRegistry_Visit_Call {
	return &MockRegistry_Visit_Call{Call: _e.mock.On("Visit", visitor)}
}

func (_c *MockRegistry_Visit_Call) Run(run func(visitor metrics.MetricVisitor)) *MockRegistry_Visit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metrics.MetricVisitor
		if args[0] != nil {
			arg0 = args[0].(metrics.MetricVisitor)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRegistry_Visit_Call) Return() *MockRegistry_Visit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRegistry_Visit_Call) RunAndReturn(run func(visitor metrics.MetricVisitor)) *MockRegistry_Visit_Call {
	_c.Run(run)
	return _c
}

// WithTags provides a mock function for the type MockRegistry
func (_mock *MockRegistry) WithTags(tags ...metrics.Tag) metrics.Registry {
	var tmpRet mock.Arguments
	if len(tags) > 0 {
		tmpRet = _mock.Called(tags)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WithTags")
	}

	var r0 metrics.Registry
	if returnFunc, ok := ret.Get(0).(func(...metrics.Tag) metrics.Registry); ok {
		r0 = returnFunc(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Registry)
		}
	}
	return r0
}

// MockRegistry_WithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTags'
type MockRegistry_WithTags_Call struct {
	*mock.Call
}

// WithTags is a helper method to define mock.On call
//   - tags ...metrics.Tag
func (_e *MockRegistry_Expecter) WithTags(tags ...interface{}) *MockRegistry_WithTags_Call {
	return &MockRegistry_WithTags_Call{Call: _e.mock.On("WithTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockRegistry_WithTags_Call) Run(run func(tags ...metrics.Tag)) *MockRegistry_WithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []metrics.Tag
		var variadicArgs []metrics.Tag
		if len(args) > 0 {
			variadicArgs = args[0].([]metrics.Tag)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockRegistry_WithTags_Call) Return(registry metrics.Registry) *MockRegistry_WithTags_Call {
	_c.Call.Return(registry)
	return _c
}

func (_c *MockRegistry_WithTags_Call) RunAndReturn(run func(tags ...metrics.Tag) metrics.Registry) *MockRegistry_WithTags_Call {
	_c.Call.Return(run)
	return _c
}
