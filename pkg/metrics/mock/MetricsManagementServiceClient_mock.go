// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockMetricsManagementServiceClient creates a new instance of MockMetricsManagementServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsManagementServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsManagementServiceClient {
	mock := &MockMetricsManagementServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsManagementServiceClient is an autogenerated mock type for the MetricsManagementServiceClient type
type MockMetricsManagementServiceClient struct {
	mock.Mock
}

type MockMetricsManagementServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsManagementServiceClient) EXPECT() *MockMetricsManagementServiceClient_Expecter {
	return &MockMetricsManagementServiceClient_Expecter{mock: &_m.Mock}
}

// CreateMetricsProvider provides a mock function for the type MockMetricsManagementServiceClient
func (_mock *MockMetricsManagementServiceClient) CreateMetricsProvider(ctx context.Context, in *proto.CreateProviderRequest, opts ...grpc.CallOption) (*proto.CreateProviderResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricsProvider")
	}

	var r0 *proto.CreateProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateProviderRequest, ...grpc.CallOption) (*proto.CreateProviderResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateProviderRequest, ...grpc.CallOption) *proto.CreateProviderResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateProviderRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceClient_CreateMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetricsProvider'
type MockMetricsManagementServiceClient_CreateMetricsProvider_Call struct {
	*mock.Call
}

// CreateMetricsProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateProviderRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsManagementServiceClient_Expecter) CreateMetricsProvider(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsManagementServiceClient_CreateMetricsProvider_Call {
	return &MockMetricsManagementServiceClient_CreateMetricsProvider_Call{Call: _e.mock.On("CreateMetricsProvider",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsManagementServiceClient_CreateMetricsProvider_Call) Run(run func(ctx context.Context, in *proto.CreateProviderRequest, opts ...grpc.CallOption)) *MockMetricsManagementServiceClient_CreateMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateProviderRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceClient_CreateMetricsProvider_Call) Return(createProviderResponse *proto.CreateProviderResponse, err error) *MockMetricsManagementServiceClient_CreateMetricsProvider_Call {
	_c.Call.Return(createProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceClient_CreateMetricsProvider_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateProviderRequest, opts ...grpc.CallOption) (*proto.CreateProviderResponse, error)) *MockMetricsManagementServiceClient_CreateMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricsProvider provides a mock function for the type MockMetricsManagementServiceClient
func (_mock *MockMetricsManagementServiceClient) DeleteMetricsProvider(ctx context.Context, in *proto.DeleteProviderRequest, opts ...grpc.CallOption) (*proto.DeleteProviderResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricsProvider")
	}

	var r0 *proto.DeleteProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteProviderRequest, ...grpc.CallOption) (*proto.DeleteProviderResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteProviderRequest, ...grpc.CallOption) *proto.DeleteProviderResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteProviderRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceClient_DeleteMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricsProvider'
type MockMetricsManagementServiceClient_DeleteMetricsProvider_Call struct {
	*mock.Call
}

// DeleteMetricsProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteProviderRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsManagementServiceClient_Expecter) DeleteMetricsProvider(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call {
	return &MockMetricsManagementServiceClient_DeleteMetricsProvider_Call{Call: _e.mock.On("DeleteMetricsProvider",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call) Run(run func(ctx context.Context, in *proto.DeleteProviderRequest, opts ...grpc.CallOption)) *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteProviderRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call) Return(deleteProviderResponse *proto.DeleteProviderResponse, err error) *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call {
	_c.Call.Return(deleteProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteProviderRequest, opts ...grpc.CallOption) (*proto.DeleteProviderResponse, error)) *MockMetricsManagementServiceClient_DeleteMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderStats provides a mock function for the type MockMetricsManagementServiceClient
func (_mock *MockMetricsManagementServiceClient) GetProviderStats(ctx context.Context, in *proto.GetProviderStatsRequest, opts ...grpc.CallOption) (*proto.GetProviderStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetProviderStats")
	}

	var r0 *proto.GetProviderStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetProviderStatsRequest, ...grpc.CallOption) (*proto.GetProviderStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetProviderStatsRequest, ...grpc.CallOption) *proto.GetProviderStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetProviderStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetProviderStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceClient_GetProviderStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderStats'
type MockMetricsManagementServiceClient_GetProviderStats_Call struct {
	*mock.Call
}

// GetProviderStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetProviderStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsManagementServiceClient_Expecter) GetProviderStats(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsManagementServiceClient_GetProviderStats_Call {
	return &MockMetricsManagementServiceClient_GetProviderStats_Call{Call: _e.mock.On("GetProviderStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsManagementServiceClient_GetProviderStats_Call) Run(run func(ctx context.Context, in *proto.GetProviderStatsRequest, opts ...grpc.CallOption)) *MockMetricsManagementServiceClient_GetProviderStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetProviderStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetProviderStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceClient_GetProviderStats_Call) Return(getProviderStatsResponse *proto.GetProviderStatsResponse, err error) *MockMetricsManagementServiceClient_GetProviderStats_Call {
	_c.Call.Return(getProviderStatsResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceClient_GetProviderStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetProviderStatsRequest, opts ...grpc.CallOption) (*proto.GetProviderStatsResponse, error)) *MockMetricsManagementServiceClient_GetProviderStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricsProviders provides a mock function for the type MockMetricsManagementServiceClient
func (_mock *MockMetricsManagementServiceClient) ListMetricsProviders(ctx context.Context, in *proto.ListProvidersRequest, opts ...grpc.CallOption) (*proto.ListProvidersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMetricsProviders")
	}

	var r0 *proto.ListProvidersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListProvidersRequest, ...grpc.CallOption) (*proto.ListProvidersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListProvidersRequest, ...grpc.CallOption) *proto.ListProvidersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListProvidersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListProvidersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceClient_ListMetricsProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricsProviders'
type MockMetricsManagementServiceClient_ListMetricsProviders_Call struct {
	*mock.Call
}

// ListMetricsProviders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListProvidersRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsManagementServiceClient_Expecter) ListMetricsProviders(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsManagementServiceClient_ListMetricsProviders_Call {
	return &MockMetricsManagementServiceClient_ListMetricsProviders_Call{Call: _e.mock.On("ListMetricsProviders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsManagementServiceClient_ListMetricsProviders_Call) Run(run func(ctx context.Context, in *proto.ListProvidersRequest, opts ...grpc.CallOption)) *MockMetricsManagementServiceClient_ListMetricsProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListProvidersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListProvidersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceClient_ListMetricsProviders_Call) Return(listProvidersResponse *proto.ListProvidersResponse, err error) *MockMetricsManagementServiceClient_ListMetricsProviders_Call {
	_c.Call.Return(listProvidersResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceClient_ListMetricsProviders_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListProvidersRequest, opts ...grpc.CallOption) (*proto.ListProvidersResponse, error)) *MockMetricsManagementServiceClient_ListMetricsProviders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetricsProvider provides a mock function for the type MockMetricsManagementServiceClient
func (_mock *MockMetricsManagementServiceClient) UpdateMetricsProvider(ctx context.Context, in *proto.UpdateProviderRequest, opts ...grpc.CallOption) (*proto.UpdateProviderResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricsProvider")
	}

	var r0 *proto.UpdateProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateProviderRequest, ...grpc.CallOption) (*proto.UpdateProviderResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateProviderRequest, ...grpc.CallOption) *proto.UpdateProviderResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateProviderRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceClient_UpdateMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetricsProvider'
type MockMetricsManagementServiceClient_UpdateMetricsProvider_Call struct {
	*mock.Call
}

// UpdateMetricsProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateProviderRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsManagementServiceClient_Expecter) UpdateMetricsProvider(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call {
	return &MockMetricsManagementServiceClient_UpdateMetricsProvider_Call{Call: _e.mock.On("UpdateMetricsProvider",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call) Run(run func(ctx context.Context, in *proto.UpdateProviderRequest, opts ...grpc.CallOption)) *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateProviderRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call) Return(updateProviderResponse *proto.UpdateProviderResponse, err error) *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call {
	_c.Call.Return(updateProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateProviderRequest, opts ...grpc.CallOption) (*proto.UpdateProviderResponse, error)) *MockMetricsManagementServiceClient_UpdateMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}
