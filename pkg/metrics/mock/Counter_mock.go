// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/jdfalk/gcommon/pkg/metrics"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockCounter
func (_mock *MockCounter) Add(value float64) {
	_mock.Called(value)
	return
}

// MockCounter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockCounter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - value float64
func (_e *MockCounter_Expecter) Add(value interface{}) *MockCounter_Add_Call {
	return &MockCounter_Add_Call{Call: _e.mock.On("Add", value)}
}

func (_c *MockCounter_Add_Call) Run(run func(value float64)) *MockCounter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCounter_Add_Call) Return() *MockCounter_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCounter_Add_Call) RunAndReturn(run func(value float64)) *MockCounter_Add_Call {
	_c.Run(run)
	return _c
}

// Inc provides a mock function for the type MockCounter
func (_mock *MockCounter) Inc() {
	_mock.Called()
	return
}

// MockCounter_Inc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inc'
type MockCounter_Inc_Call struct {
	*mock.Call
}

// Inc is a helper method to define mock.On call
func (_e *MockCounter_Expecter) Inc() *MockCounter_Inc_Call {
	return &MockCounter_Inc_Call{Call: _e.mock.On("Inc")}
}

func (_c *MockCounter_Inc_Call) Run(run func()) *MockCounter_Inc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounter_Inc_Call) Return() *MockCounter_Inc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCounter_Inc_Call) RunAndReturn(run func()) *MockCounter_Inc_Call {
	_c.Run(run)
	return _c
}

// Value provides a mock function for the type MockCounter
func (_mock *MockCounter) Value() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockCounter_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockCounter_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockCounter_Expecter) Value() *MockCounter_Value_Call {
	return &MockCounter_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *MockCounter_Value_Call) Run(run func()) *MockCounter_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounter_Value_Call) Return(f float64) *MockCounter_Value_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockCounter_Value_Call) RunAndReturn(run func() float64) *MockCounter_Value_Call {
	_c.Call.Return(run)
	return _c
}

// WithTags provides a mock function for the type MockCounter
func (_mock *MockCounter) WithTags(tags ...metrics.Tag) metrics.Counter {
	var tmpRet mock.Arguments
	if len(tags) > 0 {
		tmpRet = _mock.Called(tags)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WithTags")
	}

	var r0 metrics.Counter
	if returnFunc, ok := ret.Get(0).(func(...metrics.Tag) metrics.Counter); ok {
		r0 = returnFunc(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Counter)
		}
	}
	return r0
}

// MockCounter_WithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTags'
type MockCounter_WithTags_Call struct {
	*mock.Call
}

// WithTags is a helper method to define mock.On call
//   - tags ...metrics.Tag
func (_e *MockCounter_Expecter) WithTags(tags ...interface{}) *MockCounter_WithTags_Call {
	return &MockCounter_WithTags_Call{Call: _e.mock.On("WithTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockCounter_WithTags_Call) Run(run func(tags ...metrics.Tag)) *MockCounter_WithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []metrics.Tag
		var variadicArgs []metrics.Tag
		if len(args) > 0 {
			variadicArgs = args[0].([]metrics.Tag)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockCounter_WithTags_Call) Return(counter metrics.Counter) *MockCounter_WithTags_Call {
	_c.Call.Return(counter)
	return _c
}

func (_c *MockCounter_WithTags_Call) RunAndReturn(run func(tags ...metrics.Tag) metrics.Counter) *MockCounter_WithTags_Call {
	_c.Call.Return(run)
	return _c
}
