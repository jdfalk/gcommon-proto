// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"time"

	"github.com/jdfalk/gcommon/pkg/metrics"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTimer creates a new instance of MockTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimer {
	mock := &MockTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTimer is an autogenerated mock type for the Timer type
type MockTimer struct {
	mock.Mock
}

type MockTimer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimer) EXPECT() *MockTimer_Expecter {
	return &MockTimer_Expecter{mock: &_m.Mock}
}

// NewStopwatch provides a mock function for the type MockTimer
func (_mock *MockTimer) NewStopwatch() metrics.Stopwatch {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewStopwatch")
	}

	var r0 metrics.Stopwatch
	if returnFunc, ok := ret.Get(0).(func() metrics.Stopwatch); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Stopwatch)
		}
	}
	return r0
}

// MockTimer_NewStopwatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewStopwatch'
type MockTimer_NewStopwatch_Call struct {
	*mock.Call
}

// NewStopwatch is a helper method to define mock.On call
func (_e *MockTimer_Expecter) NewStopwatch() *MockTimer_NewStopwatch_Call {
	return &MockTimer_NewStopwatch_Call{Call: _e.mock.On("NewStopwatch")}
}

func (_c *MockTimer_NewStopwatch_Call) Run(run func()) *MockTimer_NewStopwatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_NewStopwatch_Call) Return(stopwatch metrics.Stopwatch) *MockTimer_NewStopwatch_Call {
	_c.Call.Return(stopwatch)
	return _c
}

func (_c *MockTimer_NewStopwatch_Call) RunAndReturn(run func() metrics.Stopwatch) *MockTimer_NewStopwatch_Call {
	_c.Call.Return(run)
	return _c
}

// Record provides a mock function for the type MockTimer
func (_mock *MockTimer) Record(duration time.Duration) {
	_mock.Called(duration)
	return
}

// MockTimer_Record_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Record'
type MockTimer_Record_Call struct {
	*mock.Call
}

// Record is a helper method to define mock.On call
//   - duration time.Duration
func (_e *MockTimer_Expecter) Record(duration interface{}) *MockTimer_Record_Call {
	return &MockTimer_Record_Call{Call: _e.mock.On("Record", duration)}
}

func (_c *MockTimer_Record_Call) Run(run func(duration time.Duration)) *MockTimer_Record_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTimer_Record_Call) Return() *MockTimer_Record_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimer_Record_Call) RunAndReturn(run func(duration time.Duration)) *MockTimer_Record_Call {
	_c.Run(run)
	return _c
}

// Snapshot provides a mock function for the type MockTimer
func (_mock *MockTimer) Snapshot() metrics.HistogramSnapshot {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 metrics.HistogramSnapshot
	if returnFunc, ok := ret.Get(0).(func() metrics.HistogramSnapshot); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.HistogramSnapshot)
		}
	}
	return r0
}

// MockTimer_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'
type MockTimer_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call
func (_e *MockTimer_Expecter) Snapshot() *MockTimer_Snapshot_Call {
	return &MockTimer_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *MockTimer_Snapshot_Call) Run(run func()) *MockTimer_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_Snapshot_Call) Return(histogramSnapshot metrics.HistogramSnapshot) *MockTimer_Snapshot_Call {
	_c.Call.Return(histogramSnapshot)
	return _c
}

func (_c *MockTimer_Snapshot_Call) RunAndReturn(run func() metrics.HistogramSnapshot) *MockTimer_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// Time provides a mock function for the type MockTimer
func (_mock *MockTimer) Time(f func()) {
	_mock.Called(f)
	return
}

// MockTimer_Time_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Time'
type MockTimer_Time_Call struct {
	*mock.Call
}

// Time is a helper method to define mock.On call
//   - f func()
func (_e *MockTimer_Expecter) Time(f interface{}) *MockTimer_Time_Call {
	return &MockTimer_Time_Call{Call: _e.mock.On("Time", f)}
}

func (_c *MockTimer_Time_Call) Run(run func(f func())) *MockTimer_Time_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func()
		if args[0] != nil {
			arg0 = args[0].(func())
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTimer_Time_Call) Return() *MockTimer_Time_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTimer_Time_Call) RunAndReturn(run func(f func())) *MockTimer_Time_Call {
	_c.Run(run)
	return _c
}

// WithTags provides a mock function for the type MockTimer
func (_mock *MockTimer) WithTags(tags ...metrics.Tag) metrics.Timer {
	var tmpRet mock.Arguments
	if len(tags) > 0 {
		tmpRet = _mock.Called(tags)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WithTags")
	}

	var r0 metrics.Timer
	if returnFunc, ok := ret.Get(0).(func(...metrics.Tag) metrics.Timer); ok {
		r0 = returnFunc(tags...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Timer)
		}
	}
	return r0
}

// MockTimer_WithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTags'
type MockTimer_WithTags_Call struct {
	*mock.Call
}

// WithTags is a helper method to define mock.On call
//   - tags ...metrics.Tag
func (_e *MockTimer_Expecter) WithTags(tags ...interface{}) *MockTimer_WithTags_Call {
	return &MockTimer_WithTags_Call{Call: _e.mock.On("WithTags",
		append([]interface{}{}, tags...)...)}
}

func (_c *MockTimer_WithTags_Call) Run(run func(tags ...metrics.Tag)) *MockTimer_WithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []metrics.Tag
		var variadicArgs []metrics.Tag
		if len(args) > 0 {
			variadicArgs = args[0].([]metrics.Tag)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockTimer_WithTags_Call) Return(timer metrics.Timer) *MockTimer_WithTags_Call {
	_c.Call.Return(timer)
	return _c
}

func (_c *MockTimer_WithTags_Call) RunAndReturn(run func(tags ...metrics.Tag) metrics.Timer) *MockTimer_WithTags_Call {
	_c.Call.Return(run)
	return _c
}
