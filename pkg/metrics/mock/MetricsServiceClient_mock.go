// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockMetricsServiceClient creates a new instance of MockMetricsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsServiceClient {
	mock := &MockMetricsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsServiceClient is an autogenerated mock type for the MetricsServiceClient type
type MockMetricsServiceClient struct {
	mock.Mock
}

type MockMetricsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsServiceClient) EXPECT() *MockMetricsServiceClient_Expecter {
	return &MockMetricsServiceClient_Expecter{mock: &_m.Mock}
}

// CollectMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) CollectMetrics(ctx context.Context, in *proto.CollectMetricsRequest, opts ...grpc.CallOption) (*proto.CollectMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CollectMetrics")
	}

	var r0 *proto.CollectMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CollectMetricsRequest, ...grpc.CallOption) (*proto.CollectMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CollectMetricsRequest, ...grpc.CallOption) *proto.CollectMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CollectMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CollectMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_CollectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectMetrics'
type MockMetricsServiceClient_CollectMetrics_Call struct {
	*mock.Call
}

// CollectMetrics is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockMetricsServiceClient_Expecter) CollectMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_CollectMetrics_Call {
	return &MockMetricsServiceClient_CollectMetrics_Call{Call: _e.mock.On("CollectMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_CollectMetrics_Call) Run(run func(ctx context.Context, in *proto.CollectMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_CollectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.CollectMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricsServiceClient_CollectMetrics_Call) Return(collectMetricsResponse *proto.CollectMetricsResponse, err error) *MockMetricsServiceClient_CollectMetrics_Call {
	_c.Call.Return(collectMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_CollectMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.CollectMetricsRequest, opts ...grpc.CallOption) (*proto.CollectMetricsResponse, error)) *MockMetricsServiceClient_CollectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) GetMetrics(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 grpc.ServerStreamingClient[proto.MetricData]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.MetricData]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.MetricData])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockMetricsServiceClient_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockMetricsServiceClient_Expecter) GetMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_GetMetrics_Call {
	return &MockMetricsServiceClient_GetMetrics_Call{Call: _e.mock.On("GetMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) Run(run func(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GetMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.MetricData], err error) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error)) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) ListMetrics(ctx context.Context, in *proto.ListMetricsRequest, opts ...grpc.CallOption) (*proto.ListMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMetrics")
	}

	var r0 *proto.ListMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMetricsRequest, ...grpc.CallOption) (*proto.ListMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMetricsRequest, ...grpc.CallOption) *proto.ListMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_ListMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetrics'
type MockMetricsServiceClient_ListMetrics_Call struct {
	*mock.Call
}

// ListMetrics is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockMetricsServiceClient_Expecter) ListMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_ListMetrics_Call {
	return &MockMetricsServiceClient_ListMetrics_Call{Call: _e.mock.On("ListMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_ListMetrics_Call) Run(run func(ctx context.Context, in *proto.ListMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_ListMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ListMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricsServiceClient_ListMetrics_Call) Return(listMetricsResponse *proto.ListMetricsResponse, err error) *MockMetricsServiceClient_ListMetrics_Call {
	_c.Call.Return(listMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_ListMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListMetricsRequest, opts ...grpc.CallOption) (*proto.ListMetricsResponse, error)) *MockMetricsServiceClient_ListMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordEvent provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) RecordEvent(ctx context.Context, in *proto.RecordEventRequest, opts ...grpc.CallOption) (*proto.RecordEventResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RecordEvent")
	}

	var r0 *proto.RecordEventResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordEventRequest, ...grpc.CallOption) (*proto.RecordEventResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordEventRequest, ...grpc.CallOption) *proto.RecordEventResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordEventResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordEventRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_RecordEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordEvent'
type MockMetricsServiceClient_RecordEvent_Call struct {
	*mock.Call
}

// RecordEvent is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockMetricsServiceClient_Expecter) RecordEvent(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_RecordEvent_Call {
	return &MockMetricsServiceClient_RecordEvent_Call{Call: _e.mock.On("RecordEvent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_RecordEvent_Call) Run(run func(ctx context.Context, in *proto.RecordEventRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_RecordEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.RecordEventRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricsServiceClient_RecordEvent_Call) Return(recordEventResponse *proto.RecordEventResponse, err error) *MockMetricsServiceClient_RecordEvent_Call {
	_c.Call.Return(recordEventResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_RecordEvent_Call) RunAndReturn(run func(ctx context.Context, in *proto.RecordEventRequest, opts ...grpc.CallOption) (*proto.RecordEventResponse, error)) *MockMetricsServiceClient_RecordEvent_Call {
	_c.Call.Return(run)
	return _c
}

// WatchMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) WatchMetrics(ctx context.Context, in *proto.WatchMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricUpdate], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WatchMetrics")
	}

	var r0 grpc.ServerStreamingClient[proto.MetricUpdate]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchMetricsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricUpdate], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchMetricsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.MetricUpdate]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.MetricUpdate])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WatchMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_WatchMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchMetrics'
type MockMetricsServiceClient_WatchMetrics_Call struct {
	*mock.Call
}

// WatchMetrics is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockMetricsServiceClient_Expecter) WatchMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_WatchMetrics_Call {
	return &MockMetricsServiceClient_WatchMetrics_Call{Call: _e.mock.On("WatchMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_WatchMetrics_Call) Run(run func(ctx context.Context, in *proto.WatchMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_WatchMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.WatchMetricsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockMetricsServiceClient_WatchMetrics_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.MetricUpdate], err error) *MockMetricsServiceClient_WatchMetrics_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockMetricsServiceClient_WatchMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.WatchMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricUpdate], error)) *MockMetricsServiceClient_WatchMetrics_Call {
	_c.Call.Return(run)
	return _c
}
