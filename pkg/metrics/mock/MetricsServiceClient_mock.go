// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockMetricsServiceClient creates a new instance of MockMetricsServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsServiceClient {
	mock := &MockMetricsServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsServiceClient is an autogenerated mock type for the MetricsServiceClient type
type MockMetricsServiceClient struct {
	mock.Mock
}

type MockMetricsServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsServiceClient) EXPECT() *MockMetricsServiceClient_Expecter {
	return &MockMetricsServiceClient_Expecter{mock: &_m.Mock}
}

// GetMetricMetadata provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) GetMetricMetadata(ctx context.Context, in *proto.GetMetricMetadataRequest, opts ...grpc.CallOption) (*proto.GetMetricMetadataResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMetricMetadata")
	}

	var r0 *proto.GetMetricMetadataResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricMetadataRequest, ...grpc.CallOption) (*proto.GetMetricMetadataResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricMetadataRequest, ...grpc.CallOption) *proto.GetMetricMetadataResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricMetadataResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricMetadataRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_GetMetricMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricMetadata'
type MockMetricsServiceClient_GetMetricMetadata_Call struct {
	*mock.Call
}

// GetMetricMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetMetricMetadataRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) GetMetricMetadata(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_GetMetricMetadata_Call {
	return &MockMetricsServiceClient_GetMetricMetadata_Call{Call: _e.mock.On("GetMetricMetadata",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_GetMetricMetadata_Call) Run(run func(ctx context.Context, in *proto.GetMetricMetadataRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_GetMetricMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricMetadataRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricMetadataRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_GetMetricMetadata_Call) Return(getMetricMetadataResponse *proto.GetMetricMetadataResponse, err error) *MockMetricsServiceClient_GetMetricMetadata_Call {
	_c.Call.Return(getMetricMetadataResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_GetMetricMetadata_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMetricMetadataRequest, opts ...grpc.CallOption) (*proto.GetMetricMetadataResponse, error)) *MockMetricsServiceClient_GetMetricMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) GetMetrics(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption) (*proto.GetMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 *proto.GetMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) (*proto.GetMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) *proto.GetMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MockMetricsServiceClient_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetMetricsRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) GetMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_GetMetrics_Call {
	return &MockMetricsServiceClient_GetMetrics_Call{Call: _e.mock.On("GetMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) Run(run func(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) Return(getMetricsResponse *proto.GetMetricsResponse, err error) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Return(getMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_GetMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMetricsRequest, opts ...grpc.CallOption) (*proto.GetMetricsResponse, error)) *MockMetricsServiceClient_GetMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsSummary provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) GetMetricsSummary(ctx context.Context, in *proto.GetMetricsSummaryRequest, opts ...grpc.CallOption) (*proto.GetMetricsSummaryResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsSummary")
	}

	var r0 *proto.GetMetricsSummaryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsSummaryRequest, ...grpc.CallOption) (*proto.GetMetricsSummaryResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMetricsSummaryRequest, ...grpc.CallOption) *proto.GetMetricsSummaryResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMetricsSummaryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMetricsSummaryRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_GetMetricsSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsSummary'
type MockMetricsServiceClient_GetMetricsSummary_Call struct {
	*mock.Call
}

// GetMetricsSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetMetricsSummaryRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) GetMetricsSummary(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_GetMetricsSummary_Call {
	return &MockMetricsServiceClient_GetMetricsSummary_Call{Call: _e.mock.On("GetMetricsSummary",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_GetMetricsSummary_Call) Run(run func(ctx context.Context, in *proto.GetMetricsSummaryRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_GetMetricsSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMetricsSummaryRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMetricsSummaryRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_GetMetricsSummary_Call) Return(getMetricsSummaryResponse *proto.GetMetricsSummaryResponse, err error) *MockMetricsServiceClient_GetMetricsSummary_Call {
	_c.Call.Return(getMetricsSummaryResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_GetMetricsSummary_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMetricsSummaryRequest, opts ...grpc.CallOption) (*proto.GetMetricsSummaryResponse, error)) *MockMetricsServiceClient_GetMetricsSummary_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) QueryMetrics(ctx context.Context, in *proto.QueryMetricsRequest, opts ...grpc.CallOption) (*proto.QueryMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryMetrics")
	}

	var r0 *proto.QueryMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryMetricsRequest, ...grpc.CallOption) (*proto.QueryMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryMetricsRequest, ...grpc.CallOption) *proto.QueryMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_QueryMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMetrics'
type MockMetricsServiceClient_QueryMetrics_Call struct {
	*mock.Call
}

// QueryMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.QueryMetricsRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) QueryMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_QueryMetrics_Call {
	return &MockMetricsServiceClient_QueryMetrics_Call{Call: _e.mock.On("QueryMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_QueryMetrics_Call) Run(run func(ctx context.Context, in *proto.QueryMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_QueryMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryMetricsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_QueryMetrics_Call) Return(queryMetricsResponse *proto.QueryMetricsResponse, err error) *MockMetricsServiceClient_QueryMetrics_Call {
	_c.Call.Return(queryMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_QueryMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.QueryMetricsRequest, opts ...grpc.CallOption) (*proto.QueryMetricsResponse, error)) *MockMetricsServiceClient_QueryMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordBatchMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) RecordBatchMetrics(ctx context.Context, in *proto.RecordMetricsRequest, opts ...grpc.CallOption) (*proto.RecordMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RecordBatchMetrics")
	}

	var r0 *proto.RecordMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricsRequest, ...grpc.CallOption) (*proto.RecordMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricsRequest, ...grpc.CallOption) *proto.RecordMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_RecordBatchMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordBatchMetrics'
type MockMetricsServiceClient_RecordBatchMetrics_Call struct {
	*mock.Call
}

// RecordBatchMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RecordMetricsRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) RecordBatchMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_RecordBatchMetrics_Call {
	return &MockMetricsServiceClient_RecordBatchMetrics_Call{Call: _e.mock.On("RecordBatchMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_RecordBatchMetrics_Call) Run(run func(ctx context.Context, in *proto.RecordMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_RecordBatchMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RecordMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RecordMetricsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_RecordBatchMetrics_Call) Return(recordMetricsResponse *proto.RecordMetricsResponse, err error) *MockMetricsServiceClient_RecordBatchMetrics_Call {
	_c.Call.Return(recordMetricsResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_RecordBatchMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.RecordMetricsRequest, opts ...grpc.CallOption) (*proto.RecordMetricsResponse, error)) *MockMetricsServiceClient_RecordBatchMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RecordMetric provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) RecordMetric(ctx context.Context, in *proto.RecordMetricRequest, opts ...grpc.CallOption) (*proto.RecordMetricResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RecordMetric")
	}

	var r0 *proto.RecordMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricRequest, ...grpc.CallOption) (*proto.RecordMetricResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RecordMetricRequest, ...grpc.CallOption) *proto.RecordMetricResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RecordMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RecordMetricRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_RecordMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordMetric'
type MockMetricsServiceClient_RecordMetric_Call struct {
	*mock.Call
}

// RecordMetric is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RecordMetricRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) RecordMetric(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_RecordMetric_Call {
	return &MockMetricsServiceClient_RecordMetric_Call{Call: _e.mock.On("RecordMetric",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_RecordMetric_Call) Run(run func(ctx context.Context, in *proto.RecordMetricRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_RecordMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RecordMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RecordMetricRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_RecordMetric_Call) Return(recordMetricResponse *proto.RecordMetricResponse, err error) *MockMetricsServiceClient_RecordMetric_Call {
	_c.Call.Return(recordMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_RecordMetric_Call) RunAndReturn(run func(ctx context.Context, in *proto.RecordMetricRequest, opts ...grpc.CallOption) (*proto.RecordMetricResponse, error)) *MockMetricsServiceClient_RecordMetric_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterMetric provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) RegisterMetric(ctx context.Context, in *proto.RegisterMetricRequest, opts ...grpc.CallOption) (*proto.RegisterMetricResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RegisterMetric")
	}

	var r0 *proto.RegisterMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterMetricRequest, ...grpc.CallOption) (*proto.RegisterMetricResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterMetricRequest, ...grpc.CallOption) *proto.RegisterMetricResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RegisterMetricRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_RegisterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterMetric'
type MockMetricsServiceClient_RegisterMetric_Call struct {
	*mock.Call
}

// RegisterMetric is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RegisterMetricRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) RegisterMetric(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_RegisterMetric_Call {
	return &MockMetricsServiceClient_RegisterMetric_Call{Call: _e.mock.On("RegisterMetric",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_RegisterMetric_Call) Run(run func(ctx context.Context, in *proto.RegisterMetricRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_RegisterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RegisterMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RegisterMetricRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_RegisterMetric_Call) Return(registerMetricResponse *proto.RegisterMetricResponse, err error) *MockMetricsServiceClient_RegisterMetric_Call {
	_c.Call.Return(registerMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_RegisterMetric_Call) RunAndReturn(run func(ctx context.Context, in *proto.RegisterMetricRequest, opts ...grpc.CallOption) (*proto.RegisterMetricResponse, error)) *MockMetricsServiceClient_RegisterMetric_Call {
	_c.Call.Return(run)
	return _c
}

// StreamMetrics provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) StreamMetrics(ctx context.Context, in *proto.StreamMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for StreamMetrics")
	}

	var r0 grpc.ServerStreamingClient[proto.MetricData]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StreamMetricsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StreamMetricsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.MetricData]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.MetricData])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StreamMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_StreamMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamMetrics'
type MockMetricsServiceClient_StreamMetrics_Call struct {
	*mock.Call
}

// StreamMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.StreamMetricsRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) StreamMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_StreamMetrics_Call {
	return &MockMetricsServiceClient_StreamMetrics_Call{Call: _e.mock.On("StreamMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_StreamMetrics_Call) Run(run func(ctx context.Context, in *proto.StreamMetricsRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_StreamMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.StreamMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.StreamMetricsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_StreamMetrics_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.MetricData], err error) *MockMetricsServiceClient_StreamMetrics_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockMetricsServiceClient_StreamMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.StreamMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.MetricData], error)) *MockMetricsServiceClient_StreamMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterMetric provides a mock function for the type MockMetricsServiceClient
func (_mock *MockMetricsServiceClient) UnregisterMetric(ctx context.Context, in *proto.UnregisterMetricRequest, opts ...grpc.CallOption) (*proto.UnregisterMetricResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UnregisterMetric")
	}

	var r0 *proto.UnregisterMetricResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterMetricRequest, ...grpc.CallOption) (*proto.UnregisterMetricResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterMetricRequest, ...grpc.CallOption) *proto.UnregisterMetricResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UnregisterMetricResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UnregisterMetricRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsServiceClient_UnregisterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterMetric'
type MockMetricsServiceClient_UnregisterMetric_Call struct {
	*mock.Call
}

// UnregisterMetric is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UnregisterMetricRequest
//   - opts ...grpc.CallOption
func (_e *MockMetricsServiceClient_Expecter) UnregisterMetric(ctx interface{}, in interface{}, opts ...interface{}) *MockMetricsServiceClient_UnregisterMetric_Call {
	return &MockMetricsServiceClient_UnregisterMetric_Call{Call: _e.mock.On("UnregisterMetric",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockMetricsServiceClient_UnregisterMetric_Call) Run(run func(ctx context.Context, in *proto.UnregisterMetricRequest, opts ...grpc.CallOption)) *MockMetricsServiceClient_UnregisterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UnregisterMetricRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UnregisterMetricRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockMetricsServiceClient_UnregisterMetric_Call) Return(unregisterMetricResponse *proto.UnregisterMetricResponse, err error) *MockMetricsServiceClient_UnregisterMetric_Call {
	_c.Call.Return(unregisterMetricResponse, err)
	return _c
}

func (_c *MockMetricsServiceClient_UnregisterMetric_Call) RunAndReturn(run func(ctx context.Context, in *proto.UnregisterMetricRequest, opts ...grpc.CallOption) (*proto.UnregisterMetricResponse, error)) *MockMetricsServiceClient_UnregisterMetric_Call {
	_c.Call.Return(run)
	return _c
}
