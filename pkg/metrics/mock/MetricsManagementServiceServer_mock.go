// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/metrics/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricsManagementServiceServer creates a new instance of MockMetricsManagementServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsManagementServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsManagementServiceServer {
	mock := &MockMetricsManagementServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsManagementServiceServer is an autogenerated mock type for the MetricsManagementServiceServer type
type MockMetricsManagementServiceServer struct {
	mock.Mock
}

type MockMetricsManagementServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsManagementServiceServer) EXPECT() *MockMetricsManagementServiceServer_Expecter {
	return &MockMetricsManagementServiceServer_Expecter{mock: &_m.Mock}
}

// CreateMetricsProvider provides a mock function for the type MockMetricsManagementServiceServer
func (_mock *MockMetricsManagementServiceServer) CreateMetricsProvider(context1 context.Context, createProviderRequest *proto.CreateProviderRequest) (*proto.CreateProviderResponse, error) {
	ret := _mock.Called(context1, createProviderRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricsProvider")
	}

	var r0 *proto.CreateProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateProviderRequest) (*proto.CreateProviderResponse, error)); ok {
		return returnFunc(context1, createProviderRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateProviderRequest) *proto.CreateProviderResponse); ok {
		r0 = returnFunc(context1, createProviderRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateProviderRequest) error); ok {
		r1 = returnFunc(context1, createProviderRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceServer_CreateMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMetricsProvider'
type MockMetricsManagementServiceServer_CreateMetricsProvider_Call struct {
	*mock.Call
}

// CreateMetricsProvider is a helper method to define mock.On call
//   - context1 context.Context
//   - createProviderRequest *proto.CreateProviderRequest
func (_e *MockMetricsManagementServiceServer_Expecter) CreateMetricsProvider(context1 interface{}, createProviderRequest interface{}) *MockMetricsManagementServiceServer_CreateMetricsProvider_Call {
	return &MockMetricsManagementServiceServer_CreateMetricsProvider_Call{Call: _e.mock.On("CreateMetricsProvider", context1, createProviderRequest)}
}

func (_c *MockMetricsManagementServiceServer_CreateMetricsProvider_Call) Run(run func(context1 context.Context, createProviderRequest *proto.CreateProviderRequest)) *MockMetricsManagementServiceServer_CreateMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateProviderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceServer_CreateMetricsProvider_Call) Return(createProviderResponse *proto.CreateProviderResponse, err error) *MockMetricsManagementServiceServer_CreateMetricsProvider_Call {
	_c.Call.Return(createProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceServer_CreateMetricsProvider_Call) RunAndReturn(run func(context1 context.Context, createProviderRequest *proto.CreateProviderRequest) (*proto.CreateProviderResponse, error)) *MockMetricsManagementServiceServer_CreateMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricsProvider provides a mock function for the type MockMetricsManagementServiceServer
func (_mock *MockMetricsManagementServiceServer) DeleteMetricsProvider(context1 context.Context, deleteProviderRequest *proto.DeleteProviderRequest) (*proto.DeleteProviderResponse, error) {
	ret := _mock.Called(context1, deleteProviderRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricsProvider")
	}

	var r0 *proto.DeleteProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteProviderRequest) (*proto.DeleteProviderResponse, error)); ok {
		return returnFunc(context1, deleteProviderRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteProviderRequest) *proto.DeleteProviderResponse); ok {
		r0 = returnFunc(context1, deleteProviderRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteProviderRequest) error); ok {
		r1 = returnFunc(context1, deleteProviderRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceServer_DeleteMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricsProvider'
type MockMetricsManagementServiceServer_DeleteMetricsProvider_Call struct {
	*mock.Call
}

// DeleteMetricsProvider is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteProviderRequest *proto.DeleteProviderRequest
func (_e *MockMetricsManagementServiceServer_Expecter) DeleteMetricsProvider(context1 interface{}, deleteProviderRequest interface{}) *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call {
	return &MockMetricsManagementServiceServer_DeleteMetricsProvider_Call{Call: _e.mock.On("DeleteMetricsProvider", context1, deleteProviderRequest)}
}

func (_c *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call) Run(run func(context1 context.Context, deleteProviderRequest *proto.DeleteProviderRequest)) *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteProviderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call) Return(deleteProviderResponse *proto.DeleteProviderResponse, err error) *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call {
	_c.Call.Return(deleteProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call) RunAndReturn(run func(context1 context.Context, deleteProviderRequest *proto.DeleteProviderRequest) (*proto.DeleteProviderResponse, error)) *MockMetricsManagementServiceServer_DeleteMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderStats provides a mock function for the type MockMetricsManagementServiceServer
func (_mock *MockMetricsManagementServiceServer) GetProviderStats(context1 context.Context, getProviderStatsRequest *proto.GetProviderStatsRequest) (*proto.GetProviderStatsResponse, error) {
	ret := _mock.Called(context1, getProviderStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderStats")
	}

	var r0 *proto.GetProviderStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetProviderStatsRequest) (*proto.GetProviderStatsResponse, error)); ok {
		return returnFunc(context1, getProviderStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetProviderStatsRequest) *proto.GetProviderStatsResponse); ok {
		r0 = returnFunc(context1, getProviderStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetProviderStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetProviderStatsRequest) error); ok {
		r1 = returnFunc(context1, getProviderStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceServer_GetProviderStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderStats'
type MockMetricsManagementServiceServer_GetProviderStats_Call struct {
	*mock.Call
}

// GetProviderStats is a helper method to define mock.On call
//   - context1 context.Context
//   - getProviderStatsRequest *proto.GetProviderStatsRequest
func (_e *MockMetricsManagementServiceServer_Expecter) GetProviderStats(context1 interface{}, getProviderStatsRequest interface{}) *MockMetricsManagementServiceServer_GetProviderStats_Call {
	return &MockMetricsManagementServiceServer_GetProviderStats_Call{Call: _e.mock.On("GetProviderStats", context1, getProviderStatsRequest)}
}

func (_c *MockMetricsManagementServiceServer_GetProviderStats_Call) Run(run func(context1 context.Context, getProviderStatsRequest *proto.GetProviderStatsRequest)) *MockMetricsManagementServiceServer_GetProviderStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetProviderStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetProviderStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceServer_GetProviderStats_Call) Return(getProviderStatsResponse *proto.GetProviderStatsResponse, err error) *MockMetricsManagementServiceServer_GetProviderStats_Call {
	_c.Call.Return(getProviderStatsResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceServer_GetProviderStats_Call) RunAndReturn(run func(context1 context.Context, getProviderStatsRequest *proto.GetProviderStatsRequest) (*proto.GetProviderStatsResponse, error)) *MockMetricsManagementServiceServer_GetProviderStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListMetricsProviders provides a mock function for the type MockMetricsManagementServiceServer
func (_mock *MockMetricsManagementServiceServer) ListMetricsProviders(context1 context.Context, listProvidersRequest *proto.ListProvidersRequest) (*proto.ListProvidersResponse, error) {
	ret := _mock.Called(context1, listProvidersRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricsProviders")
	}

	var r0 *proto.ListProvidersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListProvidersRequest) (*proto.ListProvidersResponse, error)); ok {
		return returnFunc(context1, listProvidersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListProvidersRequest) *proto.ListProvidersResponse); ok {
		r0 = returnFunc(context1, listProvidersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListProvidersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListProvidersRequest) error); ok {
		r1 = returnFunc(context1, listProvidersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceServer_ListMetricsProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMetricsProviders'
type MockMetricsManagementServiceServer_ListMetricsProviders_Call struct {
	*mock.Call
}

// ListMetricsProviders is a helper method to define mock.On call
//   - context1 context.Context
//   - listProvidersRequest *proto.ListProvidersRequest
func (_e *MockMetricsManagementServiceServer_Expecter) ListMetricsProviders(context1 interface{}, listProvidersRequest interface{}) *MockMetricsManagementServiceServer_ListMetricsProviders_Call {
	return &MockMetricsManagementServiceServer_ListMetricsProviders_Call{Call: _e.mock.On("ListMetricsProviders", context1, listProvidersRequest)}
}

func (_c *MockMetricsManagementServiceServer_ListMetricsProviders_Call) Run(run func(context1 context.Context, listProvidersRequest *proto.ListProvidersRequest)) *MockMetricsManagementServiceServer_ListMetricsProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListProvidersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListProvidersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceServer_ListMetricsProviders_Call) Return(listProvidersResponse *proto.ListProvidersResponse, err error) *MockMetricsManagementServiceServer_ListMetricsProviders_Call {
	_c.Call.Return(listProvidersResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceServer_ListMetricsProviders_Call) RunAndReturn(run func(context1 context.Context, listProvidersRequest *proto.ListProvidersRequest) (*proto.ListProvidersResponse, error)) *MockMetricsManagementServiceServer_ListMetricsProviders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetricsProvider provides a mock function for the type MockMetricsManagementServiceServer
func (_mock *MockMetricsManagementServiceServer) UpdateMetricsProvider(context1 context.Context, updateProviderRequest *proto.UpdateProviderRequest) (*proto.UpdateProviderResponse, error) {
	ret := _mock.Called(context1, updateProviderRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricsProvider")
	}

	var r0 *proto.UpdateProviderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateProviderRequest) (*proto.UpdateProviderResponse, error)); ok {
		return returnFunc(context1, updateProviderRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateProviderRequest) *proto.UpdateProviderResponse); ok {
		r0 = returnFunc(context1, updateProviderRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateProviderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateProviderRequest) error); ok {
		r1 = returnFunc(context1, updateProviderRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsManagementServiceServer_UpdateMetricsProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetricsProvider'
type MockMetricsManagementServiceServer_UpdateMetricsProvider_Call struct {
	*mock.Call
}

// UpdateMetricsProvider is a helper method to define mock.On call
//   - context1 context.Context
//   - updateProviderRequest *proto.UpdateProviderRequest
func (_e *MockMetricsManagementServiceServer_Expecter) UpdateMetricsProvider(context1 interface{}, updateProviderRequest interface{}) *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call {
	return &MockMetricsManagementServiceServer_UpdateMetricsProvider_Call{Call: _e.mock.On("UpdateMetricsProvider", context1, updateProviderRequest)}
}

func (_c *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call) Run(run func(context1 context.Context, updateProviderRequest *proto.UpdateProviderRequest)) *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateProviderRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateProviderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call) Return(updateProviderResponse *proto.UpdateProviderResponse, err error) *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call {
	_c.Call.Return(updateProviderResponse, err)
	return _c
}

func (_c *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call) RunAndReturn(run func(context1 context.Context, updateProviderRequest *proto.UpdateProviderRequest) (*proto.UpdateProviderResponse, error)) *MockMetricsManagementServiceServer_UpdateMetricsProvider_Call {
	_c.Call.Return(run)
	return _c
}
