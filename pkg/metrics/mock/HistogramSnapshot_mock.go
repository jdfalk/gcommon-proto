// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHistogramSnapshot creates a new instance of MockHistogramSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHistogramSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHistogramSnapshot {
	mock := &MockHistogramSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHistogramSnapshot is an autogenerated mock type for the HistogramSnapshot type
type MockHistogramSnapshot struct {
	mock.Mock
}

type MockHistogramSnapshot_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHistogramSnapshot) EXPECT() *MockHistogramSnapshot_Expecter {
	return &MockHistogramSnapshot_Expecter{mock: &_m.Mock}
}

// Buckets provides a mock function for the type MockHistogramSnapshot
func (_mock *MockHistogramSnapshot) Buckets() map[float64]int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Buckets")
	}

	var r0 map[float64]int64
	if returnFunc, ok := ret.Get(0).(func() map[float64]int64); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[float64]int64)
		}
	}
	return r0
}

// MockHistogramSnapshot_Buckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Buckets'
type MockHistogramSnapshot_Buckets_Call struct {
	*mock.Call
}

// Buckets is a helper method to define mock.On call
func (_e *MockHistogramSnapshot_Expecter) Buckets() *MockHistogramSnapshot_Buckets_Call {
	return &MockHistogramSnapshot_Buckets_Call{Call: _e.mock.On("Buckets")}
}

func (_c *MockHistogramSnapshot_Buckets_Call) Run(run func()) *MockHistogramSnapshot_Buckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHistogramSnapshot_Buckets_Call) Return(float64ToInt64 map[float64]int64) *MockHistogramSnapshot_Buckets_Call {
	_c.Call.Return(float64ToInt64)
	return _c
}

func (_c *MockHistogramSnapshot_Buckets_Call) RunAndReturn(run func() map[float64]int64) *MockHistogramSnapshot_Buckets_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockHistogramSnapshot
func (_mock *MockHistogramSnapshot) Count() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockHistogramSnapshot_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockHistogramSnapshot_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockHistogramSnapshot_Expecter) Count() *MockHistogramSnapshot_Count_Call {
	return &MockHistogramSnapshot_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockHistogramSnapshot_Count_Call) Run(run func()) *MockHistogramSnapshot_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHistogramSnapshot_Count_Call) Return(n int64) *MockHistogramSnapshot_Count_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockHistogramSnapshot_Count_Call) RunAndReturn(run func() int64) *MockHistogramSnapshot_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Quantile provides a mock function for the type MockHistogramSnapshot
func (_mock *MockHistogramSnapshot) Quantile(q float64) float64 {
	ret := _mock.Called(q)

	if len(ret) == 0 {
		panic("no return value specified for Quantile")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func(float64) float64); ok {
		r0 = returnFunc(q)
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockHistogramSnapshot_Quantile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quantile'
type MockHistogramSnapshot_Quantile_Call struct {
	*mock.Call
}

// Quantile is a helper method to define mock.On call
//   - q float64
func (_e *MockHistogramSnapshot_Expecter) Quantile(q interface{}) *MockHistogramSnapshot_Quantile_Call {
	return &MockHistogramSnapshot_Quantile_Call{Call: _e.mock.On("Quantile", q)}
}

func (_c *MockHistogramSnapshot_Quantile_Call) Run(run func(q float64)) *MockHistogramSnapshot_Quantile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 float64
		if args[0] != nil {
			arg0 = args[0].(float64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHistogramSnapshot_Quantile_Call) Return(f float64) *MockHistogramSnapshot_Quantile_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockHistogramSnapshot_Quantile_Call) RunAndReturn(run func(q float64) float64) *MockHistogramSnapshot_Quantile_Call {
	_c.Call.Return(run)
	return _c
}

// Sum provides a mock function for the type MockHistogramSnapshot
func (_mock *MockHistogramSnapshot) Sum() float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sum")
	}

	var r0 float64
	if returnFunc, ok := ret.Get(0).(func() float64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(float64)
	}
	return r0
}

// MockHistogramSnapshot_Sum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sum'
type MockHistogramSnapshot_Sum_Call struct {
	*mock.Call
}

// Sum is a helper method to define mock.On call
func (_e *MockHistogramSnapshot_Expecter) Sum() *MockHistogramSnapshot_Sum_Call {
	return &MockHistogramSnapshot_Sum_Call{Call: _e.mock.On("Sum")}
}

func (_c *MockHistogramSnapshot_Sum_Call) Run(run func()) *MockHistogramSnapshot_Sum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHistogramSnapshot_Sum_Call) Return(f float64) *MockHistogramSnapshot_Sum_Call {
	_c.Call.Return(f)
	return _c
}

func (_c *MockHistogramSnapshot_Sum_Call) RunAndReturn(run func() float64) *MockHistogramSnapshot_Sum_Call {
	_c.Call.Return(run)
	return _c
}
