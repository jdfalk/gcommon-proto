// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/messages/metric_metadata.proto

//go:build !protoopaque

package metricspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MetricMetadata contains metadata information about a metric.
type MetricMetadata struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique identifier for the metric
	MetricId *string `protobuf:"bytes,1,opt,name=metric_id,json=metricId" json:"metric_id,omitempty"`
	// Human-readable name of the metric
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of what this metric measures
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Metric type (counter, gauge, histogram, etc.)
	Type *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// Units of measurement (e.g., "bytes", "seconds", "requests")
	Unit *string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	// Labels associated with this metric
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// When this metric was first created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// When this metric was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// Whether this metric is currently active
	Active *bool `protobuf:"varint,9,opt,name=active" json:"active,omitempty"`
	// Data retention policy for this metric
	RetentionPolicy *string `protobuf:"bytes,10,opt,name=retention_policy,json=retentionPolicy" json:"retention_policy,omitempty"`
	// Provider that owns this metric
	ProviderId *string `protobuf:"bytes,11,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Namespace this metric belongs to
	Namespace     *string `protobuf:"bytes,12,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricMetadata) Reset() {
	*x = MetricMetadata{}
	mi := &file_pkg_metrics_proto_messages_metric_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMetadata) ProtoMessage() {}

func (x *MetricMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_messages_metric_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricMetadata) GetMetricId() string {
	if x != nil && x.MetricId != nil {
		return *x.MetricId
	}
	return ""
}

func (x *MetricMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MetricMetadata) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *MetricMetadata) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *MetricMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MetricMetadata) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MetricMetadata) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *MetricMetadata) GetRetentionPolicy() string {
	if x != nil && x.RetentionPolicy != nil {
		return *x.RetentionPolicy
	}
	return ""
}

func (x *MetricMetadata) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *MetricMetadata) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *MetricMetadata) SetMetricId(v string) {
	x.MetricId = &v
}

func (x *MetricMetadata) SetName(v string) {
	x.Name = &v
}

func (x *MetricMetadata) SetDescription(v string) {
	x.Description = &v
}

func (x *MetricMetadata) SetType(v string) {
	x.Type = &v
}

func (x *MetricMetadata) SetUnit(v string) {
	x.Unit = &v
}

func (x *MetricMetadata) SetLabels(v map[string]string) {
	x.Labels = v
}

func (x *MetricMetadata) SetCreatedAt(v *timestamppb.Timestamp) {
	x.CreatedAt = v
}

func (x *MetricMetadata) SetUpdatedAt(v *timestamppb.Timestamp) {
	x.UpdatedAt = v
}

func (x *MetricMetadata) SetActive(v bool) {
	x.Active = &v
}

func (x *MetricMetadata) SetRetentionPolicy(v string) {
	x.RetentionPolicy = &v
}

func (x *MetricMetadata) SetProviderId(v string) {
	x.ProviderId = &v
}

func (x *MetricMetadata) SetNamespace(v string) {
	x.Namespace = &v
}

func (x *MetricMetadata) HasMetricId() bool {
	if x == nil {
		return false
	}
	return x.MetricId != nil
}

func (x *MetricMetadata) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MetricMetadata) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *MetricMetadata) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *MetricMetadata) HasUnit() bool {
	if x == nil {
		return false
	}
	return x.Unit != nil
}

func (x *MetricMetadata) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.CreatedAt != nil
}

func (x *MetricMetadata) HasUpdatedAt() bool {
	if x == nil {
		return false
	}
	return x.UpdatedAt != nil
}

func (x *MetricMetadata) HasActive() bool {
	if x == nil {
		return false
	}
	return x.Active != nil
}

func (x *MetricMetadata) HasRetentionPolicy() bool {
	if x == nil {
		return false
	}
	return x.RetentionPolicy != nil
}

func (x *MetricMetadata) HasProviderId() bool {
	if x == nil {
		return false
	}
	return x.ProviderId != nil
}

func (x *MetricMetadata) HasNamespace() bool {
	if x == nil {
		return false
	}
	return x.Namespace != nil
}

func (x *MetricMetadata) ClearMetricId() {
	x.MetricId = nil
}

func (x *MetricMetadata) ClearName() {
	x.Name = nil
}

func (x *MetricMetadata) ClearDescription() {
	x.Description = nil
}

func (x *MetricMetadata) ClearType() {
	x.Type = nil
}

func (x *MetricMetadata) ClearUnit() {
	x.Unit = nil
}

func (x *MetricMetadata) ClearCreatedAt() {
	x.CreatedAt = nil
}

func (x *MetricMetadata) ClearUpdatedAt() {
	x.UpdatedAt = nil
}

func (x *MetricMetadata) ClearActive() {
	x.Active = nil
}

func (x *MetricMetadata) ClearRetentionPolicy() {
	x.RetentionPolicy = nil
}

func (x *MetricMetadata) ClearProviderId() {
	x.ProviderId = nil
}

func (x *MetricMetadata) ClearNamespace() {
	x.Namespace = nil
}

type MetricMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for the metric
	MetricId *string
	// Human-readable name of the metric
	Name *string
	// Description of what this metric measures
	Description *string
	// Metric type (counter, gauge, histogram, etc.)
	Type *string
	// Units of measurement (e.g., "bytes", "seconds", "requests")
	Unit *string
	// Labels associated with this metric
	Labels map[string]string
	// When this metric was first created
	CreatedAt *timestamppb.Timestamp
	// When this metric was last updated
	UpdatedAt *timestamppb.Timestamp
	// Whether this metric is currently active
	Active *bool
	// Data retention policy for this metric
	RetentionPolicy *string
	// Provider that owns this metric
	ProviderId *string
	// Namespace this metric belongs to
	Namespace *string
}

func (b0 MetricMetadata_builder) Build() *MetricMetadata {
	m0 := &MetricMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.MetricId = b.MetricId
	x.Name = b.Name
	x.Description = b.Description
	x.Type = b.Type
	x.Unit = b.Unit
	x.Labels = b.Labels
	x.CreatedAt = b.CreatedAt
	x.UpdatedAt = b.UpdatedAt
	x.Active = b.Active
	x.RetentionPolicy = b.RetentionPolicy
	x.ProviderId = b.ProviderId
	x.Namespace = b.Namespace
	return m0
}

var File_pkg_metrics_proto_messages_metric_metadata_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_messages_metric_metadata_proto_rawDesc = "" +
	"\n" +
	"0pkg/metrics/proto/messages/metric_metadata.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x86\x04\n" +
	"\x0eMetricMetadata\x12\x1b\n" +
	"\tmetric_id\x18\x01 \x01(\tR\bmetricId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x12F\n" +
	"\x06labels\x18\x06 \x03(\v2..gcommon.v1.metrics.MetricMetadata.LabelsEntryR\x06labels\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x16\n" +
	"\x06active\x18\t \x01(\bR\x06active\x12)\n" +
	"\x10retention_policy\x18\n" +
	" \x01(\tR\x0fretentionPolicy\x12\x1f\n" +
	"\vprovider_id\x18\v \x01(\tR\n" +
	"providerId\x12\x1c\n" +
	"\tnamespace\x18\f \x01(\tR\tnamespace\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xc8\x01\n" +
	"\x16com.gcommon.v1.metricsB\x13MetricMetadataProtoP\x01Z'../../../../pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_messages_metric_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_messages_metric_metadata_proto_goTypes = []any{
	(*MetricMetadata)(nil),        // 0: gcommon.v1.metrics.MetricMetadata
	nil,                           // 1: gcommon.v1.metrics.MetricMetadata.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_messages_metric_metadata_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.MetricMetadata.labels:type_name -> gcommon.v1.metrics.MetricMetadata.LabelsEntry
	2, // 1: gcommon.v1.metrics.MetricMetadata.created_at:type_name -> google.protobuf.Timestamp
	2, // 2: gcommon.v1.metrics.MetricMetadata.updated_at:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_messages_metric_metadata_proto_init() }
func file_pkg_metrics_proto_messages_metric_metadata_proto_init() {
	if File_pkg_metrics_proto_messages_metric_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_messages_metric_metadata_proto_rawDesc), len(file_pkg_metrics_proto_messages_metric_metadata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_messages_metric_metadata_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_messages_metric_metadata_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_messages_metric_metadata_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_messages_metric_metadata_proto = out.File
	file_pkg_metrics_proto_messages_metric_metadata_proto_goTypes = nil
	file_pkg_metrics_proto_messages_metric_metadata_proto_depIdxs = nil
}
