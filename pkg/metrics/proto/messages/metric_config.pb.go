// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/messages/metric_config.proto

//go:build !protoopaque

package metricspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MetricConfig contains configuration settings for a specific metric.
type MetricConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Metric name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Metric type (counter, gauge, histogram, summary, etc.)
	MetricType *string `protobuf:"bytes,2,opt,name=metric_type,json=metricType" json:"metric_type,omitempty"`
	// Whether this metric is enabled
	Enabled *bool `protobuf:"varint,3,opt,name=enabled" json:"enabled,omitempty"`
	// Collection interval
	CollectionInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=collection_interval,json=collectionInterval" json:"collection_interval,omitempty"`
	// Retention period for this metric
	RetentionPeriod *durationpb.Duration `protobuf:"bytes,5,opt,name=retention_period,json=retentionPeriod" json:"retention_period,omitempty"`
	// Labels to automatically add to this metric
	DefaultLabels map[string]string `protobuf:"bytes,6,rep,name=default_labels,json=defaultLabels" json:"default_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Description of the metric
	Description *string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// Unit of measurement
	Unit *string `protobuf:"bytes,8,opt,name=unit" json:"unit,omitempty"`
	// Sampling rate (0.0 to 1.0)
	SamplingRate *float64 `protobuf:"fixed64,9,opt,name=sampling_rate,json=samplingRate" json:"sampling_rate,omitempty"`
	// Export configuration
	ExportConfig  *ExportConfig `protobuf:"bytes,10,opt,name=export_config,json=exportConfig" json:"export_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	mi := &file_pkg_metrics_proto_messages_metric_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_messages_metric_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricConfig) GetMetricType() string {
	if x != nil && x.MetricType != nil {
		return *x.MetricType
	}
	return ""
}

func (x *MetricConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MetricConfig) GetCollectionInterval() *durationpb.Duration {
	if x != nil {
		return x.CollectionInterval
	}
	return nil
}

func (x *MetricConfig) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *MetricConfig) GetDefaultLabels() map[string]string {
	if x != nil {
		return x.DefaultLabels
	}
	return nil
}

func (x *MetricConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MetricConfig) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *MetricConfig) GetSamplingRate() float64 {
	if x != nil && x.SamplingRate != nil {
		return *x.SamplingRate
	}
	return 0
}

func (x *MetricConfig) GetExportConfig() *ExportConfig {
	if x != nil {
		return x.ExportConfig
	}
	return nil
}

func (x *MetricConfig) SetName(v string) {
	x.Name = &v
}

func (x *MetricConfig) SetMetricType(v string) {
	x.MetricType = &v
}

func (x *MetricConfig) SetEnabled(v bool) {
	x.Enabled = &v
}

func (x *MetricConfig) SetCollectionInterval(v *durationpb.Duration) {
	x.CollectionInterval = v
}

func (x *MetricConfig) SetRetentionPeriod(v *durationpb.Duration) {
	x.RetentionPeriod = v
}

func (x *MetricConfig) SetDefaultLabels(v map[string]string) {
	x.DefaultLabels = v
}

func (x *MetricConfig) SetDescription(v string) {
	x.Description = &v
}

func (x *MetricConfig) SetUnit(v string) {
	x.Unit = &v
}

func (x *MetricConfig) SetSamplingRate(v float64) {
	x.SamplingRate = &v
}

func (x *MetricConfig) SetExportConfig(v *ExportConfig) {
	x.ExportConfig = v
}

func (x *MetricConfig) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MetricConfig) HasMetricType() bool {
	if x == nil {
		return false
	}
	return x.MetricType != nil
}

func (x *MetricConfig) HasEnabled() bool {
	if x == nil {
		return false
	}
	return x.Enabled != nil
}

func (x *MetricConfig) HasCollectionInterval() bool {
	if x == nil {
		return false
	}
	return x.CollectionInterval != nil
}

func (x *MetricConfig) HasRetentionPeriod() bool {
	if x == nil {
		return false
	}
	return x.RetentionPeriod != nil
}

func (x *MetricConfig) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *MetricConfig) HasUnit() bool {
	if x == nil {
		return false
	}
	return x.Unit != nil
}

func (x *MetricConfig) HasSamplingRate() bool {
	if x == nil {
		return false
	}
	return x.SamplingRate != nil
}

func (x *MetricConfig) HasExportConfig() bool {
	if x == nil {
		return false
	}
	return x.ExportConfig != nil
}

func (x *MetricConfig) ClearName() {
	x.Name = nil
}

func (x *MetricConfig) ClearMetricType() {
	x.MetricType = nil
}

func (x *MetricConfig) ClearEnabled() {
	x.Enabled = nil
}

func (x *MetricConfig) ClearCollectionInterval() {
	x.CollectionInterval = nil
}

func (x *MetricConfig) ClearRetentionPeriod() {
	x.RetentionPeriod = nil
}

func (x *MetricConfig) ClearDescription() {
	x.Description = nil
}

func (x *MetricConfig) ClearUnit() {
	x.Unit = nil
}

func (x *MetricConfig) ClearSamplingRate() {
	x.SamplingRate = nil
}

func (x *MetricConfig) ClearExportConfig() {
	x.ExportConfig = nil
}

type MetricConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Metric name
	Name *string
	// Metric type (counter, gauge, histogram, summary, etc.)
	MetricType *string
	// Whether this metric is enabled
	Enabled *bool
	// Collection interval
	CollectionInterval *durationpb.Duration
	// Retention period for this metric
	RetentionPeriod *durationpb.Duration
	// Labels to automatically add to this metric
	DefaultLabels map[string]string
	// Description of the metric
	Description *string
	// Unit of measurement
	Unit *string
	// Sampling rate (0.0 to 1.0)
	SamplingRate *float64
	// Export configuration
	ExportConfig *ExportConfig
}

func (b0 MetricConfig_builder) Build() *MetricConfig {
	m0 := &MetricConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.MetricType = b.MetricType
	x.Enabled = b.Enabled
	x.CollectionInterval = b.CollectionInterval
	x.RetentionPeriod = b.RetentionPeriod
	x.DefaultLabels = b.DefaultLabels
	x.Description = b.Description
	x.Unit = b.Unit
	x.SamplingRate = b.SamplingRate
	x.ExportConfig = b.ExportConfig
	return m0
}

var File_pkg_metrics_proto_messages_metric_config_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_messages_metric_config_proto_rawDesc = "" +
	"\n" +
	".pkg/metrics/proto/messages/metric_config.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1egoogle/protobuf/duration.proto\x1a+pkg/metrics/proto/types/export_config.proto\"\xaf\x04\n" +
	"\fMetricConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vmetric_type\x18\x02 \x01(\tR\n" +
	"metricType\x12\x18\n" +
	"\aenabled\x18\x03 \x01(\bR\aenabled\x12J\n" +
	"\x13collection_interval\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x12collectionInterval\x12D\n" +
	"\x10retention_period\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x12Z\n" +
	"\x0edefault_labels\x18\x06 \x03(\v23.gcommon.v1.metrics.MetricConfig.DefaultLabelsEntryR\rdefaultLabels\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\b \x01(\tR\x04unit\x12#\n" +
	"\rsampling_rate\x18\t \x01(\x01R\fsamplingRate\x12E\n" +
	"\rexport_config\x18\n" +
	" \x01(\v2 .gcommon.v1.metrics.ExportConfigR\fexportConfig\x1a@\n" +
	"\x12DefaultLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xc3\x01\n" +
	"\x16com.gcommon.v1.metricsB\x11MetricConfigProtoP\x01Z$../../../../pkg/metrics/pb;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_messages_metric_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_messages_metric_config_proto_goTypes = []any{
	(*MetricConfig)(nil),        // 0: gcommon.v1.metrics.MetricConfig
	nil,                         // 1: gcommon.v1.metrics.MetricConfig.DefaultLabelsEntry
	(*durationpb.Duration)(nil), // 2: google.protobuf.Duration
	(*ExportConfig)(nil),        // 3: gcommon.v1.metrics.ExportConfig
}
var file_pkg_metrics_proto_messages_metric_config_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.metrics.MetricConfig.collection_interval:type_name -> google.protobuf.Duration
	2, // 1: gcommon.v1.metrics.MetricConfig.retention_period:type_name -> google.protobuf.Duration
	1, // 2: gcommon.v1.metrics.MetricConfig.default_labels:type_name -> gcommon.v1.metrics.MetricConfig.DefaultLabelsEntry
	3, // 3: gcommon.v1.metrics.MetricConfig.export_config:type_name -> gcommon.v1.metrics.ExportConfig
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_messages_metric_config_proto_init() }
func file_pkg_metrics_proto_messages_metric_config_proto_init() {
	if File_pkg_metrics_proto_messages_metric_config_proto != nil {
		return
	}
	file_pkg_metrics_proto_types_export_config_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_messages_metric_config_proto_rawDesc), len(file_pkg_metrics_proto_messages_metric_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_messages_metric_config_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_messages_metric_config_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_messages_metric_config_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_messages_metric_config_proto = out.File
	file_pkg_metrics_proto_messages_metric_config_proto_goTypes = nil
	file_pkg_metrics_proto_messages_metric_config_proto_depIdxs = nil
}
