// file: pkg/metrics/proto/stream_metrics_request.proto
// version: 1.1.0
// guid: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d

edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/metrics/proto/stream_compression.proto";
import "pkg/metrics/proto/stream_qos.proto";
import "pkg/metrics/proto/buffer_overflow_strategy.proto";
import "pkg/common/proto/request_metadata.proto";
import "pkg/metrics/proto/metric_filter.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/metrics/proto";


option features.(pb.go).api_level = API_OPAQUE;

/**
 * StreamMetricsRequest represents a request to stream metrics data in real-time.
 * This enables continuous monitoring and real-time metric consumption.
 */
message StreamMetricsRequest {
  // Standard request metadata (tracing, auth, etc.)
  gcommon.v1.common.RequestMetadata metadata = 1;

  // Filter to determine which metrics to stream
  MetricFilter filter = 2;

  // Streaming configuration options
  StreamOptions options = 3;

  // Optional provider ID to stream from
  string provider_id = 4;

  // Starting point for the stream
  StreamStart start = 5;

  // Buffer configuration for the stream
  BufferConfig buffer_config = 6;
}

/**
 * StreamOptions configures how metrics streaming should behave.
 */
message StreamOptions {
  // Whether to include historical data or only new metrics
  bool include_historical = 1;

  // Maximum number of metrics to send per message
  int32 batch_size = 2;

  // Maximum time to wait before sending a batch (milliseconds)
  int32 batch_timeout_ms = 3;

  // Whether to include metadata with each metric
  bool include_metadata = 4;

  // Compression to use for the stream
  StreamCompression compression = 5;

  // Whether to send heartbeat messages during idle periods
  bool send_heartbeats = 6;

  // Heartbeat interval (seconds)
  int32 heartbeat_interval_seconds = 7;

  // Whether to automatically retry on errors
  bool auto_retry = 8;

  // Quality of service level
  StreamQOS qos = 9;
}

/**
 * StreamStart defines where to start the stream.
 */
message StreamStart {
  // Start from a specific timestamp
  google.protobuf.Timestamp from_timestamp = 1;

  // Start from the beginning of available data
  bool from_beginning = 2;

  // Start from the current time (live streaming only)
  bool from_now = 3;

  // Start from a specific offset or position
  string from_offset = 4;
}

/**
 * BufferConfig configures buffering behavior for the stream.
 */
message BufferConfig {
  // Maximum number of metrics to buffer
  int32 max_buffer_size = 1;

  // Buffer overflow strategy
  BufferOverflowStrategy overflow_strategy = 2;

  // Whether to persist buffer to disk during streaming
  bool persist_buffer = 3;

  // Maximum memory usage for buffering (bytes)
  int64 max_memory_bytes = 4;
}
