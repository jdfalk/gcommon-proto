// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/counter_metric.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// CounterMetric represents a monotonically increasing counter.
// Counters only increase in value and are typically used for tracking
// cumulative values like total requests, errors, or bytes processed.
type CounterMetric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this counter
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Counter name/label
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Current counter value (must be monotonically increasing)
	Value *float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	// Timestamp when this value was recorded
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// Counter description/help text
	Description *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// Key-value labels for this counter
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Sample count (for internal tracking)
	SampleCount   *uint64 `protobuf:"varint,7,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterMetric) Reset() {
	*x = CounterMetric{}
	mi := &file_pkg_metrics_proto_counter_metric_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterMetric) ProtoMessage() {}

func (x *CounterMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_counter_metric_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterMetric.ProtoReflect.Descriptor instead.
func (*CounterMetric) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_counter_metric_proto_rawDescGZIP(), []int{0}
}

func (x *CounterMetric) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CounterMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CounterMetric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CounterMetric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CounterMetric) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CounterMetric) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CounterMetric) GetSampleCount() uint64 {
	if x != nil && x.SampleCount != nil {
		return *x.SampleCount
	}
	return 0
}

var File_pkg_metrics_proto_counter_metric_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_counter_metric_proto_rawDesc = "" +
	"\n" +
	"&pkg/metrics/proto/counter_metric.proto\x12\x12gcommon.v1.metrics\x1a\x1fgoogle/protobuf/timestamp.proto\"\xca\x02\n" +
	"\rCounterMetric\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x01R\x05value\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12E\n" +
	"\x06labels\x18\x06 \x03(\v2-.gcommon.v1.metrics.CounterMetric.LabelsEntryR\x06labels\x12!\n" +
	"\fsample_count\x18\a \x01(\x04R\vsampleCount\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xc3\x01\n" +
	"\x16com.gcommon.v1.metricsB\x12CounterMetricProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_counter_metric_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_counter_metric_proto_rawDescData []byte
)

func file_pkg_metrics_proto_counter_metric_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_counter_metric_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_counter_metric_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_counter_metric_proto_rawDesc), len(file_pkg_metrics_proto_counter_metric_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_counter_metric_proto_rawDescData
}

var file_pkg_metrics_proto_counter_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_counter_metric_proto_goTypes = []any{
	(*CounterMetric)(nil),         // 0: gcommon.v1.metrics.CounterMetric
	nil,                           // 1: gcommon.v1.metrics.CounterMetric.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_counter_metric_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.metrics.CounterMetric.timestamp:type_name -> google.protobuf.Timestamp
	1, // 1: gcommon.v1.metrics.CounterMetric.labels:type_name -> gcommon.v1.metrics.CounterMetric.LabelsEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_counter_metric_proto_init() }
func file_pkg_metrics_proto_counter_metric_proto_init() {
	if File_pkg_metrics_proto_counter_metric_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_counter_metric_proto_rawDesc), len(file_pkg_metrics_proto_counter_metric_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_counter_metric_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_counter_metric_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_counter_metric_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_counter_metric_proto = out.File
	file_pkg_metrics_proto_counter_metric_proto_goTypes = nil
	file_pkg_metrics_proto_counter_metric_proto_depIdxs = nil
}
