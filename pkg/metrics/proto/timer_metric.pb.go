// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/timer_metric.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TimerMetric represents timing measurements and latency statistics
//
// This message captures timing information for operations, including
// duration, start/end times, and statistical aggregations.
type TimerMetric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for this timer measurement
	TimerId *string `protobuf:"bytes,1,opt,name=timer_id,json=timerId" json:"timer_id,omitempty"`
	// Name or label for this timer (e.g., "api_request_duration")
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Start time of the measured operation
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End time of the measured operation
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// Duration of the measured operation
	Duration *durationpb.Duration `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	// Tags/labels for categorization and filtering
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Statistical aggregations for this timer
	Statistics *TimerStatistics `protobuf:"bytes,7,opt,name=statistics" json:"statistics,omitempty"`
	// Whether this timer is currently running
	IsRunning *bool `protobuf:"varint,8,opt,name=is_running,json=isRunning" json:"is_running,omitempty"`
	// Number of times this timer has been recorded
	Count *int64 `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	// Total accumulated time across all recordings
	TotalDuration *durationpb.Duration `protobuf:"bytes,10,opt,name=total_duration,json=totalDuration" json:"total_duration,omitempty"`
	// Percentile measurements
	Percentiles []*PercentileMeasurement `protobuf:"bytes,11,rep,name=percentiles" json:"percentiles,omitempty"`
	// Timestamp when this metric was recorded
	RecordedAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=recorded_at,json=recordedAt" json:"recorded_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimerMetric) Reset() {
	*x = TimerMetric{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerMetric) ProtoMessage() {}

func (x *TimerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerMetric.ProtoReflect.Descriptor instead.
func (*TimerMetric) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_timer_metric_proto_rawDescGZIP(), []int{0}
}

func (x *TimerMetric) GetTimerId() string {
	if x != nil && x.TimerId != nil {
		return *x.TimerId
	}
	return ""
}

func (x *TimerMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TimerMetric) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimerMetric) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimerMetric) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TimerMetric) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TimerMetric) GetStatistics() *TimerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *TimerMetric) GetIsRunning() bool {
	if x != nil && x.IsRunning != nil {
		return *x.IsRunning
	}
	return false
}

func (x *TimerMetric) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *TimerMetric) GetTotalDuration() *durationpb.Duration {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

func (x *TimerMetric) GetPercentiles() []*PercentileMeasurement {
	if x != nil {
		return x.Percentiles
	}
	return nil
}

func (x *TimerMetric) GetRecordedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordedAt
	}
	return nil
}

// Statistical aggregations for timer measurements
type TimerStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum duration observed
	MinDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=min_duration,json=minDuration" json:"min_duration,omitempty"`
	// Maximum duration observed
	MaxDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=max_duration,json=maxDuration" json:"max_duration,omitempty"`
	// Mean (average) duration
	MeanDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=mean_duration,json=meanDuration" json:"mean_duration,omitempty"`
	// Standard deviation of durations
	StandardDeviationMs *float64 `protobuf:"fixed64,4,opt,name=standard_deviation_ms,json=standardDeviationMs" json:"standard_deviation_ms,omitempty"`
	// Variance of durations
	VarianceMs *float64 `protobuf:"fixed64,5,opt,name=variance_ms,json=varianceMs" json:"variance_ms,omitempty"`
	// Number of samples used for these statistics
	SampleCount *int64 `protobuf:"varint,6,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	// Rate of measurements per second
	RatePerSecond *float64 `protobuf:"fixed64,7,opt,name=rate_per_second,json=ratePerSecond" json:"rate_per_second,omitempty"`
	// Most recent measurement duration
	LastDuration  *durationpb.Duration `protobuf:"bytes,8,opt,name=last_duration,json=lastDuration" json:"last_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimerStatistics) Reset() {
	*x = TimerStatistics{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerStatistics) ProtoMessage() {}

func (x *TimerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerStatistics.ProtoReflect.Descriptor instead.
func (*TimerStatistics) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_timer_metric_proto_rawDescGZIP(), []int{1}
}

func (x *TimerStatistics) GetMinDuration() *durationpb.Duration {
	if x != nil {
		return x.MinDuration
	}
	return nil
}

func (x *TimerStatistics) GetMaxDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

func (x *TimerStatistics) GetMeanDuration() *durationpb.Duration {
	if x != nil {
		return x.MeanDuration
	}
	return nil
}

func (x *TimerStatistics) GetStandardDeviationMs() float64 {
	if x != nil && x.StandardDeviationMs != nil {
		return *x.StandardDeviationMs
	}
	return 0
}

func (x *TimerStatistics) GetVarianceMs() float64 {
	if x != nil && x.VarianceMs != nil {
		return *x.VarianceMs
	}
	return 0
}

func (x *TimerStatistics) GetSampleCount() int64 {
	if x != nil && x.SampleCount != nil {
		return *x.SampleCount
	}
	return 0
}

func (x *TimerStatistics) GetRatePerSecond() float64 {
	if x != nil && x.RatePerSecond != nil {
		return *x.RatePerSecond
	}
	return 0
}

func (x *TimerStatistics) GetLastDuration() *durationpb.Duration {
	if x != nil {
		return x.LastDuration
	}
	return nil
}

// Percentile measurement for timer statistics
type PercentileMeasurement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Percentile value (e.g., 50.0 for median, 95.0 for 95th percentile)
	Percentile *float64 `protobuf:"fixed64,1,opt,name=percentile" json:"percentile,omitempty"`
	// Duration value at this percentile
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
	// Number of samples at or below this percentile
	SampleCount   *int64 `protobuf:"varint,3,opt,name=sample_count,json=sampleCount" json:"sample_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PercentileMeasurement) Reset() {
	*x = PercentileMeasurement{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PercentileMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentileMeasurement) ProtoMessage() {}

func (x *PercentileMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentileMeasurement.ProtoReflect.Descriptor instead.
func (*PercentileMeasurement) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_timer_metric_proto_rawDescGZIP(), []int{2}
}

func (x *PercentileMeasurement) GetPercentile() float64 {
	if x != nil && x.Percentile != nil {
		return *x.Percentile
	}
	return 0
}

func (x *PercentileMeasurement) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *PercentileMeasurement) GetSampleCount() int64 {
	if x != nil && x.SampleCount != nil {
		return *x.SampleCount
	}
	return 0
}

var File_pkg_metrics_proto_timer_metric_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_timer_metric_proto_rawDesc = "" +
	"\n" +
	"$pkg/metrics/proto/timer_metric.proto\x12\x12gcommon.v1.metrics\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa3\x05\n" +
	"\vTimerMetric\x12\x19\n" +
	"\btimer_id\x18\x01 \x01(\tR\atimerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x125\n" +
	"\bduration\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12=\n" +
	"\x04tags\x18\x06 \x03(\v2).gcommon.v1.metrics.TimerMetric.TagsEntryR\x04tags\x12C\n" +
	"\n" +
	"statistics\x18\a \x01(\v2#.gcommon.v1.metrics.TimerStatisticsR\n" +
	"statistics\x12\x1d\n" +
	"\n" +
	"is_running\x18\b \x01(\bR\tisRunning\x12\x14\n" +
	"\x05count\x18\t \x01(\x03R\x05count\x12@\n" +
	"\x0etotal_duration\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\rtotalDuration\x12K\n" +
	"\vpercentiles\x18\v \x03(\v2).gcommon.v1.metrics.PercentileMeasurementR\vpercentiles\x12;\n" +
	"\vrecorded_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordedAt\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x03\n" +
	"\x0fTimerStatistics\x12<\n" +
	"\fmin_duration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\vminDuration\x12<\n" +
	"\fmax_duration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vmaxDuration\x12>\n" +
	"\rmean_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\fmeanDuration\x122\n" +
	"\x15standard_deviation_ms\x18\x04 \x01(\x01R\x13standardDeviationMs\x12\x1f\n" +
	"\vvariance_ms\x18\x05 \x01(\x01R\n" +
	"varianceMs\x12!\n" +
	"\fsample_count\x18\x06 \x01(\x03R\vsampleCount\x12&\n" +
	"\x0frate_per_second\x18\a \x01(\x01R\rratePerSecond\x12>\n" +
	"\rlast_duration\x18\b \x01(\v2\x19.google.protobuf.DurationR\flastDuration\"\x91\x01\n" +
	"\x15PercentileMeasurement\x12\x1e\n" +
	"\n" +
	"percentile\x18\x01 \x01(\x01R\n" +
	"percentile\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12!\n" +
	"\fsample_count\x18\x03 \x01(\x03R\vsampleCountB\xc1\x01\n" +
	"\x16com.gcommon.v1.metricsB\x10TimerMetricProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_timer_metric_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_timer_metric_proto_rawDescData []byte
)

func file_pkg_metrics_proto_timer_metric_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_timer_metric_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_timer_metric_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_timer_metric_proto_rawDesc), len(file_pkg_metrics_proto_timer_metric_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_timer_metric_proto_rawDescData
}

var file_pkg_metrics_proto_timer_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_metrics_proto_timer_metric_proto_goTypes = []any{
	(*TimerMetric)(nil),           // 0: gcommon.v1.metrics.TimerMetric
	(*TimerStatistics)(nil),       // 1: gcommon.v1.metrics.TimerStatistics
	(*PercentileMeasurement)(nil), // 2: gcommon.v1.metrics.PercentileMeasurement
	nil,                           // 3: gcommon.v1.metrics.TimerMetric.TagsEntry
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
}
var file_pkg_metrics_proto_timer_metric_proto_depIdxs = []int32{
	4,  // 0: gcommon.v1.metrics.TimerMetric.start_time:type_name -> google.protobuf.Timestamp
	4,  // 1: gcommon.v1.metrics.TimerMetric.end_time:type_name -> google.protobuf.Timestamp
	5,  // 2: gcommon.v1.metrics.TimerMetric.duration:type_name -> google.protobuf.Duration
	3,  // 3: gcommon.v1.metrics.TimerMetric.tags:type_name -> gcommon.v1.metrics.TimerMetric.TagsEntry
	1,  // 4: gcommon.v1.metrics.TimerMetric.statistics:type_name -> gcommon.v1.metrics.TimerStatistics
	5,  // 5: gcommon.v1.metrics.TimerMetric.total_duration:type_name -> google.protobuf.Duration
	2,  // 6: gcommon.v1.metrics.TimerMetric.percentiles:type_name -> gcommon.v1.metrics.PercentileMeasurement
	4,  // 7: gcommon.v1.metrics.TimerMetric.recorded_at:type_name -> google.protobuf.Timestamp
	5,  // 8: gcommon.v1.metrics.TimerStatistics.min_duration:type_name -> google.protobuf.Duration
	5,  // 9: gcommon.v1.metrics.TimerStatistics.max_duration:type_name -> google.protobuf.Duration
	5,  // 10: gcommon.v1.metrics.TimerStatistics.mean_duration:type_name -> google.protobuf.Duration
	5,  // 11: gcommon.v1.metrics.TimerStatistics.last_duration:type_name -> google.protobuf.Duration
	5,  // 12: gcommon.v1.metrics.PercentileMeasurement.duration:type_name -> google.protobuf.Duration
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_timer_metric_proto_init() }
func file_pkg_metrics_proto_timer_metric_proto_init() {
	if File_pkg_metrics_proto_timer_metric_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_timer_metric_proto_rawDesc), len(file_pkg_metrics_proto_timer_metric_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_timer_metric_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_timer_metric_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_timer_metric_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_timer_metric_proto = out.File
	file_pkg_metrics_proto_timer_metric_proto_goTypes = nil
	file_pkg_metrics_proto_timer_metric_proto_depIdxs = nil
}
