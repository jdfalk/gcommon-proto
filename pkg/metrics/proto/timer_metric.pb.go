// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/timer_metric.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TimerMetric represents timing measurements and latency statistics
//
// This message captures timing information for operations, including
// duration, start/end times, and statistical aggregations.
type TimerMetric struct {
	state                    protoimpl.MessageState    `protogen:"opaque.v1"`
	xxx_hidden_TimerId       *string                   `protobuf:"bytes,1,opt,name=timer_id,json=timerId"`
	xxx_hidden_Name          *string                   `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_StartTime     *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=start_time,json=startTime"`
	xxx_hidden_EndTime       *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=end_time,json=endTime"`
	xxx_hidden_Duration      *durationpb.Duration      `protobuf:"bytes,5,opt,name=duration"`
	xxx_hidden_Tags          map[string]string         `protobuf:"bytes,6,rep,name=tags" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Statistics    *TimerStatistics          `protobuf:"bytes,7,opt,name=statistics"`
	xxx_hidden_IsRunning     bool                      `protobuf:"varint,8,opt,name=is_running,json=isRunning"`
	xxx_hidden_Count         int64                     `protobuf:"varint,9,opt,name=count"`
	xxx_hidden_TotalDuration *durationpb.Duration      `protobuf:"bytes,10,opt,name=total_duration,json=totalDuration"`
	xxx_hidden_Percentiles   *[]*PercentileMeasurement `protobuf:"bytes,11,rep,name=percentiles"`
	xxx_hidden_RecordedAt    *timestamppb.Timestamp    `protobuf:"bytes,12,opt,name=recorded_at,json=recordedAt"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TimerMetric) Reset() {
	*x = TimerMetric{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerMetric) ProtoMessage() {}

func (x *TimerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimerMetric) GetTimerId() string {
	if x != nil {
		if x.xxx_hidden_TimerId != nil {
			return *x.xxx_hidden_TimerId
		}
		return ""
	}
	return ""
}

func (x *TimerMetric) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *TimerMetric) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_StartTime
	}
	return nil
}

func (x *TimerMetric) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_EndTime
	}
	return nil
}

func (x *TimerMetric) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Duration
	}
	return nil
}

func (x *TimerMetric) GetTags() map[string]string {
	if x != nil {
		return x.xxx_hidden_Tags
	}
	return nil
}

func (x *TimerMetric) GetStatistics() *TimerStatistics {
	if x != nil {
		return x.xxx_hidden_Statistics
	}
	return nil
}

func (x *TimerMetric) GetIsRunning() bool {
	if x != nil {
		return x.xxx_hidden_IsRunning
	}
	return false
}

func (x *TimerMetric) GetCount() int64 {
	if x != nil {
		return x.xxx_hidden_Count
	}
	return 0
}

func (x *TimerMetric) GetTotalDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_TotalDuration
	}
	return nil
}

func (x *TimerMetric) GetPercentiles() []*PercentileMeasurement {
	if x != nil {
		if x.xxx_hidden_Percentiles != nil {
			return *x.xxx_hidden_Percentiles
		}
	}
	return nil
}

func (x *TimerMetric) GetRecordedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_RecordedAt
	}
	return nil
}

func (x *TimerMetric) SetTimerId(v string) {
	x.xxx_hidden_TimerId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *TimerMetric) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *TimerMetric) SetStartTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_StartTime = v
}

func (x *TimerMetric) SetEndTime(v *timestamppb.Timestamp) {
	x.xxx_hidden_EndTime = v
}

func (x *TimerMetric) SetDuration(v *durationpb.Duration) {
	x.xxx_hidden_Duration = v
}

func (x *TimerMetric) SetTags(v map[string]string) {
	x.xxx_hidden_Tags = v
}

func (x *TimerMetric) SetStatistics(v *TimerStatistics) {
	x.xxx_hidden_Statistics = v
}

func (x *TimerMetric) SetIsRunning(v bool) {
	x.xxx_hidden_IsRunning = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 12)
}

func (x *TimerMetric) SetCount(v int64) {
	x.xxx_hidden_Count = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
}

func (x *TimerMetric) SetTotalDuration(v *durationpb.Duration) {
	x.xxx_hidden_TotalDuration = v
}

func (x *TimerMetric) SetPercentiles(v []*PercentileMeasurement) {
	x.xxx_hidden_Percentiles = &v
}

func (x *TimerMetric) SetRecordedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_RecordedAt = v
}

func (x *TimerMetric) HasTimerId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TimerMetric) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TimerMetric) HasStartTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_StartTime != nil
}

func (x *TimerMetric) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_EndTime != nil
}

func (x *TimerMetric) HasDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Duration != nil
}

func (x *TimerMetric) HasStatistics() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Statistics != nil
}

func (x *TimerMetric) HasIsRunning() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *TimerMetric) HasCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TimerMetric) HasTotalDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_TotalDuration != nil
}

func (x *TimerMetric) HasRecordedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RecordedAt != nil
}

func (x *TimerMetric) ClearTimerId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_TimerId = nil
}

func (x *TimerMetric) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *TimerMetric) ClearStartTime() {
	x.xxx_hidden_StartTime = nil
}

func (x *TimerMetric) ClearEndTime() {
	x.xxx_hidden_EndTime = nil
}

func (x *TimerMetric) ClearDuration() {
	x.xxx_hidden_Duration = nil
}

func (x *TimerMetric) ClearStatistics() {
	x.xxx_hidden_Statistics = nil
}

func (x *TimerMetric) ClearIsRunning() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_IsRunning = false
}

func (x *TimerMetric) ClearCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Count = 0
}

func (x *TimerMetric) ClearTotalDuration() {
	x.xxx_hidden_TotalDuration = nil
}

func (x *TimerMetric) ClearRecordedAt() {
	x.xxx_hidden_RecordedAt = nil
}

type TimerMetric_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for this timer measurement
	TimerId *string
	// Name or label for this timer (e.g., "api_request_duration")
	Name *string
	// Start time of the measured operation
	StartTime *timestamppb.Timestamp
	// End time of the measured operation
	EndTime *timestamppb.Timestamp
	// Duration of the measured operation
	Duration *durationpb.Duration
	// Tags/labels for categorization and filtering
	Tags map[string]string
	// Statistical aggregations for this timer
	Statistics *TimerStatistics
	// Whether this timer is currently running
	IsRunning *bool
	// Number of times this timer has been recorded
	Count *int64
	// Total accumulated time across all recordings
	TotalDuration *durationpb.Duration
	// Percentile measurements
	Percentiles []*PercentileMeasurement
	// Timestamp when this metric was recorded
	RecordedAt *timestamppb.Timestamp
}

func (b0 TimerMetric_builder) Build() *TimerMetric {
	m0 := &TimerMetric{}
	b, x := &b0, m0
	_, _ = b, x
	if b.TimerId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_TimerId = b.TimerId
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_Name = b.Name
	}
	x.xxx_hidden_StartTime = b.StartTime
	x.xxx_hidden_EndTime = b.EndTime
	x.xxx_hidden_Duration = b.Duration
	x.xxx_hidden_Tags = b.Tags
	x.xxx_hidden_Statistics = b.Statistics
	if b.IsRunning != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 12)
		x.xxx_hidden_IsRunning = *b.IsRunning
	}
	if b.Count != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_Count = *b.Count
	}
	x.xxx_hidden_TotalDuration = b.TotalDuration
	x.xxx_hidden_Percentiles = &b.Percentiles
	x.xxx_hidden_RecordedAt = b.RecordedAt
	return m0
}

// Statistical aggregations for timer measurements
type TimerStatistics struct {
	state                          protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MinDuration         *durationpb.Duration   `protobuf:"bytes,1,opt,name=min_duration,json=minDuration"`
	xxx_hidden_MaxDuration         *durationpb.Duration   `protobuf:"bytes,2,opt,name=max_duration,json=maxDuration"`
	xxx_hidden_MeanDuration        *durationpb.Duration   `protobuf:"bytes,3,opt,name=mean_duration,json=meanDuration"`
	xxx_hidden_StandardDeviationMs float64                `protobuf:"fixed64,4,opt,name=standard_deviation_ms,json=standardDeviationMs"`
	xxx_hidden_VarianceMs          float64                `protobuf:"fixed64,5,opt,name=variance_ms,json=varianceMs"`
	xxx_hidden_SampleCount         int64                  `protobuf:"varint,6,opt,name=sample_count,json=sampleCount"`
	xxx_hidden_RatePerSecond       float64                `protobuf:"fixed64,7,opt,name=rate_per_second,json=ratePerSecond"`
	xxx_hidden_LastDuration        *durationpb.Duration   `protobuf:"bytes,8,opt,name=last_duration,json=lastDuration"`
	XXX_raceDetectHookData         protoimpl.RaceDetectHookData
	XXX_presence                   [1]uint32
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *TimerStatistics) Reset() {
	*x = TimerStatistics{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerStatistics) ProtoMessage() {}

func (x *TimerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimerStatistics) GetMinDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_MinDuration
	}
	return nil
}

func (x *TimerStatistics) GetMaxDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_MaxDuration
	}
	return nil
}

func (x *TimerStatistics) GetMeanDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_MeanDuration
	}
	return nil
}

func (x *TimerStatistics) GetStandardDeviationMs() float64 {
	if x != nil {
		return x.xxx_hidden_StandardDeviationMs
	}
	return 0
}

func (x *TimerStatistics) GetVarianceMs() float64 {
	if x != nil {
		return x.xxx_hidden_VarianceMs
	}
	return 0
}

func (x *TimerStatistics) GetSampleCount() int64 {
	if x != nil {
		return x.xxx_hidden_SampleCount
	}
	return 0
}

func (x *TimerStatistics) GetRatePerSecond() float64 {
	if x != nil {
		return x.xxx_hidden_RatePerSecond
	}
	return 0
}

func (x *TimerStatistics) GetLastDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_LastDuration
	}
	return nil
}

func (x *TimerStatistics) SetMinDuration(v *durationpb.Duration) {
	x.xxx_hidden_MinDuration = v
}

func (x *TimerStatistics) SetMaxDuration(v *durationpb.Duration) {
	x.xxx_hidden_MaxDuration = v
}

func (x *TimerStatistics) SetMeanDuration(v *durationpb.Duration) {
	x.xxx_hidden_MeanDuration = v
}

func (x *TimerStatistics) SetStandardDeviationMs(v float64) {
	x.xxx_hidden_StandardDeviationMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *TimerStatistics) SetVarianceMs(v float64) {
	x.xxx_hidden_VarianceMs = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *TimerStatistics) SetSampleCount(v int64) {
	x.xxx_hidden_SampleCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *TimerStatistics) SetRatePerSecond(v float64) {
	x.xxx_hidden_RatePerSecond = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *TimerStatistics) SetLastDuration(v *durationpb.Duration) {
	x.xxx_hidden_LastDuration = v
}

func (x *TimerStatistics) HasMinDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MinDuration != nil
}

func (x *TimerStatistics) HasMaxDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MaxDuration != nil
}

func (x *TimerStatistics) HasMeanDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_MeanDuration != nil
}

func (x *TimerStatistics) HasStandardDeviationMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TimerStatistics) HasVarianceMs() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TimerStatistics) HasSampleCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *TimerStatistics) HasRatePerSecond() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TimerStatistics) HasLastDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_LastDuration != nil
}

func (x *TimerStatistics) ClearMinDuration() {
	x.xxx_hidden_MinDuration = nil
}

func (x *TimerStatistics) ClearMaxDuration() {
	x.xxx_hidden_MaxDuration = nil
}

func (x *TimerStatistics) ClearMeanDuration() {
	x.xxx_hidden_MeanDuration = nil
}

func (x *TimerStatistics) ClearStandardDeviationMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_StandardDeviationMs = 0
}

func (x *TimerStatistics) ClearVarianceMs() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_VarianceMs = 0
}

func (x *TimerStatistics) ClearSampleCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_SampleCount = 0
}

func (x *TimerStatistics) ClearRatePerSecond() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_RatePerSecond = 0
}

func (x *TimerStatistics) ClearLastDuration() {
	x.xxx_hidden_LastDuration = nil
}

type TimerStatistics_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Minimum duration observed
	MinDuration *durationpb.Duration
	// Maximum duration observed
	MaxDuration *durationpb.Duration
	// Mean (average) duration
	MeanDuration *durationpb.Duration
	// Standard deviation of durations
	StandardDeviationMs *float64
	// Variance of durations
	VarianceMs *float64
	// Number of samples used for these statistics
	SampleCount *int64
	// Rate of measurements per second
	RatePerSecond *float64
	// Most recent measurement duration
	LastDuration *durationpb.Duration
}

func (b0 TimerStatistics_builder) Build() *TimerStatistics {
	m0 := &TimerStatistics{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_MinDuration = b.MinDuration
	x.xxx_hidden_MaxDuration = b.MaxDuration
	x.xxx_hidden_MeanDuration = b.MeanDuration
	if b.StandardDeviationMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_StandardDeviationMs = *b.StandardDeviationMs
	}
	if b.VarianceMs != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_VarianceMs = *b.VarianceMs
	}
	if b.SampleCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_SampleCount = *b.SampleCount
	}
	if b.RatePerSecond != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_RatePerSecond = *b.RatePerSecond
	}
	x.xxx_hidden_LastDuration = b.LastDuration
	return m0
}

// Percentile measurement for timer statistics
type PercentileMeasurement struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Percentile  float64                `protobuf:"fixed64,1,opt,name=percentile"`
	xxx_hidden_Duration    *durationpb.Duration   `protobuf:"bytes,2,opt,name=duration"`
	xxx_hidden_SampleCount int64                  `protobuf:"varint,3,opt,name=sample_count,json=sampleCount"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PercentileMeasurement) Reset() {
	*x = PercentileMeasurement{}
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PercentileMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentileMeasurement) ProtoMessage() {}

func (x *PercentileMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_timer_metric_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PercentileMeasurement) GetPercentile() float64 {
	if x != nil {
		return x.xxx_hidden_Percentile
	}
	return 0
}

func (x *PercentileMeasurement) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_Duration
	}
	return nil
}

func (x *PercentileMeasurement) GetSampleCount() int64 {
	if x != nil {
		return x.xxx_hidden_SampleCount
	}
	return 0
}

func (x *PercentileMeasurement) SetPercentile(v float64) {
	x.xxx_hidden_Percentile = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *PercentileMeasurement) SetDuration(v *durationpb.Duration) {
	x.xxx_hidden_Duration = v
}

func (x *PercentileMeasurement) SetSampleCount(v int64) {
	x.xxx_hidden_SampleCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *PercentileMeasurement) HasPercentile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *PercentileMeasurement) HasDuration() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Duration != nil
}

func (x *PercentileMeasurement) HasSampleCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *PercentileMeasurement) ClearPercentile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Percentile = 0
}

func (x *PercentileMeasurement) ClearDuration() {
	x.xxx_hidden_Duration = nil
}

func (x *PercentileMeasurement) ClearSampleCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_SampleCount = 0
}

type PercentileMeasurement_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Percentile value (e.g., 50.0 for median, 95.0 for 95th percentile)
	Percentile *float64
	// Duration value at this percentile
	Duration *durationpb.Duration
	// Number of samples at or below this percentile
	SampleCount *int64
}

func (b0 PercentileMeasurement_builder) Build() *PercentileMeasurement {
	m0 := &PercentileMeasurement{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Percentile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Percentile = *b.Percentile
	}
	x.xxx_hidden_Duration = b.Duration
	if b.SampleCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_SampleCount = *b.SampleCount
	}
	return m0
}

var File_pkg_metrics_proto_timer_metric_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_timer_metric_proto_rawDesc = "" +
	"\n" +
	"$pkg/metrics/proto/timer_metric.proto\x12\x12gcommon.v1.metrics\x1a\x1egoogle/protobuf/duration.proto\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa3\x05\n" +
	"\vTimerMetric\x12\x19\n" +
	"\btimer_id\x18\x01 \x01(\tR\atimerId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x125\n" +
	"\bduration\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12=\n" +
	"\x04tags\x18\x06 \x03(\v2).gcommon.v1.metrics.TimerMetric.TagsEntryR\x04tags\x12C\n" +
	"\n" +
	"statistics\x18\a \x01(\v2#.gcommon.v1.metrics.TimerStatisticsR\n" +
	"statistics\x12\x1d\n" +
	"\n" +
	"is_running\x18\b \x01(\bR\tisRunning\x12\x14\n" +
	"\x05count\x18\t \x01(\x03R\x05count\x12@\n" +
	"\x0etotal_duration\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\rtotalDuration\x12K\n" +
	"\vpercentiles\x18\v \x03(\v2).gcommon.v1.metrics.PercentileMeasurementR\vpercentiles\x12;\n" +
	"\vrecorded_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordedAt\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xad\x03\n" +
	"\x0fTimerStatistics\x12<\n" +
	"\fmin_duration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\vminDuration\x12<\n" +
	"\fmax_duration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\vmaxDuration\x12>\n" +
	"\rmean_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\fmeanDuration\x122\n" +
	"\x15standard_deviation_ms\x18\x04 \x01(\x01R\x13standardDeviationMs\x12\x1f\n" +
	"\vvariance_ms\x18\x05 \x01(\x01R\n" +
	"varianceMs\x12!\n" +
	"\fsample_count\x18\x06 \x01(\x03R\vsampleCount\x12&\n" +
	"\x0frate_per_second\x18\a \x01(\x01R\rratePerSecond\x12>\n" +
	"\rlast_duration\x18\b \x01(\v2\x19.google.protobuf.DurationR\flastDuration\"\x91\x01\n" +
	"\x15PercentileMeasurement\x12\x1e\n" +
	"\n" +
	"percentile\x18\x01 \x01(\x01R\n" +
	"percentile\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12!\n" +
	"\fsample_count\x18\x03 \x01(\x03R\vsampleCountB\xc9\x01\n" +
	"\x16com.gcommon.v1.metricsB\x10TimerMetricProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_pkg_metrics_proto_timer_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_metrics_proto_timer_metric_proto_goTypes = []any{
	(*TimerMetric)(nil),           // 0: gcommon.v1.metrics.TimerMetric
	(*TimerStatistics)(nil),       // 1: gcommon.v1.metrics.TimerStatistics
	(*PercentileMeasurement)(nil), // 2: gcommon.v1.metrics.PercentileMeasurement
	nil,                           // 3: gcommon.v1.metrics.TimerMetric.TagsEntry
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
}
var file_pkg_metrics_proto_timer_metric_proto_depIdxs = []int32{
	4,  // 0: gcommon.v1.metrics.TimerMetric.start_time:type_name -> google.protobuf.Timestamp
	4,  // 1: gcommon.v1.metrics.TimerMetric.end_time:type_name -> google.protobuf.Timestamp
	5,  // 2: gcommon.v1.metrics.TimerMetric.duration:type_name -> google.protobuf.Duration
	3,  // 3: gcommon.v1.metrics.TimerMetric.tags:type_name -> gcommon.v1.metrics.TimerMetric.TagsEntry
	1,  // 4: gcommon.v1.metrics.TimerMetric.statistics:type_name -> gcommon.v1.metrics.TimerStatistics
	5,  // 5: gcommon.v1.metrics.TimerMetric.total_duration:type_name -> google.protobuf.Duration
	2,  // 6: gcommon.v1.metrics.TimerMetric.percentiles:type_name -> gcommon.v1.metrics.PercentileMeasurement
	4,  // 7: gcommon.v1.metrics.TimerMetric.recorded_at:type_name -> google.protobuf.Timestamp
	5,  // 8: gcommon.v1.metrics.TimerStatistics.min_duration:type_name -> google.protobuf.Duration
	5,  // 9: gcommon.v1.metrics.TimerStatistics.max_duration:type_name -> google.protobuf.Duration
	5,  // 10: gcommon.v1.metrics.TimerStatistics.mean_duration:type_name -> google.protobuf.Duration
	5,  // 11: gcommon.v1.metrics.TimerStatistics.last_duration:type_name -> google.protobuf.Duration
	5,  // 12: gcommon.v1.metrics.PercentileMeasurement.duration:type_name -> google.protobuf.Duration
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_timer_metric_proto_init() }
func file_pkg_metrics_proto_timer_metric_proto_init() {
	if File_pkg_metrics_proto_timer_metric_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_timer_metric_proto_rawDesc), len(file_pkg_metrics_proto_timer_metric_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_timer_metric_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_timer_metric_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_timer_metric_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_timer_metric_proto = out.File
	file_pkg_metrics_proto_timer_metric_proto_goTypes = nil
	file_pkg_metrics_proto_timer_metric_proto_depIdxs = nil
}
