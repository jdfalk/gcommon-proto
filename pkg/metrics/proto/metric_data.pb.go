// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: pkg/metrics/proto/metric_data.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// MetricData represents a complete metric with metadata and values.
// This is the primary data structure for transmitting metric information.
type MetricData struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_MetricId      *string                `protobuf:"bytes,1,opt,name=metric_id,json=metricId"`
	xxx_hidden_Name          *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Type          MetricType             `protobuf:"varint,3,opt,name=type,enum=gcommon.v1.metrics.MetricType"`
	xxx_hidden_Description   *string                `protobuf:"bytes,4,opt,name=description"`
	xxx_hidden_Unit          *string                `protobuf:"bytes,5,opt,name=unit"`
	xxx_hidden_Labels        map[string]string      `protobuf:"bytes,6,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Values        *[]*MetricValue        `protobuf:"bytes,7,rep,name=values"`
	xxx_hidden_CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt"`
	xxx_hidden_Source        *string                `protobuf:"bytes,9,opt,name=source"`
	xxx_hidden_Namespace     *string                `protobuf:"bytes,10,opt,name=namespace"`
	xxx_hidden_SchemaVersion *string                `protobuf:"bytes,11,opt,name=schema_version,json=schemaVersion"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MetricData) Reset() {
	*x = MetricData{}
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricData) ProtoMessage() {}

func (x *MetricData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricData) GetMetricId() string {
	if x != nil {
		if x.xxx_hidden_MetricId != nil {
			return *x.xxx_hidden_MetricId
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetType() MetricType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Type
		}
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricData) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetUnit() string {
	if x != nil {
		if x.xxx_hidden_Unit != nil {
			return *x.xxx_hidden_Unit
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *MetricData) GetValues() []*MetricValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *MetricData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *MetricData) GetSource() string {
	if x != nil {
		if x.xxx_hidden_Source != nil {
			return *x.xxx_hidden_Source
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetNamespace() string {
	if x != nil {
		if x.xxx_hidden_Namespace != nil {
			return *x.xxx_hidden_Namespace
		}
		return ""
	}
	return ""
}

func (x *MetricData) GetSchemaVersion() string {
	if x != nil {
		if x.xxx_hidden_SchemaVersion != nil {
			return *x.xxx_hidden_SchemaVersion
		}
		return ""
	}
	return ""
}

func (x *MetricData) SetMetricId(v string) {
	x.xxx_hidden_MetricId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 11)
}

func (x *MetricData) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 11)
}

func (x *MetricData) SetType(v MetricType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 11)
}

func (x *MetricData) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 11)
}

func (x *MetricData) SetUnit(v string) {
	x.xxx_hidden_Unit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 11)
}

func (x *MetricData) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *MetricData) SetValues(v []*MetricValue) {
	x.xxx_hidden_Values = &v
}

func (x *MetricData) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *MetricData) SetSource(v string) {
	x.xxx_hidden_Source = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 11)
}

func (x *MetricData) SetNamespace(v string) {
	x.xxx_hidden_Namespace = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 11)
}

func (x *MetricData) SetSchemaVersion(v string) {
	x.xxx_hidden_SchemaVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 11)
}

func (x *MetricData) HasMetricId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MetricData) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MetricData) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *MetricData) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *MetricData) HasUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *MetricData) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *MetricData) HasSource() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *MetricData) HasNamespace() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *MetricData) HasSchemaVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *MetricData) ClearMetricId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_MetricId = nil
}

func (x *MetricData) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *MetricData) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricData) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Description = nil
}

func (x *MetricData) ClearUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Unit = nil
}

func (x *MetricData) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

func (x *MetricData) ClearSource() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Source = nil
}

func (x *MetricData) ClearNamespace() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_Namespace = nil
}

func (x *MetricData) ClearSchemaVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_SchemaVersion = nil
}

type MetricData_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for this metric
	MetricId *string
	// Metric name (e.g., "http_requests_total", "cpu_usage_percent")
	Name *string
	// Type of metric (counter, gauge, histogram, etc.)
	Type *MetricType
	// Human-readable description of the metric
	Description *string
	// Unit of measurement (e.g., "bytes", "seconds", "requests")
	Unit *string
	// Base labels/tags that apply to all values in this metric
	Labels map[string]string
	// The metric values (can be multiple for time series)
	Values []*MetricValue
	// When this metric data was collected/created
	CreatedAt *timestamppb.Timestamp
	// Source system or component that generated this metric
	Source *string
	// Namespace or service this metric belongs to
	Namespace *string
	// Version of the metric schema/definition
	SchemaVersion *string
}

func (b0 MetricData_builder) Build() *MetricData {
	m0 := &MetricData{}
	b, x := &b0, m0
	_, _ = b, x
	if b.MetricId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 11)
		x.xxx_hidden_MetricId = b.MetricId
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 11)
		x.xxx_hidden_Name = b.Name
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 11)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 11)
		x.xxx_hidden_Description = b.Description
	}
	if b.Unit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 11)
		x.xxx_hidden_Unit = b.Unit
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Values = &b.Values
	x.xxx_hidden_CreatedAt = b.CreatedAt
	if b.Source != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 11)
		x.xxx_hidden_Source = b.Source
	}
	if b.Namespace != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 11)
		x.xxx_hidden_Namespace = b.Namespace
	}
	if b.SchemaVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 11)
		x.xxx_hidden_SchemaVersion = b.SchemaVersion
	}
	return m0
}

// *
// MetricSeries represents a time series of metric values.
// Used for queries that return multiple data points over time.
type MetricSeries struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Type        MetricType             `protobuf:"varint,2,opt,name=type,enum=gcommon.v1.metrics.MetricType"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,3,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Values      *[]*MetricValue        `protobuf:"bytes,4,rep,name=values"`
	xxx_hidden_StepSeconds int64                  `protobuf:"varint,5,opt,name=step_seconds,json=stepSeconds"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MetricSeries) Reset() {
	*x = MetricSeries{}
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSeries) ProtoMessage() {}

func (x *MetricSeries) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricSeries) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *MetricSeries) GetType() MetricType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_Type
		}
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricSeries) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *MetricSeries) GetValues() []*MetricValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *MetricSeries) GetStepSeconds() int64 {
	if x != nil {
		return x.xxx_hidden_StepSeconds
	}
	return 0
}

func (x *MetricSeries) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *MetricSeries) SetType(v MetricType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *MetricSeries) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *MetricSeries) SetValues(v []*MetricValue) {
	x.xxx_hidden_Values = &v
}

func (x *MetricSeries) SetStepSeconds(v int64) {
	x.xxx_hidden_StepSeconds = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *MetricSeries) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MetricSeries) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MetricSeries) HasStepSeconds() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *MetricSeries) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *MetricSeries) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Type = MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricSeries) ClearStepSeconds() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_StepSeconds = 0
}

type MetricSeries_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Metric metadata
	Name   *string
	Type   *MetricType
	Labels map[string]string
	// Time-ordered series of values
	Values []*MetricValue
	// Resolution/step between data points
	StepSeconds *int64
}

func (b0 MetricSeries_builder) Build() *MetricSeries {
	m0 := &MetricSeries{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_Labels = b.Labels
	x.xxx_hidden_Values = &b.Values
	if b.StepSeconds != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_StepSeconds = *b.StepSeconds
	}
	return m0
}

// *
// MetricFamily groups related metrics together.
// Similar to Prometheus metric families.
type MetricFamily struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name        *string                `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Description *string                `protobuf:"bytes,2,opt,name=description"`
	xxx_hidden_Type        MetricType             `protobuf:"varint,3,opt,name=type,enum=gcommon.v1.metrics.MetricType"`
	xxx_hidden_Unit        *string                `protobuf:"bytes,4,opt,name=unit"`
	xxx_hidden_Metrics     *[]*MetricData         `protobuf:"bytes,5,rep,name=metrics"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MetricFamily) Reset() {
	*x = MetricFamily{}
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricFamily) ProtoMessage() {}

func (x *MetricFamily) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_metric_data_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricFamily) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *MetricFamily) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *MetricFamily) GetType() MetricType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_Type
		}
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricFamily) GetUnit() string {
	if x != nil {
		if x.xxx_hidden_Unit != nil {
			return *x.xxx_hidden_Unit
		}
		return ""
	}
	return ""
}

func (x *MetricFamily) GetMetrics() []*MetricData {
	if x != nil {
		if x.xxx_hidden_Metrics != nil {
			return *x.xxx_hidden_Metrics
		}
	}
	return nil
}

func (x *MetricFamily) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *MetricFamily) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *MetricFamily) SetType(v MetricType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *MetricFamily) SetUnit(v string) {
	x.xxx_hidden_Unit = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *MetricFamily) SetMetrics(v []*MetricData) {
	x.xxx_hidden_Metrics = &v
}

func (x *MetricFamily) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *MetricFamily) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *MetricFamily) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *MetricFamily) HasUnit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *MetricFamily) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Name = nil
}

func (x *MetricFamily) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Description = nil
}

func (x *MetricFamily) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Type = MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricFamily) ClearUnit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Unit = nil
}

type MetricFamily_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Family name (e.g., "http_requests")
	Name *string
	// Family description
	Description *string
	// Type of metrics in this family
	Type *MetricType
	// Unit of measurement for all metrics in this family
	Unit *string
	// All metrics in this family
	Metrics []*MetricData
}

func (b0 MetricFamily_builder) Build() *MetricFamily {
	m0 := &MetricFamily{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Description = b.Description
	}
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Type = *b.Type
	}
	if b.Unit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Unit = b.Unit
	}
	x.xxx_hidden_Metrics = &b.Metrics
	return m0
}

var File_pkg_metrics_proto_metric_data_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_metric_data_proto_rawDesc = "" +
	"\n" +
	"#pkg/metrics/proto/metric_data.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a#pkg/metrics/proto/metric_type.proto\x1a$pkg/metrics/proto/metric_value.proto\"\xf7\x03\n" +
	"\n" +
	"MetricData\x12\x1b\n" +
	"\tmetric_id\x18\x01 \x01(\tR\bmetricId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x122\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1e.gcommon.v1.metrics.MetricTypeR\x04type\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x12B\n" +
	"\x06labels\x18\x06 \x03(\v2*.gcommon.v1.metrics.MetricData.LabelsEntryR\x06labels\x127\n" +
	"\x06values\x18\a \x03(\v2\x1f.gcommon.v1.metrics.MetricValueR\x06values\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x16\n" +
	"\x06source\x18\t \x01(\tR\x06source\x12\x1c\n" +
	"\tnamespace\x18\n" +
	" \x01(\tR\tnamespace\x12%\n" +
	"\x0eschema_version\x18\v \x01(\tR\rschemaVersion\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb3\x02\n" +
	"\fMetricSeries\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1e.gcommon.v1.metrics.MetricTypeR\x04type\x12D\n" +
	"\x06labels\x18\x03 \x03(\v2,.gcommon.v1.metrics.MetricSeries.LabelsEntryR\x06labels\x127\n" +
	"\x06values\x18\x04 \x03(\v2\x1f.gcommon.v1.metrics.MetricValueR\x06values\x12!\n" +
	"\fstep_seconds\x18\x05 \x01(\x03R\vstepSeconds\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc6\x01\n" +
	"\fMetricFamily\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x122\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1e.gcommon.v1.metrics.MetricTypeR\x04type\x12\x12\n" +
	"\x04unit\x18\x04 \x01(\tR\x04unit\x128\n" +
	"\ametrics\x18\x05 \x03(\v2\x1e.gcommon.v1.metrics.MetricDataR\ametricsB\xc8\x01\n" +
	"\x16com.gcommon.v1.metricsB\x0fMetricDataProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_pkg_metrics_proto_metric_data_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pkg_metrics_proto_metric_data_proto_goTypes = []any{
	(*MetricData)(nil),            // 0: gcommon.v1.metrics.MetricData
	(*MetricSeries)(nil),          // 1: gcommon.v1.metrics.MetricSeries
	(*MetricFamily)(nil),          // 2: gcommon.v1.metrics.MetricFamily
	nil,                           // 3: gcommon.v1.metrics.MetricData.LabelsEntry
	nil,                           // 4: gcommon.v1.metrics.MetricSeries.LabelsEntry
	(MetricType)(0),               // 5: gcommon.v1.metrics.MetricType
	(*MetricValue)(nil),           // 6: gcommon.v1.metrics.MetricValue
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_metric_data_proto_depIdxs = []int32{
	5, // 0: gcommon.v1.metrics.MetricData.type:type_name -> gcommon.v1.metrics.MetricType
	3, // 1: gcommon.v1.metrics.MetricData.labels:type_name -> gcommon.v1.metrics.MetricData.LabelsEntry
	6, // 2: gcommon.v1.metrics.MetricData.values:type_name -> gcommon.v1.metrics.MetricValue
	7, // 3: gcommon.v1.metrics.MetricData.created_at:type_name -> google.protobuf.Timestamp
	5, // 4: gcommon.v1.metrics.MetricSeries.type:type_name -> gcommon.v1.metrics.MetricType
	4, // 5: gcommon.v1.metrics.MetricSeries.labels:type_name -> gcommon.v1.metrics.MetricSeries.LabelsEntry
	6, // 6: gcommon.v1.metrics.MetricSeries.values:type_name -> gcommon.v1.metrics.MetricValue
	5, // 7: gcommon.v1.metrics.MetricFamily.type:type_name -> gcommon.v1.metrics.MetricType
	0, // 8: gcommon.v1.metrics.MetricFamily.metrics:type_name -> gcommon.v1.metrics.MetricData
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_metric_data_proto_init() }
func file_pkg_metrics_proto_metric_data_proto_init() {
	if File_pkg_metrics_proto_metric_data_proto != nil {
		return
	}
	file_pkg_metrics_proto_metric_type_proto_init()
	file_pkg_metrics_proto_metric_value_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_metric_data_proto_rawDesc), len(file_pkg_metrics_proto_metric_data_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_metric_data_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_metric_data_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_metric_data_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_metric_data_proto = out.File
	file_pkg_metrics_proto_metric_data_proto_goTypes = nil
	file_pkg_metrics_proto_metric_data_proto_depIdxs = nil
}
