// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/stream_metrics_request.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// StreamMetricsRequest represents a request to stream metrics data in real-time.
// This enables continuous monitoring and real-time metric consumption.
type StreamMetricsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Filter to determine which metrics to stream
	Filter *MetricFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// Streaming configuration options
	Options *StreamOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	// Optional provider ID to stream from
	ProviderId *string `protobuf:"bytes,4,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Starting point for the stream
	Start *StreamStart `protobuf:"bytes,5,opt,name=start" json:"start,omitempty"`
	// Buffer configuration for the stream
	BufferConfig  *BufferConfig `protobuf:"bytes,6,opt,name=buffer_config,json=bufferConfig" json:"buffer_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetricsRequest) Reset() {
	*x = StreamMetricsRequest{}
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsRequest) ProtoMessage() {}

func (x *StreamMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsRequest.ProtoReflect.Descriptor instead.
func (*StreamMetricsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_stream_metrics_request_proto_rawDescGZIP(), []int{0}
}

func (x *StreamMetricsRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamMetricsRequest) GetFilter() *MetricFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StreamMetricsRequest) GetOptions() *StreamOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StreamMetricsRequest) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *StreamMetricsRequest) GetStart() *StreamStart {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamMetricsRequest) GetBufferConfig() *BufferConfig {
	if x != nil {
		return x.BufferConfig
	}
	return nil
}

// *
// StreamOptions configures how metrics streaming should behave.
type StreamOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to include historical data or only new metrics
	IncludeHistorical *bool `protobuf:"varint,1,opt,name=include_historical,json=includeHistorical" json:"include_historical,omitempty"`
	// Maximum number of metrics to send per message
	BatchSize *int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// Maximum time to wait before sending a batch (milliseconds)
	BatchTimeoutMs *int32 `protobuf:"varint,3,opt,name=batch_timeout_ms,json=batchTimeoutMs" json:"batch_timeout_ms,omitempty"`
	// Whether to include metadata with each metric
	IncludeMetadata *bool `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata" json:"include_metadata,omitempty"`
	// Compression to use for the stream
	Compression *StreamCompression `protobuf:"varint,5,opt,name=compression,enum=gcommon.v1.metrics.StreamCompression" json:"compression,omitempty"`
	// Whether to send heartbeat messages during idle periods
	SendHeartbeats *bool `protobuf:"varint,6,opt,name=send_heartbeats,json=sendHeartbeats" json:"send_heartbeats,omitempty"`
	// Heartbeat interval (seconds)
	HeartbeatIntervalSeconds *int32 `protobuf:"varint,7,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	// Whether to automatically retry on errors
	AutoRetry *bool `protobuf:"varint,8,opt,name=auto_retry,json=autoRetry" json:"auto_retry,omitempty"`
	// Quality of service level
	Qos           *StreamQOS `protobuf:"varint,9,opt,name=qos,enum=gcommon.v1.metrics.StreamQOS" json:"qos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOptions.ProtoReflect.Descriptor instead.
func (*StreamOptions) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_stream_metrics_request_proto_rawDescGZIP(), []int{1}
}

func (x *StreamOptions) GetIncludeHistorical() bool {
	if x != nil && x.IncludeHistorical != nil {
		return *x.IncludeHistorical
	}
	return false
}

func (x *StreamOptions) GetBatchSize() int32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *StreamOptions) GetBatchTimeoutMs() int32 {
	if x != nil && x.BatchTimeoutMs != nil {
		return *x.BatchTimeoutMs
	}
	return 0
}

func (x *StreamOptions) GetIncludeMetadata() bool {
	if x != nil && x.IncludeMetadata != nil {
		return *x.IncludeMetadata
	}
	return false
}

func (x *StreamOptions) GetCompression() StreamCompression {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return StreamCompression_STREAM_COMPRESSION_UNSPECIFIED
}

func (x *StreamOptions) GetSendHeartbeats() bool {
	if x != nil && x.SendHeartbeats != nil {
		return *x.SendHeartbeats
	}
	return false
}

func (x *StreamOptions) GetHeartbeatIntervalSeconds() int32 {
	if x != nil && x.HeartbeatIntervalSeconds != nil {
		return *x.HeartbeatIntervalSeconds
	}
	return 0
}

func (x *StreamOptions) GetAutoRetry() bool {
	if x != nil && x.AutoRetry != nil {
		return *x.AutoRetry
	}
	return false
}

func (x *StreamOptions) GetQos() StreamQOS {
	if x != nil && x.Qos != nil {
		return *x.Qos
	}
	return StreamQOS_STREAM_QOS_UNSPECIFIED
}

// *
// StreamStart defines where to start the stream.
type StreamStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start from a specific timestamp
	FromTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_timestamp,json=fromTimestamp" json:"from_timestamp,omitempty"`
	// Start from the beginning of available data
	FromBeginning *bool `protobuf:"varint,2,opt,name=from_beginning,json=fromBeginning" json:"from_beginning,omitempty"`
	// Start from the current time (live streaming only)
	FromNow *bool `protobuf:"varint,3,opt,name=from_now,json=fromNow" json:"from_now,omitempty"`
	// Start from a specific offset or position
	FromOffset    *string `protobuf:"bytes,4,opt,name=from_offset,json=fromOffset" json:"from_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamStart) Reset() {
	*x = StreamStart{}
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStart) ProtoMessage() {}

func (x *StreamStart) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStart.ProtoReflect.Descriptor instead.
func (*StreamStart) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_stream_metrics_request_proto_rawDescGZIP(), []int{2}
}

func (x *StreamStart) GetFromTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTimestamp
	}
	return nil
}

func (x *StreamStart) GetFromBeginning() bool {
	if x != nil && x.FromBeginning != nil {
		return *x.FromBeginning
	}
	return false
}

func (x *StreamStart) GetFromNow() bool {
	if x != nil && x.FromNow != nil {
		return *x.FromNow
	}
	return false
}

func (x *StreamStart) GetFromOffset() string {
	if x != nil && x.FromOffset != nil {
		return *x.FromOffset
	}
	return ""
}

// *
// BufferConfig configures buffering behavior for the stream.
type BufferConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of metrics to buffer
	MaxBufferSize *int32 `protobuf:"varint,1,opt,name=max_buffer_size,json=maxBufferSize" json:"max_buffer_size,omitempty"`
	// Buffer overflow strategy
	OverflowStrategy *BufferOverflowStrategy `protobuf:"varint,2,opt,name=overflow_strategy,json=overflowStrategy,enum=gcommon.v1.metrics.BufferOverflowStrategy" json:"overflow_strategy,omitempty"`
	// Whether to persist buffer to disk during streaming
	PersistBuffer *bool `protobuf:"varint,3,opt,name=persist_buffer,json=persistBuffer" json:"persist_buffer,omitempty"`
	// Maximum memory usage for buffering (bytes)
	MaxMemoryBytes *int64 `protobuf:"varint,4,opt,name=max_memory_bytes,json=maxMemoryBytes" json:"max_memory_bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BufferConfig) Reset() {
	*x = BufferConfig{}
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BufferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferConfig) ProtoMessage() {}

func (x *BufferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferConfig.ProtoReflect.Descriptor instead.
func (*BufferConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_stream_metrics_request_proto_rawDescGZIP(), []int{3}
}

func (x *BufferConfig) GetMaxBufferSize() int32 {
	if x != nil && x.MaxBufferSize != nil {
		return *x.MaxBufferSize
	}
	return 0
}

func (x *BufferConfig) GetOverflowStrategy() BufferOverflowStrategy {
	if x != nil && x.OverflowStrategy != nil {
		return *x.OverflowStrategy
	}
	return BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED
}

func (x *BufferConfig) GetPersistBuffer() bool {
	if x != nil && x.PersistBuffer != nil {
		return *x.PersistBuffer
	}
	return false
}

func (x *BufferConfig) GetMaxMemoryBytes() int64 {
	if x != nil && x.MaxMemoryBytes != nil {
		return *x.MaxMemoryBytes
	}
	return 0
}

var File_pkg_metrics_proto_stream_metrics_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_stream_metrics_request_proto_rawDesc = "" +
	"\n" +
	".pkg/metrics/proto/stream_metrics_request.proto\x12\x12gcommon.v1.metrics\x1a\x1fgoogle/protobuf/timestamp.proto\x1a*pkg/metrics/proto/stream_compression.proto\x1a\"pkg/metrics/proto/stream_qos.proto\x1a0pkg/metrics/proto/buffer_overflow_strategy.proto\x1a'pkg/common/proto/request_metadata.proto\x1a%pkg/metrics/proto/metric_filter.proto\"\xec\x02\n" +
	"\x14StreamMetricsRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x128\n" +
	"\x06filter\x18\x02 \x01(\v2 .gcommon.v1.metrics.MetricFilterR\x06filter\x12;\n" +
	"\aoptions\x18\x03 \x01(\v2!.gcommon.v1.metrics.StreamOptionsR\aoptions\x12\x1f\n" +
	"\vprovider_id\x18\x04 \x01(\tR\n" +
	"providerId\x125\n" +
	"\x05start\x18\x05 \x01(\v2\x1f.gcommon.v1.metrics.StreamStartR\x05start\x12E\n" +
	"\rbuffer_config\x18\x06 \x01(\v2 .gcommon.v1.metrics.BufferConfigR\fbufferConfig\"\xb2\x03\n" +
	"\rStreamOptions\x12-\n" +
	"\x12include_historical\x18\x01 \x01(\bR\x11includeHistorical\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05R\tbatchSize\x12(\n" +
	"\x10batch_timeout_ms\x18\x03 \x01(\x05R\x0ebatchTimeoutMs\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\x12G\n" +
	"\vcompression\x18\x05 \x01(\x0e2%.gcommon.v1.metrics.StreamCompressionR\vcompression\x12'\n" +
	"\x0fsend_heartbeats\x18\x06 \x01(\bR\x0esendHeartbeats\x12<\n" +
	"\x1aheartbeat_interval_seconds\x18\a \x01(\x05R\x18heartbeatIntervalSeconds\x12\x1d\n" +
	"\n" +
	"auto_retry\x18\b \x01(\bR\tautoRetry\x12/\n" +
	"\x03qos\x18\t \x01(\x0e2\x1d.gcommon.v1.metrics.StreamQOSR\x03qos\"\xb3\x01\n" +
	"\vStreamStart\x12A\n" +
	"\x0efrom_timestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\rfromTimestamp\x12%\n" +
	"\x0efrom_beginning\x18\x02 \x01(\bR\rfromBeginning\x12\x19\n" +
	"\bfrom_now\x18\x03 \x01(\bR\afromNow\x12\x1f\n" +
	"\vfrom_offset\x18\x04 \x01(\tR\n" +
	"fromOffset\"\xe0\x01\n" +
	"\fBufferConfig\x12&\n" +
	"\x0fmax_buffer_size\x18\x01 \x01(\x05R\rmaxBufferSize\x12W\n" +
	"\x11overflow_strategy\x18\x02 \x01(\x0e2*.gcommon.v1.metrics.BufferOverflowStrategyR\x10overflowStrategy\x12%\n" +
	"\x0epersist_buffer\x18\x03 \x01(\bR\rpersistBuffer\x12(\n" +
	"\x10max_memory_bytes\x18\x04 \x01(\x03R\x0emaxMemoryBytesB\xca\x01\n" +
	"\x16com.gcommon.v1.metricsB\x19StreamMetricsRequestProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_stream_metrics_request_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_stream_metrics_request_proto_rawDescData []byte
)

func file_pkg_metrics_proto_stream_metrics_request_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_stream_metrics_request_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_stream_metrics_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_stream_metrics_request_proto_rawDesc), len(file_pkg_metrics_proto_stream_metrics_request_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_stream_metrics_request_proto_rawDescData
}

var file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_metrics_proto_stream_metrics_request_proto_goTypes = []any{
	(*StreamMetricsRequest)(nil),  // 0: gcommon.v1.metrics.StreamMetricsRequest
	(*StreamOptions)(nil),         // 1: gcommon.v1.metrics.StreamOptions
	(*StreamStart)(nil),           // 2: gcommon.v1.metrics.StreamStart
	(*BufferConfig)(nil),          // 3: gcommon.v1.metrics.BufferConfig
	(*proto.RequestMetadata)(nil), // 4: gcommon.v1.common.RequestMetadata
	(*MetricFilter)(nil),          // 5: gcommon.v1.metrics.MetricFilter
	(StreamCompression)(0),        // 6: gcommon.v1.metrics.StreamCompression
	(StreamQOS)(0),                // 7: gcommon.v1.metrics.StreamQOS
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(BufferOverflowStrategy)(0),   // 9: gcommon.v1.metrics.BufferOverflowStrategy
}
var file_pkg_metrics_proto_stream_metrics_request_proto_depIdxs = []int32{
	4, // 0: gcommon.v1.metrics.StreamMetricsRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	5, // 1: gcommon.v1.metrics.StreamMetricsRequest.filter:type_name -> gcommon.v1.metrics.MetricFilter
	1, // 2: gcommon.v1.metrics.StreamMetricsRequest.options:type_name -> gcommon.v1.metrics.StreamOptions
	2, // 3: gcommon.v1.metrics.StreamMetricsRequest.start:type_name -> gcommon.v1.metrics.StreamStart
	3, // 4: gcommon.v1.metrics.StreamMetricsRequest.buffer_config:type_name -> gcommon.v1.metrics.BufferConfig
	6, // 5: gcommon.v1.metrics.StreamOptions.compression:type_name -> gcommon.v1.metrics.StreamCompression
	7, // 6: gcommon.v1.metrics.StreamOptions.qos:type_name -> gcommon.v1.metrics.StreamQOS
	8, // 7: gcommon.v1.metrics.StreamStart.from_timestamp:type_name -> google.protobuf.Timestamp
	9, // 8: gcommon.v1.metrics.BufferConfig.overflow_strategy:type_name -> gcommon.v1.metrics.BufferOverflowStrategy
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_stream_metrics_request_proto_init() }
func file_pkg_metrics_proto_stream_metrics_request_proto_init() {
	if File_pkg_metrics_proto_stream_metrics_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_stream_compression_proto_init()
	file_pkg_metrics_proto_stream_qos_proto_init()
	file_pkg_metrics_proto_buffer_overflow_strategy_proto_init()
	file_pkg_metrics_proto_metric_filter_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_stream_metrics_request_proto_rawDesc), len(file_pkg_metrics_proto_stream_metrics_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_stream_metrics_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_stream_metrics_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_stream_metrics_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_stream_metrics_request_proto = out.File
	file_pkg_metrics_proto_stream_metrics_request_proto_goTypes = nil
	file_pkg_metrics_proto_stream_metrics_request_proto_depIdxs = nil
}
