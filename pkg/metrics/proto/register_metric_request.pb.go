// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/register_metric_request.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterMetricRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Metric definition to register
	Definition *MetricDefinition `protobuf:"bytes,2,opt,name=definition" json:"definition,omitempty"`
	// Optional provider ID to register with
	ProviderId *string `protobuf:"bytes,3,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Whether to replace an existing metric with the same name
	ReplaceExisting *bool `protobuf:"varint,4,opt,name=replace_existing,json=replaceExisting" json:"replace_existing,omitempty"`
	// Validation options for the registration
	Options       *RegistrationOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterMetricRequest) Reset() {
	*x = RegisterMetricRequest{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMetricRequest) ProtoMessage() {}

func (x *RegisterMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMetricRequest.ProtoReflect.Descriptor instead.
func (*RegisterMetricRequest) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterMetricRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterMetricRequest) GetDefinition() *MetricDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *RegisterMetricRequest) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *RegisterMetricRequest) GetReplaceExisting() bool {
	if x != nil && x.ReplaceExisting != nil {
		return *x.ReplaceExisting
	}
	return false
}

func (x *RegisterMetricRequest) GetOptions() *RegistrationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// *
// MetricDefinition contains the complete definition of a metric.
type MetricDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique name for the metric
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Type of metric (counter, gauge, histogram, etc.)
	Type *MetricType `protobuf:"varint,2,opt,name=type,enum=gcommon.v1.metrics.MetricType" json:"type,omitempty"`
	// Human-readable description
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Unit of measurement (e.g., "bytes", "requests", "seconds")
	Unit *string `protobuf:"bytes,4,opt,name=unit" json:"unit,omitempty"`
	// Labels that this metric supports
	Labels []*LabelDefinition `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty"`
	// Metric-specific configuration
	Config *MetricTypeConfig `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	// Retention policy for this metric
	Retention *RetentionPolicyConfig `protobuf:"bytes,7,opt,name=retention" json:"retention,omitempty"`
	// Export configuration for this metric
	ExportConfig *ExportConfig `protobuf:"bytes,8,opt,name=export_config,json=exportConfig" json:"export_config,omitempty"`
	// Validation rules for metric values
	Validation *ValidationRules `protobuf:"bytes,9,opt,name=validation" json:"validation,omitempty"`
	// Tags for metric organization and discovery
	Tags          map[string]string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricDefinition) Reset() {
	*x = MetricDefinition{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDefinition) ProtoMessage() {}

func (x *MetricDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDefinition.ProtoReflect.Descriptor instead.
func (*MetricDefinition) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{1}
}

func (x *MetricDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricDefinition) GetType() MetricType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MetricType_METRIC_TYPE_UNSPECIFIED
}

func (x *MetricDefinition) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MetricDefinition) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *MetricDefinition) GetLabels() []*LabelDefinition {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricDefinition) GetConfig() *MetricTypeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MetricDefinition) GetRetention() *RetentionPolicyConfig {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *MetricDefinition) GetExportConfig() *ExportConfig {
	if x != nil {
		return x.ExportConfig
	}
	return nil
}

func (x *MetricDefinition) GetValidation() *ValidationRules {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *MetricDefinition) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// *
// LabelDefinition defines a label that can be attached to the metric.
type LabelDefinition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the label
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Description of what this label represents
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Whether this label is required
	Required *bool `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	// Allowed values for this label (empty = any value allowed)
	AllowedValues []string `protobuf:"bytes,4,rep,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	// Pattern for validating label values (regex)
	ValidationPattern *string `protobuf:"bytes,5,opt,name=validation_pattern,json=validationPattern" json:"validation_pattern,omitempty"`
	// Default value if not specified
	DefaultValue  *string `protobuf:"bytes,6,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelDefinition) Reset() {
	*x = LabelDefinition{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelDefinition) ProtoMessage() {}

func (x *LabelDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelDefinition.ProtoReflect.Descriptor instead.
func (*LabelDefinition) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{2}
}

func (x *LabelDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LabelDefinition) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *LabelDefinition) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *LabelDefinition) GetAllowedValues() []string {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

func (x *LabelDefinition) GetValidationPattern() string {
	if x != nil && x.ValidationPattern != nil {
		return *x.ValidationPattern
	}
	return ""
}

func (x *LabelDefinition) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

// *
// MetricTypeConfig contains type-specific configuration for metrics.
type MetricTypeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for histogram metrics
	Histogram *HistogramConfig `protobuf:"bytes,1,opt,name=histogram" json:"histogram,omitempty"`
	// Configuration for summary metrics
	Summary *SummaryConfig `protobuf:"bytes,2,opt,name=summary" json:"summary,omitempty"`
	// Configuration for gauge metrics
	Gauge *GaugeConfig `protobuf:"bytes,3,opt,name=gauge" json:"gauge,omitempty"`
	// Configuration for counter metrics
	Counter       *CounterConfig `protobuf:"bytes,4,opt,name=counter" json:"counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricTypeConfig) Reset() {
	*x = MetricTypeConfig{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricTypeConfig) ProtoMessage() {}

func (x *MetricTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricTypeConfig.ProtoReflect.Descriptor instead.
func (*MetricTypeConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{3}
}

func (x *MetricTypeConfig) GetHistogram() *HistogramConfig {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *MetricTypeConfig) GetSummary() *SummaryConfig {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *MetricTypeConfig) GetGauge() *GaugeConfig {
	if x != nil {
		return x.Gauge
	}
	return nil
}

func (x *MetricTypeConfig) GetCounter() *CounterConfig {
	if x != nil {
		return x.Counter
	}
	return nil
}

// *
// HistogramConfig contains configuration specific to histogram metrics.
type HistogramConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Predefined buckets for the histogram
	Buckets []float64 `protobuf:"fixed64,1,rep,packed,name=buckets" json:"buckets,omitempty"`
	// Whether to automatically adjust buckets based on data
	AutoBuckets *bool `protobuf:"varint,2,opt,name=auto_buckets,json=autoBuckets" json:"auto_buckets,omitempty"`
	// Maximum number of buckets to maintain
	MaxBuckets    *int32 `protobuf:"varint,3,opt,name=max_buckets,json=maxBuckets" json:"max_buckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramConfig) Reset() {
	*x = HistogramConfig{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramConfig) ProtoMessage() {}

func (x *HistogramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramConfig.ProtoReflect.Descriptor instead.
func (*HistogramConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{4}
}

func (x *HistogramConfig) GetBuckets() []float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *HistogramConfig) GetAutoBuckets() bool {
	if x != nil && x.AutoBuckets != nil {
		return *x.AutoBuckets
	}
	return false
}

func (x *HistogramConfig) GetMaxBuckets() int32 {
	if x != nil && x.MaxBuckets != nil {
		return *x.MaxBuckets
	}
	return 0
}

// *
// SummaryConfig contains configuration specific to summary metrics.
type SummaryConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Quantiles to calculate (e.g., 0.5, 0.95, 0.99)
	Quantiles []float64 `protobuf:"fixed64,1,rep,packed,name=quantiles" json:"quantiles,omitempty"`
	// Time window for calculating quantiles
	TimeWindow *string `protobuf:"bytes,2,opt,name=time_window,json=timeWindow" json:"time_window,omitempty"`
	// Maximum age of observations to include
	MaxAge        *string `protobuf:"bytes,3,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryConfig) Reset() {
	*x = SummaryConfig{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryConfig) ProtoMessage() {}

func (x *SummaryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryConfig.ProtoReflect.Descriptor instead.
func (*SummaryConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{5}
}

func (x *SummaryConfig) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *SummaryConfig) GetTimeWindow() string {
	if x != nil && x.TimeWindow != nil {
		return *x.TimeWindow
	}
	return ""
}

func (x *SummaryConfig) GetMaxAge() string {
	if x != nil && x.MaxAge != nil {
		return *x.MaxAge
	}
	return ""
}

// *
// GaugeConfig contains configuration specific to gauge metrics.
type GaugeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum allowed value
	MinValue *float64 `protobuf:"fixed64,1,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Maximum allowed value
	MaxValue *float64 `protobuf:"fixed64,2,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Whether the gauge can go negative
	AllowNegative *bool `protobuf:"varint,3,opt,name=allow_negative,json=allowNegative" json:"allow_negative,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GaugeConfig) Reset() {
	*x = GaugeConfig{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GaugeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaugeConfig) ProtoMessage() {}

func (x *GaugeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaugeConfig.ProtoReflect.Descriptor instead.
func (*GaugeConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{6}
}

func (x *GaugeConfig) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *GaugeConfig) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *GaugeConfig) GetAllowNegative() bool {
	if x != nil && x.AllowNegative != nil {
		return *x.AllowNegative
	}
	return false
}

// *
// CounterConfig contains configuration specific to counter metrics.
type CounterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Starting value for the counter
	InitialValue *float64 `protobuf:"fixed64,1,opt,name=initial_value,json=initialValue" json:"initial_value,omitempty"`
	// Whether the counter can be reset
	AllowReset *bool `protobuf:"varint,2,opt,name=allow_reset,json=allowReset" json:"allow_reset,omitempty"`
	// Maximum value before rolling over
	MaxValue      *float64 `protobuf:"fixed64,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterConfig) Reset() {
	*x = CounterConfig{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterConfig) ProtoMessage() {}

func (x *CounterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterConfig.ProtoReflect.Descriptor instead.
func (*CounterConfig) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{7}
}

func (x *CounterConfig) GetInitialValue() float64 {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return 0
}

func (x *CounterConfig) GetAllowReset() bool {
	if x != nil && x.AllowReset != nil {
		return *x.AllowReset
	}
	return false
}

func (x *CounterConfig) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

// *
// ValidationRules define validation rules for metric values.
type ValidationRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum allowed value
	MinValue *float64 `protobuf:"fixed64,1,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Maximum allowed value
	MaxValue *float64 `protobuf:"fixed64,2,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Whether null/zero values are allowed
	AllowNull *bool `protobuf:"varint,3,opt,name=allow_null,json=allowNull" json:"allow_null,omitempty"`
	// Custom validation expressions
	ValidationExpressions []string `protobuf:"bytes,4,rep,name=validation_expressions,json=validationExpressions" json:"validation_expressions,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ValidationRules) Reset() {
	*x = ValidationRules{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRules) ProtoMessage() {}

func (x *ValidationRules) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRules.ProtoReflect.Descriptor instead.
func (*ValidationRules) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{8}
}

func (x *ValidationRules) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *ValidationRules) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *ValidationRules) GetAllowNull() bool {
	if x != nil && x.AllowNull != nil {
		return *x.AllowNull
	}
	return false
}

func (x *ValidationRules) GetValidationExpressions() []string {
	if x != nil {
		return x.ValidationExpressions
	}
	return nil
}

// *
// RegistrationOptions configure the registration process.
type RegistrationOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to validate the definition before registration
	ValidateDefinition *bool `protobuf:"varint,1,opt,name=validate_definition,json=validateDefinition" json:"validate_definition,omitempty"`
	// Whether to perform a dry run (validation only)
	DryRun *bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// Whether to create indices for efficient querying
	CreateIndices *bool `protobuf:"varint,3,opt,name=create_indices,json=createIndices" json:"create_indices,omitempty"`
	// Whether to enable real-time alerts for this metric
	EnableAlerting *bool `protobuf:"varint,4,opt,name=enable_alerting,json=enableAlerting" json:"enable_alerting,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegistrationOptions) Reset() {
	*x = RegistrationOptions{}
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationOptions) ProtoMessage() {}

func (x *RegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_register_metric_request_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationOptions.ProtoReflect.Descriptor instead.
func (*RegistrationOptions) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP(), []int{9}
}

func (x *RegistrationOptions) GetValidateDefinition() bool {
	if x != nil && x.ValidateDefinition != nil {
		return *x.ValidateDefinition
	}
	return false
}

func (x *RegistrationOptions) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *RegistrationOptions) GetCreateIndices() bool {
	if x != nil && x.CreateIndices != nil {
		return *x.CreateIndices
	}
	return false
}

func (x *RegistrationOptions) GetEnableAlerting() bool {
	if x != nil && x.EnableAlerting != nil {
		return *x.EnableAlerting
	}
	return false
}

var File_pkg_metrics_proto_register_metric_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_register_metric_request_proto_rawDesc = "" +
	"\n" +
	"/pkg/metrics/proto/register_metric_request.proto\x12\x12gcommon.v1.metrics\x1a%pkg/metrics/proto/export_config.proto\x1a'pkg/common/proto/request_metadata.proto\x1a#pkg/metrics/proto/metric_type.proto\x1a>pkg/metrics/proto/retention_policy_retentionpolicyconfig.proto\"\xac\x02\n" +
	"\x15RegisterMetricRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12D\n" +
	"\n" +
	"definition\x18\x02 \x01(\v2$.gcommon.v1.metrics.MetricDefinitionR\n" +
	"definition\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\tR\n" +
	"providerId\x12)\n" +
	"\x10replace_existing\x18\x04 \x01(\bR\x0freplaceExisting\x12A\n" +
	"\aoptions\x18\x05 \x01(\v2'.gcommon.v1.metrics.RegistrationOptionsR\aoptions\"\xdd\x04\n" +
	"\x10MetricDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1e.gcommon.v1.metrics.MetricTypeR\x04type\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x04 \x01(\tR\x04unit\x12;\n" +
	"\x06labels\x18\x05 \x03(\v2#.gcommon.v1.metrics.LabelDefinitionR\x06labels\x12<\n" +
	"\x06config\x18\x06 \x01(\v2$.gcommon.v1.metrics.MetricTypeConfigR\x06config\x12G\n" +
	"\tretention\x18\a \x01(\v2).gcommon.v1.metrics.RetentionPolicyConfigR\tretention\x12E\n" +
	"\rexport_config\x18\b \x01(\v2 .gcommon.v1.metrics.ExportConfigR\fexportConfig\x12C\n" +
	"\n" +
	"validation\x18\t \x01(\v2#.gcommon.v1.metrics.ValidationRulesR\n" +
	"validation\x12B\n" +
	"\x04tags\x18\n" +
	" \x03(\v2..gcommon.v1.metrics.MetricDefinition.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xde\x01\n" +
	"\x0fLabelDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1a\n" +
	"\brequired\x18\x03 \x01(\bR\brequired\x12%\n" +
	"\x0eallowed_values\x18\x04 \x03(\tR\rallowedValues\x12-\n" +
	"\x12validation_pattern\x18\x05 \x01(\tR\x11validationPattern\x12#\n" +
	"\rdefault_value\x18\x06 \x01(\tR\fdefaultValue\"\x86\x02\n" +
	"\x10MetricTypeConfig\x12A\n" +
	"\thistogram\x18\x01 \x01(\v2#.gcommon.v1.metrics.HistogramConfigR\thistogram\x12;\n" +
	"\asummary\x18\x02 \x01(\v2!.gcommon.v1.metrics.SummaryConfigR\asummary\x125\n" +
	"\x05gauge\x18\x03 \x01(\v2\x1f.gcommon.v1.metrics.GaugeConfigR\x05gauge\x12;\n" +
	"\acounter\x18\x04 \x01(\v2!.gcommon.v1.metrics.CounterConfigR\acounter\"o\n" +
	"\x0fHistogramConfig\x12\x18\n" +
	"\abuckets\x18\x01 \x03(\x01R\abuckets\x12!\n" +
	"\fauto_buckets\x18\x02 \x01(\bR\vautoBuckets\x12\x1f\n" +
	"\vmax_buckets\x18\x03 \x01(\x05R\n" +
	"maxBuckets\"g\n" +
	"\rSummaryConfig\x12\x1c\n" +
	"\tquantiles\x18\x01 \x03(\x01R\tquantiles\x12\x1f\n" +
	"\vtime_window\x18\x02 \x01(\tR\n" +
	"timeWindow\x12\x17\n" +
	"\amax_age\x18\x03 \x01(\tR\x06maxAge\"n\n" +
	"\vGaugeConfig\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12%\n" +
	"\x0eallow_negative\x18\x03 \x01(\bR\rallowNegative\"r\n" +
	"\rCounterConfig\x12#\n" +
	"\rinitial_value\x18\x01 \x01(\x01R\finitialValue\x12\x1f\n" +
	"\vallow_reset\x18\x02 \x01(\bR\n" +
	"allowReset\x12\x1b\n" +
	"\tmax_value\x18\x03 \x01(\x01R\bmaxValue\"\xa1\x01\n" +
	"\x0fValidationRules\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12\x1d\n" +
	"\n" +
	"allow_null\x18\x03 \x01(\bR\tallowNull\x125\n" +
	"\x16validation_expressions\x18\x04 \x03(\tR\x15validationExpressions\"\xaf\x01\n" +
	"\x13RegistrationOptions\x12/\n" +
	"\x13validate_definition\x18\x01 \x01(\bR\x12validateDefinition\x12\x17\n" +
	"\adry_run\x18\x02 \x01(\bR\x06dryRun\x12%\n" +
	"\x0ecreate_indices\x18\x03 \x01(\bR\rcreateIndices\x12'\n" +
	"\x0fenable_alerting\x18\x04 \x01(\bR\x0eenableAlertingB\xcb\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1aRegisterMetricRequestProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_register_metric_request_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_register_metric_request_proto_rawDescData []byte
)

func file_pkg_metrics_proto_register_metric_request_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_register_metric_request_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_register_metric_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_register_metric_request_proto_rawDesc), len(file_pkg_metrics_proto_register_metric_request_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_register_metric_request_proto_rawDescData
}

var file_pkg_metrics_proto_register_metric_request_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_metrics_proto_register_metric_request_proto_goTypes = []any{
	(*RegisterMetricRequest)(nil), // 0: gcommon.v1.metrics.RegisterMetricRequest
	(*MetricDefinition)(nil),      // 1: gcommon.v1.metrics.MetricDefinition
	(*LabelDefinition)(nil),       // 2: gcommon.v1.metrics.LabelDefinition
	(*MetricTypeConfig)(nil),      // 3: gcommon.v1.metrics.MetricTypeConfig
	(*HistogramConfig)(nil),       // 4: gcommon.v1.metrics.HistogramConfig
	(*SummaryConfig)(nil),         // 5: gcommon.v1.metrics.SummaryConfig
	(*GaugeConfig)(nil),           // 6: gcommon.v1.metrics.GaugeConfig
	(*CounterConfig)(nil),         // 7: gcommon.v1.metrics.CounterConfig
	(*ValidationRules)(nil),       // 8: gcommon.v1.metrics.ValidationRules
	(*RegistrationOptions)(nil),   // 9: gcommon.v1.metrics.RegistrationOptions
	nil,                           // 10: gcommon.v1.metrics.MetricDefinition.TagsEntry
	(*proto.RequestMetadata)(nil), // 11: gcommon.v1.common.RequestMetadata
	(MetricType)(0),               // 12: gcommon.v1.metrics.MetricType
	(*RetentionPolicyConfig)(nil), // 13: gcommon.v1.metrics.RetentionPolicyConfig
	(*ExportConfig)(nil),          // 14: gcommon.v1.metrics.ExportConfig
}
var file_pkg_metrics_proto_register_metric_request_proto_depIdxs = []int32{
	11, // 0: gcommon.v1.metrics.RegisterMetricRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	1,  // 1: gcommon.v1.metrics.RegisterMetricRequest.definition:type_name -> gcommon.v1.metrics.MetricDefinition
	9,  // 2: gcommon.v1.metrics.RegisterMetricRequest.options:type_name -> gcommon.v1.metrics.RegistrationOptions
	12, // 3: gcommon.v1.metrics.MetricDefinition.type:type_name -> gcommon.v1.metrics.MetricType
	2,  // 4: gcommon.v1.metrics.MetricDefinition.labels:type_name -> gcommon.v1.metrics.LabelDefinition
	3,  // 5: gcommon.v1.metrics.MetricDefinition.config:type_name -> gcommon.v1.metrics.MetricTypeConfig
	13, // 6: gcommon.v1.metrics.MetricDefinition.retention:type_name -> gcommon.v1.metrics.RetentionPolicyConfig
	14, // 7: gcommon.v1.metrics.MetricDefinition.export_config:type_name -> gcommon.v1.metrics.ExportConfig
	8,  // 8: gcommon.v1.metrics.MetricDefinition.validation:type_name -> gcommon.v1.metrics.ValidationRules
	10, // 9: gcommon.v1.metrics.MetricDefinition.tags:type_name -> gcommon.v1.metrics.MetricDefinition.TagsEntry
	4,  // 10: gcommon.v1.metrics.MetricTypeConfig.histogram:type_name -> gcommon.v1.metrics.HistogramConfig
	5,  // 11: gcommon.v1.metrics.MetricTypeConfig.summary:type_name -> gcommon.v1.metrics.SummaryConfig
	6,  // 12: gcommon.v1.metrics.MetricTypeConfig.gauge:type_name -> gcommon.v1.metrics.GaugeConfig
	7,  // 13: gcommon.v1.metrics.MetricTypeConfig.counter:type_name -> gcommon.v1.metrics.CounterConfig
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_register_metric_request_proto_init() }
func file_pkg_metrics_proto_register_metric_request_proto_init() {
	if File_pkg_metrics_proto_register_metric_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_export_config_proto_init()
	file_pkg_metrics_proto_metric_type_proto_init()
	file_pkg_metrics_proto_retention_policy_retentionpolicyconfig_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_register_metric_request_proto_rawDesc), len(file_pkg_metrics_proto_register_metric_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_register_metric_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_register_metric_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_register_metric_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_register_metric_request_proto = out.File
	file_pkg_metrics_proto_register_metric_request_proto_goTypes = nil
	file_pkg_metrics_proto_register_metric_request_proto_depIdxs = nil
}
