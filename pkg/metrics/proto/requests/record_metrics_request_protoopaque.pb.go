// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/record_metrics_request.proto

//go:build protoopaque

package metricspb

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchPriority defines the processing priority for batch operations.
type BatchPriority int32

const (
	BatchPriority_BATCH_PRIORITY_UNSPECIFIED BatchPriority = 0
	BatchPriority_BATCH_PRIORITY_LOW         BatchPriority = 1
	BatchPriority_BATCH_PRIORITY_NORMAL      BatchPriority = 2
	BatchPriority_BATCH_PRIORITY_HIGH        BatchPriority = 3
	BatchPriority_BATCH_PRIORITY_URGENT      BatchPriority = 4
)

// Enum value maps for BatchPriority.
var (
	BatchPriority_name = map[int32]string{
		0: "BATCH_PRIORITY_UNSPECIFIED",
		1: "BATCH_PRIORITY_LOW",
		2: "BATCH_PRIORITY_NORMAL",
		3: "BATCH_PRIORITY_HIGH",
		4: "BATCH_PRIORITY_URGENT",
	}
	BatchPriority_value = map[string]int32{
		"BATCH_PRIORITY_UNSPECIFIED": 0,
		"BATCH_PRIORITY_LOW":         1,
		"BATCH_PRIORITY_NORMAL":      2,
		"BATCH_PRIORITY_HIGH":        3,
		"BATCH_PRIORITY_URGENT":      4,
	}
)

func (x BatchPriority) Enum() *BatchPriority {
	p := new(BatchPriority)
	*p = x
	return p
}

func (x BatchPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_metrics_proto_requests_record_metrics_request_proto_enumTypes[0].Descriptor()
}

func (BatchPriority) Type() protoreflect.EnumType {
	return &file_pkg_metrics_proto_requests_record_metrics_request_proto_enumTypes[0]
}

func (x BatchPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// RecordMetricsRequest represents a request to record multiple metric data points in batch.
// This provides efficient bulk insertion of metrics data.
type RecordMetricsRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Metadata    *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata"`
	xxx_hidden_Metrics     *[]*MetricData         `protobuf:"bytes,2,rep,name=metrics"`
	xxx_hidden_ProviderId  *string                `protobuf:"bytes,3,opt,name=provider_id,json=providerId"`
	xxx_hidden_Options     *BatchOptions          `protobuf:"bytes,4,opt,name=options"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp"`
	xxx_hidden_BatchSize   int32                  `protobuf:"varint,6,opt,name=batch_size,json=batchSize"`
	xxx_hidden_FailOnError bool                   `protobuf:"varint,7,opt,name=fail_on_error,json=failOnError"`
	xxx_hidden_ValidateAll bool                   `protobuf:"varint,8,opt,name=validate_all,json=validateAll"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RecordMetricsRequest) Reset() {
	*x = RecordMetricsRequest{}
	mi := &file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetricsRequest) ProtoMessage() {}

func (x *RecordMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RecordMetricsRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *RecordMetricsRequest) GetMetrics() []*MetricData {
	if x != nil {
		if x.xxx_hidden_Metrics != nil {
			return *x.xxx_hidden_Metrics
		}
	}
	return nil
}

func (x *RecordMetricsRequest) GetProviderId() string {
	if x != nil {
		if x.xxx_hidden_ProviderId != nil {
			return *x.xxx_hidden_ProviderId
		}
		return ""
	}
	return ""
}

func (x *RecordMetricsRequest) GetOptions() *BatchOptions {
	if x != nil {
		return x.xxx_hidden_Options
	}
	return nil
}

func (x *RecordMetricsRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *RecordMetricsRequest) GetBatchSize() int32 {
	if x != nil {
		return x.xxx_hidden_BatchSize
	}
	return 0
}

func (x *RecordMetricsRequest) GetFailOnError() bool {
	if x != nil {
		return x.xxx_hidden_FailOnError
	}
	return false
}

func (x *RecordMetricsRequest) GetValidateAll() bool {
	if x != nil {
		return x.xxx_hidden_ValidateAll
	}
	return false
}

func (x *RecordMetricsRequest) SetMetadata(v *proto.RequestMetadata) {
	x.xxx_hidden_Metadata = v
}

func (x *RecordMetricsRequest) SetMetrics(v []*MetricData) {
	x.xxx_hidden_Metrics = &v
}

func (x *RecordMetricsRequest) SetProviderId(v string) {
	x.xxx_hidden_ProviderId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *RecordMetricsRequest) SetOptions(v *BatchOptions) {
	x.xxx_hidden_Options = v
}

func (x *RecordMetricsRequest) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *RecordMetricsRequest) SetBatchSize(v int32) {
	x.xxx_hidden_BatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 8)
}

func (x *RecordMetricsRequest) SetFailOnError(v bool) {
	x.xxx_hidden_FailOnError = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 8)
}

func (x *RecordMetricsRequest) SetValidateAll(v bool) {
	x.xxx_hidden_ValidateAll = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 8)
}

func (x *RecordMetricsRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *RecordMetricsRequest) HasProviderId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *RecordMetricsRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Options != nil
}

func (x *RecordMetricsRequest) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *RecordMetricsRequest) HasBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *RecordMetricsRequest) HasFailOnError() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *RecordMetricsRequest) HasValidateAll() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *RecordMetricsRequest) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

func (x *RecordMetricsRequest) ClearProviderId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ProviderId = nil
}

func (x *RecordMetricsRequest) ClearOptions() {
	x.xxx_hidden_Options = nil
}

func (x *RecordMetricsRequest) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *RecordMetricsRequest) ClearBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_BatchSize = 0
}

func (x *RecordMetricsRequest) ClearFailOnError() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_FailOnError = false
}

func (x *RecordMetricsRequest) ClearValidateAll() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_ValidateAll = false
}

type RecordMetricsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata
	// The metrics data to record
	Metrics []*MetricData
	// Optional provider ID to use for recording
	ProviderId *string
	// Batch processing options
	Options *BatchOptions
	// Common timestamp for all metrics (if not individually specified)
	Timestamp *timestamppb.Timestamp
	// Maximum number of metrics to process per batch
	BatchSize *int32
	// Whether to fail the entire batch if any metric fails
	FailOnError *bool
	// Whether to validate all metrics before recording
	ValidateAll *bool
}

func (b0 RecordMetricsRequest_builder) Build() *RecordMetricsRequest {
	m0 := &RecordMetricsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Metadata = b.Metadata
	x.xxx_hidden_Metrics = &b.Metrics
	if b.ProviderId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_ProviderId = b.ProviderId
	}
	x.xxx_hidden_Options = b.Options
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.BatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 8)
		x.xxx_hidden_BatchSize = *b.BatchSize
	}
	if b.FailOnError != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 8)
		x.xxx_hidden_FailOnError = *b.FailOnError
	}
	if b.ValidateAll != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 8)
		x.xxx_hidden_ValidateAll = *b.ValidateAll
	}
	return m0
}

// *
// BatchOptions configures how batch operations should be processed.
type BatchOptions struct {
	state                            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ParallelProcessing    bool                   `protobuf:"varint,1,opt,name=parallel_processing,json=parallelProcessing"`
	xxx_hidden_MaxConcurrency        int32                  `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency"`
	xxx_hidden_Deduplicate           bool                   `protobuf:"varint,3,opt,name=deduplicate"`
	xxx_hidden_ReturnDetailedResults bool                   `protobuf:"varint,4,opt,name=return_detailed_results,json=returnDetailedResults"`
	xxx_hidden_TimeoutSeconds        int32                  `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds"`
	xxx_hidden_Transactional         bool                   `protobuf:"varint,6,opt,name=transactional"`
	xxx_hidden_Priority              BatchPriority          `protobuf:"varint,7,opt,name=priority,enum=gcommon.v1.metrics.BatchPriority"`
	XXX_raceDetectHookData           protoimpl.RaceDetectHookData
	XXX_presence                     [1]uint32
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *BatchOptions) Reset() {
	*x = BatchOptions{}
	mi := &file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOptions) ProtoMessage() {}

func (x *BatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchOptions) GetParallelProcessing() bool {
	if x != nil {
		return x.xxx_hidden_ParallelProcessing
	}
	return false
}

func (x *BatchOptions) GetMaxConcurrency() int32 {
	if x != nil {
		return x.xxx_hidden_MaxConcurrency
	}
	return 0
}

func (x *BatchOptions) GetDeduplicate() bool {
	if x != nil {
		return x.xxx_hidden_Deduplicate
	}
	return false
}

func (x *BatchOptions) GetReturnDetailedResults() bool {
	if x != nil {
		return x.xxx_hidden_ReturnDetailedResults
	}
	return false
}

func (x *BatchOptions) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.xxx_hidden_TimeoutSeconds
	}
	return 0
}

func (x *BatchOptions) GetTransactional() bool {
	if x != nil {
		return x.xxx_hidden_Transactional
	}
	return false
}

func (x *BatchOptions) GetPriority() BatchPriority {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 6) {
			return x.xxx_hidden_Priority
		}
	}
	return BatchPriority_BATCH_PRIORITY_UNSPECIFIED
}

func (x *BatchOptions) SetParallelProcessing(v bool) {
	x.xxx_hidden_ParallelProcessing = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *BatchOptions) SetMaxConcurrency(v int32) {
	x.xxx_hidden_MaxConcurrency = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *BatchOptions) SetDeduplicate(v bool) {
	x.xxx_hidden_Deduplicate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *BatchOptions) SetReturnDetailedResults(v bool) {
	x.xxx_hidden_ReturnDetailedResults = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *BatchOptions) SetTimeoutSeconds(v int32) {
	x.xxx_hidden_TimeoutSeconds = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *BatchOptions) SetTransactional(v bool) {
	x.xxx_hidden_Transactional = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 7)
}

func (x *BatchOptions) SetPriority(v BatchPriority) {
	x.xxx_hidden_Priority = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *BatchOptions) HasParallelProcessing() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchOptions) HasMaxConcurrency() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BatchOptions) HasDeduplicate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchOptions) HasReturnDetailedResults() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BatchOptions) HasTimeoutSeconds() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *BatchOptions) HasTransactional() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *BatchOptions) HasPriority() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *BatchOptions) ClearParallelProcessing() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_ParallelProcessing = false
}

func (x *BatchOptions) ClearMaxConcurrency() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxConcurrency = 0
}

func (x *BatchOptions) ClearDeduplicate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Deduplicate = false
}

func (x *BatchOptions) ClearReturnDetailedResults() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_ReturnDetailedResults = false
}

func (x *BatchOptions) ClearTimeoutSeconds() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_TimeoutSeconds = 0
}

func (x *BatchOptions) ClearTransactional() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Transactional = false
}

func (x *BatchOptions) ClearPriority() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Priority = BatchPriority_BATCH_PRIORITY_UNSPECIFIED
}

type BatchOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to process metrics in parallel
	ParallelProcessing *bool
	// Maximum concurrent operations (if parallel processing is enabled)
	MaxConcurrency *int32
	// Whether to deduplicate metrics within the batch
	Deduplicate *bool
	// Whether to return detailed results for each metric
	ReturnDetailedResults *bool
	// Timeout for the entire batch operation (seconds)
	TimeoutSeconds *int32
	// Whether to enable transactional semantics (all or nothing)
	Transactional *bool
	// Priority level for the batch operation
	Priority *BatchPriority
}

func (b0 BatchOptions_builder) Build() *BatchOptions {
	m0 := &BatchOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.ParallelProcessing != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_ParallelProcessing = *b.ParallelProcessing
	}
	if b.MaxConcurrency != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_MaxConcurrency = *b.MaxConcurrency
	}
	if b.Deduplicate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Deduplicate = *b.Deduplicate
	}
	if b.ReturnDetailedResults != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_ReturnDetailedResults = *b.ReturnDetailedResults
	}
	if b.TimeoutSeconds != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_TimeoutSeconds = *b.TimeoutSeconds
	}
	if b.Transactional != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 7)
		x.xxx_hidden_Transactional = *b.Transactional
	}
	if b.Priority != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Priority = *b.Priority
	}
	return m0
}

var File_pkg_metrics_proto_requests_record_metrics_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_record_metrics_request_proto_rawDesc = "" +
	"\n" +
	"7pkg/metrics/proto/requests/record_metrics_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a0pkg/common/proto/messages/request_metadata.proto\x1a,pkg/metrics/proto/messages/metric_data.proto\"\x8d\x03\n" +
	"\x14RecordMetricsRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x128\n" +
	"\ametrics\x18\x02 \x03(\v2\x1e.gcommon.v1.metrics.MetricDataR\ametrics\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\tR\n" +
	"providerId\x12:\n" +
	"\aoptions\x18\x04 \x01(\v2 .gcommon.v1.metrics.BatchOptionsR\aoptions\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x06 \x01(\x05R\tbatchSize\x12\"\n" +
	"\rfail_on_error\x18\a \x01(\bR\vfailOnError\x12!\n" +
	"\fvalidate_all\x18\b \x01(\bR\vvalidateAll\"\xd0\x02\n" +
	"\fBatchOptions\x12/\n" +
	"\x13parallel_processing\x18\x01 \x01(\bR\x12parallelProcessing\x12'\n" +
	"\x0fmax_concurrency\x18\x02 \x01(\x05R\x0emaxConcurrency\x12 \n" +
	"\vdeduplicate\x18\x03 \x01(\bR\vdeduplicate\x126\n" +
	"\x17return_detailed_results\x18\x04 \x01(\bR\x15returnDetailedResults\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\x12$\n" +
	"\rtransactional\x18\x06 \x01(\bR\rtransactional\x12=\n" +
	"\bpriority\x18\a \x01(\x0e2!.gcommon.v1.metrics.BatchPriorityR\bpriority*\x96\x01\n" +
	"\rBatchPriority\x12\x1e\n" +
	"\x1aBATCH_PRIORITY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12BATCH_PRIORITY_LOW\x10\x01\x12\x19\n" +
	"\x15BATCH_PRIORITY_NORMAL\x10\x02\x12\x17\n" +
	"\x13BATCH_PRIORITY_HIGH\x10\x03\x12\x19\n" +
	"\x15BATCH_PRIORITY_URGENT\x10\x04B\xdc\x01\n" +
	"\x16com.gcommon.v1.metricsB\x19RecordMetricsRequestProtoP\x01Z5github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_record_metrics_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_requests_record_metrics_request_proto_goTypes = []any{
	(BatchPriority)(0),            // 0: gcommon.v1.metrics.BatchPriority
	(*RecordMetricsRequest)(nil),  // 1: gcommon.v1.metrics.RecordMetricsRequest
	(*BatchOptions)(nil),          // 2: gcommon.v1.metrics.BatchOptions
	(*proto.RequestMetadata)(nil), // 3: gcommon.v1.common.RequestMetadata
	(*MetricData)(nil),            // 4: gcommon.v1.metrics.MetricData
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_requests_record_metrics_request_proto_depIdxs = []int32{
	3, // 0: gcommon.v1.metrics.RecordMetricsRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	4, // 1: gcommon.v1.metrics.RecordMetricsRequest.metrics:type_name -> gcommon.v1.metrics.MetricData
	2, // 2: gcommon.v1.metrics.RecordMetricsRequest.options:type_name -> gcommon.v1.metrics.BatchOptions
	5, // 3: gcommon.v1.metrics.RecordMetricsRequest.timestamp:type_name -> google.protobuf.Timestamp
	0, // 4: gcommon.v1.metrics.BatchOptions.priority:type_name -> gcommon.v1.metrics.BatchPriority
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_record_metrics_request_proto_init() }
func file_pkg_metrics_proto_requests_record_metrics_request_proto_init() {
	if File_pkg_metrics_proto_requests_record_metrics_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_messages_metric_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_record_metrics_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_record_metrics_request_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_record_metrics_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_record_metrics_request_proto_depIdxs,
		EnumInfos:         file_pkg_metrics_proto_requests_record_metrics_request_proto_enumTypes,
		MessageInfos:      file_pkg_metrics_proto_requests_record_metrics_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_record_metrics_request_proto = out.File
	file_pkg_metrics_proto_requests_record_metrics_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_record_metrics_request_proto_depIdxs = nil
}
