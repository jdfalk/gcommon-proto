// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/delete_provider_request.proto

//go:build !protoopaque

package metricspb

import (
	pb "../../../../pkg/common/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// CleanupStrategy defines how cleanup should be performed.
type CleanupStrategy int32

const (
	CleanupStrategy_CLEANUP_STRATEGY_UNSPECIFIED CleanupStrategy = 0
	CleanupStrategy_CLEANUP_STRATEGY_IMMEDIATE   CleanupStrategy = 1
	CleanupStrategy_CLEANUP_STRATEGY_GRACEFUL    CleanupStrategy = 2
	CleanupStrategy_CLEANUP_STRATEGY_BACKGROUND  CleanupStrategy = 3
	CleanupStrategy_CLEANUP_STRATEGY_SCHEDULED   CleanupStrategy = 4
)

// Enum value maps for CleanupStrategy.
var (
	CleanupStrategy_name = map[int32]string{
		0: "CLEANUP_STRATEGY_UNSPECIFIED",
		1: "CLEANUP_STRATEGY_IMMEDIATE",
		2: "CLEANUP_STRATEGY_GRACEFUL",
		3: "CLEANUP_STRATEGY_BACKGROUND",
		4: "CLEANUP_STRATEGY_SCHEDULED",
	}
	CleanupStrategy_value = map[string]int32{
		"CLEANUP_STRATEGY_UNSPECIFIED": 0,
		"CLEANUP_STRATEGY_IMMEDIATE":   1,
		"CLEANUP_STRATEGY_GRACEFUL":    2,
		"CLEANUP_STRATEGY_BACKGROUND":  3,
		"CLEANUP_STRATEGY_SCHEDULED":   4,
	}
)

func (x CleanupStrategy) Enum() *CleanupStrategy {
	p := new(CleanupStrategy)
	*p = x
	return p
}

func (x CleanupStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CleanupStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_metrics_proto_requests_delete_provider_request_proto_enumTypes[0].Descriptor()
}

func (CleanupStrategy) Type() protoreflect.EnumType {
	return &file_pkg_metrics_proto_requests_delete_provider_request_proto_enumTypes[0]
}

func (x CleanupStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// DeleteProviderRequest represents a request to delete a metrics provider.
type DeleteProviderRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *pb.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Provider ID to delete
	ProviderId *string `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Deletion options
	Options       *DeletionOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProviderRequest) Reset() {
	*x = DeleteProviderRequest{}
	mi := &file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProviderRequest) ProtoMessage() {}

func (x *DeleteProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteProviderRequest) GetMetadata() *pb.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeleteProviderRequest) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *DeleteProviderRequest) GetOptions() *DeletionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *DeleteProviderRequest) SetMetadata(v *pb.RequestMetadata) {
	x.Metadata = v
}

func (x *DeleteProviderRequest) SetProviderId(v string) {
	x.ProviderId = &v
}

func (x *DeleteProviderRequest) SetOptions(v *DeletionOptions) {
	x.Options = v
}

func (x *DeleteProviderRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *DeleteProviderRequest) HasProviderId() bool {
	if x == nil {
		return false
	}
	return x.ProviderId != nil
}

func (x *DeleteProviderRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.Options != nil
}

func (x *DeleteProviderRequest) ClearMetadata() {
	x.Metadata = nil
}

func (x *DeleteProviderRequest) ClearProviderId() {
	x.ProviderId = nil
}

func (x *DeleteProviderRequest) ClearOptions() {
	x.Options = nil
}

type DeleteProviderRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *pb.RequestMetadata
	// Provider ID to delete
	ProviderId *string
	// Deletion options
	Options *DeletionOptions
}

func (b0 DeleteProviderRequest_builder) Build() *DeleteProviderRequest {
	m0 := &DeleteProviderRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Metadata = b.Metadata
	x.ProviderId = b.ProviderId
	x.Options = b.Options
	return m0
}

// *
// DeletionOptions configure the deletion process.
type DeletionOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to delete all associated data
	DeleteData *bool `protobuf:"varint,1,opt,name=delete_data,json=deleteData" json:"delete_data,omitempty"`
	// Whether to delete associated indices
	DeleteIndices *bool `protobuf:"varint,2,opt,name=delete_indices,json=deleteIndices" json:"delete_indices,omitempty"`
	// Whether to delete configuration backups
	DeleteBackups *bool `protobuf:"varint,3,opt,name=delete_backups,json=deleteBackups" json:"delete_backups,omitempty"`
	// Whether to stop all exports before deletion
	StopExports *bool `protobuf:"varint,4,opt,name=stop_exports,json=stopExports" json:"stop_exports,omitempty"`
	// Grace period before actual deletion
	GracePeriod *string `protobuf:"bytes,5,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
	// Whether to perform a dry run
	DryRun *bool `protobuf:"varint,6,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// Whether to force deletion even if provider is in use
	Force *bool `protobuf:"varint,7,opt,name=force" json:"force,omitempty"`
	// Whether to create a final backup before deletion
	CreateBackup *bool `protobuf:"varint,8,opt,name=create_backup,json=createBackup" json:"create_backup,omitempty"`
	// Cleanup strategy to use
	CleanupStrategy *CleanupStrategy `protobuf:"varint,9,opt,name=cleanup_strategy,json=cleanupStrategy,enum=gcommon.v1.metrics.CleanupStrategy" json:"cleanup_strategy,omitempty"`
	// Whether to wait for ongoing operations to complete
	WaitForCompletion *bool `protobuf:"varint,10,opt,name=wait_for_completion,json=waitForCompletion" json:"wait_for_completion,omitempty"`
	// Maximum time to wait for operations to complete
	CompletionTimeout *string `protobuf:"bytes,11,opt,name=completion_timeout,json=completionTimeout" json:"completion_timeout,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeletionOptions) Reset() {
	*x = DeletionOptions{}
	mi := &file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionOptions) ProtoMessage() {}

func (x *DeletionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeletionOptions) GetDeleteData() bool {
	if x != nil && x.DeleteData != nil {
		return *x.DeleteData
	}
	return false
}

func (x *DeletionOptions) GetDeleteIndices() bool {
	if x != nil && x.DeleteIndices != nil {
		return *x.DeleteIndices
	}
	return false
}

func (x *DeletionOptions) GetDeleteBackups() bool {
	if x != nil && x.DeleteBackups != nil {
		return *x.DeleteBackups
	}
	return false
}

func (x *DeletionOptions) GetStopExports() bool {
	if x != nil && x.StopExports != nil {
		return *x.StopExports
	}
	return false
}

func (x *DeletionOptions) GetGracePeriod() string {
	if x != nil && x.GracePeriod != nil {
		return *x.GracePeriod
	}
	return ""
}

func (x *DeletionOptions) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *DeletionOptions) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

func (x *DeletionOptions) GetCreateBackup() bool {
	if x != nil && x.CreateBackup != nil {
		return *x.CreateBackup
	}
	return false
}

func (x *DeletionOptions) GetCleanupStrategy() CleanupStrategy {
	if x != nil && x.CleanupStrategy != nil {
		return *x.CleanupStrategy
	}
	return CleanupStrategy_CLEANUP_STRATEGY_UNSPECIFIED
}

func (x *DeletionOptions) GetWaitForCompletion() bool {
	if x != nil && x.WaitForCompletion != nil {
		return *x.WaitForCompletion
	}
	return false
}

func (x *DeletionOptions) GetCompletionTimeout() string {
	if x != nil && x.CompletionTimeout != nil {
		return *x.CompletionTimeout
	}
	return ""
}

func (x *DeletionOptions) SetDeleteData(v bool) {
	x.DeleteData = &v
}

func (x *DeletionOptions) SetDeleteIndices(v bool) {
	x.DeleteIndices = &v
}

func (x *DeletionOptions) SetDeleteBackups(v bool) {
	x.DeleteBackups = &v
}

func (x *DeletionOptions) SetStopExports(v bool) {
	x.StopExports = &v
}

func (x *DeletionOptions) SetGracePeriod(v string) {
	x.GracePeriod = &v
}

func (x *DeletionOptions) SetDryRun(v bool) {
	x.DryRun = &v
}

func (x *DeletionOptions) SetForce(v bool) {
	x.Force = &v
}

func (x *DeletionOptions) SetCreateBackup(v bool) {
	x.CreateBackup = &v
}

func (x *DeletionOptions) SetCleanupStrategy(v CleanupStrategy) {
	x.CleanupStrategy = &v
}

func (x *DeletionOptions) SetWaitForCompletion(v bool) {
	x.WaitForCompletion = &v
}

func (x *DeletionOptions) SetCompletionTimeout(v string) {
	x.CompletionTimeout = &v
}

func (x *DeletionOptions) HasDeleteData() bool {
	if x == nil {
		return false
	}
	return x.DeleteData != nil
}

func (x *DeletionOptions) HasDeleteIndices() bool {
	if x == nil {
		return false
	}
	return x.DeleteIndices != nil
}

func (x *DeletionOptions) HasDeleteBackups() bool {
	if x == nil {
		return false
	}
	return x.DeleteBackups != nil
}

func (x *DeletionOptions) HasStopExports() bool {
	if x == nil {
		return false
	}
	return x.StopExports != nil
}

func (x *DeletionOptions) HasGracePeriod() bool {
	if x == nil {
		return false
	}
	return x.GracePeriod != nil
}

func (x *DeletionOptions) HasDryRun() bool {
	if x == nil {
		return false
	}
	return x.DryRun != nil
}

func (x *DeletionOptions) HasForce() bool {
	if x == nil {
		return false
	}
	return x.Force != nil
}

func (x *DeletionOptions) HasCreateBackup() bool {
	if x == nil {
		return false
	}
	return x.CreateBackup != nil
}

func (x *DeletionOptions) HasCleanupStrategy() bool {
	if x == nil {
		return false
	}
	return x.CleanupStrategy != nil
}

func (x *DeletionOptions) HasWaitForCompletion() bool {
	if x == nil {
		return false
	}
	return x.WaitForCompletion != nil
}

func (x *DeletionOptions) HasCompletionTimeout() bool {
	if x == nil {
		return false
	}
	return x.CompletionTimeout != nil
}

func (x *DeletionOptions) ClearDeleteData() {
	x.DeleteData = nil
}

func (x *DeletionOptions) ClearDeleteIndices() {
	x.DeleteIndices = nil
}

func (x *DeletionOptions) ClearDeleteBackups() {
	x.DeleteBackups = nil
}

func (x *DeletionOptions) ClearStopExports() {
	x.StopExports = nil
}

func (x *DeletionOptions) ClearGracePeriod() {
	x.GracePeriod = nil
}

func (x *DeletionOptions) ClearDryRun() {
	x.DryRun = nil
}

func (x *DeletionOptions) ClearForce() {
	x.Force = nil
}

func (x *DeletionOptions) ClearCreateBackup() {
	x.CreateBackup = nil
}

func (x *DeletionOptions) ClearCleanupStrategy() {
	x.CleanupStrategy = nil
}

func (x *DeletionOptions) ClearWaitForCompletion() {
	x.WaitForCompletion = nil
}

func (x *DeletionOptions) ClearCompletionTimeout() {
	x.CompletionTimeout = nil
}

type DeletionOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to delete all associated data
	DeleteData *bool
	// Whether to delete associated indices
	DeleteIndices *bool
	// Whether to delete configuration backups
	DeleteBackups *bool
	// Whether to stop all exports before deletion
	StopExports *bool
	// Grace period before actual deletion
	GracePeriod *string
	// Whether to perform a dry run
	DryRun *bool
	// Whether to force deletion even if provider is in use
	Force *bool
	// Whether to create a final backup before deletion
	CreateBackup *bool
	// Cleanup strategy to use
	CleanupStrategy *CleanupStrategy
	// Whether to wait for ongoing operations to complete
	WaitForCompletion *bool
	// Maximum time to wait for operations to complete
	CompletionTimeout *string
}

func (b0 DeletionOptions_builder) Build() *DeletionOptions {
	m0 := &DeletionOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.DeleteData = b.DeleteData
	x.DeleteIndices = b.DeleteIndices
	x.DeleteBackups = b.DeleteBackups
	x.StopExports = b.StopExports
	x.GracePeriod = b.GracePeriod
	x.DryRun = b.DryRun
	x.Force = b.Force
	x.CreateBackup = b.CreateBackup
	x.CleanupStrategy = b.CleanupStrategy
	x.WaitForCompletion = b.WaitForCompletion
	x.CompletionTimeout = b.CompletionTimeout
	return m0
}

var File_pkg_metrics_proto_requests_delete_provider_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_delete_provider_request_proto_rawDesc = "" +
	"\n" +
	"8pkg/metrics/proto/requests/delete_provider_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a0pkg/common/proto/messages/request_metadata.proto\"\xb7\x01\n" +
	"\x15DeleteProviderRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12\x1f\n" +
	"\vprovider_id\x18\x02 \x01(\tR\n" +
	"providerId\x12=\n" +
	"\aoptions\x18\x03 \x01(\v2#.gcommon.v1.metrics.DeletionOptionsR\aoptions\"\xc9\x03\n" +
	"\x0fDeletionOptions\x12\x1f\n" +
	"\vdelete_data\x18\x01 \x01(\bR\n" +
	"deleteData\x12%\n" +
	"\x0edelete_indices\x18\x02 \x01(\bR\rdeleteIndices\x12%\n" +
	"\x0edelete_backups\x18\x03 \x01(\bR\rdeleteBackups\x12!\n" +
	"\fstop_exports\x18\x04 \x01(\bR\vstopExports\x12!\n" +
	"\fgrace_period\x18\x05 \x01(\tR\vgracePeriod\x12\x17\n" +
	"\adry_run\x18\x06 \x01(\bR\x06dryRun\x12\x14\n" +
	"\x05force\x18\a \x01(\bR\x05force\x12#\n" +
	"\rcreate_backup\x18\b \x01(\bR\fcreateBackup\x12N\n" +
	"\x10cleanup_strategy\x18\t \x01(\x0e2#.gcommon.v1.metrics.CleanupStrategyR\x0fcleanupStrategy\x12.\n" +
	"\x13wait_for_completion\x18\n" +
	" \x01(\bR\x11waitForCompletion\x12-\n" +
	"\x12completion_timeout\x18\v \x01(\tR\x11completionTimeout*\xb3\x01\n" +
	"\x0fCleanupStrategy\x12 \n" +
	"\x1cCLEANUP_STRATEGY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aCLEANUP_STRATEGY_IMMEDIATE\x10\x01\x12\x1d\n" +
	"\x19CLEANUP_STRATEGY_GRACEFUL\x10\x02\x12\x1f\n" +
	"\x1bCLEANUP_STRATEGY_BACKGROUND\x10\x03\x12\x1e\n" +
	"\x1aCLEANUP_STRATEGY_SCHEDULED\x10\x04B\xcc\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1aDeleteProviderRequestProtoP\x01Z$../../../../pkg/metrics/pb;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_delete_provider_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_requests_delete_provider_request_proto_goTypes = []any{
	(CleanupStrategy)(0),          // 0: gcommon.v1.metrics.CleanupStrategy
	(*DeleteProviderRequest)(nil), // 1: gcommon.v1.metrics.DeleteProviderRequest
	(*DeletionOptions)(nil),       // 2: gcommon.v1.metrics.DeletionOptions
	(*pb.RequestMetadata)(nil),    // 3: gcommon.v1.common.RequestMetadata
}
var file_pkg_metrics_proto_requests_delete_provider_request_proto_depIdxs = []int32{
	3, // 0: gcommon.v1.metrics.DeleteProviderRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	2, // 1: gcommon.v1.metrics.DeleteProviderRequest.options:type_name -> gcommon.v1.metrics.DeletionOptions
	0, // 2: gcommon.v1.metrics.DeletionOptions.cleanup_strategy:type_name -> gcommon.v1.metrics.CleanupStrategy
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_delete_provider_request_proto_init() }
func file_pkg_metrics_proto_requests_delete_provider_request_proto_init() {
	if File_pkg_metrics_proto_requests_delete_provider_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_delete_provider_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_delete_provider_request_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_delete_provider_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_delete_provider_request_proto_depIdxs,
		EnumInfos:         file_pkg_metrics_proto_requests_delete_provider_request_proto_enumTypes,
		MessageInfos:      file_pkg_metrics_proto_requests_delete_provider_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_delete_provider_request_proto = out.File
	file_pkg_metrics_proto_requests_delete_provider_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_delete_provider_request_proto_depIdxs = nil
}
