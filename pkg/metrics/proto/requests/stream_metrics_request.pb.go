// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/stream_metrics_request.proto

//go:build !protoopaque

package metricspb

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// StreamCompression defines compression options for streaming.
type StreamCompression int32

const (
	StreamCompression_STREAM_COMPRESSION_UNSPECIFIED StreamCompression = 0
	StreamCompression_STREAM_COMPRESSION_NONE        StreamCompression = 1
	StreamCompression_STREAM_COMPRESSION_GZIP        StreamCompression = 2
	StreamCompression_STREAM_COMPRESSION_SNAPPY      StreamCompression = 3
	StreamCompression_STREAM_COMPRESSION_LZ4         StreamCompression = 4
)

// Enum value maps for StreamCompression.
var (
	StreamCompression_name = map[int32]string{
		0: "STREAM_COMPRESSION_UNSPECIFIED",
		1: "STREAM_COMPRESSION_NONE",
		2: "STREAM_COMPRESSION_GZIP",
		3: "STREAM_COMPRESSION_SNAPPY",
		4: "STREAM_COMPRESSION_LZ4",
	}
	StreamCompression_value = map[string]int32{
		"STREAM_COMPRESSION_UNSPECIFIED": 0,
		"STREAM_COMPRESSION_NONE":        1,
		"STREAM_COMPRESSION_GZIP":        2,
		"STREAM_COMPRESSION_SNAPPY":      3,
		"STREAM_COMPRESSION_LZ4":         4,
	}
)

func (x StreamCompression) Enum() *StreamCompression {
	p := new(StreamCompression)
	*p = x
	return p
}

func (x StreamCompression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCompression) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[0].Descriptor()
}

func (StreamCompression) Type() protoreflect.EnumType {
	return &file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[0]
}

func (x StreamCompression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// StreamQOS defines quality of service levels for streaming.
type StreamQOS int32

const (
	StreamQOS_STREAM_QOS_UNSPECIFIED   StreamQOS = 0
	StreamQOS_STREAM_QOS_BEST_EFFORT   StreamQOS = 1
	StreamQOS_STREAM_QOS_AT_LEAST_ONCE StreamQOS = 2
	StreamQOS_STREAM_QOS_EXACTLY_ONCE  StreamQOS = 3
)

// Enum value maps for StreamQOS.
var (
	StreamQOS_name = map[int32]string{
		0: "STREAM_QOS_UNSPECIFIED",
		1: "STREAM_QOS_BEST_EFFORT",
		2: "STREAM_QOS_AT_LEAST_ONCE",
		3: "STREAM_QOS_EXACTLY_ONCE",
	}
	StreamQOS_value = map[string]int32{
		"STREAM_QOS_UNSPECIFIED":   0,
		"STREAM_QOS_BEST_EFFORT":   1,
		"STREAM_QOS_AT_LEAST_ONCE": 2,
		"STREAM_QOS_EXACTLY_ONCE":  3,
	}
)

func (x StreamQOS) Enum() *StreamQOS {
	p := new(StreamQOS)
	*p = x
	return p
}

func (x StreamQOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamQOS) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[1].Descriptor()
}

func (StreamQOS) Type() protoreflect.EnumType {
	return &file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[1]
}

func (x StreamQOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// BufferOverflowStrategy defines what to do when the buffer is full.
type BufferOverflowStrategy int32

const (
	BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED BufferOverflowStrategy = 0
	BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_DROP_OLDEST BufferOverflowStrategy = 1
	BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_DROP_NEWEST BufferOverflowStrategy = 2
	BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_BLOCK       BufferOverflowStrategy = 3
	BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_ERROR       BufferOverflowStrategy = 4
)

// Enum value maps for BufferOverflowStrategy.
var (
	BufferOverflowStrategy_name = map[int32]string{
		0: "BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED",
		1: "BUFFER_OVERFLOW_STRATEGY_DROP_OLDEST",
		2: "BUFFER_OVERFLOW_STRATEGY_DROP_NEWEST",
		3: "BUFFER_OVERFLOW_STRATEGY_BLOCK",
		4: "BUFFER_OVERFLOW_STRATEGY_ERROR",
	}
	BufferOverflowStrategy_value = map[string]int32{
		"BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED": 0,
		"BUFFER_OVERFLOW_STRATEGY_DROP_OLDEST": 1,
		"BUFFER_OVERFLOW_STRATEGY_DROP_NEWEST": 2,
		"BUFFER_OVERFLOW_STRATEGY_BLOCK":       3,
		"BUFFER_OVERFLOW_STRATEGY_ERROR":       4,
	}
)

func (x BufferOverflowStrategy) Enum() *BufferOverflowStrategy {
	p := new(BufferOverflowStrategy)
	*p = x
	return p
}

func (x BufferOverflowStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BufferOverflowStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[2].Descriptor()
}

func (BufferOverflowStrategy) Type() protoreflect.EnumType {
	return &file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes[2]
}

func (x BufferOverflowStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// *
// StreamMetricsRequest represents a request to stream metrics data in real-time.
// This enables continuous monitoring and real-time metric consumption.
type StreamMetricsRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Filter to determine which metrics to stream
	Filter *MetricFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// Streaming configuration options
	Options *StreamOptions `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	// Optional provider ID to stream from
	ProviderId *string `protobuf:"bytes,4,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Starting point for the stream
	Start *StreamStart `protobuf:"bytes,5,opt,name=start" json:"start,omitempty"`
	// Buffer configuration for the stream
	BufferConfig  *BufferConfig `protobuf:"bytes,6,opt,name=buffer_config,json=bufferConfig" json:"buffer_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetricsRequest) Reset() {
	*x = StreamMetricsRequest{}
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsRequest) ProtoMessage() {}

func (x *StreamMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StreamMetricsRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StreamMetricsRequest) GetFilter() *MetricFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *StreamMetricsRequest) GetOptions() *StreamOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StreamMetricsRequest) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *StreamMetricsRequest) GetStart() *StreamStart {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamMetricsRequest) GetBufferConfig() *BufferConfig {
	if x != nil {
		return x.BufferConfig
	}
	return nil
}

func (x *StreamMetricsRequest) SetMetadata(v *proto.RequestMetadata) {
	x.Metadata = v
}

func (x *StreamMetricsRequest) SetFilter(v *MetricFilter) {
	x.Filter = v
}

func (x *StreamMetricsRequest) SetOptions(v *StreamOptions) {
	x.Options = v
}

func (x *StreamMetricsRequest) SetProviderId(v string) {
	x.ProviderId = &v
}

func (x *StreamMetricsRequest) SetStart(v *StreamStart) {
	x.Start = v
}

func (x *StreamMetricsRequest) SetBufferConfig(v *BufferConfig) {
	x.BufferConfig = v
}

func (x *StreamMetricsRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *StreamMetricsRequest) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *StreamMetricsRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.Options != nil
}

func (x *StreamMetricsRequest) HasProviderId() bool {
	if x == nil {
		return false
	}
	return x.ProviderId != nil
}

func (x *StreamMetricsRequest) HasStart() bool {
	if x == nil {
		return false
	}
	return x.Start != nil
}

func (x *StreamMetricsRequest) HasBufferConfig() bool {
	if x == nil {
		return false
	}
	return x.BufferConfig != nil
}

func (x *StreamMetricsRequest) ClearMetadata() {
	x.Metadata = nil
}

func (x *StreamMetricsRequest) ClearFilter() {
	x.Filter = nil
}

func (x *StreamMetricsRequest) ClearOptions() {
	x.Options = nil
}

func (x *StreamMetricsRequest) ClearProviderId() {
	x.ProviderId = nil
}

func (x *StreamMetricsRequest) ClearStart() {
	x.Start = nil
}

func (x *StreamMetricsRequest) ClearBufferConfig() {
	x.BufferConfig = nil
}

type StreamMetricsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata
	// Filter to determine which metrics to stream
	Filter *MetricFilter
	// Streaming configuration options
	Options *StreamOptions
	// Optional provider ID to stream from
	ProviderId *string
	// Starting point for the stream
	Start *StreamStart
	// Buffer configuration for the stream
	BufferConfig *BufferConfig
}

func (b0 StreamMetricsRequest_builder) Build() *StreamMetricsRequest {
	m0 := &StreamMetricsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Metadata = b.Metadata
	x.Filter = b.Filter
	x.Options = b.Options
	x.ProviderId = b.ProviderId
	x.Start = b.Start
	x.BufferConfig = b.BufferConfig
	return m0
}

// *
// StreamOptions configures how metrics streaming should behave.
type StreamOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to include historical data or only new metrics
	IncludeHistorical *bool `protobuf:"varint,1,opt,name=include_historical,json=includeHistorical" json:"include_historical,omitempty"`
	// Maximum number of metrics to send per message
	BatchSize *int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// Maximum time to wait before sending a batch (milliseconds)
	BatchTimeoutMs *int32 `protobuf:"varint,3,opt,name=batch_timeout_ms,json=batchTimeoutMs" json:"batch_timeout_ms,omitempty"`
	// Whether to include metadata with each metric
	IncludeMetadata *bool `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata" json:"include_metadata,omitempty"`
	// Compression to use for the stream
	Compression *StreamCompression `protobuf:"varint,5,opt,name=compression,enum=gcommon.v1.metrics.StreamCompression" json:"compression,omitempty"`
	// Whether to send heartbeat messages during idle periods
	SendHeartbeats *bool `protobuf:"varint,6,opt,name=send_heartbeats,json=sendHeartbeats" json:"send_heartbeats,omitempty"`
	// Heartbeat interval (seconds)
	HeartbeatIntervalSeconds *int32 `protobuf:"varint,7,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	// Whether to automatically retry on errors
	AutoRetry *bool `protobuf:"varint,8,opt,name=auto_retry,json=autoRetry" json:"auto_retry,omitempty"`
	// Quality of service level
	Qos           *StreamQOS `protobuf:"varint,9,opt,name=qos,enum=gcommon.v1.metrics.StreamQOS" json:"qos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StreamOptions) GetIncludeHistorical() bool {
	if x != nil && x.IncludeHistorical != nil {
		return *x.IncludeHistorical
	}
	return false
}

func (x *StreamOptions) GetBatchSize() int32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *StreamOptions) GetBatchTimeoutMs() int32 {
	if x != nil && x.BatchTimeoutMs != nil {
		return *x.BatchTimeoutMs
	}
	return 0
}

func (x *StreamOptions) GetIncludeMetadata() bool {
	if x != nil && x.IncludeMetadata != nil {
		return *x.IncludeMetadata
	}
	return false
}

func (x *StreamOptions) GetCompression() StreamCompression {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return StreamCompression_STREAM_COMPRESSION_UNSPECIFIED
}

func (x *StreamOptions) GetSendHeartbeats() bool {
	if x != nil && x.SendHeartbeats != nil {
		return *x.SendHeartbeats
	}
	return false
}

func (x *StreamOptions) GetHeartbeatIntervalSeconds() int32 {
	if x != nil && x.HeartbeatIntervalSeconds != nil {
		return *x.HeartbeatIntervalSeconds
	}
	return 0
}

func (x *StreamOptions) GetAutoRetry() bool {
	if x != nil && x.AutoRetry != nil {
		return *x.AutoRetry
	}
	return false
}

func (x *StreamOptions) GetQos() StreamQOS {
	if x != nil && x.Qos != nil {
		return *x.Qos
	}
	return StreamQOS_STREAM_QOS_UNSPECIFIED
}

func (x *StreamOptions) SetIncludeHistorical(v bool) {
	x.IncludeHistorical = &v
}

func (x *StreamOptions) SetBatchSize(v int32) {
	x.BatchSize = &v
}

func (x *StreamOptions) SetBatchTimeoutMs(v int32) {
	x.BatchTimeoutMs = &v
}

func (x *StreamOptions) SetIncludeMetadata(v bool) {
	x.IncludeMetadata = &v
}

func (x *StreamOptions) SetCompression(v StreamCompression) {
	x.Compression = &v
}

func (x *StreamOptions) SetSendHeartbeats(v bool) {
	x.SendHeartbeats = &v
}

func (x *StreamOptions) SetHeartbeatIntervalSeconds(v int32) {
	x.HeartbeatIntervalSeconds = &v
}

func (x *StreamOptions) SetAutoRetry(v bool) {
	x.AutoRetry = &v
}

func (x *StreamOptions) SetQos(v StreamQOS) {
	x.Qos = &v
}

func (x *StreamOptions) HasIncludeHistorical() bool {
	if x == nil {
		return false
	}
	return x.IncludeHistorical != nil
}

func (x *StreamOptions) HasBatchSize() bool {
	if x == nil {
		return false
	}
	return x.BatchSize != nil
}

func (x *StreamOptions) HasBatchTimeoutMs() bool {
	if x == nil {
		return false
	}
	return x.BatchTimeoutMs != nil
}

func (x *StreamOptions) HasIncludeMetadata() bool {
	if x == nil {
		return false
	}
	return x.IncludeMetadata != nil
}

func (x *StreamOptions) HasCompression() bool {
	if x == nil {
		return false
	}
	return x.Compression != nil
}

func (x *StreamOptions) HasSendHeartbeats() bool {
	if x == nil {
		return false
	}
	return x.SendHeartbeats != nil
}

func (x *StreamOptions) HasHeartbeatIntervalSeconds() bool {
	if x == nil {
		return false
	}
	return x.HeartbeatIntervalSeconds != nil
}

func (x *StreamOptions) HasAutoRetry() bool {
	if x == nil {
		return false
	}
	return x.AutoRetry != nil
}

func (x *StreamOptions) HasQos() bool {
	if x == nil {
		return false
	}
	return x.Qos != nil
}

func (x *StreamOptions) ClearIncludeHistorical() {
	x.IncludeHistorical = nil
}

func (x *StreamOptions) ClearBatchSize() {
	x.BatchSize = nil
}

func (x *StreamOptions) ClearBatchTimeoutMs() {
	x.BatchTimeoutMs = nil
}

func (x *StreamOptions) ClearIncludeMetadata() {
	x.IncludeMetadata = nil
}

func (x *StreamOptions) ClearCompression() {
	x.Compression = nil
}

func (x *StreamOptions) ClearSendHeartbeats() {
	x.SendHeartbeats = nil
}

func (x *StreamOptions) ClearHeartbeatIntervalSeconds() {
	x.HeartbeatIntervalSeconds = nil
}

func (x *StreamOptions) ClearAutoRetry() {
	x.AutoRetry = nil
}

func (x *StreamOptions) ClearQos() {
	x.Qos = nil
}

type StreamOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to include historical data or only new metrics
	IncludeHistorical *bool
	// Maximum number of metrics to send per message
	BatchSize *int32
	// Maximum time to wait before sending a batch (milliseconds)
	BatchTimeoutMs *int32
	// Whether to include metadata with each metric
	IncludeMetadata *bool
	// Compression to use for the stream
	Compression *StreamCompression
	// Whether to send heartbeat messages during idle periods
	SendHeartbeats *bool
	// Heartbeat interval (seconds)
	HeartbeatIntervalSeconds *int32
	// Whether to automatically retry on errors
	AutoRetry *bool
	// Quality of service level
	Qos *StreamQOS
}

func (b0 StreamOptions_builder) Build() *StreamOptions {
	m0 := &StreamOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.IncludeHistorical = b.IncludeHistorical
	x.BatchSize = b.BatchSize
	x.BatchTimeoutMs = b.BatchTimeoutMs
	x.IncludeMetadata = b.IncludeMetadata
	x.Compression = b.Compression
	x.SendHeartbeats = b.SendHeartbeats
	x.HeartbeatIntervalSeconds = b.HeartbeatIntervalSeconds
	x.AutoRetry = b.AutoRetry
	x.Qos = b.Qos
	return m0
}

// *
// StreamStart defines where to start the stream.
type StreamStart struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Start from a specific timestamp
	FromTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_timestamp,json=fromTimestamp" json:"from_timestamp,omitempty"`
	// Start from the beginning of available data
	FromBeginning *bool `protobuf:"varint,2,opt,name=from_beginning,json=fromBeginning" json:"from_beginning,omitempty"`
	// Start from the current time (live streaming only)
	FromNow *bool `protobuf:"varint,3,opt,name=from_now,json=fromNow" json:"from_now,omitempty"`
	// Start from a specific offset or position
	FromOffset    *string `protobuf:"bytes,4,opt,name=from_offset,json=fromOffset" json:"from_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamStart) Reset() {
	*x = StreamStart{}
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStart) ProtoMessage() {}

func (x *StreamStart) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StreamStart) GetFromTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTimestamp
	}
	return nil
}

func (x *StreamStart) GetFromBeginning() bool {
	if x != nil && x.FromBeginning != nil {
		return *x.FromBeginning
	}
	return false
}

func (x *StreamStart) GetFromNow() bool {
	if x != nil && x.FromNow != nil {
		return *x.FromNow
	}
	return false
}

func (x *StreamStart) GetFromOffset() string {
	if x != nil && x.FromOffset != nil {
		return *x.FromOffset
	}
	return ""
}

func (x *StreamStart) SetFromTimestamp(v *timestamppb.Timestamp) {
	x.FromTimestamp = v
}

func (x *StreamStart) SetFromBeginning(v bool) {
	x.FromBeginning = &v
}

func (x *StreamStart) SetFromNow(v bool) {
	x.FromNow = &v
}

func (x *StreamStart) SetFromOffset(v string) {
	x.FromOffset = &v
}

func (x *StreamStart) HasFromTimestamp() bool {
	if x == nil {
		return false
	}
	return x.FromTimestamp != nil
}

func (x *StreamStart) HasFromBeginning() bool {
	if x == nil {
		return false
	}
	return x.FromBeginning != nil
}

func (x *StreamStart) HasFromNow() bool {
	if x == nil {
		return false
	}
	return x.FromNow != nil
}

func (x *StreamStart) HasFromOffset() bool {
	if x == nil {
		return false
	}
	return x.FromOffset != nil
}

func (x *StreamStart) ClearFromTimestamp() {
	x.FromTimestamp = nil
}

func (x *StreamStart) ClearFromBeginning() {
	x.FromBeginning = nil
}

func (x *StreamStart) ClearFromNow() {
	x.FromNow = nil
}

func (x *StreamStart) ClearFromOffset() {
	x.FromOffset = nil
}

type StreamStart_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Start from a specific timestamp
	FromTimestamp *timestamppb.Timestamp
	// Start from the beginning of available data
	FromBeginning *bool
	// Start from the current time (live streaming only)
	FromNow *bool
	// Start from a specific offset or position
	FromOffset *string
}

func (b0 StreamStart_builder) Build() *StreamStart {
	m0 := &StreamStart{}
	b, x := &b0, m0
	_, _ = b, x
	x.FromTimestamp = b.FromTimestamp
	x.FromBeginning = b.FromBeginning
	x.FromNow = b.FromNow
	x.FromOffset = b.FromOffset
	return m0
}

// *
// BufferConfig configures buffering behavior for the stream.
type BufferConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Maximum number of metrics to buffer
	MaxBufferSize *int32 `protobuf:"varint,1,opt,name=max_buffer_size,json=maxBufferSize" json:"max_buffer_size,omitempty"`
	// Buffer overflow strategy
	OverflowStrategy *BufferOverflowStrategy `protobuf:"varint,2,opt,name=overflow_strategy,json=overflowStrategy,enum=gcommon.v1.metrics.BufferOverflowStrategy" json:"overflow_strategy,omitempty"`
	// Whether to persist buffer to disk during streaming
	PersistBuffer *bool `protobuf:"varint,3,opt,name=persist_buffer,json=persistBuffer" json:"persist_buffer,omitempty"`
	// Maximum memory usage for buffering (bytes)
	MaxMemoryBytes *int64 `protobuf:"varint,4,opt,name=max_memory_bytes,json=maxMemoryBytes" json:"max_memory_bytes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BufferConfig) Reset() {
	*x = BufferConfig{}
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BufferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferConfig) ProtoMessage() {}

func (x *BufferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BufferConfig) GetMaxBufferSize() int32 {
	if x != nil && x.MaxBufferSize != nil {
		return *x.MaxBufferSize
	}
	return 0
}

func (x *BufferConfig) GetOverflowStrategy() BufferOverflowStrategy {
	if x != nil && x.OverflowStrategy != nil {
		return *x.OverflowStrategy
	}
	return BufferOverflowStrategy_BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED
}

func (x *BufferConfig) GetPersistBuffer() bool {
	if x != nil && x.PersistBuffer != nil {
		return *x.PersistBuffer
	}
	return false
}

func (x *BufferConfig) GetMaxMemoryBytes() int64 {
	if x != nil && x.MaxMemoryBytes != nil {
		return *x.MaxMemoryBytes
	}
	return 0
}

func (x *BufferConfig) SetMaxBufferSize(v int32) {
	x.MaxBufferSize = &v
}

func (x *BufferConfig) SetOverflowStrategy(v BufferOverflowStrategy) {
	x.OverflowStrategy = &v
}

func (x *BufferConfig) SetPersistBuffer(v bool) {
	x.PersistBuffer = &v
}

func (x *BufferConfig) SetMaxMemoryBytes(v int64) {
	x.MaxMemoryBytes = &v
}

func (x *BufferConfig) HasMaxBufferSize() bool {
	if x == nil {
		return false
	}
	return x.MaxBufferSize != nil
}

func (x *BufferConfig) HasOverflowStrategy() bool {
	if x == nil {
		return false
	}
	return x.OverflowStrategy != nil
}

func (x *BufferConfig) HasPersistBuffer() bool {
	if x == nil {
		return false
	}
	return x.PersistBuffer != nil
}

func (x *BufferConfig) HasMaxMemoryBytes() bool {
	if x == nil {
		return false
	}
	return x.MaxMemoryBytes != nil
}

func (x *BufferConfig) ClearMaxBufferSize() {
	x.MaxBufferSize = nil
}

func (x *BufferConfig) ClearOverflowStrategy() {
	x.OverflowStrategy = nil
}

func (x *BufferConfig) ClearPersistBuffer() {
	x.PersistBuffer = nil
}

func (x *BufferConfig) ClearMaxMemoryBytes() {
	x.MaxMemoryBytes = nil
}

type BufferConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum number of metrics to buffer
	MaxBufferSize *int32
	// Buffer overflow strategy
	OverflowStrategy *BufferOverflowStrategy
	// Whether to persist buffer to disk during streaming
	PersistBuffer *bool
	// Maximum memory usage for buffering (bytes)
	MaxMemoryBytes *int64
}

func (b0 BufferConfig_builder) Build() *BufferConfig {
	m0 := &BufferConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.MaxBufferSize = b.MaxBufferSize
	x.OverflowStrategy = b.OverflowStrategy
	x.PersistBuffer = b.PersistBuffer
	x.MaxMemoryBytes = b.MaxMemoryBytes
	return m0
}

var File_pkg_metrics_proto_requests_stream_metrics_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_stream_metrics_request_proto_rawDesc = "" +
	"\n" +
	"7pkg/metrics/proto/requests/stream_metrics_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a0pkg/common/proto/messages/request_metadata.proto\x1a.pkg/metrics/proto/messages/metric_filter.proto\"\xec\x02\n" +
	"\x14StreamMetricsRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x128\n" +
	"\x06filter\x18\x02 \x01(\v2 .gcommon.v1.metrics.MetricFilterR\x06filter\x12;\n" +
	"\aoptions\x18\x03 \x01(\v2!.gcommon.v1.metrics.StreamOptionsR\aoptions\x12\x1f\n" +
	"\vprovider_id\x18\x04 \x01(\tR\n" +
	"providerId\x125\n" +
	"\x05start\x18\x05 \x01(\v2\x1f.gcommon.v1.metrics.StreamStartR\x05start\x12E\n" +
	"\rbuffer_config\x18\x06 \x01(\v2 .gcommon.v1.metrics.BufferConfigR\fbufferConfig\"\xb2\x03\n" +
	"\rStreamOptions\x12-\n" +
	"\x12include_historical\x18\x01 \x01(\bR\x11includeHistorical\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05R\tbatchSize\x12(\n" +
	"\x10batch_timeout_ms\x18\x03 \x01(\x05R\x0ebatchTimeoutMs\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\x12G\n" +
	"\vcompression\x18\x05 \x01(\x0e2%.gcommon.v1.metrics.StreamCompressionR\vcompression\x12'\n" +
	"\x0fsend_heartbeats\x18\x06 \x01(\bR\x0esendHeartbeats\x12<\n" +
	"\x1aheartbeat_interval_seconds\x18\a \x01(\x05R\x18heartbeatIntervalSeconds\x12\x1d\n" +
	"\n" +
	"auto_retry\x18\b \x01(\bR\tautoRetry\x12/\n" +
	"\x03qos\x18\t \x01(\x0e2\x1d.gcommon.v1.metrics.StreamQOSR\x03qos\"\xb3\x01\n" +
	"\vStreamStart\x12A\n" +
	"\x0efrom_timestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\rfromTimestamp\x12%\n" +
	"\x0efrom_beginning\x18\x02 \x01(\bR\rfromBeginning\x12\x19\n" +
	"\bfrom_now\x18\x03 \x01(\bR\afromNow\x12\x1f\n" +
	"\vfrom_offset\x18\x04 \x01(\tR\n" +
	"fromOffset\"\xe0\x01\n" +
	"\fBufferConfig\x12&\n" +
	"\x0fmax_buffer_size\x18\x01 \x01(\x05R\rmaxBufferSize\x12W\n" +
	"\x11overflow_strategy\x18\x02 \x01(\x0e2*.gcommon.v1.metrics.BufferOverflowStrategyR\x10overflowStrategy\x12%\n" +
	"\x0epersist_buffer\x18\x03 \x01(\bR\rpersistBuffer\x12(\n" +
	"\x10max_memory_bytes\x18\x04 \x01(\x03R\x0emaxMemoryBytes*\xac\x01\n" +
	"\x11StreamCompression\x12\"\n" +
	"\x1eSTREAM_COMPRESSION_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17STREAM_COMPRESSION_NONE\x10\x01\x12\x1b\n" +
	"\x17STREAM_COMPRESSION_GZIP\x10\x02\x12\x1d\n" +
	"\x19STREAM_COMPRESSION_SNAPPY\x10\x03\x12\x1a\n" +
	"\x16STREAM_COMPRESSION_LZ4\x10\x04*~\n" +
	"\tStreamQOS\x12\x1a\n" +
	"\x16STREAM_QOS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16STREAM_QOS_BEST_EFFORT\x10\x01\x12\x1c\n" +
	"\x18STREAM_QOS_AT_LEAST_ONCE\x10\x02\x12\x1b\n" +
	"\x17STREAM_QOS_EXACTLY_ONCE\x10\x03*\xde\x01\n" +
	"\x16BufferOverflowStrategy\x12(\n" +
	"$BUFFER_OVERFLOW_STRATEGY_UNSPECIFIED\x10\x00\x12(\n" +
	"$BUFFER_OVERFLOW_STRATEGY_DROP_OLDEST\x10\x01\x12(\n" +
	"$BUFFER_OVERFLOW_STRATEGY_DROP_NEWEST\x10\x02\x12\"\n" +
	"\x1eBUFFER_OVERFLOW_STRATEGY_BLOCK\x10\x03\x12\"\n" +
	"\x1eBUFFER_OVERFLOW_STRATEGY_ERROR\x10\x04B\xdc\x01\n" +
	"\x16com.gcommon.v1.metricsB\x19StreamMetricsRequestProtoP\x01Z5github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_metrics_proto_requests_stream_metrics_request_proto_goTypes = []any{
	(StreamCompression)(0),        // 0: gcommon.v1.metrics.StreamCompression
	(StreamQOS)(0),                // 1: gcommon.v1.metrics.StreamQOS
	(BufferOverflowStrategy)(0),   // 2: gcommon.v1.metrics.BufferOverflowStrategy
	(*StreamMetricsRequest)(nil),  // 3: gcommon.v1.metrics.StreamMetricsRequest
	(*StreamOptions)(nil),         // 4: gcommon.v1.metrics.StreamOptions
	(*StreamStart)(nil),           // 5: gcommon.v1.metrics.StreamStart
	(*BufferConfig)(nil),          // 6: gcommon.v1.metrics.BufferConfig
	(*proto.RequestMetadata)(nil), // 7: gcommon.v1.common.RequestMetadata
	(*MetricFilter)(nil),          // 8: gcommon.v1.metrics.MetricFilter
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_requests_stream_metrics_request_proto_depIdxs = []int32{
	7, // 0: gcommon.v1.metrics.StreamMetricsRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	8, // 1: gcommon.v1.metrics.StreamMetricsRequest.filter:type_name -> gcommon.v1.metrics.MetricFilter
	4, // 2: gcommon.v1.metrics.StreamMetricsRequest.options:type_name -> gcommon.v1.metrics.StreamOptions
	5, // 3: gcommon.v1.metrics.StreamMetricsRequest.start:type_name -> gcommon.v1.metrics.StreamStart
	6, // 4: gcommon.v1.metrics.StreamMetricsRequest.buffer_config:type_name -> gcommon.v1.metrics.BufferConfig
	0, // 5: gcommon.v1.metrics.StreamOptions.compression:type_name -> gcommon.v1.metrics.StreamCompression
	1, // 6: gcommon.v1.metrics.StreamOptions.qos:type_name -> gcommon.v1.metrics.StreamQOS
	9, // 7: gcommon.v1.metrics.StreamStart.from_timestamp:type_name -> google.protobuf.Timestamp
	2, // 8: gcommon.v1.metrics.BufferConfig.overflow_strategy:type_name -> gcommon.v1.metrics.BufferOverflowStrategy
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_stream_metrics_request_proto_init() }
func file_pkg_metrics_proto_requests_stream_metrics_request_proto_init() {
	if File_pkg_metrics_proto_requests_stream_metrics_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_messages_metric_filter_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_stream_metrics_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_stream_metrics_request_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_stream_metrics_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_stream_metrics_request_proto_depIdxs,
		EnumInfos:         file_pkg_metrics_proto_requests_stream_metrics_request_proto_enumTypes,
		MessageInfos:      file_pkg_metrics_proto_requests_stream_metrics_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_stream_metrics_request_proto = out.File
	file_pkg_metrics_proto_requests_stream_metrics_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_stream_metrics_request_proto_depIdxs = nil
}
