// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/record_metric_request.proto

//go:build protoopaque

package metricspb

import (
	proto "../../../../pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RecordMetricRequest represents a request to record a single metric data point.
// This is the unified interface for recording any type of metric.
type RecordMetricRequest struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Metadata     *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata"`
	xxx_hidden_Metric       *MetricData            `protobuf:"bytes,2,opt,name=metric"`
	xxx_hidden_ProviderId   *string                `protobuf:"bytes,3,opt,name=provider_id,json=providerId"`
	xxx_hidden_Validate     bool                   `protobuf:"varint,4,opt,name=validate"`
	xxx_hidden_Timestamp    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp"`
	xxx_hidden_BatchContext *BatchContext          `protobuf:"bytes,6,opt,name=batch_context,json=batchContext"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RecordMetricRequest) Reset() {
	*x = RecordMetricRequest{}
	mi := &file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetricRequest) ProtoMessage() {}

func (x *RecordMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RecordMetricRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *RecordMetricRequest) GetMetric() *MetricData {
	if x != nil {
		return x.xxx_hidden_Metric
	}
	return nil
}

func (x *RecordMetricRequest) GetProviderId() string {
	if x != nil {
		if x.xxx_hidden_ProviderId != nil {
			return *x.xxx_hidden_ProviderId
		}
		return ""
	}
	return ""
}

func (x *RecordMetricRequest) GetValidate() bool {
	if x != nil {
		return x.xxx_hidden_Validate
	}
	return false
}

func (x *RecordMetricRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *RecordMetricRequest) GetBatchContext() *BatchContext {
	if x != nil {
		return x.xxx_hidden_BatchContext
	}
	return nil
}

func (x *RecordMetricRequest) SetMetadata(v *proto.RequestMetadata) {
	x.xxx_hidden_Metadata = v
}

func (x *RecordMetricRequest) SetMetric(v *MetricData) {
	x.xxx_hidden_Metric = v
}

func (x *RecordMetricRequest) SetProviderId(v string) {
	x.xxx_hidden_ProviderId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *RecordMetricRequest) SetValidate(v bool) {
	x.xxx_hidden_Validate = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *RecordMetricRequest) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *RecordMetricRequest) SetBatchContext(v *BatchContext) {
	x.xxx_hidden_BatchContext = v
}

func (x *RecordMetricRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *RecordMetricRequest) HasMetric() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metric != nil
}

func (x *RecordMetricRequest) HasProviderId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *RecordMetricRequest) HasValidate() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *RecordMetricRequest) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *RecordMetricRequest) HasBatchContext() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_BatchContext != nil
}

func (x *RecordMetricRequest) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

func (x *RecordMetricRequest) ClearMetric() {
	x.xxx_hidden_Metric = nil
}

func (x *RecordMetricRequest) ClearProviderId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_ProviderId = nil
}

func (x *RecordMetricRequest) ClearValidate() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Validate = false
}

func (x *RecordMetricRequest) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *RecordMetricRequest) ClearBatchContext() {
	x.xxx_hidden_BatchContext = nil
}

type RecordMetricRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata
	// The metric data to record
	Metric *MetricData
	// Optional provider ID to use for recording
	ProviderId *string
	// Whether to validate the metric before recording
	Validate *bool
	// Timestamp override (if not provided, current time is used)
	Timestamp *timestamppb.Timestamp
	// Batch context information (if this is part of a batch operation)
	BatchContext *BatchContext
}

func (b0 RecordMetricRequest_builder) Build() *RecordMetricRequest {
	m0 := &RecordMetricRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Metadata = b.Metadata
	x.xxx_hidden_Metric = b.Metric
	if b.ProviderId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_ProviderId = b.ProviderId
	}
	if b.Validate != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_Validate = *b.Validate
	}
	x.xxx_hidden_Timestamp = b.Timestamp
	x.xxx_hidden_BatchContext = b.BatchContext
	return m0
}

// *
// BatchContext provides information when this request is part of a batch operation.
type BatchContext struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_BatchId       *string                `protobuf:"bytes,1,opt,name=batch_id,json=batchId"`
	xxx_hidden_BatchPosition int32                  `protobuf:"varint,2,opt,name=batch_position,json=batchPosition"`
	xxx_hidden_BatchSize     int32                  `protobuf:"varint,3,opt,name=batch_size,json=batchSize"`
	xxx_hidden_IsLast        bool                   `protobuf:"varint,4,opt,name=is_last,json=isLast"`
	XXX_raceDetectHookData   protoimpl.RaceDetectHookData
	XXX_presence             [1]uint32
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BatchContext) Reset() {
	*x = BatchContext{}
	mi := &file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchContext) ProtoMessage() {}

func (x *BatchContext) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchContext) GetBatchId() string {
	if x != nil {
		if x.xxx_hidden_BatchId != nil {
			return *x.xxx_hidden_BatchId
		}
		return ""
	}
	return ""
}

func (x *BatchContext) GetBatchPosition() int32 {
	if x != nil {
		return x.xxx_hidden_BatchPosition
	}
	return 0
}

func (x *BatchContext) GetBatchSize() int32 {
	if x != nil {
		return x.xxx_hidden_BatchSize
	}
	return 0
}

func (x *BatchContext) GetIsLast() bool {
	if x != nil {
		return x.xxx_hidden_IsLast
	}
	return false
}

func (x *BatchContext) SetBatchId(v string) {
	x.xxx_hidden_BatchId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *BatchContext) SetBatchPosition(v int32) {
	x.xxx_hidden_BatchPosition = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *BatchContext) SetBatchSize(v int32) {
	x.xxx_hidden_BatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *BatchContext) SetIsLast(v bool) {
	x.xxx_hidden_IsLast = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *BatchContext) HasBatchId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchContext) HasBatchPosition() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BatchContext) HasBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchContext) HasIsLast() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *BatchContext) ClearBatchId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_BatchId = nil
}

func (x *BatchContext) ClearBatchPosition() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_BatchPosition = 0
}

func (x *BatchContext) ClearBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_BatchSize = 0
}

func (x *BatchContext) ClearIsLast() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_IsLast = false
}

type BatchContext_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique batch ID
	BatchId *string
	// Position in the batch (0-based)
	BatchPosition *int32
	// Total size of the batch
	BatchSize *int32
	// Whether this is the last item in the batch
	IsLast *bool
}

func (b0 BatchContext_builder) Build() *BatchContext {
	m0 := &BatchContext{}
	b, x := &b0, m0
	_, _ = b, x
	if b.BatchId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_BatchId = b.BatchId
	}
	if b.BatchPosition != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_BatchPosition = *b.BatchPosition
	}
	if b.BatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_BatchSize = *b.BatchSize
	}
	if b.IsLast != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_IsLast = *b.IsLast
	}
	return m0
}

var File_pkg_metrics_proto_requests_record_metric_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_record_metric_request_proto_rawDesc = "" +
	"\n" +
	"6pkg/metrics/proto/requests/record_metric_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a0pkg/common/proto/messages/request_metadata.proto\x1a,pkg/metrics/proto/messages/metric_data.proto\"\xcb\x02\n" +
	"\x13RecordMetricRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x126\n" +
	"\x06metric\x18\x02 \x01(\v2\x1e.gcommon.v1.metrics.MetricDataR\x06metric\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\tR\n" +
	"providerId\x12\x1a\n" +
	"\bvalidate\x18\x04 \x01(\bR\bvalidate\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12E\n" +
	"\rbatch_context\x18\x06 \x01(\v2 .gcommon.v1.metrics.BatchContextR\fbatchContext\"\x88\x01\n" +
	"\fBatchContext\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12%\n" +
	"\x0ebatch_position\x18\x02 \x01(\x05R\rbatchPosition\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x03 \x01(\x05R\tbatchSize\x12\x17\n" +
	"\ais_last\x18\x04 \x01(\bR\x06isLastB\xcd\x01\n" +
	"\x16com.gcommon.v1.metricsB\x18RecordMetricRequestProtoP\x01Z'../../../../pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_requests_record_metric_request_proto_goTypes = []any{
	(*RecordMetricRequest)(nil),   // 0: gcommon.v1.metrics.RecordMetricRequest
	(*BatchContext)(nil),          // 1: gcommon.v1.metrics.BatchContext
	(*proto.RequestMetadata)(nil), // 2: gcommon.v1.common.RequestMetadata
	(*MetricData)(nil),            // 3: gcommon.v1.metrics.MetricData
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_requests_record_metric_request_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.metrics.RecordMetricRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	3, // 1: gcommon.v1.metrics.RecordMetricRequest.metric:type_name -> gcommon.v1.metrics.MetricData
	4, // 2: gcommon.v1.metrics.RecordMetricRequest.timestamp:type_name -> google.protobuf.Timestamp
	1, // 3: gcommon.v1.metrics.RecordMetricRequest.batch_context:type_name -> gcommon.v1.metrics.BatchContext
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_record_metric_request_proto_init() }
func file_pkg_metrics_proto_requests_record_metric_request_proto_init() {
	if File_pkg_metrics_proto_requests_record_metric_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_messages_metric_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_record_metric_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_record_metric_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_record_metric_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_record_metric_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_requests_record_metric_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_record_metric_request_proto = out.File
	file_pkg_metrics_proto_requests_record_metric_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_record_metric_request_proto_depIdxs = nil
}
