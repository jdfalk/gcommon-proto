// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/record_histogram_request.proto

//go:build !protoopaque

package metricspb

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RecordHistogramRequest is used to record an observation in a histogram metric.
// Histograms track the distribution of values in configurable buckets.
type RecordHistogramRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Metric name (e.g., "request_duration_seconds", "response_size_bytes")
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Value to observe/record in the histogram
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	// Labels for metric dimensions
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Help text describing the metric
	Help *string `protobuf:"bytes,4,opt,name=help" json:"help,omitempty"`
	// Metric unit (e.g., "seconds", "bytes", "milliseconds")
	Unit *string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	// Histogram bucket configuration (if not already defined)
	Buckets []float64 `protobuf:"fixed64,6,rep,packed,name=buckets" json:"buckets,omitempty"`
	// Optional timestamp when the observation was made
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// Request metadata for tracing and debugging
	Metadata *proto.RequestMetadata `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	// Optional sample weight (for weighted observations)
	SampleWeight *float64 `protobuf:"fixed64,9,opt,name=sample_weight,json=sampleWeight" json:"sample_weight,omitempty"`
	// Whether to create the histogram if it doesn't exist
	CreateIfMissing *bool `protobuf:"varint,10,opt,name=create_if_missing,json=createIfMissing" json:"create_if_missing,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RecordHistogramRequest) Reset() {
	*x = RecordHistogramRequest{}
	mi := &file_pkg_metrics_proto_requests_record_histogram_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHistogramRequest) ProtoMessage() {}

func (x *RecordHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_record_histogram_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RecordHistogramRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RecordHistogramRequest) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *RecordHistogramRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RecordHistogramRequest) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

func (x *RecordHistogramRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *RecordHistogramRequest) GetBuckets() []float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *RecordHistogramRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RecordHistogramRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RecordHistogramRequest) GetSampleWeight() float64 {
	if x != nil && x.SampleWeight != nil {
		return *x.SampleWeight
	}
	return 0
}

func (x *RecordHistogramRequest) GetCreateIfMissing() bool {
	if x != nil && x.CreateIfMissing != nil {
		return *x.CreateIfMissing
	}
	return false
}

func (x *RecordHistogramRequest) SetName(v string) {
	x.Name = &v
}

func (x *RecordHistogramRequest) SetValue(v float64) {
	x.Value = &v
}

func (x *RecordHistogramRequest) SetLabels(v map[string]string) {
	x.Labels = v
}

func (x *RecordHistogramRequest) SetHelp(v string) {
	x.Help = &v
}

func (x *RecordHistogramRequest) SetUnit(v string) {
	x.Unit = &v
}

func (x *RecordHistogramRequest) SetBuckets(v []float64) {
	x.Buckets = v
}

func (x *RecordHistogramRequest) SetTimestamp(v *timestamppb.Timestamp) {
	x.Timestamp = v
}

func (x *RecordHistogramRequest) SetMetadata(v *proto.RequestMetadata) {
	x.Metadata = v
}

func (x *RecordHistogramRequest) SetSampleWeight(v float64) {
	x.SampleWeight = &v
}

func (x *RecordHistogramRequest) SetCreateIfMissing(v bool) {
	x.CreateIfMissing = &v
}

func (x *RecordHistogramRequest) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *RecordHistogramRequest) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *RecordHistogramRequest) HasHelp() bool {
	if x == nil {
		return false
	}
	return x.Help != nil
}

func (x *RecordHistogramRequest) HasUnit() bool {
	if x == nil {
		return false
	}
	return x.Unit != nil
}

func (x *RecordHistogramRequest) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.Timestamp != nil
}

func (x *RecordHistogramRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *RecordHistogramRequest) HasSampleWeight() bool {
	if x == nil {
		return false
	}
	return x.SampleWeight != nil
}

func (x *RecordHistogramRequest) HasCreateIfMissing() bool {
	if x == nil {
		return false
	}
	return x.CreateIfMissing != nil
}

func (x *RecordHistogramRequest) ClearName() {
	x.Name = nil
}

func (x *RecordHistogramRequest) ClearValue() {
	x.Value = nil
}

func (x *RecordHistogramRequest) ClearHelp() {
	x.Help = nil
}

func (x *RecordHistogramRequest) ClearUnit() {
	x.Unit = nil
}

func (x *RecordHistogramRequest) ClearTimestamp() {
	x.Timestamp = nil
}

func (x *RecordHistogramRequest) ClearMetadata() {
	x.Metadata = nil
}

func (x *RecordHistogramRequest) ClearSampleWeight() {
	x.SampleWeight = nil
}

func (x *RecordHistogramRequest) ClearCreateIfMissing() {
	x.CreateIfMissing = nil
}

type RecordHistogramRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Metric name (e.g., "request_duration_seconds", "response_size_bytes")
	Name *string
	// Value to observe/record in the histogram
	Value *float64
	// Labels for metric dimensions
	Labels map[string]string
	// Help text describing the metric
	Help *string
	// Metric unit (e.g., "seconds", "bytes", "milliseconds")
	Unit *string
	// Histogram bucket configuration (if not already defined)
	Buckets []float64
	// Optional timestamp when the observation was made
	Timestamp *timestamppb.Timestamp
	// Request metadata for tracing and debugging
	Metadata *proto.RequestMetadata
	// Optional sample weight (for weighted observations)
	SampleWeight *float64
	// Whether to create the histogram if it doesn't exist
	CreateIfMissing *bool
}

func (b0 RecordHistogramRequest_builder) Build() *RecordHistogramRequest {
	m0 := &RecordHistogramRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Value = b.Value
	x.Labels = b.Labels
	x.Help = b.Help
	x.Unit = b.Unit
	x.Buckets = b.Buckets
	x.Timestamp = b.Timestamp
	x.Metadata = b.Metadata
	x.SampleWeight = b.SampleWeight
	x.CreateIfMissing = b.CreateIfMissing
	return m0
}

var File_pkg_metrics_proto_requests_record_histogram_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_record_histogram_request_proto_rawDesc = "" +
	"\n" +
	"9pkg/metrics/proto/requests/record_histogram_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a0pkg/common/proto/messages/request_metadata.proto\"\xda\x03\n" +
	"\x16RecordHistogramRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12N\n" +
	"\x06labels\x18\x03 \x03(\v26.gcommon.v1.metrics.RecordHistogramRequest.LabelsEntryR\x06labels\x12\x12\n" +
	"\x04help\x18\x04 \x01(\tR\x04help\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x12\x18\n" +
	"\abuckets\x18\x06 \x03(\x01R\abuckets\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12>\n" +
	"\bmetadata\x18\b \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12#\n" +
	"\rsample_weight\x18\t \x01(\x01R\fsampleWeight\x12*\n" +
	"\x11create_if_missing\x18\n" +
	" \x01(\bR\x0fcreateIfMissing\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xde\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1bRecordHistogramRequestProtoP\x01Z5github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_record_histogram_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_requests_record_histogram_request_proto_goTypes = []any{
	(*RecordHistogramRequest)(nil), // 0: gcommon.v1.metrics.RecordHistogramRequest
	nil,                            // 1: gcommon.v1.metrics.RecordHistogramRequest.LabelsEntry
	(*timestamppb.Timestamp)(nil),  // 2: google.protobuf.Timestamp
	(*proto.RequestMetadata)(nil),  // 3: gcommon.v1.common.RequestMetadata
}
var file_pkg_metrics_proto_requests_record_histogram_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.RecordHistogramRequest.labels:type_name -> gcommon.v1.metrics.RecordHistogramRequest.LabelsEntry
	2, // 1: gcommon.v1.metrics.RecordHistogramRequest.timestamp:type_name -> google.protobuf.Timestamp
	3, // 2: gcommon.v1.metrics.RecordHistogramRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_record_histogram_request_proto_init() }
func file_pkg_metrics_proto_requests_record_histogram_request_proto_init() {
	if File_pkg_metrics_proto_requests_record_histogram_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_record_histogram_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_record_histogram_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_record_histogram_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_record_histogram_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_requests_record_histogram_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_record_histogram_request_proto = out.File
	file_pkg_metrics_proto_requests_record_histogram_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_record_histogram_request_proto_depIdxs = nil
}
