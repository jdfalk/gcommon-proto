// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/register_metric_request.proto

//go:build !protoopaque

package requests

import (
	messages "github.com/jdfalk/gcommon/pkg/common/proto/messages"
	enums "github.com/jdfalk/gcommon/pkg/metrics/proto/enums"
	types "github.com/jdfalk/gcommon/pkg/metrics/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RegisterMetricRequest represents a request to register a new metric definition.
// This creates a metric schema that can be used for validation and metadata.
type RegisterMetricRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *messages.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Metric definition to register
	Definition *MetricDefinition `protobuf:"bytes,2,opt,name=definition" json:"definition,omitempty"`
	// Optional provider ID to register with
	ProviderId *string `protobuf:"bytes,3,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Whether to replace an existing metric with the same name
	ReplaceExisting *bool `protobuf:"varint,4,opt,name=replace_existing,json=replaceExisting" json:"replace_existing,omitempty"`
	// Validation options for the registration
	Options       *RegistrationOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterMetricRequest) Reset() {
	*x = RegisterMetricRequest{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMetricRequest) ProtoMessage() {}

func (x *RegisterMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RegisterMetricRequest) GetMetadata() *messages.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterMetricRequest) GetDefinition() *MetricDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *RegisterMetricRequest) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *RegisterMetricRequest) GetReplaceExisting() bool {
	if x != nil && x.ReplaceExisting != nil {
		return *x.ReplaceExisting
	}
	return false
}

func (x *RegisterMetricRequest) GetOptions() *RegistrationOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RegisterMetricRequest) SetMetadata(v *messages.RequestMetadata) {
	x.Metadata = v
}

func (x *RegisterMetricRequest) SetDefinition(v *MetricDefinition) {
	x.Definition = v
}

func (x *RegisterMetricRequest) SetProviderId(v string) {
	x.ProviderId = &v
}

func (x *RegisterMetricRequest) SetReplaceExisting(v bool) {
	x.ReplaceExisting = &v
}

func (x *RegisterMetricRequest) SetOptions(v *RegistrationOptions) {
	x.Options = v
}

func (x *RegisterMetricRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *RegisterMetricRequest) HasDefinition() bool {
	if x == nil {
		return false
	}
	return x.Definition != nil
}

func (x *RegisterMetricRequest) HasProviderId() bool {
	if x == nil {
		return false
	}
	return x.ProviderId != nil
}

func (x *RegisterMetricRequest) HasReplaceExisting() bool {
	if x == nil {
		return false
	}
	return x.ReplaceExisting != nil
}

func (x *RegisterMetricRequest) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.Options != nil
}

func (x *RegisterMetricRequest) ClearMetadata() {
	x.Metadata = nil
}

func (x *RegisterMetricRequest) ClearDefinition() {
	x.Definition = nil
}

func (x *RegisterMetricRequest) ClearProviderId() {
	x.ProviderId = nil
}

func (x *RegisterMetricRequest) ClearReplaceExisting() {
	x.ReplaceExisting = nil
}

func (x *RegisterMetricRequest) ClearOptions() {
	x.Options = nil
}

type RegisterMetricRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *messages.RequestMetadata
	// Metric definition to register
	Definition *MetricDefinition
	// Optional provider ID to register with
	ProviderId *string
	// Whether to replace an existing metric with the same name
	ReplaceExisting *bool
	// Validation options for the registration
	Options *RegistrationOptions
}

func (b0 RegisterMetricRequest_builder) Build() *RegisterMetricRequest {
	m0 := &RegisterMetricRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Metadata = b.Metadata
	x.Definition = b.Definition
	x.ProviderId = b.ProviderId
	x.ReplaceExisting = b.ReplaceExisting
	x.Options = b.Options
	return m0
}

// *
// MetricDefinition contains the complete definition of a metric.
type MetricDefinition struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique name for the metric
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Type of metric (counter, gauge, histogram, etc.)
	Type *enums.MetricType `protobuf:"varint,2,opt,name=type,enum=gcommon.v1.metrics.MetricType" json:"type,omitempty"`
	// Human-readable description
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Unit of measurement (e.g., "bytes", "requests", "seconds")
	Unit *string `protobuf:"bytes,4,opt,name=unit" json:"unit,omitempty"`
	// Labels that this metric supports
	Labels []*LabelDefinition `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty"`
	// Metric-specific configuration
	Config *MetricConfig `protobuf:"bytes,6,opt,name=config" json:"config,omitempty"`
	// Retention policy for this metric
	Retention *types.RetentionPolicyConfig `protobuf:"bytes,7,opt,name=retention" json:"retention,omitempty"`
	// Export configuration for this metric
	ExportConfig *types.ExportConfig `protobuf:"bytes,8,opt,name=export_config,json=exportConfig" json:"export_config,omitempty"`
	// Validation rules for metric values
	Validation *ValidationRules `protobuf:"bytes,9,opt,name=validation" json:"validation,omitempty"`
	// Tags for metric organization and discovery
	Tags          map[string]string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricDefinition) Reset() {
	*x = MetricDefinition{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDefinition) ProtoMessage() {}

func (x *MetricDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricDefinition) GetType() enums.MetricType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return enums.MetricType(0)
}

func (x *MetricDefinition) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MetricDefinition) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *MetricDefinition) GetLabels() []*LabelDefinition {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricDefinition) GetConfig() *MetricConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MetricDefinition) GetRetention() *types.RetentionPolicyConfig {
	if x != nil {
		return x.Retention
	}
	return nil
}

func (x *MetricDefinition) GetExportConfig() *types.ExportConfig {
	if x != nil {
		return x.ExportConfig
	}
	return nil
}

func (x *MetricDefinition) GetValidation() *ValidationRules {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *MetricDefinition) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MetricDefinition) SetName(v string) {
	x.Name = &v
}

func (x *MetricDefinition) SetType(v enums.MetricType) {
	x.Type = &v
}

func (x *MetricDefinition) SetDescription(v string) {
	x.Description = &v
}

func (x *MetricDefinition) SetUnit(v string) {
	x.Unit = &v
}

func (x *MetricDefinition) SetLabels(v []*LabelDefinition) {
	x.Labels = v
}

func (x *MetricDefinition) SetConfig(v *MetricConfig) {
	x.Config = v
}

func (x *MetricDefinition) SetRetention(v *types.RetentionPolicyConfig) {
	x.Retention = v
}

func (x *MetricDefinition) SetExportConfig(v *types.ExportConfig) {
	x.ExportConfig = v
}

func (x *MetricDefinition) SetValidation(v *ValidationRules) {
	x.Validation = v
}

func (x *MetricDefinition) SetTags(v map[string]string) {
	x.Tags = v
}

func (x *MetricDefinition) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MetricDefinition) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *MetricDefinition) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *MetricDefinition) HasUnit() bool {
	if x == nil {
		return false
	}
	return x.Unit != nil
}

func (x *MetricDefinition) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.Config != nil
}

func (x *MetricDefinition) HasRetention() bool {
	if x == nil {
		return false
	}
	return x.Retention != nil
}

func (x *MetricDefinition) HasExportConfig() bool {
	if x == nil {
		return false
	}
	return x.ExportConfig != nil
}

func (x *MetricDefinition) HasValidation() bool {
	if x == nil {
		return false
	}
	return x.Validation != nil
}

func (x *MetricDefinition) ClearName() {
	x.Name = nil
}

func (x *MetricDefinition) ClearType() {
	x.Type = nil
}

func (x *MetricDefinition) ClearDescription() {
	x.Description = nil
}

func (x *MetricDefinition) ClearUnit() {
	x.Unit = nil
}

func (x *MetricDefinition) ClearConfig() {
	x.Config = nil
}

func (x *MetricDefinition) ClearRetention() {
	x.Retention = nil
}

func (x *MetricDefinition) ClearExportConfig() {
	x.ExportConfig = nil
}

func (x *MetricDefinition) ClearValidation() {
	x.Validation = nil
}

type MetricDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique name for the metric
	Name *string
	// Type of metric (counter, gauge, histogram, etc.)
	Type *enums.MetricType
	// Human-readable description
	Description *string
	// Unit of measurement (e.g., "bytes", "requests", "seconds")
	Unit *string
	// Labels that this metric supports
	Labels []*LabelDefinition
	// Metric-specific configuration
	Config *MetricConfig
	// Retention policy for this metric
	Retention *types.RetentionPolicyConfig
	// Export configuration for this metric
	ExportConfig *types.ExportConfig
	// Validation rules for metric values
	Validation *ValidationRules
	// Tags for metric organization and discovery
	Tags map[string]string
}

func (b0 MetricDefinition_builder) Build() *MetricDefinition {
	m0 := &MetricDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Type = b.Type
	x.Description = b.Description
	x.Unit = b.Unit
	x.Labels = b.Labels
	x.Config = b.Config
	x.Retention = b.Retention
	x.ExportConfig = b.ExportConfig
	x.Validation = b.Validation
	x.Tags = b.Tags
	return m0
}

// *
// LabelDefinition defines a label that can be attached to the metric.
type LabelDefinition struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Name of the label
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Description of what this label represents
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Whether this label is required
	Required *bool `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	// Allowed values for this label (empty = any value allowed)
	AllowedValues []string `protobuf:"bytes,4,rep,name=allowed_values,json=allowedValues" json:"allowed_values,omitempty"`
	// Pattern for validating label values (regex)
	ValidationPattern *string `protobuf:"bytes,5,opt,name=validation_pattern,json=validationPattern" json:"validation_pattern,omitempty"`
	// Default value if not specified
	DefaultValue  *string `protobuf:"bytes,6,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelDefinition) Reset() {
	*x = LabelDefinition{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelDefinition) ProtoMessage() {}

func (x *LabelDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *LabelDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LabelDefinition) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *LabelDefinition) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *LabelDefinition) GetAllowedValues() []string {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

func (x *LabelDefinition) GetValidationPattern() string {
	if x != nil && x.ValidationPattern != nil {
		return *x.ValidationPattern
	}
	return ""
}

func (x *LabelDefinition) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *LabelDefinition) SetName(v string) {
	x.Name = &v
}

func (x *LabelDefinition) SetDescription(v string) {
	x.Description = &v
}

func (x *LabelDefinition) SetRequired(v bool) {
	x.Required = &v
}

func (x *LabelDefinition) SetAllowedValues(v []string) {
	x.AllowedValues = v
}

func (x *LabelDefinition) SetValidationPattern(v string) {
	x.ValidationPattern = &v
}

func (x *LabelDefinition) SetDefaultValue(v string) {
	x.DefaultValue = &v
}

func (x *LabelDefinition) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *LabelDefinition) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *LabelDefinition) HasRequired() bool {
	if x == nil {
		return false
	}
	return x.Required != nil
}

func (x *LabelDefinition) HasValidationPattern() bool {
	if x == nil {
		return false
	}
	return x.ValidationPattern != nil
}

func (x *LabelDefinition) HasDefaultValue() bool {
	if x == nil {
		return false
	}
	return x.DefaultValue != nil
}

func (x *LabelDefinition) ClearName() {
	x.Name = nil
}

func (x *LabelDefinition) ClearDescription() {
	x.Description = nil
}

func (x *LabelDefinition) ClearRequired() {
	x.Required = nil
}

func (x *LabelDefinition) ClearValidationPattern() {
	x.ValidationPattern = nil
}

func (x *LabelDefinition) ClearDefaultValue() {
	x.DefaultValue = nil
}

type LabelDefinition_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Name of the label
	Name *string
	// Description of what this label represents
	Description *string
	// Whether this label is required
	Required *bool
	// Allowed values for this label (empty = any value allowed)
	AllowedValues []string
	// Pattern for validating label values (regex)
	ValidationPattern *string
	// Default value if not specified
	DefaultValue *string
}

func (b0 LabelDefinition_builder) Build() *LabelDefinition {
	m0 := &LabelDefinition{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Description = b.Description
	x.Required = b.Required
	x.AllowedValues = b.AllowedValues
	x.ValidationPattern = b.ValidationPattern
	x.DefaultValue = b.DefaultValue
	return m0
}

// *
// MetricConfig contains type-specific configuration for metrics.
type MetricConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Configuration for histogram metrics
	Histogram *HistogramConfig `protobuf:"bytes,1,opt,name=histogram" json:"histogram,omitempty"`
	// Configuration for summary metrics
	Summary *SummaryConfig `protobuf:"bytes,2,opt,name=summary" json:"summary,omitempty"`
	// Configuration for gauge metrics
	Gauge *GaugeConfig `protobuf:"bytes,3,opt,name=gauge" json:"gauge,omitempty"`
	// Configuration for counter metrics
	Counter       *CounterConfig `protobuf:"bytes,4,opt,name=counter" json:"counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricConfig) Reset() {
	*x = MetricConfig{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricConfig) ProtoMessage() {}

func (x *MetricConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricConfig) GetHistogram() *HistogramConfig {
	if x != nil {
		return x.Histogram
	}
	return nil
}

func (x *MetricConfig) GetSummary() *SummaryConfig {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *MetricConfig) GetGauge() *GaugeConfig {
	if x != nil {
		return x.Gauge
	}
	return nil
}

func (x *MetricConfig) GetCounter() *CounterConfig {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *MetricConfig) SetHistogram(v *HistogramConfig) {
	x.Histogram = v
}

func (x *MetricConfig) SetSummary(v *SummaryConfig) {
	x.Summary = v
}

func (x *MetricConfig) SetGauge(v *GaugeConfig) {
	x.Gauge = v
}

func (x *MetricConfig) SetCounter(v *CounterConfig) {
	x.Counter = v
}

func (x *MetricConfig) HasHistogram() bool {
	if x == nil {
		return false
	}
	return x.Histogram != nil
}

func (x *MetricConfig) HasSummary() bool {
	if x == nil {
		return false
	}
	return x.Summary != nil
}

func (x *MetricConfig) HasGauge() bool {
	if x == nil {
		return false
	}
	return x.Gauge != nil
}

func (x *MetricConfig) HasCounter() bool {
	if x == nil {
		return false
	}
	return x.Counter != nil
}

func (x *MetricConfig) ClearHistogram() {
	x.Histogram = nil
}

func (x *MetricConfig) ClearSummary() {
	x.Summary = nil
}

func (x *MetricConfig) ClearGauge() {
	x.Gauge = nil
}

func (x *MetricConfig) ClearCounter() {
	x.Counter = nil
}

type MetricConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Configuration for histogram metrics
	Histogram *HistogramConfig
	// Configuration for summary metrics
	Summary *SummaryConfig
	// Configuration for gauge metrics
	Gauge *GaugeConfig
	// Configuration for counter metrics
	Counter *CounterConfig
}

func (b0 MetricConfig_builder) Build() *MetricConfig {
	m0 := &MetricConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Histogram = b.Histogram
	x.Summary = b.Summary
	x.Gauge = b.Gauge
	x.Counter = b.Counter
	return m0
}

// *
// HistogramConfig contains configuration specific to histogram metrics.
type HistogramConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Predefined buckets for the histogram
	Buckets []float64 `protobuf:"fixed64,1,rep,packed,name=buckets" json:"buckets,omitempty"`
	// Whether to automatically adjust buckets based on data
	AutoBuckets *bool `protobuf:"varint,2,opt,name=auto_buckets,json=autoBuckets" json:"auto_buckets,omitempty"`
	// Maximum number of buckets to maintain
	MaxBuckets    *int32 `protobuf:"varint,3,opt,name=max_buckets,json=maxBuckets" json:"max_buckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramConfig) Reset() {
	*x = HistogramConfig{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramConfig) ProtoMessage() {}

func (x *HistogramConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HistogramConfig) GetBuckets() []float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *HistogramConfig) GetAutoBuckets() bool {
	if x != nil && x.AutoBuckets != nil {
		return *x.AutoBuckets
	}
	return false
}

func (x *HistogramConfig) GetMaxBuckets() int32 {
	if x != nil && x.MaxBuckets != nil {
		return *x.MaxBuckets
	}
	return 0
}

func (x *HistogramConfig) SetBuckets(v []float64) {
	x.Buckets = v
}

func (x *HistogramConfig) SetAutoBuckets(v bool) {
	x.AutoBuckets = &v
}

func (x *HistogramConfig) SetMaxBuckets(v int32) {
	x.MaxBuckets = &v
}

func (x *HistogramConfig) HasAutoBuckets() bool {
	if x == nil {
		return false
	}
	return x.AutoBuckets != nil
}

func (x *HistogramConfig) HasMaxBuckets() bool {
	if x == nil {
		return false
	}
	return x.MaxBuckets != nil
}

func (x *HistogramConfig) ClearAutoBuckets() {
	x.AutoBuckets = nil
}

func (x *HistogramConfig) ClearMaxBuckets() {
	x.MaxBuckets = nil
}

type HistogramConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Predefined buckets for the histogram
	Buckets []float64
	// Whether to automatically adjust buckets based on data
	AutoBuckets *bool
	// Maximum number of buckets to maintain
	MaxBuckets *int32
}

func (b0 HistogramConfig_builder) Build() *HistogramConfig {
	m0 := &HistogramConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Buckets = b.Buckets
	x.AutoBuckets = b.AutoBuckets
	x.MaxBuckets = b.MaxBuckets
	return m0
}

// *
// SummaryConfig contains configuration specific to summary metrics.
type SummaryConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Quantiles to calculate (e.g., 0.5, 0.95, 0.99)
	Quantiles []float64 `protobuf:"fixed64,1,rep,packed,name=quantiles" json:"quantiles,omitempty"`
	// Time window for calculating quantiles
	TimeWindow *string `protobuf:"bytes,2,opt,name=time_window,json=timeWindow" json:"time_window,omitempty"`
	// Maximum age of observations to include
	MaxAge        *string `protobuf:"bytes,3,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryConfig) Reset() {
	*x = SummaryConfig{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryConfig) ProtoMessage() {}

func (x *SummaryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SummaryConfig) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *SummaryConfig) GetTimeWindow() string {
	if x != nil && x.TimeWindow != nil {
		return *x.TimeWindow
	}
	return ""
}

func (x *SummaryConfig) GetMaxAge() string {
	if x != nil && x.MaxAge != nil {
		return *x.MaxAge
	}
	return ""
}

func (x *SummaryConfig) SetQuantiles(v []float64) {
	x.Quantiles = v
}

func (x *SummaryConfig) SetTimeWindow(v string) {
	x.TimeWindow = &v
}

func (x *SummaryConfig) SetMaxAge(v string) {
	x.MaxAge = &v
}

func (x *SummaryConfig) HasTimeWindow() bool {
	if x == nil {
		return false
	}
	return x.TimeWindow != nil
}

func (x *SummaryConfig) HasMaxAge() bool {
	if x == nil {
		return false
	}
	return x.MaxAge != nil
}

func (x *SummaryConfig) ClearTimeWindow() {
	x.TimeWindow = nil
}

func (x *SummaryConfig) ClearMaxAge() {
	x.MaxAge = nil
}

type SummaryConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Quantiles to calculate (e.g., 0.5, 0.95, 0.99)
	Quantiles []float64
	// Time window for calculating quantiles
	TimeWindow *string
	// Maximum age of observations to include
	MaxAge *string
}

func (b0 SummaryConfig_builder) Build() *SummaryConfig {
	m0 := &SummaryConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Quantiles = b.Quantiles
	x.TimeWindow = b.TimeWindow
	x.MaxAge = b.MaxAge
	return m0
}

// *
// GaugeConfig contains configuration specific to gauge metrics.
type GaugeConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Minimum allowed value
	MinValue *float64 `protobuf:"fixed64,1,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Maximum allowed value
	MaxValue *float64 `protobuf:"fixed64,2,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Whether the gauge can go negative
	AllowNegative *bool `protobuf:"varint,3,opt,name=allow_negative,json=allowNegative" json:"allow_negative,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GaugeConfig) Reset() {
	*x = GaugeConfig{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GaugeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaugeConfig) ProtoMessage() {}

func (x *GaugeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GaugeConfig) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *GaugeConfig) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *GaugeConfig) GetAllowNegative() bool {
	if x != nil && x.AllowNegative != nil {
		return *x.AllowNegative
	}
	return false
}

func (x *GaugeConfig) SetMinValue(v float64) {
	x.MinValue = &v
}

func (x *GaugeConfig) SetMaxValue(v float64) {
	x.MaxValue = &v
}

func (x *GaugeConfig) SetAllowNegative(v bool) {
	x.AllowNegative = &v
}

func (x *GaugeConfig) HasMinValue() bool {
	if x == nil {
		return false
	}
	return x.MinValue != nil
}

func (x *GaugeConfig) HasMaxValue() bool {
	if x == nil {
		return false
	}
	return x.MaxValue != nil
}

func (x *GaugeConfig) HasAllowNegative() bool {
	if x == nil {
		return false
	}
	return x.AllowNegative != nil
}

func (x *GaugeConfig) ClearMinValue() {
	x.MinValue = nil
}

func (x *GaugeConfig) ClearMaxValue() {
	x.MaxValue = nil
}

func (x *GaugeConfig) ClearAllowNegative() {
	x.AllowNegative = nil
}

type GaugeConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Minimum allowed value
	MinValue *float64
	// Maximum allowed value
	MaxValue *float64
	// Whether the gauge can go negative
	AllowNegative *bool
}

func (b0 GaugeConfig_builder) Build() *GaugeConfig {
	m0 := &GaugeConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.MinValue = b.MinValue
	x.MaxValue = b.MaxValue
	x.AllowNegative = b.AllowNegative
	return m0
}

// *
// CounterConfig contains configuration specific to counter metrics.
type CounterConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Starting value for the counter
	InitialValue *float64 `protobuf:"fixed64,1,opt,name=initial_value,json=initialValue" json:"initial_value,omitempty"`
	// Whether the counter can be reset
	AllowReset *bool `protobuf:"varint,2,opt,name=allow_reset,json=allowReset" json:"allow_reset,omitempty"`
	// Maximum value before rolling over
	MaxValue      *float64 `protobuf:"fixed64,3,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterConfig) Reset() {
	*x = CounterConfig{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterConfig) ProtoMessage() {}

func (x *CounterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CounterConfig) GetInitialValue() float64 {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return 0
}

func (x *CounterConfig) GetAllowReset() bool {
	if x != nil && x.AllowReset != nil {
		return *x.AllowReset
	}
	return false
}

func (x *CounterConfig) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *CounterConfig) SetInitialValue(v float64) {
	x.InitialValue = &v
}

func (x *CounterConfig) SetAllowReset(v bool) {
	x.AllowReset = &v
}

func (x *CounterConfig) SetMaxValue(v float64) {
	x.MaxValue = &v
}

func (x *CounterConfig) HasInitialValue() bool {
	if x == nil {
		return false
	}
	return x.InitialValue != nil
}

func (x *CounterConfig) HasAllowReset() bool {
	if x == nil {
		return false
	}
	return x.AllowReset != nil
}

func (x *CounterConfig) HasMaxValue() bool {
	if x == nil {
		return false
	}
	return x.MaxValue != nil
}

func (x *CounterConfig) ClearInitialValue() {
	x.InitialValue = nil
}

func (x *CounterConfig) ClearAllowReset() {
	x.AllowReset = nil
}

func (x *CounterConfig) ClearMaxValue() {
	x.MaxValue = nil
}

type CounterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Starting value for the counter
	InitialValue *float64
	// Whether the counter can be reset
	AllowReset *bool
	// Maximum value before rolling over
	MaxValue *float64
}

func (b0 CounterConfig_builder) Build() *CounterConfig {
	m0 := &CounterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.InitialValue = b.InitialValue
	x.AllowReset = b.AllowReset
	x.MaxValue = b.MaxValue
	return m0
}

// *
// ValidationRules define validation rules for metric values.
type ValidationRules struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Minimum allowed value
	MinValue *float64 `protobuf:"fixed64,1,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Maximum allowed value
	MaxValue *float64 `protobuf:"fixed64,2,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Whether null/zero values are allowed
	AllowNull *bool `protobuf:"varint,3,opt,name=allow_null,json=allowNull" json:"allow_null,omitempty"`
	// Custom validation expressions
	ValidationExpressions []string `protobuf:"bytes,4,rep,name=validation_expressions,json=validationExpressions" json:"validation_expressions,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ValidationRules) Reset() {
	*x = ValidationRules{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRules) ProtoMessage() {}

func (x *ValidationRules) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ValidationRules) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *ValidationRules) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *ValidationRules) GetAllowNull() bool {
	if x != nil && x.AllowNull != nil {
		return *x.AllowNull
	}
	return false
}

func (x *ValidationRules) GetValidationExpressions() []string {
	if x != nil {
		return x.ValidationExpressions
	}
	return nil
}

func (x *ValidationRules) SetMinValue(v float64) {
	x.MinValue = &v
}

func (x *ValidationRules) SetMaxValue(v float64) {
	x.MaxValue = &v
}

func (x *ValidationRules) SetAllowNull(v bool) {
	x.AllowNull = &v
}

func (x *ValidationRules) SetValidationExpressions(v []string) {
	x.ValidationExpressions = v
}

func (x *ValidationRules) HasMinValue() bool {
	if x == nil {
		return false
	}
	return x.MinValue != nil
}

func (x *ValidationRules) HasMaxValue() bool {
	if x == nil {
		return false
	}
	return x.MaxValue != nil
}

func (x *ValidationRules) HasAllowNull() bool {
	if x == nil {
		return false
	}
	return x.AllowNull != nil
}

func (x *ValidationRules) ClearMinValue() {
	x.MinValue = nil
}

func (x *ValidationRules) ClearMaxValue() {
	x.MaxValue = nil
}

func (x *ValidationRules) ClearAllowNull() {
	x.AllowNull = nil
}

type ValidationRules_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Minimum allowed value
	MinValue *float64
	// Maximum allowed value
	MaxValue *float64
	// Whether null/zero values are allowed
	AllowNull *bool
	// Custom validation expressions
	ValidationExpressions []string
}

func (b0 ValidationRules_builder) Build() *ValidationRules {
	m0 := &ValidationRules{}
	b, x := &b0, m0
	_, _ = b, x
	x.MinValue = b.MinValue
	x.MaxValue = b.MaxValue
	x.AllowNull = b.AllowNull
	x.ValidationExpressions = b.ValidationExpressions
	return m0
}

// *
// RegistrationOptions configure the registration process.
type RegistrationOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to validate the definition before registration
	ValidateDefinition *bool `protobuf:"varint,1,opt,name=validate_definition,json=validateDefinition" json:"validate_definition,omitempty"`
	// Whether to perform a dry run (validation only)
	DryRun *bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	// Whether to create indices for efficient querying
	CreateIndices *bool `protobuf:"varint,3,opt,name=create_indices,json=createIndices" json:"create_indices,omitempty"`
	// Whether to enable real-time alerts for this metric
	EnableAlerting *bool `protobuf:"varint,4,opt,name=enable_alerting,json=enableAlerting" json:"enable_alerting,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegistrationOptions) Reset() {
	*x = RegistrationOptions{}
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationOptions) ProtoMessage() {}

func (x *RegistrationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RegistrationOptions) GetValidateDefinition() bool {
	if x != nil && x.ValidateDefinition != nil {
		return *x.ValidateDefinition
	}
	return false
}

func (x *RegistrationOptions) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *RegistrationOptions) GetCreateIndices() bool {
	if x != nil && x.CreateIndices != nil {
		return *x.CreateIndices
	}
	return false
}

func (x *RegistrationOptions) GetEnableAlerting() bool {
	if x != nil && x.EnableAlerting != nil {
		return *x.EnableAlerting
	}
	return false
}

func (x *RegistrationOptions) SetValidateDefinition(v bool) {
	x.ValidateDefinition = &v
}

func (x *RegistrationOptions) SetDryRun(v bool) {
	x.DryRun = &v
}

func (x *RegistrationOptions) SetCreateIndices(v bool) {
	x.CreateIndices = &v
}

func (x *RegistrationOptions) SetEnableAlerting(v bool) {
	x.EnableAlerting = &v
}

func (x *RegistrationOptions) HasValidateDefinition() bool {
	if x == nil {
		return false
	}
	return x.ValidateDefinition != nil
}

func (x *RegistrationOptions) HasDryRun() bool {
	if x == nil {
		return false
	}
	return x.DryRun != nil
}

func (x *RegistrationOptions) HasCreateIndices() bool {
	if x == nil {
		return false
	}
	return x.CreateIndices != nil
}

func (x *RegistrationOptions) HasEnableAlerting() bool {
	if x == nil {
		return false
	}
	return x.EnableAlerting != nil
}

func (x *RegistrationOptions) ClearValidateDefinition() {
	x.ValidateDefinition = nil
}

func (x *RegistrationOptions) ClearDryRun() {
	x.DryRun = nil
}

func (x *RegistrationOptions) ClearCreateIndices() {
	x.CreateIndices = nil
}

func (x *RegistrationOptions) ClearEnableAlerting() {
	x.EnableAlerting = nil
}

type RegistrationOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to validate the definition before registration
	ValidateDefinition *bool
	// Whether to perform a dry run (validation only)
	DryRun *bool
	// Whether to create indices for efficient querying
	CreateIndices *bool
	// Whether to enable real-time alerts for this metric
	EnableAlerting *bool
}

func (b0 RegistrationOptions_builder) Build() *RegistrationOptions {
	m0 := &RegistrationOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.ValidateDefinition = b.ValidateDefinition
	x.DryRun = b.DryRun
	x.CreateIndices = b.CreateIndices
	x.EnableAlerting = b.EnableAlerting
	return m0
}

var File_pkg_metrics_proto_requests_register_metric_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_register_metric_request_proto_rawDesc = "" +
	"\n" +
	"8pkg/metrics/proto/requests/register_metric_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a0pkg/common/proto/messages/request_metadata.proto\x1a)pkg/metrics/proto/enums/metric_type.proto\x1a+pkg/metrics/proto/types/export_config.proto\x1a.pkg/metrics/proto/types/retention_policy.proto\"\xac\x02\n" +
	"\x15RegisterMetricRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12D\n" +
	"\n" +
	"definition\x18\x02 \x01(\v2$.gcommon.v1.metrics.MetricDefinitionR\n" +
	"definition\x12\x1f\n" +
	"\vprovider_id\x18\x03 \x01(\tR\n" +
	"providerId\x12)\n" +
	"\x10replace_existing\x18\x04 \x01(\bR\x0freplaceExisting\x12A\n" +
	"\aoptions\x18\x05 \x01(\v2'.gcommon.v1.metrics.RegistrationOptionsR\aoptions\"\xd9\x04\n" +
	"\x10MetricDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1e.gcommon.v1.metrics.MetricTypeR\x04type\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x12\n" +
	"\x04unit\x18\x04 \x01(\tR\x04unit\x12;\n" +
	"\x06labels\x18\x05 \x03(\v2#.gcommon.v1.metrics.LabelDefinitionR\x06labels\x128\n" +
	"\x06config\x18\x06 \x01(\v2 .gcommon.v1.metrics.MetricConfigR\x06config\x12G\n" +
	"\tretention\x18\a \x01(\v2).gcommon.v1.metrics.RetentionPolicyConfigR\tretention\x12E\n" +
	"\rexport_config\x18\b \x01(\v2 .gcommon.v1.metrics.ExportConfigR\fexportConfig\x12C\n" +
	"\n" +
	"validation\x18\t \x01(\v2#.gcommon.v1.metrics.ValidationRulesR\n" +
	"validation\x12B\n" +
	"\x04tags\x18\n" +
	" \x03(\v2..gcommon.v1.metrics.MetricDefinition.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xde\x01\n" +
	"\x0fLabelDefinition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1a\n" +
	"\brequired\x18\x03 \x01(\bR\brequired\x12%\n" +
	"\x0eallowed_values\x18\x04 \x03(\tR\rallowedValues\x12-\n" +
	"\x12validation_pattern\x18\x05 \x01(\tR\x11validationPattern\x12#\n" +
	"\rdefault_value\x18\x06 \x01(\tR\fdefaultValue\"\x82\x02\n" +
	"\fMetricConfig\x12A\n" +
	"\thistogram\x18\x01 \x01(\v2#.gcommon.v1.metrics.HistogramConfigR\thistogram\x12;\n" +
	"\asummary\x18\x02 \x01(\v2!.gcommon.v1.metrics.SummaryConfigR\asummary\x125\n" +
	"\x05gauge\x18\x03 \x01(\v2\x1f.gcommon.v1.metrics.GaugeConfigR\x05gauge\x12;\n" +
	"\acounter\x18\x04 \x01(\v2!.gcommon.v1.metrics.CounterConfigR\acounter\"o\n" +
	"\x0fHistogramConfig\x12\x18\n" +
	"\abuckets\x18\x01 \x03(\x01R\abuckets\x12!\n" +
	"\fauto_buckets\x18\x02 \x01(\bR\vautoBuckets\x12\x1f\n" +
	"\vmax_buckets\x18\x03 \x01(\x05R\n" +
	"maxBuckets\"g\n" +
	"\rSummaryConfig\x12\x1c\n" +
	"\tquantiles\x18\x01 \x03(\x01R\tquantiles\x12\x1f\n" +
	"\vtime_window\x18\x02 \x01(\tR\n" +
	"timeWindow\x12\x17\n" +
	"\amax_age\x18\x03 \x01(\tR\x06maxAge\"n\n" +
	"\vGaugeConfig\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12%\n" +
	"\x0eallow_negative\x18\x03 \x01(\bR\rallowNegative\"r\n" +
	"\rCounterConfig\x12#\n" +
	"\rinitial_value\x18\x01 \x01(\x01R\finitialValue\x12\x1f\n" +
	"\vallow_reset\x18\x02 \x01(\bR\n" +
	"allowReset\x12\x1b\n" +
	"\tmax_value\x18\x03 \x01(\x01R\bmaxValue\"\xa1\x01\n" +
	"\x0fValidationRules\x12\x1b\n" +
	"\tmin_value\x18\x01 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x02 \x01(\x01R\bmaxValue\x12\x1d\n" +
	"\n" +
	"allow_null\x18\x03 \x01(\bR\tallowNull\x125\n" +
	"\x16validation_expressions\x18\x04 \x03(\tR\x15validationExpressions\"\xaf\x01\n" +
	"\x13RegistrationOptions\x12/\n" +
	"\x13validate_definition\x18\x01 \x01(\bR\x12validateDefinition\x12\x17\n" +
	"\adry_run\x18\x02 \x01(\bR\x06dryRun\x12%\n" +
	"\x0ecreate_indices\x18\x03 \x01(\bR\rcreateIndices\x12'\n" +
	"\x0fenable_alerting\x18\x04 \x01(\bR\x0eenableAlertingB\xdc\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1aRegisterMetricRequestProtoP\x01Z4github.com/jdfalk/gcommon/pkg/metrics/proto/requests\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pkg_metrics_proto_requests_register_metric_request_proto_goTypes = []any{
	(*RegisterMetricRequest)(nil),       // 0: gcommon.v1.metrics.RegisterMetricRequest
	(*MetricDefinition)(nil),            // 1: gcommon.v1.metrics.MetricDefinition
	(*LabelDefinition)(nil),             // 2: gcommon.v1.metrics.LabelDefinition
	(*MetricConfig)(nil),                // 3: gcommon.v1.metrics.MetricConfig
	(*HistogramConfig)(nil),             // 4: gcommon.v1.metrics.HistogramConfig
	(*SummaryConfig)(nil),               // 5: gcommon.v1.metrics.SummaryConfig
	(*GaugeConfig)(nil),                 // 6: gcommon.v1.metrics.GaugeConfig
	(*CounterConfig)(nil),               // 7: gcommon.v1.metrics.CounterConfig
	(*ValidationRules)(nil),             // 8: gcommon.v1.metrics.ValidationRules
	(*RegistrationOptions)(nil),         // 9: gcommon.v1.metrics.RegistrationOptions
	nil,                                 // 10: gcommon.v1.metrics.MetricDefinition.TagsEntry
	(*messages.RequestMetadata)(nil),    // 11: gcommon.v1.common.RequestMetadata
	(enums.MetricType)(0),               // 12: gcommon.v1.metrics.MetricType
	(*types.RetentionPolicyConfig)(nil), // 13: gcommon.v1.metrics.RetentionPolicyConfig
	(*types.ExportConfig)(nil),          // 14: gcommon.v1.metrics.ExportConfig
}
var file_pkg_metrics_proto_requests_register_metric_request_proto_depIdxs = []int32{
	11, // 0: gcommon.v1.metrics.RegisterMetricRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	1,  // 1: gcommon.v1.metrics.RegisterMetricRequest.definition:type_name -> gcommon.v1.metrics.MetricDefinition
	9,  // 2: gcommon.v1.metrics.RegisterMetricRequest.options:type_name -> gcommon.v1.metrics.RegistrationOptions
	12, // 3: gcommon.v1.metrics.MetricDefinition.type:type_name -> gcommon.v1.metrics.MetricType
	2,  // 4: gcommon.v1.metrics.MetricDefinition.labels:type_name -> gcommon.v1.metrics.LabelDefinition
	3,  // 5: gcommon.v1.metrics.MetricDefinition.config:type_name -> gcommon.v1.metrics.MetricConfig
	13, // 6: gcommon.v1.metrics.MetricDefinition.retention:type_name -> gcommon.v1.metrics.RetentionPolicyConfig
	14, // 7: gcommon.v1.metrics.MetricDefinition.export_config:type_name -> gcommon.v1.metrics.ExportConfig
	8,  // 8: gcommon.v1.metrics.MetricDefinition.validation:type_name -> gcommon.v1.metrics.ValidationRules
	10, // 9: gcommon.v1.metrics.MetricDefinition.tags:type_name -> gcommon.v1.metrics.MetricDefinition.TagsEntry
	4,  // 10: gcommon.v1.metrics.MetricConfig.histogram:type_name -> gcommon.v1.metrics.HistogramConfig
	5,  // 11: gcommon.v1.metrics.MetricConfig.summary:type_name -> gcommon.v1.metrics.SummaryConfig
	6,  // 12: gcommon.v1.metrics.MetricConfig.gauge:type_name -> gcommon.v1.metrics.GaugeConfig
	7,  // 13: gcommon.v1.metrics.MetricConfig.counter:type_name -> gcommon.v1.metrics.CounterConfig
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_register_metric_request_proto_init() }
func file_pkg_metrics_proto_requests_register_metric_request_proto_init() {
	if File_pkg_metrics_proto_requests_register_metric_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_register_metric_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_register_metric_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_register_metric_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_register_metric_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_requests_register_metric_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_register_metric_request_proto = out.File
	file_pkg_metrics_proto_requests_register_metric_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_register_metric_request_proto_depIdxs = nil
}
