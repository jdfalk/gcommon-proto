// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/requests/query_metrics_request.proto

//go:build !protoopaque

package metricspb

import (
	proto "../../../../pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// QueryMetricsRequest represents a request to query metric data.
// Supports complex queries with filtering, aggregation, and grouping.
type QueryMetricsRequest struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// The metric query to execute
	Query *MetricQuery `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	// Optional query timeout in seconds
	TimeoutSeconds *int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	// Whether to return query execution plan (for debugging)
	IncludeQueryPlan *bool `protobuf:"varint,4,opt,name=include_query_plan,json=includeQueryPlan" json:"include_query_plan,omitempty"`
	// Whether to return only metadata without actual values (for schema discovery)
	MetadataOnly *bool `protobuf:"varint,5,opt,name=metadata_only,json=metadataOnly" json:"metadata_only,omitempty"`
	// Output format preferences
	OutputOptions *QueryOutputOptions `protobuf:"bytes,6,opt,name=output_options,json=outputOptions" json:"output_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryMetricsRequest) Reset() {
	*x = QueryMetricsRequest{}
	mi := &file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetricsRequest) ProtoMessage() {}

func (x *QueryMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryMetricsRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *QueryMetricsRequest) GetQuery() *MetricQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QueryMetricsRequest) GetTimeoutSeconds() int32 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

func (x *QueryMetricsRequest) GetIncludeQueryPlan() bool {
	if x != nil && x.IncludeQueryPlan != nil {
		return *x.IncludeQueryPlan
	}
	return false
}

func (x *QueryMetricsRequest) GetMetadataOnly() bool {
	if x != nil && x.MetadataOnly != nil {
		return *x.MetadataOnly
	}
	return false
}

func (x *QueryMetricsRequest) GetOutputOptions() *QueryOutputOptions {
	if x != nil {
		return x.OutputOptions
	}
	return nil
}

func (x *QueryMetricsRequest) SetMetadata(v *proto.RequestMetadata) {
	x.Metadata = v
}

func (x *QueryMetricsRequest) SetQuery(v *MetricQuery) {
	x.Query = v
}

func (x *QueryMetricsRequest) SetTimeoutSeconds(v int32) {
	x.TimeoutSeconds = &v
}

func (x *QueryMetricsRequest) SetIncludeQueryPlan(v bool) {
	x.IncludeQueryPlan = &v
}

func (x *QueryMetricsRequest) SetMetadataOnly(v bool) {
	x.MetadataOnly = &v
}

func (x *QueryMetricsRequest) SetOutputOptions(v *QueryOutputOptions) {
	x.OutputOptions = v
}

func (x *QueryMetricsRequest) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *QueryMetricsRequest) HasQuery() bool {
	if x == nil {
		return false
	}
	return x.Query != nil
}

func (x *QueryMetricsRequest) HasTimeoutSeconds() bool {
	if x == nil {
		return false
	}
	return x.TimeoutSeconds != nil
}

func (x *QueryMetricsRequest) HasIncludeQueryPlan() bool {
	if x == nil {
		return false
	}
	return x.IncludeQueryPlan != nil
}

func (x *QueryMetricsRequest) HasMetadataOnly() bool {
	if x == nil {
		return false
	}
	return x.MetadataOnly != nil
}

func (x *QueryMetricsRequest) HasOutputOptions() bool {
	if x == nil {
		return false
	}
	return x.OutputOptions != nil
}

func (x *QueryMetricsRequest) ClearMetadata() {
	x.Metadata = nil
}

func (x *QueryMetricsRequest) ClearQuery() {
	x.Query = nil
}

func (x *QueryMetricsRequest) ClearTimeoutSeconds() {
	x.TimeoutSeconds = nil
}

func (x *QueryMetricsRequest) ClearIncludeQueryPlan() {
	x.IncludeQueryPlan = nil
}

func (x *QueryMetricsRequest) ClearMetadataOnly() {
	x.MetadataOnly = nil
}

func (x *QueryMetricsRequest) ClearOutputOptions() {
	x.OutputOptions = nil
}

type QueryMetricsRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standard request metadata (tracing, auth, etc.)
	Metadata *proto.RequestMetadata
	// The metric query to execute
	Query *MetricQuery
	// Optional query timeout in seconds
	TimeoutSeconds *int32
	// Whether to return query execution plan (for debugging)
	IncludeQueryPlan *bool
	// Whether to return only metadata without actual values (for schema discovery)
	MetadataOnly *bool
	// Output format preferences
	OutputOptions *QueryOutputOptions
}

func (b0 QueryMetricsRequest_builder) Build() *QueryMetricsRequest {
	m0 := &QueryMetricsRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.Metadata = b.Metadata
	x.Query = b.Query
	x.TimeoutSeconds = b.TimeoutSeconds
	x.IncludeQueryPlan = b.IncludeQueryPlan
	x.MetadataOnly = b.MetadataOnly
	x.OutputOptions = b.OutputOptions
	return m0
}

// *
// QueryOutputOptions specifies how query results should be formatted.
type QueryOutputOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to include timestamps in results
	IncludeTimestamps *bool `protobuf:"varint,1,opt,name=include_timestamps,json=includeTimestamps" json:"include_timestamps,omitempty"`
	// Whether to include label information
	IncludeLabels *bool `protobuf:"varint,2,opt,name=include_labels,json=includeLabels" json:"include_labels,omitempty"`
	// Whether to compress/optimize output for network transfer
	CompressOutput *bool `protobuf:"varint,3,opt,name=compress_output,json=compressOutput" json:"compress_output,omitempty"`
	// Maximum precision for numeric values (decimal places)
	NumericPrecision *int32 `protobuf:"varint,4,opt,name=numeric_precision,json=numericPrecision" json:"numeric_precision,omitempty"`
	// Whether to include statistics about the query execution
	IncludeStatistics *bool `protobuf:"varint,5,opt,name=include_statistics,json=includeStatistics" json:"include_statistics,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryOutputOptions) Reset() {
	*x = QueryOutputOptions{}
	mi := &file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOutputOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOutputOptions) ProtoMessage() {}

func (x *QueryOutputOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *QueryOutputOptions) GetIncludeTimestamps() bool {
	if x != nil && x.IncludeTimestamps != nil {
		return *x.IncludeTimestamps
	}
	return false
}

func (x *QueryOutputOptions) GetIncludeLabels() bool {
	if x != nil && x.IncludeLabels != nil {
		return *x.IncludeLabels
	}
	return false
}

func (x *QueryOutputOptions) GetCompressOutput() bool {
	if x != nil && x.CompressOutput != nil {
		return *x.CompressOutput
	}
	return false
}

func (x *QueryOutputOptions) GetNumericPrecision() int32 {
	if x != nil && x.NumericPrecision != nil {
		return *x.NumericPrecision
	}
	return 0
}

func (x *QueryOutputOptions) GetIncludeStatistics() bool {
	if x != nil && x.IncludeStatistics != nil {
		return *x.IncludeStatistics
	}
	return false
}

func (x *QueryOutputOptions) SetIncludeTimestamps(v bool) {
	x.IncludeTimestamps = &v
}

func (x *QueryOutputOptions) SetIncludeLabels(v bool) {
	x.IncludeLabels = &v
}

func (x *QueryOutputOptions) SetCompressOutput(v bool) {
	x.CompressOutput = &v
}

func (x *QueryOutputOptions) SetNumericPrecision(v int32) {
	x.NumericPrecision = &v
}

func (x *QueryOutputOptions) SetIncludeStatistics(v bool) {
	x.IncludeStatistics = &v
}

func (x *QueryOutputOptions) HasIncludeTimestamps() bool {
	if x == nil {
		return false
	}
	return x.IncludeTimestamps != nil
}

func (x *QueryOutputOptions) HasIncludeLabels() bool {
	if x == nil {
		return false
	}
	return x.IncludeLabels != nil
}

func (x *QueryOutputOptions) HasCompressOutput() bool {
	if x == nil {
		return false
	}
	return x.CompressOutput != nil
}

func (x *QueryOutputOptions) HasNumericPrecision() bool {
	if x == nil {
		return false
	}
	return x.NumericPrecision != nil
}

func (x *QueryOutputOptions) HasIncludeStatistics() bool {
	if x == nil {
		return false
	}
	return x.IncludeStatistics != nil
}

func (x *QueryOutputOptions) ClearIncludeTimestamps() {
	x.IncludeTimestamps = nil
}

func (x *QueryOutputOptions) ClearIncludeLabels() {
	x.IncludeLabels = nil
}

func (x *QueryOutputOptions) ClearCompressOutput() {
	x.CompressOutput = nil
}

func (x *QueryOutputOptions) ClearNumericPrecision() {
	x.NumericPrecision = nil
}

func (x *QueryOutputOptions) ClearIncludeStatistics() {
	x.IncludeStatistics = nil
}

type QueryOutputOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to include timestamps in results
	IncludeTimestamps *bool
	// Whether to include label information
	IncludeLabels *bool
	// Whether to compress/optimize output for network transfer
	CompressOutput *bool
	// Maximum precision for numeric values (decimal places)
	NumericPrecision *int32
	// Whether to include statistics about the query execution
	IncludeStatistics *bool
}

func (b0 QueryOutputOptions_builder) Build() *QueryOutputOptions {
	m0 := &QueryOutputOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.IncludeTimestamps = b.IncludeTimestamps
	x.IncludeLabels = b.IncludeLabels
	x.CompressOutput = b.CompressOutput
	x.NumericPrecision = b.NumericPrecision
	x.IncludeStatistics = b.IncludeStatistics
	return m0
}

var File_pkg_metrics_proto_requests_query_metrics_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_requests_query_metrics_request_proto_rawDesc = "" +
	"\n" +
	"6pkg/metrics/proto/requests/query_metrics_request.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a-pkg/metrics/proto/messages/metric_query.proto\x1a0pkg/common/proto/messages/request_metadata.proto\"\xd7\x02\n" +
	"\x13QueryMetricsRequest\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x125\n" +
	"\x05query\x18\x02 \x01(\v2\x1f.gcommon.v1.metrics.MetricQueryR\x05query\x12'\n" +
	"\x0ftimeout_seconds\x18\x03 \x01(\x05R\x0etimeoutSeconds\x12,\n" +
	"\x12include_query_plan\x18\x04 \x01(\bR\x10includeQueryPlan\x12#\n" +
	"\rmetadata_only\x18\x05 \x01(\bR\fmetadataOnly\x12M\n" +
	"\x0eoutput_options\x18\x06 \x01(\v2&.gcommon.v1.metrics.QueryOutputOptionsR\routputOptions\"\xef\x01\n" +
	"\x12QueryOutputOptions\x12-\n" +
	"\x12include_timestamps\x18\x01 \x01(\bR\x11includeTimestamps\x12%\n" +
	"\x0einclude_labels\x18\x02 \x01(\bR\rincludeLabels\x12'\n" +
	"\x0fcompress_output\x18\x03 \x01(\bR\x0ecompressOutput\x12+\n" +
	"\x11numeric_precision\x18\x04 \x01(\x05R\x10numericPrecision\x12-\n" +
	"\x12include_statistics\x18\x05 \x01(\bR\x11includeStatisticsB\xcd\x01\n" +
	"\x16com.gcommon.v1.metricsB\x18QueryMetricsRequestProtoP\x01Z'../../../../pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_requests_query_metrics_request_proto_goTypes = []any{
	(*QueryMetricsRequest)(nil),   // 0: gcommon.v1.metrics.QueryMetricsRequest
	(*QueryOutputOptions)(nil),    // 1: gcommon.v1.metrics.QueryOutputOptions
	(*proto.RequestMetadata)(nil), // 2: gcommon.v1.common.RequestMetadata
	(*MetricQuery)(nil),           // 3: gcommon.v1.metrics.MetricQuery
}
var file_pkg_metrics_proto_requests_query_metrics_request_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.metrics.QueryMetricsRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	3, // 1: gcommon.v1.metrics.QueryMetricsRequest.query:type_name -> gcommon.v1.metrics.MetricQuery
	1, // 2: gcommon.v1.metrics.QueryMetricsRequest.output_options:type_name -> gcommon.v1.metrics.QueryOutputOptions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_requests_query_metrics_request_proto_init() }
func file_pkg_metrics_proto_requests_query_metrics_request_proto_init() {
	if File_pkg_metrics_proto_requests_query_metrics_request_proto != nil {
		return
	}
	file_pkg_metrics_proto_messages_metric_query_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_requests_query_metrics_request_proto_rawDesc), len(file_pkg_metrics_proto_requests_query_metrics_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_requests_query_metrics_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_requests_query_metrics_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_requests_query_metrics_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_requests_query_metrics_request_proto = out.File
	file_pkg_metrics_proto_requests_query_metrics_request_proto_goTypes = nil
	file_pkg_metrics_proto_requests_query_metrics_request_proto_depIdxs = nil
}
