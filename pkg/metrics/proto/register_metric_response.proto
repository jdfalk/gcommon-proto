// file: pkg/metrics/proto/register_metric_response.proto
// version: 1.1.0
// guid: b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e

edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/common/proto/error.proto";
import "pkg/metrics/proto/registration_action.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/metrics/proto";


option features.(pb.go).api_level = API_OPAQUE;

/**
 * RegisterMetricResponse contains the result of registering a metric definition.
 */
message RegisterMetricResponse {
  // Success status of the registration
  bool success = 1;

  // Error information if registration failed
  gcommon.v1.common.Error error = 2;

  // Unique ID assigned to the registered metric
  string metric_id = 3;

  // Name of the registered metric
  string metric_name = 4;

  // When the metric was registered
  google.protobuf.Timestamp registered_at = 5;

  // Provider that handled the registration
  string provider_id = 6;

  // Validation results from the registration process
  RegistrationValidation validation = 7;

  // Information about what was created/updated
  RegistrationResult result = 8;

  // Warnings or informational messages
  repeated string warnings = 9;

  // Whether this replaced an existing metric
  bool replaced_existing = 10;
}

/**
 * RegistrationValidation contains validation results from registration.
 */
message RegistrationValidation {
  // Whether the metric definition is valid
  bool valid = 1;

  // Validation errors (if any)
  repeated string errors = 2;

  // Validation warnings (if any)
  repeated string warnings = 3;

  // Schema version used for validation
  string schema_version = 4;

  // Suggestions for improving the metric definition
  repeated string suggestions = 5;
}

/**
 * RegistrationResult contains information about what was created/updated.
 */
message RegistrationResult {
  // Whether a new metric was created or existing one updated
  RegistrationAction action = 1;

  // Indices that were created for the metric
  repeated string created_indices = 2;

  // Alert rules that were created (if alerting was enabled)
  repeated string created_alerts = 3;

  // Export configurations that were set up
  repeated string configured_exports = 4;

  // Retention policies that were applied
  repeated string applied_retention_policies = 5;

  // Schema changes that were made
  repeated SchemaChange schema_changes = 6;
}

/**
 * SchemaChange describes a change made to the metric schema.
 */
message SchemaChange {
  // Type of change made
  string change_type = 1;

  // Description of the change
  string description = 2;

  // Whether this change is backward compatible
  bool backward_compatible = 3;

  // Migration steps required (if any)
  repeated string migration_steps = 4;
}
