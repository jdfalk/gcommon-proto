// file: pkg/metrics/proto/responses/create_provider_response.proto
// file: metrics/proto/responses/create_provider_response.proto
//
// Create provider response definitions for metrics module
//
edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/common/proto/metrics/proto/metrics/proto/validation_result.proto";

option features.(pb.go).api_level = API_OPAQUE;

/**
 * CreateProviderResponse contains the result of creating a metrics provider.
 */
message CreateProviderResponse {
  // Success status of the creation
  bool success = 1;

  // Error information if creation failed
  gcommon.v1.common.Error error = 2;

  // ID of the created provider
  string provider_id = 3;

  // When the provider was created
  google.protobuf.Timestamp created_at = 4;

  // Current status of the provider
  ProviderStatus status = 5;

  // Validation results
  ValidationResult validation = 6;

  // Configuration details that were applied
  AppliedConfig applied_config = 7;

  // Warnings or informational messages
  repeated string warnings = 8;

  // Endpoint information for accessing the provider
  ProviderEndpoints endpoints = 9;
}

/**
 * AppliedConfig contains information about the configuration that was applied.
 */
message AppliedConfig {
  // Configuration that was actually applied (may differ from requested)
  string config_summary = 1;

  // Default values that were applied
  map<string, string> applied_defaults = 2;

  // Configuration overrides that were applied
  map<string, string> applied_overrides = 3;

  // Resource allocations that were made
  ResourceAllocations resource_allocations = 4;
}

/**
 * ResourceAllocations contains information about allocated resources.
 */
message ResourceAllocations {
  // Allocated memory (bytes)
  int64 allocated_memory_bytes = 1;

  // Allocated CPU (percentage)
  double allocated_cpu_percent = 2;

  // Allocated disk space (bytes)
  int64 allocated_disk_bytes = 3;

  // Network ports allocated
  repeated int32 allocated_ports = 4;
}

/**
 * ProviderEndpoints contains endpoint information for the provider.
 */
message ProviderEndpoints {
  // Main service endpoint
  string service_endpoint = 1;

  // Metrics endpoint (for scraping)
  string metrics_endpoint = 2;

  // Health check endpoint
  string health_endpoint = 3;

  // Admin/management endpoint
  string admin_endpoint = 4;

  // Additional endpoints
  map<string, string> additional_endpoints = 5;
}
