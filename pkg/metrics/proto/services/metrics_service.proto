// file: metrics/proto/services/metrics_service.proto
edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";

option go_package = "../../../../pb;metricspb";
option features.(pb.go).api_level = API_HYBRID;

// Import all required request and response messages
import "pkg/metrics/proto/requests/record_metric_request.proto";
import "pkg/metrics/proto/responses/record_metric_response.proto";
import "pkg/metrics/proto/requests/record_metrics_request.proto";
import "pkg/metrics/proto/responses/record_metrics_response.proto";
import "pkg/metrics/proto/requests/query_metrics_request.proto";
import "pkg/metrics/proto/responses/query_metrics_response.proto";
import "pkg/metrics/proto/requests/get_metrics_summary_request.proto";
import "pkg/metrics/proto/responses/get_metrics_summary_response.proto";
import "pkg/metrics/proto/requests/get_metrics_request.proto";
import "pkg/metrics/proto/responses/get_metrics_response.proto";
import "pkg/metrics/proto/requests/stream_metrics_request.proto";
import "pkg/metrics/proto/messages/metric_data.proto";
import "pkg/metrics/proto/requests/register_metric_request.proto";
import "pkg/metrics/proto/responses/register_metric_response.proto";
import "pkg/metrics/proto/requests/unregister_metric_request.proto";
import "pkg/metrics/proto/responses/unregister_metric_response.proto";
import "pkg/metrics/proto/requests/get_metric_metadata_request.proto";
import "pkg/metrics/proto/responses/get_metric_metadata_response.proto";

/**
 * MetricsService provides comprehensive metrics collection and querying capabilities.
 * Supports counters, gauges, histograms, streaming, and custom metrics aggregation.
 */
service MetricsService {
  // Record a single metric data point
  rpc RecordMetric(RecordMetricRequest) returns (RecordMetricResponse);

  // Record multiple metrics in batch for efficiency
  rpc RecordBatchMetrics(RecordMetricsRequest) returns (RecordMetricsResponse);

  // Retrieve metrics data with filtering and aggregation
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);

  // Stream metrics data in real-time
  rpc StreamMetrics(StreamMetricsRequest) returns (stream MetricData);

  // Register a new metric definition
  rpc RegisterMetric(RegisterMetricRequest) returns (RegisterMetricResponse);

  // Unregister an existing metric
  rpc UnregisterMetric(UnregisterMetricRequest) returns (UnregisterMetricResponse);

  // Get metadata for a specific metric
  rpc GetMetricMetadata(GetMetricMetadataRequest) returns (GetMetricMetadataResponse);

  // Query metrics data using complex query expressions
  rpc QueryMetrics(QueryMetricsRequest) returns (QueryMetricsResponse);

  // Get summary statistics about metrics
  rpc GetMetricsSummary(GetMetricsSummaryRequest) returns (GetMetricsSummaryResponse);
}
