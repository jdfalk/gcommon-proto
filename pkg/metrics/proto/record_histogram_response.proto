// file: pkg/metrics/proto/responses/record_histogram_response.proto
// file: metrics/proto/responses/record_histogram_response.proto
//
// Response definitions for metrics module
// TODO: Implement actual protobuf definitions
//
edition = "2023";

package gcommon.v1.metrics;

import "pkg/common/proto/error.proto";
import "google/protobuf/timestamp.proto";
import "pkg/common/proto/metrics/proto/metrics/proto/recording_stats.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/metrics/proto";

/**
 * RecordHistogramResponse is returned after recording a histogram observation.
 */
message RecordHistogramResponse {
  // Whether the operation was successful
  bool success = 1;

  // Error information if the operation failed
  gcommon.v1.common.Error error = 2;

  // The histogram metric with updated bucket counts
  HistogramMetric metric = 3;

  // Current histogram statistics
  HistogramStats current_stats = 4;

  // Timestamp when the observation was recorded
  google.protobuf.Timestamp recorded_at = 5;

  // Whether this was a new histogram or an update to existing
  bool is_new_metric = 6;

  // Bucket that the observation fell into
  BucketInfo affected_bucket = 7;

  // Processing statistics
  RecordingStats recording_stats = 8;
}

/**
 * BucketInfo provides information about a histogram bucket.
 */
message BucketInfo {
  // Upper bound of the bucket
  double upper_bound = 1;

  // Count in this bucket after the observation
  uint64 count = 2;

  // Bucket index
  int32 bucket_index = 3;
}

/**
 * HistogramStats provides current statistics for a histogram.
 */
message HistogramStats {
  // Total number of observations
  uint64 total_count = 1;

  // Sum of all observed values
  double total_sum = 2;

  // Mean value
  double mean = 3;

  // Minimum observed value
  double min_value = 4;

  // Maximum observed value
  double max_value = 5;

  // Standard deviation (if calculated)
  double std_deviation = 6;
}
