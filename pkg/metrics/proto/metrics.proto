// file: pkg/metrics/proto/metrics.proto
edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb";
option features.(pb.go).api_level = API_HYBRID;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "pkg/common/proto/common.proto";

// MetricsService provides comprehensive metrics collection, aggregation, and querying
service MetricsService {
  // Record a metric value
  rpc RecordMetric(RecordMetricRequest) returns (RecordMetricResponse);

  // Record multiple metrics in batch
  rpc RecordMetrics(RecordMetricsRequest) returns (RecordMetricsResponse);

  // Increment a counter metric
  rpc IncrementCounter(IncrementCounterRequest) returns (IncrementCounterResponse);

  // Record a gauge metric
  rpc RecordGauge(RecordGaugeRequest) returns (RecordGaugeResponse);

  // Record a histogram metric
  rpc RecordHistogram(RecordHistogramRequest) returns (RecordHistogramResponse);

  // Record a timer metric
  rpc RecordTimer(RecordTimerRequest) returns (RecordTimerResponse);

  // Query metrics
  rpc QueryMetrics(QueryMetricsRequest) returns (QueryMetricsResponse);

  // Stream metrics in real-time
  rpc StreamMetrics(StreamMetricsRequest) returns (stream MetricData);

  // Get metric statistics
  rpc GetMetricStats(GetMetricStatsRequest) returns (GetMetricStatsResponse);

  // List available metrics
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse);

  // Get metric metadata
  rpc GetMetricMetadata(GetMetricMetadataRequest) returns (GetMetricMetadataResponse);
}

// MetricsAdminService provides metrics administration and configuration
service MetricsAdminService {
  // Create a metric definition
  rpc CreateMetric(CreateMetricRequest) returns (CreateMetricResponse);

  // Update a metric definition
  rpc UpdateMetric(UpdateMetricRequest) returns (UpdateMetricResponse);

  // Delete a metric definition
  rpc DeleteMetric(DeleteMetricRequest) returns (DeleteMetricResponse);

  // Configure metric collection
  rpc ConfigureCollection(ConfigureCollectionRequest) returns (ConfigureCollectionResponse);

  // Create alert rules
  rpc CreateAlert(CreateAlertRequest) returns (CreateAlertResponse);

  // Update alert rules
  rpc UpdateAlert(UpdateAlertRequest) returns (UpdateAlertResponse);

  // Delete alert rules
  rpc DeleteAlert(DeleteAlertRequest) returns (DeleteAlertResponse);

  // List alert rules
  rpc ListAlerts(ListAlertsRequest) returns (ListAlertsResponse);

  // Get alert status
  rpc GetAlertStatus(GetAlertStatusRequest) returns (GetAlertStatusResponse);

  // Export metrics data
  rpc ExportMetrics(ExportMetricsRequest) returns (ExportMetricsResponse);

  // Import metrics data
  rpc ImportMetrics(ImportMetricsRequest) returns (ImportMetricsResponse);

  // Purge old metrics data
  rpc PurgeMetrics(PurgeMetricsRequest) returns (PurgeMetricsResponse);

  // Get system metrics
  rpc GetSystemMetrics(GetSystemMetricsRequest) returns (GetSystemMetricsResponse);
}

// Record metric request
message RecordMetricRequest {
  // Metric data
  MetricData metric = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Record metric response
message RecordMetricResponse {
  // Success status
  bool success = 1;

  // Metric ID
  string metric_id = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Record metrics request (batch)
message RecordMetricsRequest {
  // Multiple metric data
  repeated MetricData metrics = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Record metrics response (batch)
message RecordMetricsResponse {
  // Number of metrics recorded
  int32 recorded_count = 1;

  // Failed metrics with errors
  repeated MetricError failed_metrics = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Metric error information
message MetricError {
  // Metric name
  string metric_name = 1;

  // Error message
  string error_message = 2;

  // Error code
  string error_code = 3;
}

// Increment counter request
message IncrementCounterRequest {
  // Counter name
  string name = 1;

  // Increment value (default: 1)
  double value = 2;

  // Metric tags
  map<string, string> tags = 3;

  // Timestamp (optional, defaults to current time)
  google.protobuf.Timestamp timestamp = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Increment counter response
message IncrementCounterResponse {
  // Success status
  bool success = 1;

  // New counter value
  double new_value = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Record gauge request
message RecordGaugeRequest {
  // Gauge name
  string name = 1;

  // Gauge value
  double value = 2;

  // Metric tags
  map<string, string> tags = 3;

  // Timestamp (optional, defaults to current time)
  google.protobuf.Timestamp timestamp = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Record gauge response
message RecordGaugeResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Record histogram request
message RecordHistogramRequest {
  // Histogram name
  string name = 1;

  // Value to record
  double value = 2;

  // Metric tags
  map<string, string> tags = 3;

  // Timestamp (optional, defaults to current time)
  google.protobuf.Timestamp timestamp = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Record histogram response
message RecordHistogramResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Record timer request
message RecordTimerRequest {
  // Timer name
  string name = 1;

  // Duration to record
  google.protobuf.Duration duration = 2;

  // Metric tags
  map<string, string> tags = 3;

  // Timestamp (optional, defaults to current time)
  google.protobuf.Timestamp timestamp = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Record timer response
message RecordTimerResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Query metrics request
message QueryMetricsRequest {
  // Metric query
  MetricQuery query = 1;

  // Aggregation options
  AggregationOptions aggregation = 2;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Metric query parameters
message MetricQuery {
  // Metric name pattern
  string name_pattern = 1;

  // Time range
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;

  // Metric types to include
  repeated MetricType types = 4;

  // Tag filters
  map<string, string> tag_filters = 5;

  // Value range filters
  ValueRange value_range = 6;

  // Sort order
  MetricSortOrder sort_order = 7;

  // Maximum results
  int32 limit = 8;
}

// Value range filter
message ValueRange {
  // Minimum value (optional)
  double min_value = 1;

  // Maximum value (optional)
  double max_value = 2;
}

// Metric sort order
enum MetricSortOrder {
  METRIC_SORT_ORDER_UNSPECIFIED = 0;
  METRIC_SORT_ORDER_TIMESTAMP_ASC = 1;
  METRIC_SORT_ORDER_TIMESTAMP_DESC = 2;
  METRIC_SORT_ORDER_VALUE_ASC = 3;
  METRIC_SORT_ORDER_VALUE_DESC = 4;
  METRIC_SORT_ORDER_NAME_ASC = 5;
  METRIC_SORT_ORDER_NAME_DESC = 6;
}

// Aggregation options
message AggregationOptions {
  // Aggregation function
  AggregationFunction function = 1;

  // Time window for aggregation
  google.protobuf.Duration time_window = 2;

  // Group by fields
  repeated string group_by = 3;

  // Having conditions for aggregated results
  map<string, double> having = 4;
}

// Aggregation function enumeration
enum AggregationFunction {
  AGGREGATION_FUNCTION_UNSPECIFIED = 0;
  AGGREGATION_FUNCTION_SUM = 1;
  AGGREGATION_FUNCTION_AVG = 2;
  AGGREGATION_FUNCTION_COUNT = 3;
  AGGREGATION_FUNCTION_MIN = 4;
  AGGREGATION_FUNCTION_MAX = 5;
  AGGREGATION_FUNCTION_STDDEV = 6;
  AGGREGATION_FUNCTION_PERCENTILE = 7;
}

// Query metrics response
message QueryMetricsResponse {
  // Metric data results
  repeated MetricData metrics = 1;

  // Aggregated results (if aggregation was requested)
  repeated AggregatedMetric aggregated_metrics = 2;

  // Total count
  int64 total_count = 3;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 4;

  // Error information
  gcommon.v1.common.Error error = 5;
}

// Aggregated metric data
message AggregatedMetric {
  // Metric name
  string name = 1;

  // Aggregated value
  double value = 2;

  // Aggregation function used
  AggregationFunction function = 3;

  // Time window
  google.protobuf.Timestamp window_start = 4;
  google.protobuf.Timestamp window_end = 5;

  // Group by values
  map<string, string> group_values = 6;

  // Sample count
  int64 sample_count = 7;
}

// Stream metrics request
message StreamMetricsRequest {
  // Query for filtering metrics
  MetricQuery query = 1;

  // Buffer size for streaming
  int32 buffer_size = 2;

  // Update interval
  google.protobuf.Duration update_interval = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Get metric stats request
message GetMetricStatsRequest {
  // Metric name
  string name = 1;

  // Time range
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Get metric stats response
message GetMetricStatsResponse {
  // Metric statistics
  MetricStats stats = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Metric statistics
message MetricStats {
  // Metric name
  string name = 1;

  // Total data points
  int64 total_points = 2;

  // Statistics by time period
  MetricStatsByPeriod hourly = 3;
  MetricStatsByPeriod daily = 4;
  MetricStatsByPeriod weekly = 5;

  // Value statistics
  ValueStats value_stats = 6;

  // Storage usage
  int64 storage_bytes = 7;
}

// Metric statistics by time period
message MetricStatsByPeriod {
  // Average value
  double avg_value = 1;

  // Minimum value
  double min_value = 2;

  // Maximum value
  double max_value = 3;

  // Total count
  int64 count = 4;

  // Standard deviation
  double std_dev = 5;
}

// Value statistics
message ValueStats {
  // Mean value
  double mean = 1;

  // Median value
  double median = 2;

  // 95th percentile
  double p95 = 3;

  // 99th percentile
  double p99 = 4;

  // Standard deviation
  double std_dev = 5;

  // Variance
  double variance = 6;
}

// List metrics request
message ListMetricsRequest {
  // Name pattern filter
  string name_pattern = 1;

  // Type filter
  MetricType type = 2;

  // Tag filters
  map<string, string> tag_filters = 3;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// List metrics response
message ListMetricsResponse {
  // Metric definitions
  repeated MetricDefinition metrics = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Get metric metadata request
message GetMetricMetadataRequest {
  // Metric name
  string name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get metric metadata response
message GetMetricMetadataResponse {
  // Metric metadata
  MetricMetadata metadata = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Core metric data structure
message MetricData {
  // Metric name
  string name = 1;

  // Metric type
  MetricType type = 2;

  // Metric value(s)
  MetricValue value = 3;

  // Metric tags
  map<string, string> tags = 4;

  // Timestamp
  google.protobuf.Timestamp timestamp = 5;

  // Additional metadata
  map<string, string> metadata = 6;
}

// Metric type enumeration
enum MetricType {
  METRIC_TYPE_UNSPECIFIED = 0;
  METRIC_TYPE_COUNTER = 1;
  METRIC_TYPE_GAUGE = 2;
  METRIC_TYPE_HISTOGRAM = 3;
  METRIC_TYPE_SUMMARY = 4;
  METRIC_TYPE_TIMER = 5;
}

// Metric value union
message MetricValue {
  oneof value_type {
    // Simple numeric value
    double number_value = 1;

    // Histogram value
    HistogramValue histogram_value = 2;

    // Summary value
    SummaryValue summary_value = 3;

    // Timer value
    TimerValue timer_value = 4;
  }
}

// Histogram value data
message HistogramValue {
  // Sample count
  int64 sample_count = 1;

  // Sum of all samples
  double sample_sum = 2;

  // Histogram buckets
  repeated HistogramBucket buckets = 3;
}

// Histogram bucket
message HistogramBucket {
  // Upper bound (inclusive)
  double upper_bound = 1;

  // Cumulative count
  int64 cumulative_count = 2;
}

// Summary value data
message SummaryValue {
  // Sample count
  int64 sample_count = 1;

  // Sum of all samples
  double sample_sum = 2;

  // Quantiles
  repeated Quantile quantiles = 3;
}

// Quantile data
message Quantile {
  // Quantile (0.0 to 1.0)
  double quantile = 1;

  // Value at quantile
  double value = 2;
}

// Timer value data
message TimerValue {
  // Duration
  google.protobuf.Duration duration = 1;

  // Count of measurements
  int64 count = 2;

  // Rate (measurements per second)
  double rate = 3;
}

// Metric definition
message MetricDefinition {
  // Metric name
  string name = 1;

  // Metric type
  MetricType type = 2;

  // Description
  string description = 3;

  // Unit of measurement
  string unit = 4;

  // Default tags
  map<string, string> default_tags = 5;

  // Creation time
  google.protobuf.Timestamp created_at = 6;

  // Last updated time
  google.protobuf.Timestamp updated_at = 7;

  // Status
  MetricStatus status = 8;
}

// Metric status enumeration
enum MetricStatus {
  METRIC_STATUS_UNSPECIFIED = 0;
  METRIC_STATUS_ACTIVE = 1;
  METRIC_STATUS_INACTIVE = 2;
  METRIC_STATUS_DEPRECATED = 3;
}

// Metric metadata
message MetricMetadata {
  // Metric definition
  MetricDefinition definition = 1;

  // Statistics
  MetricStats stats = 2;

  // Collection configuration
  CollectionConfig collection_config = 3;

  // Alert rules
  repeated AlertRule alert_rules = 4;
}

// Collection configuration
message CollectionConfig {
  // Collection interval
  google.protobuf.Duration interval = 1;

  // Retention period
  google.protobuf.Duration retention = 2;

  // Sampling rate (0.0 to 1.0)
  double sampling_rate = 3;

  // Aggregation settings
  AggregationOptions aggregation = 4;

  // Storage settings
  StorageConfig storage = 5;
}

// Storage configuration
message StorageConfig {
  // Storage backend
  StorageBackend backend = 1;

  // Compression enabled
  bool compression_enabled = 2;

  // Batch size for writes
  int32 batch_size = 3;

  // Flush interval
  google.protobuf.Duration flush_interval = 4;
}

// Storage backend enumeration
enum StorageBackend {
  STORAGE_BACKEND_UNSPECIFIED = 0;
  STORAGE_BACKEND_MEMORY = 1;
  STORAGE_BACKEND_DISK = 2;
  STORAGE_BACKEND_DATABASE = 3;
  STORAGE_BACKEND_TIMESERIES = 4;
}

// Admin service messages
message CreateMetricRequest {
  // Metric definition
  MetricDefinition definition = 1;

  // Collection configuration
  CollectionConfig collection_config = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Create metric response
message CreateMetricResponse {
  // Success status
  bool success = 1;

  // Created metric definition
  MetricDefinition metric = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Update metric request
message UpdateMetricRequest {
  // Metric name
  string name = 1;

  // Updated definition
  MetricDefinition definition = 2;

  // Updated collection configuration
  CollectionConfig collection_config = 3;

  // Field mask for partial updates
  google.protobuf.FieldMask update_mask = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Update metric response
message UpdateMetricResponse {
  // Success status
  bool success = 1;

  // Updated metric definition
  MetricDefinition metric = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete metric request
message DeleteMetricRequest {
  // Metric name
  string name = 1;

  // Whether to delete associated data
  bool delete_data = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Configure collection request
message ConfigureCollectionRequest {
  // Global collection configuration
  GlobalCollectionConfig config = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Global collection configuration
message GlobalCollectionConfig {
  // Default collection interval
  google.protobuf.Duration default_interval = 1;

  // Default retention period
  google.protobuf.Duration default_retention = 2;

  // Maximum metrics limit
  int32 max_metrics = 3;

  // Storage configuration
  StorageConfig storage = 4;

  // Performance settings
  PerformanceConfig performance = 5;
}

// Performance configuration
message PerformanceConfig {
  // Worker pool size
  int32 worker_pool_size = 1;

  // Buffer size
  int32 buffer_size = 2;

  // Maximum batch size
  int32 max_batch_size = 3;

  // Flush timeout
  google.protobuf.Duration flush_timeout = 4;
}

// Configure collection response
message ConfigureCollectionResponse {
  // Success status
  bool success = 1;

  // Applied configuration
  GlobalCollectionConfig config = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Create alert request
message CreateAlertRequest {
  // Alert rule
  AlertRule rule = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Alert rule definition
message AlertRule {
  // Rule name
  string name = 1;

  // Description
  string description = 2;

  // Metric query
  MetricQuery query = 3;

  // Alert condition
  AlertCondition condition = 4;

  // Notification configuration
  NotificationConfig notification = 5;

  // Evaluation interval
  google.protobuf.Duration evaluation_interval = 6;

  // Grace period before firing
  google.protobuf.Duration grace_period = 7;

  // Severity level
  AlertSeverity severity = 8;

  // Tags
  map<string, string> tags = 9;

  // Enabled status
  bool enabled = 10;
}

// Alert condition
message AlertCondition {
  // Condition type
  AlertConditionType type = 1;

  // Threshold value
  double threshold = 2;

  // Comparison operator
  ComparisonOperator operator = 3;

  // Time window for evaluation
  google.protobuf.Duration time_window = 4;

  // Required consecutive violations
  int32 consecutive_violations = 5;
}

// Alert condition type enumeration
enum AlertConditionType {
  ALERT_CONDITION_TYPE_UNSPECIFIED = 0;
  ALERT_CONDITION_TYPE_THRESHOLD = 1;
  ALERT_CONDITION_TYPE_CHANGE = 2;
  ALERT_CONDITION_TYPE_ANOMALY = 3;
  ALERT_CONDITION_TYPE_ABSENCE = 4;
}

// Comparison operator enumeration
enum ComparisonOperator {
  COMPARISON_OPERATOR_UNSPECIFIED = 0;
  COMPARISON_OPERATOR_GREATER = 1;
  COMPARISON_OPERATOR_GREATER_EQUAL = 2;
  COMPARISON_OPERATOR_LESS = 3;
  COMPARISON_OPERATOR_LESS_EQUAL = 4;
  COMPARISON_OPERATOR_EQUAL = 5;
  COMPARISON_OPERATOR_NOT_EQUAL = 6;
}

// Notification configuration
message NotificationConfig {
  // Notification channels
  repeated NotificationChannel channels = 1;

  // Message template
  string message_template = 2;

  // Notification throttling
  google.protobuf.Duration throttle_duration = 3;

  // Escalation rules
  repeated EscalationRule escalation_rules = 4;
}

// Notification channel
message NotificationChannel {
  // Channel type
  NotificationChannelType type = 1;

  // Channel configuration
  map<string, string> config = 2;

  // Enabled status
  bool enabled = 3;
}

// Notification channel type enumeration
enum NotificationChannelType {
  NOTIFICATION_CHANNEL_TYPE_UNSPECIFIED = 0;
  NOTIFICATION_CHANNEL_TYPE_EMAIL = 1;
  NOTIFICATION_CHANNEL_TYPE_SLACK = 2;
  NOTIFICATION_CHANNEL_TYPE_WEBHOOK = 3;
  NOTIFICATION_CHANNEL_TYPE_SMS = 4;
  NOTIFICATION_CHANNEL_TYPE_PAGERDUTY = 5;
}

// Escalation rule
message EscalationRule {
  // Delay before escalation
  google.protobuf.Duration delay = 1;

  // Escalation channels
  repeated NotificationChannel channels = 2;

  // Condition for escalation
  string condition = 3;
}

// Alert severity enumeration
enum AlertSeverity {
  ALERT_SEVERITY_UNSPECIFIED = 0;
  ALERT_SEVERITY_INFO = 1;
  ALERT_SEVERITY_WARNING = 2;
  ALERT_SEVERITY_ERROR = 3;
  ALERT_SEVERITY_CRITICAL = 4;
}

// Create alert response
message CreateAlertResponse {
  // Success status
  bool success = 1;

  // Created alert rule
  AlertRule rule = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Update alert request
message UpdateAlertRequest {
  // Alert rule name
  string name = 1;

  // Updated alert rule
  AlertRule rule = 2;

  // Field mask for partial updates
  google.protobuf.FieldMask update_mask = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Update alert response
message UpdateAlertResponse {
  // Success status
  bool success = 1;

  // Updated alert rule
  AlertRule rule = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete alert request
message DeleteAlertRequest {
  // Alert rule name
  string name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// List alerts request
message ListAlertsRequest {
  // Name pattern filter
  string name_pattern = 1;

  // Severity filter
  AlertSeverity severity = 2;

  // Enabled status filter
  bool enabled = 3;

  // Tag filters
  map<string, string> tag_filters = 4;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 5;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 6;
}

// List alerts response
message ListAlertsResponse {
  // Alert rules
  repeated AlertRule rules = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Get alert status request
message GetAlertStatusRequest {
  // Alert rule name
  string name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get alert status response
message GetAlertStatusResponse {
  // Alert status
  AlertStatus status = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Alert status
message AlertStatus {
  // Rule name
  string rule_name = 1;

  // Current state
  AlertState state = 2;

  // Last evaluation time
  google.protobuf.Timestamp last_evaluation = 3;

  // Last fired time
  google.protobuf.Timestamp last_fired = 4;

  // Current value
  double current_value = 5;

  // Threshold value
  double threshold_value = 6;

  // Consecutive violations
  int32 consecutive_violations = 7;

  // Active notifications
  repeated ActiveNotification active_notifications = 8;
}

// Alert state enumeration
enum AlertState {
  ALERT_STATE_UNSPECIFIED = 0;
  ALERT_STATE_OK = 1;
  ALERT_STATE_PENDING = 2;
  ALERT_STATE_FIRING = 3;
  ALERT_STATE_RESOLVED = 4;
}

// Active notification
message ActiveNotification {
  // Notification channel
  NotificationChannel channel = 1;

  // Sent time
  google.protobuf.Timestamp sent_at = 2;

  // Status
  NotificationStatus status = 3;
}

// Notification status enumeration
enum NotificationStatus {
  NOTIFICATION_STATUS_UNSPECIFIED = 0;
  NOTIFICATION_STATUS_PENDING = 1;
  NOTIFICATION_STATUS_SENT = 2;
  NOTIFICATION_STATUS_FAILED = 3;
  NOTIFICATION_STATUS_ACKNOWLEDGED = 4;
}

// Export metrics request
message ExportMetricsRequest {
  // Export query
  MetricQuery query = 1;

  // Export format
  ExportFormat format = 2;

  // Export destination
  string destination = 3;

  // Compression options
  CompressionOptions compression = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Export format enumeration
enum ExportFormat {
  EXPORT_FORMAT_UNSPECIFIED = 0;
  EXPORT_FORMAT_JSON = 1;
  EXPORT_FORMAT_CSV = 2;
  EXPORT_FORMAT_PROMETHEUS = 3;
  EXPORT_FORMAT_INFLUXDB = 4;
}

// Compression options
message CompressionOptions {
  // Compression type
  CompressionType type = 1;

  // Compression level (1-9)
  int32 level = 2;
}

// Compression type enumeration
enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  COMPRESSION_TYPE_NONE = 1;
  COMPRESSION_TYPE_GZIP = 2;
  COMPRESSION_TYPE_BZIP2 = 3;
  COMPRESSION_TYPE_XZ = 4;
}

// Export metrics response
message ExportMetricsResponse {
  // Export job ID
  string job_id = 1;

  // Export status
  ExportStatus status = 2;

  // Export location
  string export_location = 3;

  // Number of metrics exported
  int64 metrics_count = 4;

  // Export size in bytes
  int64 export_size_bytes = 5;

  // Error information
  gcommon.v1.common.Error error = 6;
}

// Export status enumeration
enum ExportStatus {
  EXPORT_STATUS_UNSPECIFIED = 0;
  EXPORT_STATUS_PENDING = 1;
  EXPORT_STATUS_IN_PROGRESS = 2;
  EXPORT_STATUS_COMPLETED = 3;
  EXPORT_STATUS_FAILED = 4;
}

// Import metrics request
message ImportMetricsRequest {
  // Import source
  string source = 1;

  // Import format
  ExportFormat format = 2;

  // Import options
  ImportOptions options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Import options
message ImportOptions {
  // Overwrite existing metrics
  bool overwrite_existing = 1;

  // Validate data before import
  bool validate_data = 2;

  // Batch size for import
  int32 batch_size = 3;

  // Dry run mode
  bool dry_run = 4;
}

// Import metrics response
message ImportMetricsResponse {
  // Import job ID
  string job_id = 1;

  // Import status
  ImportStatus status = 2;

  // Number of metrics imported
  int64 metrics_imported = 3;

  // Number of metrics skipped
  int64 metrics_skipped = 4;

  // Number of metrics failed
  int64 metrics_failed = 5;

  // Error information
  gcommon.v1.common.Error error = 6;
}

// Import status enumeration
enum ImportStatus {
  IMPORT_STATUS_UNSPECIFIED = 0;
  IMPORT_STATUS_PENDING = 1;
  IMPORT_STATUS_IN_PROGRESS = 2;
  IMPORT_STATUS_COMPLETED = 3;
  IMPORT_STATUS_FAILED = 4;
}

// Purge metrics request
message PurgeMetricsRequest {
  // Purge criteria
  PurgeCriteria criteria = 1;

  // Dry run mode
  bool dry_run = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Purge criteria
message PurgeCriteria {
  // Older than duration
  google.protobuf.Duration older_than = 1;

  // Metric name pattern
  string name_pattern = 2;

  // Metric types to purge
  repeated MetricType types = 3;

  // Tag filters
  map<string, string> tag_filters = 4;

  // Size threshold
  int64 size_threshold_bytes = 5;
}

// Purge metrics response
message PurgeMetricsResponse {
  // Number of metrics purged
  int64 metrics_purged = 1;

  // Number of data points purged
  int64 data_points_purged = 2;

  // Storage space freed in bytes
  int64 space_freed_bytes = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Get system metrics request
message GetSystemMetricsRequest {
  // System metric types to retrieve
  repeated SystemMetricType types = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// System metric type enumeration
enum SystemMetricType {
  SYSTEM_METRIC_TYPE_UNSPECIFIED = 0;
  SYSTEM_METRIC_TYPE_CPU = 1;
  SYSTEM_METRIC_TYPE_MEMORY = 2;
  SYSTEM_METRIC_TYPE_DISK = 3;
  SYSTEM_METRIC_TYPE_NETWORK = 4;
  SYSTEM_METRIC_TYPE_PROCESS = 5;
}

// Get system metrics response
message GetSystemMetricsResponse {
  // System metrics
  repeated SystemMetric metrics = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// System metric data
message SystemMetric {
  // Metric type
  SystemMetricType type = 1;

  // Metric data
  MetricData data = 2;

  // System information
  map<string, string> system_info = 3;
}
