// filepath: pkg/metrics/proto/responses/list_providers_response.proto
// file: metrics/proto/responses/list_providers_response.proto
//
// List providers response definitions for metrics module
//
edition = "2023";

package gcommon.v1.metrics;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/common/proto/messages/error.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb";
option features.(pb.go).api_level = API_HYBRID;

/**
 * ListProvidersResponse contains the list of metrics providers.
 */
message ListProvidersResponse {
  // Success status of the operation
  bool success = 1;

  // Error information if the operation failed
  gcommon.v1.common.Error error = 2;

  // List of providers
  repeated ProviderInfo providers = 3;

  // Pagination information
  PaginationInfo pagination = 4;

  // Summary statistics about the providers
  ProviderSummary summary = 5;

  // When the response was generated
  google.protobuf.Timestamp generated_at = 6;
}

/**
 * ProviderInfo contains information about a single provider.
 */
message ProviderInfo {
  // Provider ID
  string provider_id = 1;

  // Provider name
  string name = 2;

  // Provider type
  string type = 3;

  // Current status
  ProviderStatus status = 4;

  // Configuration summary (if requested)
  ProviderConfigSummary config = 5;

  // Statistics (if requested)
  ProviderStats stats = 6;

  // When the provider was created
  google.protobuf.Timestamp created_at = 7;

  // When the provider was last updated
  google.protobuf.Timestamp updated_at = 8;

  // Tags associated with the provider
  map<string, string> tags = 9;

  // Description of the provider
  string description = 10;
}

/**
 * ProviderStatus contains current status information.
 */
message ProviderStatus {
  // Current state
  string state = 1;

  // Health status
  string health = 2;

  // Status message
  string message = 3;

  // Last status update time
  google.protobuf.Timestamp last_updated = 4;

  // Uptime duration
  string uptime = 5;

  // Provider version
  string version = 6;
}

/**
 * ProviderConfigSummary contains a summary of provider configuration.
 */
message ProviderConfigSummary {
  // Number of configured exporters
  int32 exporter_count = 1;

  // Whether security is enabled
  bool security_enabled = 2;

  // Resource limits summary
  ResourceLimitsSummary resource_limits = 3;

  // Export destinations
  repeated string export_destinations = 4;
}

/**
 * ResourceLimitsSummary contains summary of resource limits.
 */
message ResourceLimitsSummary {
  // Memory limit (bytes)
  int64 memory_limit_bytes = 1;

  // CPU limit (percentage)
  double cpu_limit_percent = 2;

  // Disk limit (bytes)
  int64 disk_limit_bytes = 3;

  // Metrics limit
  int64 metrics_limit = 4;
}

/**
 * ProviderStats contains statistics for a provider.
 */
message ProviderStats {
  // Number of metrics managed
  int64 metrics_count = 1;

  // Number of data points
  int64 data_points_count = 2;

  // Data volume (bytes)
  int64 data_volume_bytes = 3;

  // Operations per second
  double operations_per_second = 4;

  // Error rate
  double error_rate = 5;

  // Resource usage
  ResourceUsage resource_usage = 6;
}

/**
 * ResourceUsage contains current resource usage.
 */
message ResourceUsage {
  // Current memory usage (bytes)
  int64 memory_used_bytes = 1;

  // Current CPU usage (percentage)
  double cpu_used_percent = 2;

  // Current disk usage (bytes)
  int64 disk_used_bytes = 3;

  // Network bandwidth usage (bytes/sec)
  int64 network_bandwidth_bytes_per_sec = 4;
}

/**
 * PaginationInfo contains pagination details.
 */
message PaginationInfo {
  // Current page size
  int32 page_size = 1;

  // Token for next page
  string next_page_token = 2;

  // Token for previous page
  string prev_page_token = 3;

  // Total number of providers
  int64 total_count = 4;

  // Whether there are more results
  bool has_more = 5;
}

/**
 * ProviderSummary contains aggregate statistics about all providers.
 */
message ProviderSummary {
  // Total number of providers
  int32 total_providers = 1;

  // Providers by state
  map<string, int32> providers_by_state = 2;

  // Providers by type
  map<string, int32> providers_by_type = 3;

  // Providers by health status
  map<string, int32> providers_by_health = 4;

  // Total metrics across all providers
  int64 total_metrics = 5;

  // Total data volume across all providers
  int64 total_data_volume_bytes = 6;
}