// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/responses/record_histogram_response.proto

//go:build !protoopaque

package metricspb

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RecordHistogramResponse is returned after recording a histogram observation.
type RecordHistogramResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether the operation was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Error information if the operation failed
	Error *proto.Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// The histogram metric with updated bucket counts
	Metric *HistogramMetric `protobuf:"bytes,3,opt,name=metric" json:"metric,omitempty"`
	// Current histogram statistics
	CurrentStats *HistogramStats `protobuf:"bytes,4,opt,name=current_stats,json=currentStats" json:"current_stats,omitempty"`
	// Timestamp when the observation was recorded
	RecordedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=recorded_at,json=recordedAt" json:"recorded_at,omitempty"`
	// Whether this was a new histogram or an update to existing
	IsNewMetric *bool `protobuf:"varint,6,opt,name=is_new_metric,json=isNewMetric" json:"is_new_metric,omitempty"`
	// Bucket that the observation fell into
	AffectedBucket *BucketInfo `protobuf:"bytes,7,opt,name=affected_bucket,json=affectedBucket" json:"affected_bucket,omitempty"`
	// Processing statistics
	RecordingStats *RecordingStats `protobuf:"bytes,8,opt,name=recording_stats,json=recordingStats" json:"recording_stats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RecordHistogramResponse) Reset() {
	*x = RecordHistogramResponse{}
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordHistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordHistogramResponse) ProtoMessage() {}

func (x *RecordHistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RecordHistogramResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *RecordHistogramResponse) GetError() *proto.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RecordHistogramResponse) GetMetric() *HistogramMetric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *RecordHistogramResponse) GetCurrentStats() *HistogramStats {
	if x != nil {
		return x.CurrentStats
	}
	return nil
}

func (x *RecordHistogramResponse) GetRecordedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordedAt
	}
	return nil
}

func (x *RecordHistogramResponse) GetIsNewMetric() bool {
	if x != nil && x.IsNewMetric != nil {
		return *x.IsNewMetric
	}
	return false
}

func (x *RecordHistogramResponse) GetAffectedBucket() *BucketInfo {
	if x != nil {
		return x.AffectedBucket
	}
	return nil
}

func (x *RecordHistogramResponse) GetRecordingStats() *RecordingStats {
	if x != nil {
		return x.RecordingStats
	}
	return nil
}

func (x *RecordHistogramResponse) SetSuccess(v bool) {
	x.Success = &v
}

func (x *RecordHistogramResponse) SetError(v *proto.Error) {
	x.Error = v
}

func (x *RecordHistogramResponse) SetMetric(v *HistogramMetric) {
	x.Metric = v
}

func (x *RecordHistogramResponse) SetCurrentStats(v *HistogramStats) {
	x.CurrentStats = v
}

func (x *RecordHistogramResponse) SetRecordedAt(v *timestamppb.Timestamp) {
	x.RecordedAt = v
}

func (x *RecordHistogramResponse) SetIsNewMetric(v bool) {
	x.IsNewMetric = &v
}

func (x *RecordHistogramResponse) SetAffectedBucket(v *BucketInfo) {
	x.AffectedBucket = v
}

func (x *RecordHistogramResponse) SetRecordingStats(v *RecordingStats) {
	x.RecordingStats = v
}

func (x *RecordHistogramResponse) HasSuccess() bool {
	if x == nil {
		return false
	}
	return x.Success != nil
}

func (x *RecordHistogramResponse) HasError() bool {
	if x == nil {
		return false
	}
	return x.Error != nil
}

func (x *RecordHistogramResponse) HasMetric() bool {
	if x == nil {
		return false
	}
	return x.Metric != nil
}

func (x *RecordHistogramResponse) HasCurrentStats() bool {
	if x == nil {
		return false
	}
	return x.CurrentStats != nil
}

func (x *RecordHistogramResponse) HasRecordedAt() bool {
	if x == nil {
		return false
	}
	return x.RecordedAt != nil
}

func (x *RecordHistogramResponse) HasIsNewMetric() bool {
	if x == nil {
		return false
	}
	return x.IsNewMetric != nil
}

func (x *RecordHistogramResponse) HasAffectedBucket() bool {
	if x == nil {
		return false
	}
	return x.AffectedBucket != nil
}

func (x *RecordHistogramResponse) HasRecordingStats() bool {
	if x == nil {
		return false
	}
	return x.RecordingStats != nil
}

func (x *RecordHistogramResponse) ClearSuccess() {
	x.Success = nil
}

func (x *RecordHistogramResponse) ClearError() {
	x.Error = nil
}

func (x *RecordHistogramResponse) ClearMetric() {
	x.Metric = nil
}

func (x *RecordHistogramResponse) ClearCurrentStats() {
	x.CurrentStats = nil
}

func (x *RecordHistogramResponse) ClearRecordedAt() {
	x.RecordedAt = nil
}

func (x *RecordHistogramResponse) ClearIsNewMetric() {
	x.IsNewMetric = nil
}

func (x *RecordHistogramResponse) ClearAffectedBucket() {
	x.AffectedBucket = nil
}

func (x *RecordHistogramResponse) ClearRecordingStats() {
	x.RecordingStats = nil
}

type RecordHistogramResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether the operation was successful
	Success *bool
	// Error information if the operation failed
	Error *proto.Error
	// The histogram metric with updated bucket counts
	Metric *HistogramMetric
	// Current histogram statistics
	CurrentStats *HistogramStats
	// Timestamp when the observation was recorded
	RecordedAt *timestamppb.Timestamp
	// Whether this was a new histogram or an update to existing
	IsNewMetric *bool
	// Bucket that the observation fell into
	AffectedBucket *BucketInfo
	// Processing statistics
	RecordingStats *RecordingStats
}

func (b0 RecordHistogramResponse_builder) Build() *RecordHistogramResponse {
	m0 := &RecordHistogramResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.Success = b.Success
	x.Error = b.Error
	x.Metric = b.Metric
	x.CurrentStats = b.CurrentStats
	x.RecordedAt = b.RecordedAt
	x.IsNewMetric = b.IsNewMetric
	x.AffectedBucket = b.AffectedBucket
	x.RecordingStats = b.RecordingStats
	return m0
}

// *
// BucketInfo provides information about a histogram bucket.
type BucketInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Upper bound of the bucket
	UpperBound *float64 `protobuf:"fixed64,1,opt,name=upper_bound,json=upperBound" json:"upper_bound,omitempty"`
	// Count in this bucket after the observation
	Count *uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	// Bucket index
	BucketIndex   *int32 `protobuf:"varint,3,opt,name=bucket_index,json=bucketIndex" json:"bucket_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BucketInfo) Reset() {
	*x = BucketInfo{}
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketInfo) ProtoMessage() {}

func (x *BucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BucketInfo) GetUpperBound() float64 {
	if x != nil && x.UpperBound != nil {
		return *x.UpperBound
	}
	return 0
}

func (x *BucketInfo) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BucketInfo) GetBucketIndex() int32 {
	if x != nil && x.BucketIndex != nil {
		return *x.BucketIndex
	}
	return 0
}

func (x *BucketInfo) SetUpperBound(v float64) {
	x.UpperBound = &v
}

func (x *BucketInfo) SetCount(v uint64) {
	x.Count = &v
}

func (x *BucketInfo) SetBucketIndex(v int32) {
	x.BucketIndex = &v
}

func (x *BucketInfo) HasUpperBound() bool {
	if x == nil {
		return false
	}
	return x.UpperBound != nil
}

func (x *BucketInfo) HasCount() bool {
	if x == nil {
		return false
	}
	return x.Count != nil
}

func (x *BucketInfo) HasBucketIndex() bool {
	if x == nil {
		return false
	}
	return x.BucketIndex != nil
}

func (x *BucketInfo) ClearUpperBound() {
	x.UpperBound = nil
}

func (x *BucketInfo) ClearCount() {
	x.Count = nil
}

func (x *BucketInfo) ClearBucketIndex() {
	x.BucketIndex = nil
}

type BucketInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Upper bound of the bucket
	UpperBound *float64
	// Count in this bucket after the observation
	Count *uint64
	// Bucket index
	BucketIndex *int32
}

func (b0 BucketInfo_builder) Build() *BucketInfo {
	m0 := &BucketInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.UpperBound = b.UpperBound
	x.Count = b.Count
	x.BucketIndex = b.BucketIndex
	return m0
}

// *
// HistogramStats provides current statistics for a histogram.
type HistogramStats struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Total number of observations
	TotalCount *uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Sum of all observed values
	TotalSum *float64 `protobuf:"fixed64,2,opt,name=total_sum,json=totalSum" json:"total_sum,omitempty"`
	// Mean value
	Mean *float64 `protobuf:"fixed64,3,opt,name=mean" json:"mean,omitempty"`
	// Minimum observed value
	MinValue *float64 `protobuf:"fixed64,4,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Maximum observed value
	MaxValue *float64 `protobuf:"fixed64,5,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Standard deviation (if calculated)
	StdDeviation  *float64 `protobuf:"fixed64,6,opt,name=std_deviation,json=stdDeviation" json:"std_deviation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistogramStats) Reset() {
	*x = HistogramStats{}
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistogramStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramStats) ProtoMessage() {}

func (x *HistogramStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HistogramStats) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *HistogramStats) GetTotalSum() float64 {
	if x != nil && x.TotalSum != nil {
		return *x.TotalSum
	}
	return 0
}

func (x *HistogramStats) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *HistogramStats) GetMinValue() float64 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *HistogramStats) GetMaxValue() float64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *HistogramStats) GetStdDeviation() float64 {
	if x != nil && x.StdDeviation != nil {
		return *x.StdDeviation
	}
	return 0
}

func (x *HistogramStats) SetTotalCount(v uint64) {
	x.TotalCount = &v
}

func (x *HistogramStats) SetTotalSum(v float64) {
	x.TotalSum = &v
}

func (x *HistogramStats) SetMean(v float64) {
	x.Mean = &v
}

func (x *HistogramStats) SetMinValue(v float64) {
	x.MinValue = &v
}

func (x *HistogramStats) SetMaxValue(v float64) {
	x.MaxValue = &v
}

func (x *HistogramStats) SetStdDeviation(v float64) {
	x.StdDeviation = &v
}

func (x *HistogramStats) HasTotalCount() bool {
	if x == nil {
		return false
	}
	return x.TotalCount != nil
}

func (x *HistogramStats) HasTotalSum() bool {
	if x == nil {
		return false
	}
	return x.TotalSum != nil
}

func (x *HistogramStats) HasMean() bool {
	if x == nil {
		return false
	}
	return x.Mean != nil
}

func (x *HistogramStats) HasMinValue() bool {
	if x == nil {
		return false
	}
	return x.MinValue != nil
}

func (x *HistogramStats) HasMaxValue() bool {
	if x == nil {
		return false
	}
	return x.MaxValue != nil
}

func (x *HistogramStats) HasStdDeviation() bool {
	if x == nil {
		return false
	}
	return x.StdDeviation != nil
}

func (x *HistogramStats) ClearTotalCount() {
	x.TotalCount = nil
}

func (x *HistogramStats) ClearTotalSum() {
	x.TotalSum = nil
}

func (x *HistogramStats) ClearMean() {
	x.Mean = nil
}

func (x *HistogramStats) ClearMinValue() {
	x.MinValue = nil
}

func (x *HistogramStats) ClearMaxValue() {
	x.MaxValue = nil
}

func (x *HistogramStats) ClearStdDeviation() {
	x.StdDeviation = nil
}

type HistogramStats_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Total number of observations
	TotalCount *uint64
	// Sum of all observed values
	TotalSum *float64
	// Mean value
	Mean *float64
	// Minimum observed value
	MinValue *float64
	// Maximum observed value
	MaxValue *float64
	// Standard deviation (if calculated)
	StdDeviation *float64
}

func (b0 HistogramStats_builder) Build() *HistogramStats {
	m0 := &HistogramStats{}
	b, x := &b0, m0
	_, _ = b, x
	x.TotalCount = b.TotalCount
	x.TotalSum = b.TotalSum
	x.Mean = b.Mean
	x.MinValue = b.MinValue
	x.MaxValue = b.MaxValue
	x.StdDeviation = b.StdDeviation
	return m0
}

var File_pkg_metrics_proto_responses_record_histogram_response_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_responses_record_histogram_response_proto_rawDesc = "" +
	"\n" +
	";pkg/metrics/proto/responses/record_histogram_response.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a%pkg/common/proto/messages/error.proto\x1a1pkg/metrics/proto/messages/histogram_metric.proto\x1a-pkg/metrics/proto/types/recording_stats.proto\"\xe0\x03\n" +
	"\x17RecordHistogramResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12.\n" +
	"\x05error\x18\x02 \x01(\v2\x18.gcommon.v1.common.ErrorR\x05error\x12;\n" +
	"\x06metric\x18\x03 \x01(\v2#.gcommon.v1.metrics.HistogramMetricR\x06metric\x12G\n" +
	"\rcurrent_stats\x18\x04 \x01(\v2\".gcommon.v1.metrics.HistogramStatsR\fcurrentStats\x12;\n" +
	"\vrecorded_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordedAt\x12\"\n" +
	"\ris_new_metric\x18\x06 \x01(\bR\visNewMetric\x12G\n" +
	"\x0faffected_bucket\x18\a \x01(\v2\x1e.gcommon.v1.metrics.BucketInfoR\x0eaffectedBucket\x12K\n" +
	"\x0frecording_stats\x18\b \x01(\v2\".gcommon.v1.metrics.RecordingStatsR\x0erecordingStats\"f\n" +
	"\n" +
	"BucketInfo\x12\x1f\n" +
	"\vupper_bound\x18\x01 \x01(\x01R\n" +
	"upperBound\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x04R\x05count\x12!\n" +
	"\fbucket_index\x18\x03 \x01(\x05R\vbucketIndex\"\xc1\x01\n" +
	"\x0eHistogramStats\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x04R\n" +
	"totalCount\x12\x1b\n" +
	"\ttotal_sum\x18\x02 \x01(\x01R\btotalSum\x12\x12\n" +
	"\x04mean\x18\x03 \x01(\x01R\x04mean\x12\x1b\n" +
	"\tmin_value\x18\x04 \x01(\x01R\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x05 \x01(\x01R\bmaxValue\x12#\n" +
	"\rstd_deviation\x18\x06 \x01(\x01R\fstdDeviationB\xdf\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1cRecordHistogramResponseProtoP\x01Z5github.com/jdfalk/gcommon/pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_metrics_proto_responses_record_histogram_response_proto_goTypes = []any{
	(*RecordHistogramResponse)(nil), // 0: gcommon.v1.metrics.RecordHistogramResponse
	(*BucketInfo)(nil),              // 1: gcommon.v1.metrics.BucketInfo
	(*HistogramStats)(nil),          // 2: gcommon.v1.metrics.HistogramStats
	(*proto.Error)(nil),             // 3: gcommon.v1.common.Error
	(*HistogramMetric)(nil),         // 4: gcommon.v1.metrics.HistogramMetric
	(*timestamppb.Timestamp)(nil),   // 5: google.protobuf.Timestamp
	(*RecordingStats)(nil),          // 6: gcommon.v1.metrics.RecordingStats
}
var file_pkg_metrics_proto_responses_record_histogram_response_proto_depIdxs = []int32{
	3, // 0: gcommon.v1.metrics.RecordHistogramResponse.error:type_name -> gcommon.v1.common.Error
	4, // 1: gcommon.v1.metrics.RecordHistogramResponse.metric:type_name -> gcommon.v1.metrics.HistogramMetric
	2, // 2: gcommon.v1.metrics.RecordHistogramResponse.current_stats:type_name -> gcommon.v1.metrics.HistogramStats
	5, // 3: gcommon.v1.metrics.RecordHistogramResponse.recorded_at:type_name -> google.protobuf.Timestamp
	1, // 4: gcommon.v1.metrics.RecordHistogramResponse.affected_bucket:type_name -> gcommon.v1.metrics.BucketInfo
	6, // 5: gcommon.v1.metrics.RecordHistogramResponse.recording_stats:type_name -> gcommon.v1.metrics.RecordingStats
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_responses_record_histogram_response_proto_init() }
func file_pkg_metrics_proto_responses_record_histogram_response_proto_init() {
	if File_pkg_metrics_proto_responses_record_histogram_response_proto != nil {
		return
	}
	file_pkg_metrics_proto_messages_histogram_metric_proto_init()
	file_pkg_metrics_proto_types_recording_stats_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_responses_record_histogram_response_proto_rawDesc), len(file_pkg_metrics_proto_responses_record_histogram_response_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_responses_record_histogram_response_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_responses_record_histogram_response_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_responses_record_histogram_response_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_responses_record_histogram_response_proto = out.File
	file_pkg_metrics_proto_responses_record_histogram_response_proto_goTypes = nil
	file_pkg_metrics_proto_responses_record_histogram_response_proto_depIdxs = nil
}
