// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/batch_options.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchOptions configures how batch operations should be processed.
type BatchOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to process metrics in parallel
	ParallelProcessing *bool `protobuf:"varint,1,opt,name=parallel_processing,json=parallelProcessing" json:"parallel_processing,omitempty"`
	// Maximum concurrent operations (if parallel processing is enabled)
	MaxConcurrency *int32 `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency" json:"max_concurrency,omitempty"`
	// Whether to deduplicate metrics within the batch
	Deduplicate *bool `protobuf:"varint,3,opt,name=deduplicate" json:"deduplicate,omitempty"`
	// Whether to return detailed results for each metric
	ReturnDetailedResults *bool `protobuf:"varint,4,opt,name=return_detailed_results,json=returnDetailedResults" json:"return_detailed_results,omitempty"`
	// Timeout for the entire batch operation (seconds)
	TimeoutSeconds *int32 `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds" json:"timeout_seconds,omitempty"`
	// Whether to enable transactional semantics (all or nothing)
	Transactional *bool `protobuf:"varint,6,opt,name=transactional" json:"transactional,omitempty"`
	// Priority level for the batch operation
	Priority      *BatchPriority `protobuf:"varint,7,opt,name=priority,enum=gcommon.v1.metrics.BatchPriority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOptions) Reset() {
	*x = BatchOptions{}
	mi := &file_pkg_metrics_proto_batch_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOptions) ProtoMessage() {}

func (x *BatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_batch_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOptions.ProtoReflect.Descriptor instead.
func (*BatchOptions) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_batch_options_proto_rawDescGZIP(), []int{0}
}

func (x *BatchOptions) GetParallelProcessing() bool {
	if x != nil && x.ParallelProcessing != nil {
		return *x.ParallelProcessing
	}
	return false
}

func (x *BatchOptions) GetMaxConcurrency() int32 {
	if x != nil && x.MaxConcurrency != nil {
		return *x.MaxConcurrency
	}
	return 0
}

func (x *BatchOptions) GetDeduplicate() bool {
	if x != nil && x.Deduplicate != nil {
		return *x.Deduplicate
	}
	return false
}

func (x *BatchOptions) GetReturnDetailedResults() bool {
	if x != nil && x.ReturnDetailedResults != nil {
		return *x.ReturnDetailedResults
	}
	return false
}

func (x *BatchOptions) GetTimeoutSeconds() int32 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return 0
}

func (x *BatchOptions) GetTransactional() bool {
	if x != nil && x.Transactional != nil {
		return *x.Transactional
	}
	return false
}

func (x *BatchOptions) GetPriority() BatchPriority {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return BatchPriority_BATCH_PRIORITY_UNSPECIFIED
}

var File_pkg_metrics_proto_batch_options_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_batch_options_proto_rawDesc = "" +
	"\n" +
	"%pkg/metrics/proto/batch_options.proto\x12\x12gcommon.v1.metrics\x1a&pkg/metrics/proto/batch_priority.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd0\x02\n" +
	"\fBatchOptions\x12/\n" +
	"\x13parallel_processing\x18\x01 \x01(\bR\x12parallelProcessing\x12'\n" +
	"\x0fmax_concurrency\x18\x02 \x01(\x05R\x0emaxConcurrency\x12 \n" +
	"\vdeduplicate\x18\x03 \x01(\bR\vdeduplicate\x126\n" +
	"\x17return_detailed_results\x18\x04 \x01(\bR\x15returnDetailedResults\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\x12$\n" +
	"\rtransactional\x18\x06 \x01(\bR\rtransactional\x12=\n" +
	"\bpriority\x18\a \x01(\x0e2!.gcommon.v1.metrics.BatchPriorityR\bpriorityB\xc2\x01\n" +
	"\x16com.gcommon.v1.metricsB\x11BatchOptionsProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_batch_options_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_batch_options_proto_rawDescData []byte
)

func file_pkg_metrics_proto_batch_options_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_batch_options_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_batch_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_batch_options_proto_rawDesc), len(file_pkg_metrics_proto_batch_options_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_batch_options_proto_rawDescData
}

var file_pkg_metrics_proto_batch_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_metrics_proto_batch_options_proto_goTypes = []any{
	(*BatchOptions)(nil), // 0: gcommon.v1.metrics.BatchOptions
	(BatchPriority)(0),   // 1: gcommon.v1.metrics.BatchPriority
}
var file_pkg_metrics_proto_batch_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.BatchOptions.priority:type_name -> gcommon.v1.metrics.BatchPriority
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_batch_options_proto_init() }
func file_pkg_metrics_proto_batch_options_proto_init() {
	if File_pkg_metrics_proto_batch_options_proto != nil {
		return
	}
	file_pkg_metrics_proto_batch_priority_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_batch_options_proto_rawDesc), len(file_pkg_metrics_proto_batch_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_batch_options_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_batch_options_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_batch_options_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_batch_options_proto = out.File
	file_pkg_metrics_proto_batch_options_proto_goTypes = nil
	file_pkg_metrics_proto_batch_options_proto_depIdxs = nil
}
