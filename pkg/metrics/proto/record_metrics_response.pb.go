// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/record_metrics_response.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RecordMetricsResponse contains the results of recording multiple metrics in batch.
type RecordMetricsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Overall success status of the batch operation
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Number of metrics successfully recorded
	SuccessCount *int32 `protobuf:"varint,2,opt,name=success_count,json=successCount" json:"success_count,omitempty"`
	// Number of metrics that failed to record
	FailureCount *int32 `protobuf:"varint,3,opt,name=failure_count,json=failureCount" json:"failure_count,omitempty"`
	// Total number of metrics processed
	TotalCount *int32 `protobuf:"varint,4,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Overall error information if the batch operation failed
	Error *proto.Error `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	// Detailed results for each metric (if requested)
	Results []*MetricResult `protobuf:"bytes,6,rep,name=results" json:"results,omitempty"`
	// Timestamp when the batch operation was completed
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=completed_at,json=completedAt" json:"completed_at,omitempty"`
	// Provider that handled the batch
	ProviderId *string `protobuf:"bytes,8,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Performance metrics about the batch operation
	Stats *BatchStats `protobuf:"bytes,9,opt,name=stats" json:"stats,omitempty"`
	// Warnings or informational messages about the batch
	Warnings []string `protobuf:"bytes,10,rep,name=warnings" json:"warnings,omitempty"`
	// Summary of validation results (if validation was enabled)
	ValidationSummary *ValidationSummary `protobuf:"bytes,11,opt,name=validation_summary,json=validationSummary" json:"validation_summary,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RecordMetricsResponse) Reset() {
	*x = RecordMetricsResponse{}
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetricsResponse) ProtoMessage() {}

func (x *RecordMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMetricsResponse.ProtoReflect.Descriptor instead.
func (*RecordMetricsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_record_metrics_response_proto_rawDescGZIP(), []int{0}
}

func (x *RecordMetricsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *RecordMetricsResponse) GetSuccessCount() int32 {
	if x != nil && x.SuccessCount != nil {
		return *x.SuccessCount
	}
	return 0
}

func (x *RecordMetricsResponse) GetFailureCount() int32 {
	if x != nil && x.FailureCount != nil {
		return *x.FailureCount
	}
	return 0
}

func (x *RecordMetricsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *RecordMetricsResponse) GetError() *proto.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RecordMetricsResponse) GetResults() []*MetricResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RecordMetricsResponse) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *RecordMetricsResponse) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *RecordMetricsResponse) GetStats() *BatchStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *RecordMetricsResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *RecordMetricsResponse) GetValidationSummary() *ValidationSummary {
	if x != nil {
		return x.ValidationSummary
	}
	return nil
}

// *
// MetricResult contains the result of processing a single metric within the batch.
type MetricResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index of the metric in the original batch (0-based)
	Index *int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// Success status for this specific metric
	Success *bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// Error information if this metric failed
	Error *proto.Error `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	// Unique ID assigned to the metric (if successful)
	MetricId *string `protobuf:"bytes,4,opt,name=metric_id,json=metricId" json:"metric_id,omitempty"`
	// Timestamp when this metric was recorded
	RecordedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=recorded_at,json=recordedAt" json:"recorded_at,omitempty"`
	// Warnings specific to this metric
	Warnings []string `protobuf:"bytes,6,rep,name=warnings" json:"warnings,omitempty"`
	// Whether this metric was deduplicated
	Deduplicated  *bool `protobuf:"varint,7,opt,name=deduplicated" json:"deduplicated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricResult) Reset() {
	*x = MetricResult{}
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricResult) ProtoMessage() {}

func (x *MetricResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricResult.ProtoReflect.Descriptor instead.
func (*MetricResult) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_record_metrics_response_proto_rawDescGZIP(), []int{1}
}

func (x *MetricResult) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MetricResult) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *MetricResult) GetError() *proto.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MetricResult) GetMetricId() string {
	if x != nil && x.MetricId != nil {
		return *x.MetricId
	}
	return ""
}

func (x *MetricResult) GetRecordedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordedAt
	}
	return nil
}

func (x *MetricResult) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *MetricResult) GetDeduplicated() bool {
	if x != nil && x.Deduplicated != nil {
		return *x.Deduplicated
	}
	return false
}

// *
// BatchStats contains performance information about the batch operation.
type BatchStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total time taken to process the batch (milliseconds)
	TotalProcessingTimeMs *int64 `protobuf:"varint,1,opt,name=total_processing_time_ms,json=totalProcessingTimeMs" json:"total_processing_time_ms,omitempty"`
	// Average time per metric (milliseconds)
	AvgProcessingTimeMs *int64 `protobuf:"varint,2,opt,name=avg_processing_time_ms,json=avgProcessingTimeMs" json:"avg_processing_time_ms,omitempty"`
	// Total size of all metrics data (bytes)
	TotalDataSizeBytes *int64 `protobuf:"varint,3,opt,name=total_data_size_bytes,json=totalDataSizeBytes" json:"total_data_size_bytes,omitempty"`
	// Number of metrics that were deduplicated
	DeduplicationCount *int32 `protobuf:"varint,4,opt,name=deduplication_count,json=deduplicationCount" json:"deduplication_count,omitempty"`
	// Number of parallel workers used
	ParallelWorkers *int32 `protobuf:"varint,5,opt,name=parallel_workers,json=parallelWorkers" json:"parallel_workers,omitempty"`
	// Backend storage latency (milliseconds)
	StorageLatencyMs *int64 `protobuf:"varint,6,opt,name=storage_latency_ms,json=storageLatencyMs" json:"storage_latency_ms,omitempty"`
	// Memory usage during batch processing (bytes)
	MemoryUsageBytes *int64 `protobuf:"varint,7,opt,name=memory_usage_bytes,json=memoryUsageBytes" json:"memory_usage_bytes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BatchStats) Reset() {
	*x = BatchStats{}
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStats) ProtoMessage() {}

func (x *BatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStats.ProtoReflect.Descriptor instead.
func (*BatchStats) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_record_metrics_response_proto_rawDescGZIP(), []int{2}
}

func (x *BatchStats) GetTotalProcessingTimeMs() int64 {
	if x != nil && x.TotalProcessingTimeMs != nil {
		return *x.TotalProcessingTimeMs
	}
	return 0
}

func (x *BatchStats) GetAvgProcessingTimeMs() int64 {
	if x != nil && x.AvgProcessingTimeMs != nil {
		return *x.AvgProcessingTimeMs
	}
	return 0
}

func (x *BatchStats) GetTotalDataSizeBytes() int64 {
	if x != nil && x.TotalDataSizeBytes != nil {
		return *x.TotalDataSizeBytes
	}
	return 0
}

func (x *BatchStats) GetDeduplicationCount() int32 {
	if x != nil && x.DeduplicationCount != nil {
		return *x.DeduplicationCount
	}
	return 0
}

func (x *BatchStats) GetParallelWorkers() int32 {
	if x != nil && x.ParallelWorkers != nil {
		return *x.ParallelWorkers
	}
	return 0
}

func (x *BatchStats) GetStorageLatencyMs() int64 {
	if x != nil && x.StorageLatencyMs != nil {
		return *x.StorageLatencyMs
	}
	return 0
}

func (x *BatchStats) GetMemoryUsageBytes() int64 {
	if x != nil && x.MemoryUsageBytes != nil {
		return *x.MemoryUsageBytes
	}
	return 0
}

// *
// ValidationSummary provides an overview of validation results for the batch.
type ValidationSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of metrics that passed validation
	ValidCount *int32 `protobuf:"varint,1,opt,name=valid_count,json=validCount" json:"valid_count,omitempty"`
	// Number of metrics that failed validation
	InvalidCount *int32 `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount" json:"invalid_count,omitempty"`
	// Most common validation errors
	CommonErrors []string `protobuf:"bytes,3,rep,name=common_errors,json=commonErrors" json:"common_errors,omitempty"`
	// Schema version used for validation
	SchemaVersion *string `protobuf:"bytes,4,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationSummary) Reset() {
	*x = ValidationSummary{}
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationSummary) ProtoMessage() {}

func (x *ValidationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_record_metrics_response_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationSummary.ProtoReflect.Descriptor instead.
func (*ValidationSummary) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_record_metrics_response_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationSummary) GetValidCount() int32 {
	if x != nil && x.ValidCount != nil {
		return *x.ValidCount
	}
	return 0
}

func (x *ValidationSummary) GetInvalidCount() int32 {
	if x != nil && x.InvalidCount != nil {
		return *x.InvalidCount
	}
	return 0
}

func (x *ValidationSummary) GetCommonErrors() []string {
	if x != nil {
		return x.CommonErrors
	}
	return nil
}

func (x *ValidationSummary) GetSchemaVersion() string {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return ""
}

var File_pkg_metrics_proto_record_metrics_response_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_record_metrics_response_proto_rawDesc = "" +
	"\n" +
	"/pkg/metrics/proto/record_metrics_response.proto\x12\x12gcommon.v1.metrics\x1a\x1cpkg/common/proto/error.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x90\x04\n" +
	"\x15RecordMetricsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12#\n" +
	"\rsuccess_count\x18\x02 \x01(\x05R\fsuccessCount\x12#\n" +
	"\rfailure_count\x18\x03 \x01(\x05R\ffailureCount\x12\x1f\n" +
	"\vtotal_count\x18\x04 \x01(\x05R\n" +
	"totalCount\x12.\n" +
	"\x05error\x18\x05 \x01(\v2\x18.gcommon.v1.common.ErrorR\x05error\x12:\n" +
	"\aresults\x18\x06 \x03(\v2 .gcommon.v1.metrics.MetricResultR\aresults\x12=\n" +
	"\fcompleted_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x12\x1f\n" +
	"\vprovider_id\x18\b \x01(\tR\n" +
	"providerId\x124\n" +
	"\x05stats\x18\t \x01(\v2\x1e.gcommon.v1.metrics.BatchStatsR\x05stats\x12\x1a\n" +
	"\bwarnings\x18\n" +
	" \x03(\tR\bwarnings\x12T\n" +
	"\x12validation_summary\x18\v \x01(\v2%.gcommon.v1.metrics.ValidationSummaryR\x11validationSummary\"\x88\x02\n" +
	"\fMetricResult\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12.\n" +
	"\x05error\x18\x03 \x01(\v2\x18.gcommon.v1.common.ErrorR\x05error\x12\x1b\n" +
	"\tmetric_id\x18\x04 \x01(\tR\bmetricId\x12;\n" +
	"\vrecorded_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"recordedAt\x12\x1a\n" +
	"\bwarnings\x18\x06 \x03(\tR\bwarnings\x12\"\n" +
	"\fdeduplicated\x18\a \x01(\bR\fdeduplicated\"\xe5\x02\n" +
	"\n" +
	"BatchStats\x127\n" +
	"\x18total_processing_time_ms\x18\x01 \x01(\x03R\x15totalProcessingTimeMs\x123\n" +
	"\x16avg_processing_time_ms\x18\x02 \x01(\x03R\x13avgProcessingTimeMs\x121\n" +
	"\x15total_data_size_bytes\x18\x03 \x01(\x03R\x12totalDataSizeBytes\x12/\n" +
	"\x13deduplication_count\x18\x04 \x01(\x05R\x12deduplicationCount\x12)\n" +
	"\x10parallel_workers\x18\x05 \x01(\x05R\x0fparallelWorkers\x12,\n" +
	"\x12storage_latency_ms\x18\x06 \x01(\x03R\x10storageLatencyMs\x12,\n" +
	"\x12memory_usage_bytes\x18\a \x01(\x03R\x10memoryUsageBytes\"\xa5\x01\n" +
	"\x11ValidationSummary\x12\x1f\n" +
	"\vvalid_count\x18\x01 \x01(\x05R\n" +
	"validCount\x12#\n" +
	"\rinvalid_count\x18\x02 \x01(\x05R\finvalidCount\x12#\n" +
	"\rcommon_errors\x18\x03 \x03(\tR\fcommonErrors\x12%\n" +
	"\x0eschema_version\x18\x04 \x01(\tR\rschemaVersionB\xcb\x01\n" +
	"\x16com.gcommon.v1.metricsB\x1aRecordMetricsResponseProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_record_metrics_response_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_record_metrics_response_proto_rawDescData []byte
)

func file_pkg_metrics_proto_record_metrics_response_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_record_metrics_response_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_record_metrics_response_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_record_metrics_response_proto_rawDesc), len(file_pkg_metrics_proto_record_metrics_response_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_record_metrics_response_proto_rawDescData
}

var file_pkg_metrics_proto_record_metrics_response_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_metrics_proto_record_metrics_response_proto_goTypes = []any{
	(*RecordMetricsResponse)(nil), // 0: gcommon.v1.metrics.RecordMetricsResponse
	(*MetricResult)(nil),          // 1: gcommon.v1.metrics.MetricResult
	(*BatchStats)(nil),            // 2: gcommon.v1.metrics.BatchStats
	(*ValidationSummary)(nil),     // 3: gcommon.v1.metrics.ValidationSummary
	(*proto.Error)(nil),           // 4: gcommon.v1.common.Error
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_pkg_metrics_proto_record_metrics_response_proto_depIdxs = []int32{
	4, // 0: gcommon.v1.metrics.RecordMetricsResponse.error:type_name -> gcommon.v1.common.Error
	1, // 1: gcommon.v1.metrics.RecordMetricsResponse.results:type_name -> gcommon.v1.metrics.MetricResult
	5, // 2: gcommon.v1.metrics.RecordMetricsResponse.completed_at:type_name -> google.protobuf.Timestamp
	2, // 3: gcommon.v1.metrics.RecordMetricsResponse.stats:type_name -> gcommon.v1.metrics.BatchStats
	3, // 4: gcommon.v1.metrics.RecordMetricsResponse.validation_summary:type_name -> gcommon.v1.metrics.ValidationSummary
	4, // 5: gcommon.v1.metrics.MetricResult.error:type_name -> gcommon.v1.common.Error
	5, // 6: gcommon.v1.metrics.MetricResult.recorded_at:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_record_metrics_response_proto_init() }
func file_pkg_metrics_proto_record_metrics_response_proto_init() {
	if File_pkg_metrics_proto_record_metrics_response_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_record_metrics_response_proto_rawDesc), len(file_pkg_metrics_proto_record_metrics_response_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_record_metrics_response_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_record_metrics_response_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_record_metrics_response_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_record_metrics_response_proto = out.File
	file_pkg_metrics_proto_record_metrics_response_proto_goTypes = nil
	file_pkg_metrics_proto_record_metrics_response_proto_depIdxs = nil
}
