// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/record_counter_request.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// RecordCounterRequest is used to record or increment a counter metric.
type RecordCounterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metric name (e.g., "http_requests_total")
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Value to add to the counter (default: 1.0)
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	// Labels for metric dimensions
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Help text describing the metric
	Help *string `protobuf:"bytes,4,opt,name=help" json:"help,omitempty"`
	// Metric unit (e.g., "requests", "bytes")
	Unit *string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	// Sample rate (0.0-1.0, used for sampling)
	SampleRate *float64 `protobuf:"fixed64,6,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	// Request metadata for tracing and debugging
	Metadata      *proto.RequestMetadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCounterRequest) Reset() {
	*x = RecordCounterRequest{}
	mi := &file_pkg_metrics_proto_record_counter_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCounterRequest) ProtoMessage() {}

func (x *RecordCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_record_counter_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCounterRequest.ProtoReflect.Descriptor instead.
func (*RecordCounterRequest) Descriptor() ([]byte, []int) {
	return file_pkg_metrics_proto_record_counter_request_proto_rawDescGZIP(), []int{0}
}

func (x *RecordCounterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RecordCounterRequest) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *RecordCounterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RecordCounterRequest) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

func (x *RecordCounterRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *RecordCounterRequest) GetSampleRate() float64 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *RecordCounterRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_pkg_metrics_proto_record_counter_request_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_record_counter_request_proto_rawDesc = "" +
	"\n" +
	".pkg/metrics/proto/record_counter_request.proto\x12\x12gcommon.v1.metrics\x1a'pkg/common/proto/request_metadata.proto\"\xd2\x02\n" +
	"\x14RecordCounterRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12L\n" +
	"\x06labels\x18\x03 \x03(\v24.gcommon.v1.metrics.RecordCounterRequest.LabelsEntryR\x06labels\x12\x12\n" +
	"\x04help\x18\x04 \x01(\tR\x04help\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x12\x1f\n" +
	"\vsample_rate\x18\x06 \x01(\x01R\n" +
	"sampleRate\x12>\n" +
	"\bmetadata\x18\a \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xca\x01\n" +
	"\x16com.gcommon.v1.metricsB\x19RecordCounterRequestProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metricsb\beditionsp\xe8\a"

var (
	file_pkg_metrics_proto_record_counter_request_proto_rawDescOnce sync.Once
	file_pkg_metrics_proto_record_counter_request_proto_rawDescData []byte
)

func file_pkg_metrics_proto_record_counter_request_proto_rawDescGZIP() []byte {
	file_pkg_metrics_proto_record_counter_request_proto_rawDescOnce.Do(func() {
		file_pkg_metrics_proto_record_counter_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_record_counter_request_proto_rawDesc), len(file_pkg_metrics_proto_record_counter_request_proto_rawDesc)))
	})
	return file_pkg_metrics_proto_record_counter_request_proto_rawDescData
}

var file_pkg_metrics_proto_record_counter_request_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_record_counter_request_proto_goTypes = []any{
	(*RecordCounterRequest)(nil),  // 0: gcommon.v1.metrics.RecordCounterRequest
	nil,                           // 1: gcommon.v1.metrics.RecordCounterRequest.LabelsEntry
	(*proto.RequestMetadata)(nil), // 2: gcommon.v1.common.RequestMetadata
}
var file_pkg_metrics_proto_record_counter_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.metrics.RecordCounterRequest.labels:type_name -> gcommon.v1.metrics.RecordCounterRequest.LabelsEntry
	2, // 1: gcommon.v1.metrics.RecordCounterRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_record_counter_request_proto_init() }
func file_pkg_metrics_proto_record_counter_request_proto_init() {
	if File_pkg_metrics_proto_record_counter_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_record_counter_request_proto_rawDesc), len(file_pkg_metrics_proto_record_counter_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_record_counter_request_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_record_counter_request_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_record_counter_request_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_record_counter_request_proto = out.File
	file_pkg_metrics_proto_record_counter_request_proto_goTypes = nil
	file_pkg_metrics_proto_record_counter_request_proto_depIdxs = nil
}
