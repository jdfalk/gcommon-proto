// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/metrics/proto/types/pagination_info.proto

//go:build !protoopaque

package metricspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// PaginationInfo contains information about paginated results.
type PaginationInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Current page number (1-based)
	Page *uint32 `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	// Number of items per page
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Total number of items across all pages
	TotalItems *uint64 `protobuf:"varint,3,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
	// Total number of pages
	TotalPages *uint32 `protobuf:"varint,4,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	// Whether there is a next page
	HasNext *bool `protobuf:"varint,5,opt,name=has_next,json=hasNext" json:"has_next,omitempty"`
	// Whether there is a previous page
	HasPrevious *bool `protobuf:"varint,6,opt,name=has_previous,json=hasPrevious" json:"has_previous,omitempty"`
	// Cursor for cursor-based pagination (optional)
	NextCursor *string `protobuf:"bytes,7,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// Cursor for previous page (optional)
	PreviousCursor *string `protobuf:"bytes,8,opt,name=previous_cursor,json=previousCursor" json:"previous_cursor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PaginationInfo) Reset() {
	*x = PaginationInfo{}
	mi := &file_pkg_metrics_proto_types_pagination_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationInfo) ProtoMessage() {}

func (x *PaginationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_types_pagination_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PaginationInfo) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *PaginationInfo) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *PaginationInfo) GetTotalItems() uint64 {
	if x != nil && x.TotalItems != nil {
		return *x.TotalItems
	}
	return 0
}

func (x *PaginationInfo) GetTotalPages() uint32 {
	if x != nil && x.TotalPages != nil {
		return *x.TotalPages
	}
	return 0
}

func (x *PaginationInfo) GetHasNext() bool {
	if x != nil && x.HasNext != nil {
		return *x.HasNext
	}
	return false
}

func (x *PaginationInfo) GetHasPrevious() bool {
	if x != nil && x.HasPrevious != nil {
		return *x.HasPrevious
	}
	return false
}

func (x *PaginationInfo) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

func (x *PaginationInfo) GetPreviousCursor() string {
	if x != nil && x.PreviousCursor != nil {
		return *x.PreviousCursor
	}
	return ""
}

func (x *PaginationInfo) SetPage(v uint32) {
	x.Page = &v
}

func (x *PaginationInfo) SetPageSize(v uint32) {
	x.PageSize = &v
}

func (x *PaginationInfo) SetTotalItems(v uint64) {
	x.TotalItems = &v
}

func (x *PaginationInfo) SetTotalPages(v uint32) {
	x.TotalPages = &v
}

func (x *PaginationInfo) SetHasNext(v bool) {
	x.HasNext = &v
}

func (x *PaginationInfo) SetHasPrevious(v bool) {
	x.HasPrevious = &v
}

func (x *PaginationInfo) SetNextCursor(v string) {
	x.NextCursor = &v
}

func (x *PaginationInfo) SetPreviousCursor(v string) {
	x.PreviousCursor = &v
}

func (x *PaginationInfo) HasPage() bool {
	if x == nil {
		return false
	}
	return x.Page != nil
}

func (x *PaginationInfo) HasPageSize() bool {
	if x == nil {
		return false
	}
	return x.PageSize != nil
}

func (x *PaginationInfo) HasTotalItems() bool {
	if x == nil {
		return false
	}
	return x.TotalItems != nil
}

func (x *PaginationInfo) HasTotalPages() bool {
	if x == nil {
		return false
	}
	return x.TotalPages != nil
}

func (x *PaginationInfo) HasHasNext() bool {
	if x == nil {
		return false
	}
	return x.HasNext != nil
}

func (x *PaginationInfo) HasHasPrevious() bool {
	if x == nil {
		return false
	}
	return x.HasPrevious != nil
}

func (x *PaginationInfo) HasNextCursor() bool {
	if x == nil {
		return false
	}
	return x.NextCursor != nil
}

func (x *PaginationInfo) HasPreviousCursor() bool {
	if x == nil {
		return false
	}
	return x.PreviousCursor != nil
}

func (x *PaginationInfo) ClearPage() {
	x.Page = nil
}

func (x *PaginationInfo) ClearPageSize() {
	x.PageSize = nil
}

func (x *PaginationInfo) ClearTotalItems() {
	x.TotalItems = nil
}

func (x *PaginationInfo) ClearTotalPages() {
	x.TotalPages = nil
}

func (x *PaginationInfo) ClearHasNext() {
	x.HasNext = nil
}

func (x *PaginationInfo) ClearHasPrevious() {
	x.HasPrevious = nil
}

func (x *PaginationInfo) ClearNextCursor() {
	x.NextCursor = nil
}

func (x *PaginationInfo) ClearPreviousCursor() {
	x.PreviousCursor = nil
}

type PaginationInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Current page number (1-based)
	Page *uint32
	// Number of items per page
	PageSize *uint32
	// Total number of items across all pages
	TotalItems *uint64
	// Total number of pages
	TotalPages *uint32
	// Whether there is a next page
	HasNext *bool
	// Whether there is a previous page
	HasPrevious *bool
	// Cursor for cursor-based pagination (optional)
	NextCursor *string
	// Cursor for previous page (optional)
	PreviousCursor *string
}

func (b0 PaginationInfo_builder) Build() *PaginationInfo {
	m0 := &PaginationInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.Page = b.Page
	x.PageSize = b.PageSize
	x.TotalItems = b.TotalItems
	x.TotalPages = b.TotalPages
	x.HasNext = b.HasNext
	x.HasPrevious = b.HasPrevious
	x.NextCursor = b.NextCursor
	x.PreviousCursor = b.PreviousCursor
	return m0
}

var File_pkg_metrics_proto_types_pagination_info_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_types_pagination_info_proto_rawDesc = "" +
	"\n" +
	"-pkg/metrics/proto/types/pagination_info.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\"\x8b\x02\n" +
	"\x0ePaginationInfo\x12\x12\n" +
	"\x04page\x18\x01 \x01(\rR\x04page\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\rR\bpageSize\x12\x1f\n" +
	"\vtotal_items\x18\x03 \x01(\x04R\n" +
	"totalItems\x12\x1f\n" +
	"\vtotal_pages\x18\x04 \x01(\rR\n" +
	"totalPages\x12\x19\n" +
	"\bhas_next\x18\x05 \x01(\bR\ahasNext\x12!\n" +
	"\fhas_previous\x18\x06 \x01(\bR\vhasPrevious\x12\x1f\n" +
	"\vnext_cursor\x18\a \x01(\tR\n" +
	"nextCursor\x12'\n" +
	"\x0fprevious_cursor\x18\b \x01(\tR\x0epreviousCursorB\xc8\x01\n" +
	"\x16com.gcommon.v1.metricsB\x13PaginationInfoProtoP\x01Z'../../../../pkg/metrics/proto;metricspb\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_metrics_proto_types_pagination_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_metrics_proto_types_pagination_info_proto_goTypes = []any{
	(*PaginationInfo)(nil), // 0: gcommon.v1.metrics.PaginationInfo
}
var file_pkg_metrics_proto_types_pagination_info_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_types_pagination_info_proto_init() }
func file_pkg_metrics_proto_types_pagination_info_proto_init() {
	if File_pkg_metrics_proto_types_pagination_info_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_types_pagination_info_proto_rawDesc), len(file_pkg_metrics_proto_types_pagination_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_types_pagination_info_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_types_pagination_info_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_types_pagination_info_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_types_pagination_info_proto = out.File
	file_pkg_metrics_proto_types_pagination_info_proto_goTypes = nil
	file_pkg_metrics_proto_types_pagination_info_proto_depIdxs = nil
}
