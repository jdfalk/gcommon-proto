// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: pkg/metrics/proto/metric_value.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricValue struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Timestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp"`
	xxx_hidden_Value       isMetricValue_Value    `protobuf_oneof:"value"`
	xxx_hidden_Labels      map[string]string      `protobuf:"bytes,8,rep,name=labels" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_SampleCount uint64                 `protobuf:"varint,9,opt,name=sample_count,json=sampleCount"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MetricValue) Reset() {
	*x = MetricValue{}
	mi := &file_pkg_metrics_proto_metric_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValue) ProtoMessage() {}

func (x *MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_metrics_proto_metric_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricValue) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_Timestamp
	}
	return nil
}

func (x *MetricValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *MetricValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *MetricValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *MetricValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *MetricValue) GetHistogramValue() *HistogramValue {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_HistogramValue); ok {
			return x.HistogramValue
		}
	}
	return nil
}

func (x *MetricValue) GetSummaryValue() *SummaryValue {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*metricValue_SummaryValue); ok {
			return x.SummaryValue
		}
	}
	return nil
}

func (x *MetricValue) GetLabels() map[string]string {
	if x != nil {
		return x.xxx_hidden_Labels
	}
	return nil
}

func (x *MetricValue) GetSampleCount() uint64 {
	if x != nil {
		return x.xxx_hidden_SampleCount
	}
	return 0
}

func (x *MetricValue) SetTimestamp(v *timestamppb.Timestamp) {
	x.xxx_hidden_Timestamp = v
}

func (x *MetricValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &metricValue_DoubleValue{v}
}

func (x *MetricValue) SetIntValue(v int64) {
	x.xxx_hidden_Value = &metricValue_IntValue{v}
}

func (x *MetricValue) SetStringValue(v string) {
	x.xxx_hidden_Value = &metricValue_StringValue{v}
}

func (x *MetricValue) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &metricValue_BoolValue{v}
}

func (x *MetricValue) SetHistogramValue(v *HistogramValue) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &metricValue_HistogramValue{v}
}

func (x *MetricValue) SetSummaryValue(v *SummaryValue) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &metricValue_SummaryValue{v}
}

func (x *MetricValue) SetLabels(v map[string]string) {
	x.xxx_hidden_Labels = v
}

func (x *MetricValue) SetSampleCount(v uint64) {
	x.xxx_hidden_SampleCount = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *MetricValue) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Timestamp != nil
}

func (x *MetricValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *MetricValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_DoubleValue)
	return ok
}

func (x *MetricValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_IntValue)
	return ok
}

func (x *MetricValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_StringValue)
	return ok
}

func (x *MetricValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_BoolValue)
	return ok
}

func (x *MetricValue) HasHistogramValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_HistogramValue)
	return ok
}

func (x *MetricValue) HasSummaryValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*metricValue_SummaryValue)
	return ok
}

func (x *MetricValue) HasSampleCount() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *MetricValue) ClearTimestamp() {
	x.xxx_hidden_Timestamp = nil
}

func (x *MetricValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *MetricValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearStringValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_StringValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearHistogramValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_HistogramValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearSummaryValue() {
	if _, ok := x.xxx_hidden_Value.(*metricValue_SummaryValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *MetricValue) ClearSampleCount() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_SampleCount = 0
}

const MetricValue_Value_not_set_case case_MetricValue_Value = 0
const MetricValue_DoubleValue_case case_MetricValue_Value = 2
const MetricValue_IntValue_case case_MetricValue_Value = 3
const MetricValue_StringValue_case case_MetricValue_Value = 4
const MetricValue_BoolValue_case case_MetricValue_Value = 5
const MetricValue_HistogramValue_case case_MetricValue_Value = 6
const MetricValue_SummaryValue_case case_MetricValue_Value = 7

func (x *MetricValue) WhichValue() case_MetricValue_Value {
	if x == nil {
		return MetricValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *metricValue_DoubleValue:
		return MetricValue_DoubleValue_case
	case *metricValue_IntValue:
		return MetricValue_IntValue_case
	case *metricValue_StringValue:
		return MetricValue_StringValue_case
	case *metricValue_BoolValue:
		return MetricValue_BoolValue_case
	case *metricValue_HistogramValue:
		return MetricValue_HistogramValue_case
	case *metricValue_SummaryValue:
		return MetricValue_SummaryValue_case
	default:
		return MetricValue_Value_not_set_case
	}
}

type MetricValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Timestamp when this metric value was recorded
	Timestamp *timestamppb.Timestamp
	// The metric value - using oneof to support different value types

	// Fields of oneof xxx_hidden_Value:
	// Double precision floating point value
	DoubleValue *float64
	// Integer value (64-bit signed)
	IntValue *int64
	// String value (for label/text metrics)
	StringValue *string
	// Boolean value
	BoolValue *bool
	// Histogram bucket values (for histogram metrics)
	HistogramValue *HistogramValue
	// Summary quantile values (for summary metrics)
	SummaryValue *SummaryValue
	// -- end of xxx_hidden_Value
	// Optional labels/tags associated with this specific value
	Labels map[string]string
	// Optional sample count (for aggregated values)
	SampleCount *uint64
}

func (b0 MetricValue_builder) Build() *MetricValue {
	m0 := &MetricValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Timestamp = b.Timestamp
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &metricValue_DoubleValue{*b.DoubleValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &metricValue_IntValue{*b.IntValue}
	}
	if b.StringValue != nil {
		x.xxx_hidden_Value = &metricValue_StringValue{*b.StringValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &metricValue_BoolValue{*b.BoolValue}
	}
	if b.HistogramValue != nil {
		x.xxx_hidden_Value = &metricValue_HistogramValue{b.HistogramValue}
	}
	if b.SummaryValue != nil {
		x.xxx_hidden_Value = &metricValue_SummaryValue{b.SummaryValue}
	}
	x.xxx_hidden_Labels = b.Labels
	if b.SampleCount != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_SampleCount = *b.SampleCount
	}
	return m0
}

type case_MetricValue_Value protoreflect.FieldNumber

func (x case_MetricValue_Value) String() string {
	md := file_pkg_metrics_proto_metric_value_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isMetricValue_Value interface {
	isMetricValue_Value()
}

type metricValue_DoubleValue struct {
	// Double precision floating point value
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,oneof"`
}

type metricValue_IntValue struct {
	// Integer value (64-bit signed)
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,oneof"`
}

type metricValue_StringValue struct {
	// String value (for label/text metrics)
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}

type metricValue_BoolValue struct {
	// Boolean value
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,oneof"`
}

type metricValue_HistogramValue struct {
	// Histogram bucket values (for histogram metrics)
	HistogramValue *HistogramValue `protobuf:"bytes,6,opt,name=histogram_value,json=histogramValue,oneof"`
}

type metricValue_SummaryValue struct {
	// Summary quantile values (for summary metrics)
	SummaryValue *SummaryValue `protobuf:"bytes,7,opt,name=summary_value,json=summaryValue,oneof"`
}

func (*metricValue_DoubleValue) isMetricValue_Value() {}

func (*metricValue_IntValue) isMetricValue_Value() {}

func (*metricValue_StringValue) isMetricValue_Value() {}

func (*metricValue_BoolValue) isMetricValue_Value() {}

func (*metricValue_HistogramValue) isMetricValue_Value() {}

func (*metricValue_SummaryValue) isMetricValue_Value() {}

var File_pkg_metrics_proto_metric_value_proto protoreflect.FileDescriptor

const file_pkg_metrics_proto_metric_value_proto_rawDesc = "" +
	"\n" +
	"$pkg/metrics/proto/metric_value.proto\x12\x12gcommon.v1.metrics\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(pkg/metrics/proto/histogram_bucket.proto\x1a'pkg/metrics/proto/histogram_value.proto\x1a%pkg/metrics/proto/summary_value.proto\"\x95\x04\n" +
	"\vMetricValue\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12#\n" +
	"\fdouble_value\x18\x02 \x01(\x01H\x00R\vdoubleValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fstring_value\x18\x04 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x05 \x01(\bH\x00R\tboolValue\x12M\n" +
	"\x0fhistogram_value\x18\x06 \x01(\v2\".gcommon.v1.metrics.HistogramValueH\x00R\x0ehistogramValue\x12G\n" +
	"\rsummary_value\x18\a \x01(\v2 .gcommon.v1.metrics.SummaryValueH\x00R\fsummaryValue\x12C\n" +
	"\x06labels\x18\b \x03(\v2+.gcommon.v1.metrics.MetricValue.LabelsEntryR\x06labels\x12!\n" +
	"\fsample_count\x18\t \x01(\x04R\vsampleCount\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05valueB\xc9\x01\n" +
	"\x16com.gcommon.v1.metricsB\x10MetricValueProtoP\x01Z+github.com/jdfalk/gcommon/pkg/metrics/proto\xa2\x02\x03GVM\xaa\x02\x12Gcommon.V1.Metrics\xca\x02\x12Gcommon\\V1\\Metrics\xe2\x02\x1eGcommon\\V1\\Metrics\\GPBMetadata\xea\x02\x14Gcommon::V1::Metrics\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_pkg_metrics_proto_metric_value_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_metrics_proto_metric_value_proto_goTypes = []any{
	(*MetricValue)(nil),           // 0: gcommon.v1.metrics.MetricValue
	nil,                           // 1: gcommon.v1.metrics.MetricValue.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*HistogramValue)(nil),        // 3: gcommon.v1.metrics.HistogramValue
	(*SummaryValue)(nil),          // 4: gcommon.v1.metrics.SummaryValue
}
var file_pkg_metrics_proto_metric_value_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.metrics.MetricValue.timestamp:type_name -> google.protobuf.Timestamp
	3, // 1: gcommon.v1.metrics.MetricValue.histogram_value:type_name -> gcommon.v1.metrics.HistogramValue
	4, // 2: gcommon.v1.metrics.MetricValue.summary_value:type_name -> gcommon.v1.metrics.SummaryValue
	1, // 3: gcommon.v1.metrics.MetricValue.labels:type_name -> gcommon.v1.metrics.MetricValue.LabelsEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_metrics_proto_metric_value_proto_init() }
func file_pkg_metrics_proto_metric_value_proto_init() {
	if File_pkg_metrics_proto_metric_value_proto != nil {
		return
	}
	file_pkg_metrics_proto_histogram_bucket_proto_init()
	file_pkg_metrics_proto_histogram_value_proto_init()
	file_pkg_metrics_proto_summary_value_proto_init()
	file_pkg_metrics_proto_metric_value_proto_msgTypes[0].OneofWrappers = []any{
		(*metricValue_DoubleValue)(nil),
		(*metricValue_IntValue)(nil),
		(*metricValue_StringValue)(nil),
		(*metricValue_BoolValue)(nil),
		(*metricValue_HistogramValue)(nil),
		(*metricValue_SummaryValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_metrics_proto_metric_value_proto_rawDesc), len(file_pkg_metrics_proto_metric_value_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_metrics_proto_metric_value_proto_goTypes,
		DependencyIndexes: file_pkg_metrics_proto_metric_value_proto_depIdxs,
		MessageInfos:      file_pkg_metrics_proto_metric_value_proto_msgTypes,
	}.Build()
	File_pkg_metrics_proto_metric_value_proto = out.File
	file_pkg_metrics_proto_metric_value_proto_goTypes = nil
	file_pkg_metrics_proto_metric_value_proto_depIdxs = nil
}
