// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/config/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockConfigServiceServer creates a new instance of MockConfigServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigServiceServer {
	mock := &MockConfigServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigServiceServer is an autogenerated mock type for the ConfigServiceServer type
type MockConfigServiceServer struct {
	mock.Mock
}

type MockConfigServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigServiceServer) EXPECT() *MockConfigServiceServer_Expecter {
	return &MockConfigServiceServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Delete(context1 context.Context, deleteConfigRequest *proto.DeleteConfigRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteConfigRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteConfigRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteConfigRequest) error); ok {
		r1 = returnFunc(context1, deleteConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConfigServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteConfigRequest *proto.DeleteConfigRequest
func (_e *MockConfigServiceServer_Expecter) Delete(context1 interface{}, deleteConfigRequest interface{}) *MockConfigServiceServer_Delete_Call {
	return &MockConfigServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, deleteConfigRequest)}
}

func (_c *MockConfigServiceServer_Delete_Call) Run(run func(context1 context.Context, deleteConfigRequest *proto.DeleteConfigRequest)) *MockConfigServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_Delete_Call) Return(empty *emptypb.Empty, err error) *MockConfigServiceServer_Delete_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockConfigServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteConfigRequest *proto.DeleteConfigRequest) (*emptypb.Empty, error)) *MockConfigServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Get(context1 context.Context, getConfigRequest *proto.GetConfigRequest) (*proto.GetConfigResponse, error) {
	ret := _mock.Called(context1, getConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConfigRequest) (*proto.GetConfigResponse, error)); ok {
		return returnFunc(context1, getConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConfigRequest) *proto.GetConfigResponse); ok {
		r0 = returnFunc(context1, getConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetConfigRequest) error); ok {
		r1 = returnFunc(context1, getConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConfigServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getConfigRequest *proto.GetConfigRequest
func (_e *MockConfigServiceServer_Expecter) Get(context1 interface{}, getConfigRequest interface{}) *MockConfigServiceServer_Get_Call {
	return &MockConfigServiceServer_Get_Call{Call: _e.mock.On("Get", context1, getConfigRequest)}
}

func (_c *MockConfigServiceServer_Get_Call) Run(run func(context1 context.Context, getConfigRequest *proto.GetConfigRequest)) *MockConfigServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_Get_Call) Return(getConfigResponse *proto.GetConfigResponse, err error) *MockConfigServiceServer_Get_Call {
	_c.Call.Return(getConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, getConfigRequest *proto.GetConfigRequest) (*proto.GetConfigResponse, error)) *MockConfigServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiple provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) GetMultiple(context1 context.Context, getMultipleConfigRequest *proto.GetMultipleConfigRequest) (*proto.GetMultipleConfigResponse, error) {
	ret := _mock.Called(context1, getMultipleConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiple")
	}

	var r0 *proto.GetMultipleConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleConfigRequest) (*proto.GetMultipleConfigResponse, error)); ok {
		return returnFunc(context1, getMultipleConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleConfigRequest) *proto.GetMultipleConfigResponse); ok {
		r0 = returnFunc(context1, getMultipleConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMultipleConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMultipleConfigRequest) error); ok {
		r1 = returnFunc(context1, getMultipleConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_GetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiple'
type MockConfigServiceServer_GetMultiple_Call struct {
	*mock.Call
}

// GetMultiple is a helper method to define mock.On call
//   - context1 context.Context
//   - getMultipleConfigRequest *proto.GetMultipleConfigRequest
func (_e *MockConfigServiceServer_Expecter) GetMultiple(context1 interface{}, getMultipleConfigRequest interface{}) *MockConfigServiceServer_GetMultiple_Call {
	return &MockConfigServiceServer_GetMultiple_Call{Call: _e.mock.On("GetMultiple", context1, getMultipleConfigRequest)}
}

func (_c *MockConfigServiceServer_GetMultiple_Call) Run(run func(context1 context.Context, getMultipleConfigRequest *proto.GetMultipleConfigRequest)) *MockConfigServiceServer_GetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMultipleConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMultipleConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_GetMultiple_Call) Return(getMultipleConfigResponse *proto.GetMultipleConfigResponse, err error) *MockConfigServiceServer_GetMultiple_Call {
	_c.Call.Return(getMultipleConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_GetMultiple_Call) RunAndReturn(run func(context1 context.Context, getMultipleConfigRequest *proto.GetMultipleConfigRequest) (*proto.GetMultipleConfigResponse, error)) *MockConfigServiceServer_GetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchema provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) GetSchema(context1 context.Context, getSchemaRequest *proto.GetSchemaRequest) (*proto.GetSchemaResponse, error) {
	ret := _mock.Called(context1, getSchemaRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *proto.GetSchemaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSchemaRequest) (*proto.GetSchemaResponse, error)); ok {
		return returnFunc(context1, getSchemaRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSchemaRequest) *proto.GetSchemaResponse); ok {
		r0 = returnFunc(context1, getSchemaRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSchemaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSchemaRequest) error); ok {
		r1 = returnFunc(context1, getSchemaRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockConfigServiceServer_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - context1 context.Context
//   - getSchemaRequest *proto.GetSchemaRequest
func (_e *MockConfigServiceServer_Expecter) GetSchema(context1 interface{}, getSchemaRequest interface{}) *MockConfigServiceServer_GetSchema_Call {
	return &MockConfigServiceServer_GetSchema_Call{Call: _e.mock.On("GetSchema", context1, getSchemaRequest)}
}

func (_c *MockConfigServiceServer_GetSchema_Call) Run(run func(context1 context.Context, getSchemaRequest *proto.GetSchemaRequest)) *MockConfigServiceServer_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSchemaRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_GetSchema_Call) Return(getSchemaResponse *proto.GetSchemaResponse, err error) *MockConfigServiceServer_GetSchema_Call {
	_c.Call.Return(getSchemaResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_GetSchema_Call) RunAndReturn(run func(context1 context.Context, getSchemaRequest *proto.GetSchemaRequest) (*proto.GetSchemaResponse, error)) *MockConfigServiceServer_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) List(context1 context.Context, listConfigRequest *proto.ListConfigRequest) (*proto.ListConfigResponse, error) {
	ret := _mock.Called(context1, listConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *proto.ListConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListConfigRequest) (*proto.ListConfigResponse, error)); ok {
		return returnFunc(context1, listConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListConfigRequest) *proto.ListConfigResponse); ok {
		r0 = returnFunc(context1, listConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListConfigRequest) error); ok {
		r1 = returnFunc(context1, listConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConfigServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
//   - listConfigRequest *proto.ListConfigRequest
func (_e *MockConfigServiceServer_Expecter) List(context1 interface{}, listConfigRequest interface{}) *MockConfigServiceServer_List_Call {
	return &MockConfigServiceServer_List_Call{Call: _e.mock.On("List", context1, listConfigRequest)}
}

func (_c *MockConfigServiceServer_List_Call) Run(run func(context1 context.Context, listConfigRequest *proto.ListConfigRequest)) *MockConfigServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_List_Call) Return(listConfigResponse *proto.ListConfigResponse, err error) *MockConfigServiceServer_List_Call {
	_c.Call.Return(listConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_List_Call) RunAndReturn(run func(context1 context.Context, listConfigRequest *proto.ListConfigRequest) (*proto.ListConfigResponse, error)) *MockConfigServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Set(context1 context.Context, setConfigRequest *proto.SetConfigRequest) (*proto.SetConfigResponse, error) {
	ret := _mock.Called(context1, setConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetConfigRequest) (*proto.SetConfigResponse, error)); ok {
		return returnFunc(context1, setConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetConfigRequest) *proto.SetConfigResponse); ok {
		r0 = returnFunc(context1, setConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetConfigRequest) error); ok {
		r1 = returnFunc(context1, setConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockConfigServiceServer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1 context.Context
//   - setConfigRequest *proto.SetConfigRequest
func (_e *MockConfigServiceServer_Expecter) Set(context1 interface{}, setConfigRequest interface{}) *MockConfigServiceServer_Set_Call {
	return &MockConfigServiceServer_Set_Call{Call: _e.mock.On("Set", context1, setConfigRequest)}
}

func (_c *MockConfigServiceServer_Set_Call) Run(run func(context1 context.Context, setConfigRequest *proto.SetConfigRequest)) *MockConfigServiceServer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_Set_Call) Return(setConfigResponse *proto.SetConfigResponse, err error) *MockConfigServiceServer_Set_Call {
	_c.Call.Return(setConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Set_Call) RunAndReturn(run func(context1 context.Context, setConfigRequest *proto.SetConfigRequest) (*proto.SetConfigResponse, error)) *MockConfigServiceServer_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMultiple provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) SetMultiple(context1 context.Context, setMultipleConfigRequest *proto.SetMultipleConfigRequest) (*proto.SetMultipleConfigResponse, error) {
	ret := _mock.Called(context1, setMultipleConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 *proto.SetMultipleConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleConfigRequest) (*proto.SetMultipleConfigResponse, error)); ok {
		return returnFunc(context1, setMultipleConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleConfigRequest) *proto.SetMultipleConfigResponse); ok {
		r0 = returnFunc(context1, setMultipleConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetMultipleConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetMultipleConfigRequest) error); ok {
		r1 = returnFunc(context1, setMultipleConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type MockConfigServiceServer_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - context1 context.Context
//   - setMultipleConfigRequest *proto.SetMultipleConfigRequest
func (_e *MockConfigServiceServer_Expecter) SetMultiple(context1 interface{}, setMultipleConfigRequest interface{}) *MockConfigServiceServer_SetMultiple_Call {
	return &MockConfigServiceServer_SetMultiple_Call{Call: _e.mock.On("SetMultiple", context1, setMultipleConfigRequest)}
}

func (_c *MockConfigServiceServer_SetMultiple_Call) Run(run func(context1 context.Context, setMultipleConfigRequest *proto.SetMultipleConfigRequest)) *MockConfigServiceServer_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetMultipleConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetMultipleConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_SetMultiple_Call) Return(setMultipleConfigResponse *proto.SetMultipleConfigResponse, err error) *MockConfigServiceServer_SetMultiple_Call {
	_c.Call.Return(setMultipleConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_SetMultiple_Call) RunAndReturn(run func(context1 context.Context, setMultipleConfigRequest *proto.SetMultipleConfigRequest) (*proto.SetMultipleConfigResponse, error)) *MockConfigServiceServer_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Validate(context1 context.Context, validateConfigRequest *proto.ValidateConfigRequest) (*proto.ValidateConfigResponse, error) {
	ret := _mock.Called(context1, validateConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *proto.ValidateConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateConfigRequest) (*proto.ValidateConfigResponse, error)); ok {
		return returnFunc(context1, validateConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateConfigRequest) *proto.ValidateConfigResponse); ok {
		r0 = returnFunc(context1, validateConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateConfigRequest) error); ok {
		r1 = returnFunc(context1, validateConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockConfigServiceServer_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - context1 context.Context
//   - validateConfigRequest *proto.ValidateConfigRequest
func (_e *MockConfigServiceServer_Expecter) Validate(context1 interface{}, validateConfigRequest interface{}) *MockConfigServiceServer_Validate_Call {
	return &MockConfigServiceServer_Validate_Call{Call: _e.mock.On("Validate", context1, validateConfigRequest)}
}

func (_c *MockConfigServiceServer_Validate_Call) Run(run func(context1 context.Context, validateConfigRequest *proto.ValidateConfigRequest)) *MockConfigServiceServer_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_Validate_Call) Return(validateConfigResponse *proto.ValidateConfigResponse, err error) *MockConfigServiceServer_Validate_Call {
	_c.Call.Return(validateConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Validate_Call) RunAndReturn(run func(context1 context.Context, validateConfigRequest *proto.ValidateConfigRequest) (*proto.ValidateConfigResponse, error)) *MockConfigServiceServer_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Watch(watchConfigRequest *proto.WatchConfigRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchConfigResponse]) error {
	ret := _mock.Called(watchConfigRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.WatchConfigRequest, grpc.ServerStreamingServer[proto.WatchConfigResponse]) error); ok {
		r0 = returnFunc(watchConfigRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigServiceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockConfigServiceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - watchConfigRequest *proto.WatchConfigRequest
//   - serverStreamingServer grpc.ServerStreamingServer[proto.WatchConfigResponse]
func (_e *MockConfigServiceServer_Expecter) Watch(watchConfigRequest interface{}, serverStreamingServer interface{}) *MockConfigServiceServer_Watch_Call {
	return &MockConfigServiceServer_Watch_Call{Call: _e.mock.On("Watch", watchConfigRequest, serverStreamingServer)}
}

func (_c *MockConfigServiceServer_Watch_Call) Run(run func(watchConfigRequest *proto.WatchConfigRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchConfigResponse])) *MockConfigServiceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *proto.WatchConfigRequest
		if args[0] != nil {
			arg0 = args[0].(*proto.WatchConfigRequest)
		}
		var arg1 grpc.ServerStreamingServer[proto.WatchConfigResponse]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[proto.WatchConfigResponse])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigServiceServer_Watch_Call) Return(err error) *MockConfigServiceServer_Watch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigServiceServer_Watch_Call) RunAndReturn(run func(watchConfigRequest *proto.WatchConfigRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchConfigResponse]) error) *MockConfigServiceServer_Watch_Call {
	_c.Call.Return(run)
	return _c
}
