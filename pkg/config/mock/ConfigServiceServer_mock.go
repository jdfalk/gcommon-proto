// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/config/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockConfigServiceServer creates a new instance of MockConfigServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigServiceServer {
	mock := &MockConfigServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigServiceServer is an autogenerated mock type for the ConfigServiceServer type
type MockConfigServiceServer struct {
	mock.Mock
}

type MockConfigServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigServiceServer) EXPECT() *MockConfigServiceServer_Expecter {
	return &MockConfigServiceServer_Expecter{mock: &_m.Mock}
}

// AllKeys provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) AllKeys(context1 context.Context, allKeysRequest *proto.AllKeysRequest) (*proto.AllKeysResponse, error) {
	ret := _mock.Called(context1, allKeysRequest)

	if len(ret) == 0 {
		panic("no return value specified for AllKeys")
	}

	var r0 *proto.AllKeysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AllKeysRequest) (*proto.AllKeysResponse, error)); ok {
		return returnFunc(context1, allKeysRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AllKeysRequest) *proto.AllKeysResponse); ok {
		r0 = returnFunc(context1, allKeysRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AllKeysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AllKeysRequest) error); ok {
		r1 = returnFunc(context1, allKeysRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_AllKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeys'
type MockConfigServiceServer_AllKeys_Call struct {
	*mock.Call
}

// AllKeys is a helper method to define mock.On call
//   - context1
//   - allKeysRequest
func (_e *MockConfigServiceServer_Expecter) AllKeys(context1 interface{}, allKeysRequest interface{}) *MockConfigServiceServer_AllKeys_Call {
	return &MockConfigServiceServer_AllKeys_Call{Call: _e.mock.On("AllKeys", context1, allKeysRequest)}
}

func (_c *MockConfigServiceServer_AllKeys_Call) Run(run func(context1 context.Context, allKeysRequest *proto.AllKeysRequest)) *MockConfigServiceServer_AllKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AllKeysRequest))
	})
	return _c
}

func (_c *MockConfigServiceServer_AllKeys_Call) Return(allKeysResponse *proto.AllKeysResponse, err error) *MockConfigServiceServer_AllKeys_Call {
	_c.Call.Return(allKeysResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_AllKeys_Call) RunAndReturn(run func(context1 context.Context, allKeysRequest *proto.AllKeysRequest) (*proto.AllKeysResponse, error)) *MockConfigServiceServer_AllKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllSettings provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) AllSettings(context1 context.Context, allSettingsRequest *proto.AllSettingsRequest) (*proto.AllSettingsResponse, error) {
	ret := _mock.Called(context1, allSettingsRequest)

	if len(ret) == 0 {
		panic("no return value specified for AllSettings")
	}

	var r0 *proto.AllSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AllSettingsRequest) (*proto.AllSettingsResponse, error)); ok {
		return returnFunc(context1, allSettingsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AllSettingsRequest) *proto.AllSettingsResponse); ok {
		r0 = returnFunc(context1, allSettingsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AllSettingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AllSettingsRequest) error); ok {
		r1 = returnFunc(context1, allSettingsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_AllSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllSettings'
type MockConfigServiceServer_AllSettings_Call struct {
	*mock.Call
}

// AllSettings is a helper method to define mock.On call
//   - context1
//   - allSettingsRequest
func (_e *MockConfigServiceServer_Expecter) AllSettings(context1 interface{}, allSettingsRequest interface{}) *MockConfigServiceServer_AllSettings_Call {
	return &MockConfigServiceServer_AllSettings_Call{Call: _e.mock.On("AllSettings", context1, allSettingsRequest)}
}

func (_c *MockConfigServiceServer_AllSettings_Call) Run(run func(context1 context.Context, allSettingsRequest *proto.AllSettingsRequest)) *MockConfigServiceServer_AllSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AllSettingsRequest))
	})
	return _c
}

func (_c *MockConfigServiceServer_AllSettings_Call) Return(allSettingsResponse *proto.AllSettingsResponse, err error) *MockConfigServiceServer_AllSettings_Call {
	_c.Call.Return(allSettingsResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_AllSettings_Call) RunAndReturn(run func(context1 context.Context, allSettingsRequest *proto.AllSettingsRequest) (*proto.AllSettingsResponse, error)) *MockConfigServiceServer_AllSettings_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Get(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error) {
	ret := _mock.Called(context1, getRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) (*proto.GetResponse, error)); ok {
		return returnFunc(context1, getRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) *proto.GetResponse); ok {
		r0 = returnFunc(context1, getRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRequest) error); ok {
		r1 = returnFunc(context1, getRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConfigServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - getRequest
func (_e *MockConfigServiceServer_Expecter) Get(context1 interface{}, getRequest interface{}) *MockConfigServiceServer_Get_Call {
	return &MockConfigServiceServer_Get_Call{Call: _e.mock.On("Get", context1, getRequest)}
}

func (_c *MockConfigServiceServer_Get_Call) Run(run func(context1 context.Context, getRequest *proto.GetRequest)) *MockConfigServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetRequest))
	})
	return _c
}

func (_c *MockConfigServiceServer_Get_Call) Return(getResponse *proto.GetResponse, err error) *MockConfigServiceServer_Get_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error)) *MockConfigServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Has provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Has(context1 context.Context, hasRequest *proto.HasRequest) (*proto.HasResponse, error) {
	ret := _mock.Called(context1, hasRequest)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 *proto.HasResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRequest) (*proto.HasResponse, error)); ok {
		return returnFunc(context1, hasRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRequest) *proto.HasResponse); ok {
		r0 = returnFunc(context1, hasRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HasResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HasRequest) error); ok {
		r1 = returnFunc(context1, hasRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type MockConfigServiceServer_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - context1
//   - hasRequest
func (_e *MockConfigServiceServer_Expecter) Has(context1 interface{}, hasRequest interface{}) *MockConfigServiceServer_Has_Call {
	return &MockConfigServiceServer_Has_Call{Call: _e.mock.On("Has", context1, hasRequest)}
}

func (_c *MockConfigServiceServer_Has_Call) Run(run func(context1 context.Context, hasRequest *proto.HasRequest)) *MockConfigServiceServer_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.HasRequest))
	})
	return _c
}

func (_c *MockConfigServiceServer_Has_Call) Return(hasResponse *proto.HasResponse, err error) *MockConfigServiceServer_Has_Call {
	_c.Call.Return(hasResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Has_Call) RunAndReturn(run func(context1 context.Context, hasRequest *proto.HasRequest) (*proto.HasResponse, error)) *MockConfigServiceServer_Has_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Set(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error) {
	ret := _mock.Called(context1, setRequest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) (*proto.SetResponse, error)); ok {
		return returnFunc(context1, setRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) *proto.SetResponse); ok {
		r0 = returnFunc(context1, setRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetRequest) error); ok {
		r1 = returnFunc(context1, setRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceServer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockConfigServiceServer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1
//   - setRequest
func (_e *MockConfigServiceServer_Expecter) Set(context1 interface{}, setRequest interface{}) *MockConfigServiceServer_Set_Call {
	return &MockConfigServiceServer_Set_Call{Call: _e.mock.On("Set", context1, setRequest)}
}

func (_c *MockConfigServiceServer_Set_Call) Run(run func(context1 context.Context, setRequest *proto.SetRequest)) *MockConfigServiceServer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetRequest))
	})
	return _c
}

func (_c *MockConfigServiceServer_Set_Call) Return(setResponse *proto.SetResponse, err error) *MockConfigServiceServer_Set_Call {
	_c.Call.Return(setResponse, err)
	return _c
}

func (_c *MockConfigServiceServer_Set_Call) RunAndReturn(run func(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error)) *MockConfigServiceServer_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) Watch(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse]) error {
	ret := _mock.Called(watchRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.WatchRequest, grpc.ServerStreamingServer[proto.WatchResponse]) error); ok {
		r0 = returnFunc(watchRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigServiceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockConfigServiceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - watchRequest
//   - serverStreamingServer
func (_e *MockConfigServiceServer_Expecter) Watch(watchRequest interface{}, serverStreamingServer interface{}) *MockConfigServiceServer_Watch_Call {
	return &MockConfigServiceServer_Watch_Call{Call: _e.mock.On("Watch", watchRequest, serverStreamingServer)}
}

func (_c *MockConfigServiceServer_Watch_Call) Run(run func(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse])) *MockConfigServiceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.WatchRequest), args[1].(grpc.ServerStreamingServer[proto.WatchResponse]))
	})
	return _c
}

func (_c *MockConfigServiceServer_Watch_Call) Return(err error) *MockConfigServiceServer_Watch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigServiceServer_Watch_Call) RunAndReturn(run func(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse]) error) *MockConfigServiceServer_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedConfigServiceServer provides a mock function for the type MockConfigServiceServer
func (_mock *MockConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {
	_mock.Called()
	return
}

// MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedConfigServiceServer'
type MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedConfigServiceServer is a helper method to define mock.On call
func (_e *MockConfigServiceServer_Expecter) mustEmbedUnimplementedConfigServiceServer() *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call {
	return &MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedConfigServiceServer")}
}

func (_c *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call) Run(run func()) *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call) Return() *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call) RunAndReturn(run func()) *MockConfigServiceServer_mustEmbedUnimplementedConfigServiceServer_Call {
	_c.Run(run)
	return _c
}
