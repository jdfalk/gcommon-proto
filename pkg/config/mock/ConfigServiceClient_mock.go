// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/config/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockConfigServiceClient creates a new instance of MockConfigServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigServiceClient {
	mock := &MockConfigServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigServiceClient is an autogenerated mock type for the ConfigServiceClient type
type MockConfigServiceClient struct {
	mock.Mock
}

type MockConfigServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigServiceClient) EXPECT() *MockConfigServiceClient_Expecter {
	return &MockConfigServiceClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) Delete(ctx context.Context, in *proto.DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteConfigRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteConfigRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockConfigServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_Delete_Call {
	return &MockConfigServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_Delete_Call) Run(run func(ctx context.Context, in *proto.DeleteConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_Delete_Call) Return(empty *emptypb.Empty, err error) *MockConfigServiceClient_Delete_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockConfigServiceClient_Delete_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockConfigServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) Get(ctx context.Context, in *proto.GetConfigRequest, opts ...grpc.CallOption) (*proto.GetConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConfigRequest, ...grpc.CallOption) (*proto.GetConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConfigRequest, ...grpc.CallOption) *proto.GetConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockConfigServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_Get_Call {
	return &MockConfigServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_Get_Call) Run(run func(ctx context.Context, in *proto.GetConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_Get_Call) Return(getConfigResponse *proto.GetConfigResponse, err error) *MockConfigServiceClient_Get_Call {
	_c.Call.Return(getConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_Get_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetConfigRequest, opts ...grpc.CallOption) (*proto.GetConfigResponse, error)) *MockConfigServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiple provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) GetMultiple(ctx context.Context, in *proto.GetMultipleConfigRequest, opts ...grpc.CallOption) (*proto.GetMultipleConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMultiple")
	}

	var r0 *proto.GetMultipleConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleConfigRequest, ...grpc.CallOption) (*proto.GetMultipleConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleConfigRequest, ...grpc.CallOption) *proto.GetMultipleConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMultipleConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMultipleConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_GetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiple'
type MockConfigServiceClient_GetMultiple_Call struct {
	*mock.Call
}

// GetMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetMultipleConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) GetMultiple(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_GetMultiple_Call {
	return &MockConfigServiceClient_GetMultiple_Call{Call: _e.mock.On("GetMultiple",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_GetMultiple_Call) Run(run func(ctx context.Context, in *proto.GetMultipleConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_GetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMultipleConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMultipleConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_GetMultiple_Call) Return(getMultipleConfigResponse *proto.GetMultipleConfigResponse, err error) *MockConfigServiceClient_GetMultiple_Call {
	_c.Call.Return(getMultipleConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_GetMultiple_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMultipleConfigRequest, opts ...grpc.CallOption) (*proto.GetMultipleConfigResponse, error)) *MockConfigServiceClient_GetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchema provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) GetSchema(ctx context.Context, in *proto.GetSchemaRequest, opts ...grpc.CallOption) (*proto.GetSchemaResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *proto.GetSchemaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSchemaRequest, ...grpc.CallOption) (*proto.GetSchemaResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSchemaRequest, ...grpc.CallOption) *proto.GetSchemaResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSchemaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSchemaRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockConfigServiceClient_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetSchemaRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) GetSchema(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_GetSchema_Call {
	return &MockConfigServiceClient_GetSchema_Call{Call: _e.mock.On("GetSchema",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_GetSchema_Call) Run(run func(ctx context.Context, in *proto.GetSchemaRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSchemaRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_GetSchema_Call) Return(getSchemaResponse *proto.GetSchemaResponse, err error) *MockConfigServiceClient_GetSchema_Call {
	_c.Call.Return(getSchemaResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_GetSchema_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetSchemaRequest, opts ...grpc.CallOption) (*proto.GetSchemaResponse, error)) *MockConfigServiceClient_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) List(ctx context.Context, in *proto.ListConfigRequest, opts ...grpc.CallOption) (*proto.ListConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *proto.ListConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListConfigRequest, ...grpc.CallOption) (*proto.ListConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListConfigRequest, ...grpc.CallOption) *proto.ListConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockConfigServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_List_Call {
	return &MockConfigServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_List_Call) Run(run func(ctx context.Context, in *proto.ListConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_List_Call) Return(listConfigResponse *proto.ListConfigResponse, err error) *MockConfigServiceClient_List_Call {
	_c.Call.Return(listConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_List_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListConfigRequest, opts ...grpc.CallOption) (*proto.ListConfigResponse, error)) *MockConfigServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) Set(ctx context.Context, in *proto.SetConfigRequest, opts ...grpc.CallOption) (*proto.SetConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetConfigRequest, ...grpc.CallOption) (*proto.SetConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetConfigRequest, ...grpc.CallOption) *proto.SetConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockConfigServiceClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SetConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) Set(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_Set_Call {
	return &MockConfigServiceClient_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_Set_Call) Run(run func(ctx context.Context, in *proto.SetConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_Set_Call) Return(setConfigResponse *proto.SetConfigResponse, err error) *MockConfigServiceClient_Set_Call {
	_c.Call.Return(setConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_Set_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetConfigRequest, opts ...grpc.CallOption) (*proto.SetConfigResponse, error)) *MockConfigServiceClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMultiple provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) SetMultiple(ctx context.Context, in *proto.SetMultipleConfigRequest, opts ...grpc.CallOption) (*proto.SetMultipleConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 *proto.SetMultipleConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleConfigRequest, ...grpc.CallOption) (*proto.SetMultipleConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleConfigRequest, ...grpc.CallOption) *proto.SetMultipleConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetMultipleConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetMultipleConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type MockConfigServiceClient_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SetMultipleConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) SetMultiple(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_SetMultiple_Call {
	return &MockConfigServiceClient_SetMultiple_Call{Call: _e.mock.On("SetMultiple",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_SetMultiple_Call) Run(run func(ctx context.Context, in *proto.SetMultipleConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetMultipleConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetMultipleConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_SetMultiple_Call) Return(setMultipleConfigResponse *proto.SetMultipleConfigResponse, err error) *MockConfigServiceClient_SetMultiple_Call {
	_c.Call.Return(setMultipleConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_SetMultiple_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetMultipleConfigRequest, opts ...grpc.CallOption) (*proto.SetMultipleConfigResponse, error)) *MockConfigServiceClient_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) Validate(ctx context.Context, in *proto.ValidateConfigRequest, opts ...grpc.CallOption) (*proto.ValidateConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 *proto.ValidateConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateConfigRequest, ...grpc.CallOption) (*proto.ValidateConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateConfigRequest, ...grpc.CallOption) *proto.ValidateConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockConfigServiceClient_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ValidateConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) Validate(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_Validate_Call {
	return &MockConfigServiceClient_Validate_Call{Call: _e.mock.On("Validate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_Validate_Call) Run(run func(ctx context.Context, in *proto.ValidateConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_Validate_Call) Return(validateConfigResponse *proto.ValidateConfigResponse, err error) *MockConfigServiceClient_Validate_Call {
	_c.Call.Return(validateConfigResponse, err)
	return _c
}

func (_c *MockConfigServiceClient_Validate_Call) RunAndReturn(run func(ctx context.Context, in *proto.ValidateConfigRequest, opts ...grpc.CallOption) (*proto.ValidateConfigResponse, error)) *MockConfigServiceClient_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockConfigServiceClient
func (_mock *MockConfigServiceClient) Watch(ctx context.Context, in *proto.WatchConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchConfigResponse], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 grpc.ServerStreamingClient[proto.WatchConfigResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchConfigRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchConfigResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchConfigRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.WatchConfigResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.WatchConfigResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WatchConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigServiceClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockConfigServiceClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.WatchConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockConfigServiceClient_Expecter) Watch(ctx interface{}, in interface{}, opts ...interface{}) *MockConfigServiceClient_Watch_Call {
	return &MockConfigServiceClient_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockConfigServiceClient_Watch_Call) Run(run func(ctx context.Context, in *proto.WatchConfigRequest, opts ...grpc.CallOption)) *MockConfigServiceClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.WatchConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.WatchConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConfigServiceClient_Watch_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.WatchConfigResponse], err error) *MockConfigServiceClient_Watch_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockConfigServiceClient_Watch_Call) RunAndReturn(run func(ctx context.Context, in *proto.WatchConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchConfigResponse], error)) *MockConfigServiceClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}
