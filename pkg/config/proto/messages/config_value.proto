// file: pkg/config/proto/messages/config_value.proto
// version: 1.0.0
// guid: 1b2c3d4e-5f6a-7b8c-9d0e-1f2a3b4c5d6e

edition = "2023";

package gcommon.v1.config;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "pkg/common/proto/common.proto";
import "pkg/config/proto/messages/config_metadata.proto";
import "pkg/config/proto/messages/config_template.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/config/proto;configpb";

// ConfigValue represents a configuration value
message ConfigValue {
  // Unique identifier for the value
  string value_id = 1;

  // Configuration key
  string key = 2;

  // Configuration value (string representation)
  string value = 3;

  // Typed value (for strong typing)
  google.protobuf.Any typed_value = 4;

  // Value type
  ConfigDataType type = 5;

  // Environment this value applies to
  string environment = 6;

  // Service this value applies to
  string service = 7;

  // Component this value applies to
  string component = 8;

  // Namespace for the configuration
  string namespace = 9;

  // Configuration version
  string version = 10;

  // Whether the value is encrypted
  bool encrypted = 11;

  // Whether the value is sensitive
  bool sensitive = 12;

  // Whether the value is read-only
  bool read_only = 13;

  // Whether the value is required
  bool required = 14;

  // Value source
  ValueSource source = 15;

  // Value priority
  int32 priority = 16;

  // Value resolution order
  int32 resolution_order = 17;

  // Value inheritance settings
  InheritanceSettings inheritance = 18;

  // Value validation settings
  ValidationSettings validation = 19;

  // Value transformation settings
  TransformationSettings transformation = 20;

  // Value caching settings
  CachingSettings caching = 21;

  // Value synchronization settings
  SynchronizationSettings synchronization = 22;

  // Value history
  repeated ValueHistoryEntry history = 23;

  // Value tags
  repeated string tags = 24;

  // Value metadata
  map<string, string> metadata = 25;

  // Creation timestamp
  google.protobuf.Timestamp created_at = 26;

  // Last update timestamp
  google.protobuf.Timestamp updated_at = 27;

  // User who created the value
  string created_by = 28;

  // User who last updated the value
  string updated_by = 29;

  // Value status
  ValueStatus status = 30;

  // Error information if status is ERROR
  gcommon.v1.common.Error error = 31;

  // Value validation results
  repeated ValueValidationResult validation_results = 32;

  // Value usage statistics
  ValueUsageStatistics usage_statistics = 33;

  // Value dependencies
  repeated ValueDependency dependencies = 34;

  // Value references
  repeated ValueReference references = 35;
}

// ValueSource represents the source of a configuration value
enum ValueSource {
  VALUE_SOURCE_UNSPECIFIED = 0;
  VALUE_SOURCE_DEFAULT = 1;
  VALUE_SOURCE_ENVIRONMENT = 2;
  VALUE_SOURCE_FILE = 3;
  VALUE_SOURCE_DATABASE = 4;
  VALUE_SOURCE_CONSUL = 5;
  VALUE_SOURCE_ETCD = 6;
  VALUE_SOURCE_KUBERNETES = 7;
  VALUE_SOURCE_VAULT = 8;
  VALUE_SOURCE_AWS_PARAMETER_STORE = 9;
  VALUE_SOURCE_AWS_SECRETS_MANAGER = 10;
  VALUE_SOURCE_AZURE_KEY_VAULT = 11;
  VALUE_SOURCE_GCP_SECRET_MANAGER = 12;
  VALUE_SOURCE_REDIS = 13;
  VALUE_SOURCE_API = 14;
  VALUE_SOURCE_COMMAND_LINE = 15;
  VALUE_SOURCE_REMOTE = 16;
  VALUE_SOURCE_COMPUTED = 17;
  VALUE_SOURCE_INHERITED = 18;
  VALUE_SOURCE_OVERRIDE = 19;
  VALUE_SOURCE_CUSTOM = 20;
}

// InheritanceSettings represents inheritance settings for configuration values
message InheritanceSettings {
  // Whether inheritance is enabled
  bool enabled = 1;

  // Inheritance strategy
  InheritanceStrategy strategy = 2;

  // Inheritance sources in order of priority
  repeated string sources = 3;

  // Inheritance filters
  repeated InheritanceFilter filters = 4;

  // Inheritance transformations
  repeated InheritanceTransformation transformations = 5;

  // Whether to merge inherited values
  bool merge_values = 6;

  // Merge strategy for complex values
  MergeStrategy merge_strategy = 7;

  // Inheritance metadata
  map<string, string> metadata = 8;
}

// InheritanceStrategy represents the strategy for value inheritance
enum InheritanceStrategy {
  INHERITANCE_STRATEGY_UNSPECIFIED = 0;
  INHERITANCE_STRATEGY_OVERRIDE = 1;
  INHERITANCE_STRATEGY_MERGE = 2;
  INHERITANCE_STRATEGY_FALLBACK = 3;
  INHERITANCE_STRATEGY_PRIORITY = 4;
  INHERITANCE_STRATEGY_WEIGHTED = 5;
}

// InheritanceFilter represents a filter for inheritance
message InheritanceFilter {
  // Filter type
  FilterType type = 1;

  // Filter expression
  string expression = 2;

  // Filter action
  FilterAction action = 3;

  // Filter metadata
  map<string, string> metadata = 4;
}

// FilterType represents the type of inheritance filter
enum FilterType {
  FILTER_TYPE_UNSPECIFIED = 0;
  FILTER_TYPE_KEY_PATTERN = 1;
  FILTER_TYPE_VALUE_PATTERN = 2;
  FILTER_TYPE_ENVIRONMENT = 3;
  FILTER_TYPE_SERVICE = 4;
  FILTER_TYPE_COMPONENT = 5;
  FILTER_TYPE_TAG = 6;
  FILTER_TYPE_CUSTOM = 7;
}

// FilterAction represents the action for an inheritance filter
enum FilterAction {
  FILTER_ACTION_UNSPECIFIED = 0;
  FILTER_ACTION_INCLUDE = 1;
  FILTER_ACTION_EXCLUDE = 2;
  FILTER_ACTION_TRANSFORM = 3;
  FILTER_ACTION_VALIDATE = 4;
}

// InheritanceTransformation represents a transformation for inheritance
message InheritanceTransformation {
  // Transformation type
  TransformationType type = 1;

  // Transformation expression
  string expression = 2;

  // Transformation parameters
  map<string, string> parameters = 3;

  // Transformation metadata
  map<string, string> metadata = 4;
}

// MergeStrategy represents the strategy for merging values
enum MergeStrategy {
  MERGE_STRATEGY_UNSPECIFIED = 0;
  MERGE_STRATEGY_REPLACE = 1;
  MERGE_STRATEGY_MERGE_DEEP = 2;
  MERGE_STRATEGY_MERGE_SHALLOW = 3;
  MERGE_STRATEGY_ARRAY_CONCAT = 4;
  MERGE_STRATEGY_ARRAY_REPLACE = 5;
  MERGE_STRATEGY_ARRAY_MERGE = 6;
  MERGE_STRATEGY_CUSTOM = 7;
}

// ValidationSettings represents validation settings for configuration values
message ValidationSettings {
  // Whether validation is enabled
  bool enabled = 1;

  // Validation rules (using ValidationRule from config_template.proto)
  repeated ValidationRule rules = 2;

  // Validation on change
  bool validate_on_change = 3;

  // Validation on access
  bool validate_on_access = 4;

  // Validation timeout in seconds
  int32 timeout_seconds = 5;

  // Validation retry settings
  RetrySettings retry = 6;

  // Validation metadata
  map<string, string> metadata = 7;
}

// ValidationRuleType represents the type of validation rule
enum ValidationRuleType {
  VALIDATION_RULE_TYPE_UNSPECIFIED = 0;
  VALIDATION_RULE_TYPE_REGEX = 1;
  VALIDATION_RULE_TYPE_RANGE = 2;
  VALIDATION_RULE_TYPE_LENGTH = 3;
  VALIDATION_RULE_TYPE_FORMAT = 4;
  VALIDATION_RULE_TYPE_ENUM = 5;
  VALIDATION_RULE_TYPE_CUSTOM = 6;
  VALIDATION_RULE_TYPE_FUNCTION = 7;
  VALIDATION_RULE_TYPE_SCHEMA = 8;
}

// ValidationRuleSeverity represents the severity of a validation rule
enum ValidationRuleSeverity {
  VALIDATION_RULE_SEVERITY_UNSPECIFIED = 0;
  VALIDATION_RULE_SEVERITY_INFO = 1;
  VALIDATION_RULE_SEVERITY_WARNING = 2;
  VALIDATION_RULE_SEVERITY_ERROR = 3;
  VALIDATION_RULE_SEVERITY_CRITICAL = 4;
}

// RetrySettings represents retry settings
message RetrySettings {
  // Whether retry is enabled
  bool enabled = 1;

  // Maximum retry count
  int32 max_retries = 2;

  // Retry delay in seconds
  int32 delay_seconds = 3;

  // Retry backoff strategy
  BackoffStrategy backoff_strategy = 4;

  // Retry conditions
  repeated string conditions = 5;
}

// BackoffStrategy represents retry backoff strategy
enum BackoffStrategy {
  BACKOFF_STRATEGY_UNSPECIFIED = 0;
  BACKOFF_STRATEGY_FIXED = 1;
  BACKOFF_STRATEGY_LINEAR = 2;
  BACKOFF_STRATEGY_EXPONENTIAL = 3;
  BACKOFF_STRATEGY_CUSTOM = 4;
}

// TransformationSettings represents transformation settings for configuration values
message TransformationSettings {
  // Whether transformation is enabled
  bool enabled = 1;

  // Transformation pipeline
  repeated TransformationStep pipeline = 2;

  // Transformation on read
  bool transform_on_read = 3;

  // Transformation on write
  bool transform_on_write = 4;

  // Transformation metadata
  map<string, string> metadata = 5;
}

// TransformationStep represents a transformation step
message TransformationStep {
  // Step name
  string name = 1;

  // Step type
  TransformationType type = 2;

  // Step expression
  string expression = 3;

  // Step parameters
  map<string, string> parameters = 4;

  // Step enabled
  bool enabled = 5;

  // Step order
  int32 order = 6;
}

// TransformationType represents the type of transformation
enum TransformationType {
  TRANSFORMATION_TYPE_UNSPECIFIED = 0;
  TRANSFORMATION_TYPE_TEMPLATE = 1;
  TRANSFORMATION_TYPE_FUNCTION = 2;
  TRANSFORMATION_TYPE_SCRIPT = 3;
  TRANSFORMATION_TYPE_REGEX = 4;
  TRANSFORMATION_TYPE_JSONPATH = 5;
  TRANSFORMATION_TYPE_XPATH = 6;
  TRANSFORMATION_TYPE_CUSTOM = 7;
}

// CachingSettings represents caching settings for configuration values
message CachingSettings {
  // Whether caching is enabled
  bool enabled = 1;

  // Cache TTL in seconds
  int32 ttl_seconds = 2;

  // Cache refresh strategy
  CacheRefreshStrategy refresh_strategy = 3;

  // Cache invalidation triggers
  repeated CacheInvalidationTrigger triggers = 4;

  // Cache metadata
  map<string, string> metadata = 5;
}

// CacheRefreshStrategy represents cache refresh strategy
enum CacheRefreshStrategy {
  CACHE_REFRESH_STRATEGY_UNSPECIFIED = 0;
  CACHE_REFRESH_STRATEGY_TTL = 1;
  CACHE_REFRESH_STRATEGY_LAZY = 2;
  CACHE_REFRESH_STRATEGY_PROACTIVE = 3;
  CACHE_REFRESH_STRATEGY_BACKGROUND = 4;
}

// CacheInvalidationTrigger represents cache invalidation trigger
enum CacheInvalidationTrigger {
  CACHE_INVALIDATION_TRIGGER_UNSPECIFIED = 0;
  CACHE_INVALIDATION_TRIGGER_CHANGE = 1;
  CACHE_INVALIDATION_TRIGGER_DELETE = 2;
  CACHE_INVALIDATION_TRIGGER_EXPIRE = 3;
  CACHE_INVALIDATION_TRIGGER_MANUAL = 4;
  CACHE_INVALIDATION_TRIGGER_SCHEDULE = 5;
}

// SynchronizationSettings represents synchronization settings for configuration values
message SynchronizationSettings {
  // Whether synchronization is enabled
  bool enabled = 1;

  // Synchronization targets
  repeated SynchronizationTarget targets = 2;

  // Synchronization frequency
  SynchronizationFrequency frequency = 3;

  // Synchronization conflict resolution
  ConflictResolution conflict_resolution = 4;

  // Synchronization metadata
  map<string, string> metadata = 5;
}

// SynchronizationTarget represents a synchronization target
message SynchronizationTarget {
  // Target name
  string name = 1;

  // Target type
  string type = 2;

  // Target configuration
  map<string, string> config = 3;

  // Target enabled
  bool enabled = 4;

  // Target priority
  int32 priority = 5;
}

// SynchronizationFrequency represents synchronization frequency
enum SynchronizationFrequency {
  SYNCHRONIZATION_FREQUENCY_UNSPECIFIED = 0;
  SYNCHRONIZATION_FREQUENCY_REAL_TIME = 1;
  SYNCHRONIZATION_FREQUENCY_HOURLY = 2;
  SYNCHRONIZATION_FREQUENCY_DAILY = 3;
  SYNCHRONIZATION_FREQUENCY_WEEKLY = 4;
  SYNCHRONIZATION_FREQUENCY_ON_CHANGE = 5;
}

// ConflictResolution represents conflict resolution strategy
enum ConflictResolution {
  CONFLICT_RESOLUTION_UNSPECIFIED = 0;
  CONFLICT_RESOLUTION_SOURCE_WINS = 1;
  CONFLICT_RESOLUTION_TARGET_WINS = 2;
  CONFLICT_RESOLUTION_MERGE = 3;
  CONFLICT_RESOLUTION_MANUAL = 4;
  CONFLICT_RESOLUTION_TIMESTAMP = 5;
}

// ValueHistoryEntry represents a value history entry
message ValueHistoryEntry {
  // Entry ID
  string entry_id = 1;

  // Previous value
  string previous_value = 2;

  // New value
  string new_value = 3;

  // Change timestamp
  google.protobuf.Timestamp timestamp = 4;

  // User who made the change
  string changed_by = 5;

  // Change reason
  string reason = 6;

  // Change type (using ChangeType from config_template.proto)
  ChangeType change_type = 7;

  // Change metadata
  map<string, string> metadata = 8;
}

// ValueStatus represents the status of a configuration value
enum ValueStatus {
  VALUE_STATUS_UNSPECIFIED = 0;
  VALUE_STATUS_ACTIVE = 1;
  VALUE_STATUS_INACTIVE = 2;
  VALUE_STATUS_DRAFT = 3;
  VALUE_STATUS_DEPRECATED = 4;
  VALUE_STATUS_DELETED = 5;
  VALUE_STATUS_ERROR = 6;
  VALUE_STATUS_PENDING = 7;
  VALUE_STATUS_SYNCING = 8;
  VALUE_STATUS_VALIDATING = 9;
}

// ValueValidationResult represents validation results for a configuration value
message ValueValidationResult {
  // Validation name
  string name = 1;

  // Validation result
  ValueValidationResultType result = 2;

  // Validation message
  string message = 3;

  // Validation severity
  ValueValidationSeverity severity = 4;

  // Validation timestamp
  google.protobuf.Timestamp timestamp = 5;

  // Validation details
  map<string, string> details = 6;

  // Validation rule
  string rule = 7;

  // Validation context
  string context = 8;
}

// ValueValidationResultType represents the result of value validation
enum ValueValidationResultType {
  VALUE_VALIDATION_RESULT_TYPE_UNSPECIFIED = 0;
  VALUE_VALIDATION_RESULT_TYPE_PASS = 1;
  VALUE_VALIDATION_RESULT_TYPE_FAIL = 2;
  VALUE_VALIDATION_RESULT_TYPE_WARNING = 3;
  VALUE_VALIDATION_RESULT_TYPE_SKIP = 4;
}

// ValueValidationSeverity represents the severity of value validation
enum ValueValidationSeverity {
  VALUE_VALIDATION_SEVERITY_UNSPECIFIED = 0;
  VALUE_VALIDATION_SEVERITY_INFO = 1;
  VALUE_VALIDATION_SEVERITY_WARNING = 2;
  VALUE_VALIDATION_SEVERITY_ERROR = 3;
  VALUE_VALIDATION_SEVERITY_CRITICAL = 4;
}

// ValueUsageStatistics represents usage statistics for a configuration value
message ValueUsageStatistics {
  // Total read count
  int64 read_count = 1;

  // Total write count
  int64 write_count = 2;

  // Last read timestamp
  google.protobuf.Timestamp last_read_at = 3;

  // Last write timestamp
  google.protobuf.Timestamp last_written_at = 4;

  // Read frequency (reads per day)
  double read_frequency = 5;

  // Write frequency (writes per day)
  double write_frequency = 6;

  // Unique readers count
  int64 unique_readers = 7;

  // Unique writers count
  int64 unique_writers = 8;

  // Peak usage timestamp
  google.protobuf.Timestamp peak_usage_at = 9;

  // Peak usage count
  int64 peak_usage_count = 10;

  // Usage trends
  repeated ValueUsageTrend trends = 11;
}

// ValueUsageTrend represents a usage trend for a configuration value
message ValueUsageTrend {
  // Trend period
  string period = 1;

  // Read count
  int64 read_count = 2;

  // Write count
  int64 write_count = 3;

  // Trend timestamp
  google.protobuf.Timestamp timestamp = 4;

  // Trend metadata
  map<string, string> metadata = 5;
}

// ValueDependency represents a dependency between configuration values
message ValueDependency {
  // Dependency type
  DependencyType type = 1;

  // Dependent value key
  string dependent_key = 2;

  // Dependency key
  string dependency_key = 3;

  // Dependency condition
  string condition = 4;

  // Dependency metadata
  map<string, string> metadata = 5;
}

// DependencyType represents the type of value dependency
enum DependencyType {
  DEPENDENCY_TYPE_UNSPECIFIED = 0;
  DEPENDENCY_TYPE_REQUIRED = 1;
  DEPENDENCY_TYPE_OPTIONAL = 2;
  DEPENDENCY_TYPE_CONDITIONAL = 3;
  DEPENDENCY_TYPE_DERIVED = 4;
  DEPENDENCY_TYPE_CONFLICT = 5;
}

// ValueReference represents a reference to another configuration value
message ValueReference {
  // Reference type
  ReferenceType type = 1;

  // Referenced value key
  string referenced_key = 2;

  // Reference path
  string path = 3;

  // Reference metadata
  map<string, string> metadata = 4;
}

// ReferenceType represents the type of value reference
enum ReferenceType {
  REFERENCE_TYPE_UNSPECIFIED = 0;
  REFERENCE_TYPE_TEMPLATE = 1;
  REFERENCE_TYPE_POINTER = 2;
  REFERENCE_TYPE_ALIAS = 3;
  REFERENCE_TYPE_COMPUTED = 4;
  REFERENCE_TYPE_DERIVED = 5;
}
