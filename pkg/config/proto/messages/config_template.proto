// file: pkg/config/proto/messages/config_template.proto
// version: 1.0.0
// guid: 6c7d8e9f-0a1b-2c3d-4e5f-6a7b8c9d0e1f

edition = "2023";

package gcommon.v1.config;

import "google/protobuf/timestamp.proto";
import "pkg/config/proto/messages/config_audit_log.proto";

option go_package = "../../../../pkg/config/pb;configpb";

// ConfigTemplate represents a configuration template for reuse
message ConfigTemplate {
  // Unique identifier for the template
  string template_id = 1;

  // Template name
  string name = 2;

  // Template description
  string description = 3;

  // Template version
  string version = 4;

  // Template author
  string author = 5;

  // Creation timestamp
  google.protobuf.Timestamp created_at = 6;

  // Last modification timestamp
  google.protobuf.Timestamp updated_at = 7;

  // Template category
  string category = 8;

  // Tags for categorization
  repeated string tags = 9;

  // Template parameters
  repeated TemplateParameter parameters = 10;

  // Template content with placeholders
  string content = 11;

  // Template format (JSON, YAML, TOML, etc.)
  TemplateFormat format = 12;

  // Default values for parameters
  map<string, string> default_values = 13;

  // Validation rules for parameters
  repeated ValidationRule validation_rules = 14;

  // Template metadata
  map<string, string> metadata = 15;

  // Template status
  TemplateStatus status = 16;

  // Usage count
  int64 usage_count = 17;

  // Environments where template is applicable
  repeated string environments = 18;

  // Required permissions to use template
  repeated string required_permissions = 19;

  // Template documentation
  string documentation = 20;

  // Example usage
  string example_usage = 21;

  // Template dependencies
  repeated string dependencies = 22;

  // Template outputs
  repeated TemplateOutput outputs = 23;

  // Template hooks
  repeated TemplateHook hooks = 24;

  // Template schema for validation
  string schema = 25;

  // Template changelog
  repeated TemplateChange changelog = 26;

  // Template license
  string license = 27;

  // Template repository URL
  string repository_url = 28;

  // Template icon URL
  string icon_url = 29;

  // Template minimum version requirements
  map<string, string> min_versions = 30;
}

// TemplateParameter represents a configurable parameter in a template
message TemplateParameter {
  // Parameter name
  string name = 1;

  // Parameter description
  string description = 2;

  // Parameter type
  ParameterType type = 3;

  // Whether parameter is required
  bool required = 4;

  // Default value
  string default_value = 5;

  // Allowed values (for enum types)
  repeated string allowed_values = 6;

  // Parameter constraints
  ParameterConstraints constraints = 7;

  // Parameter group
  string group = 8;

  // Display order
  int32 order = 9;

  // Whether parameter is sensitive
  bool sensitive = 10;

  // Parameter validation pattern
  string validation_pattern = 11;

  // Parameter examples
  repeated string examples = 12;

  // Parameter documentation
  string documentation = 13;

  // Parameter display name
  string display_name = 14;

  // Parameter placeholder text
  string placeholder = 15;
}

// ParameterType represents the type of a template parameter
enum ParameterType {
  PARAMETER_TYPE_UNSPECIFIED = 0;
  PARAMETER_TYPE_STRING = 1;
  PARAMETER_TYPE_INTEGER = 2;
  PARAMETER_TYPE_FLOAT = 3;
  PARAMETER_TYPE_BOOLEAN = 4;
  PARAMETER_TYPE_ENUM = 5;
  PARAMETER_TYPE_ARRAY = 6;
  PARAMETER_TYPE_OBJECT = 7;
  PARAMETER_TYPE_FILE = 8;
  PARAMETER_TYPE_URL = 9;
  PARAMETER_TYPE_EMAIL = 10;
  PARAMETER_TYPE_PASSWORD = 11;
  PARAMETER_TYPE_DATE = 12;
  PARAMETER_TYPE_TIME = 13;
  PARAMETER_TYPE_DATETIME = 14;
}

// ParameterConstraints represents constraints for a parameter
message ParameterConstraints {
  // Minimum length (for strings)
  int32 min_length = 1;

  // Maximum length (for strings)
  int32 max_length = 2;

  // Minimum value (for numbers)
  double min_value = 3;

  // Maximum value (for numbers)
  double max_value = 4;

  // Regular expression pattern
  string pattern = 5;

  // Minimum array size
  int32 min_items = 6;

  // Maximum array size
  int32 max_items = 7;

  // Unique items in array
  bool unique_items = 8;

  // Custom validation function
  string validation_function = 9;
}

// ValidationRule represents a validation rule for template parameters
message ValidationRule {
  // Rule name
  string name = 1;

  // Rule description
  string description = 2;

  // Rule expression
  string expression = 3;

  // Error message if validation fails
  string error_message = 4;

  // Rule severity
  ValidationSeverity severity = 5;

  // Parameters this rule applies to
  repeated string parameters = 6;

  // Rule conditions
  map<string, string> conditions = 7;
}

// TemplateOutput represents an output from a template
message TemplateOutput {
  // Output name
  string name = 1;

  // Output description
  string description = 2;

  // Output type
  string type = 3;

  // Output value expression
  string value = 4;

  // Whether output is sensitive
  bool sensitive = 5;

  // Output group
  string group = 6;

  // Output format
  string format = 7;

  // Output examples
  repeated string examples = 8;
}

// TemplateHook represents a hook in a template lifecycle
message TemplateHook {
  // Hook name
  string name = 1;

  // Hook type
  HookType type = 2;

  // Hook command or script
  string command = 3;

  // Hook timeout
  int32 timeout_seconds = 4;

  // Hook working directory
  string working_directory = 5;

  // Hook environment variables
  map<string, string> environment = 6;

  // Hook conditions
  map<string, string> conditions = 7;

  // Hook error handling
  HookErrorHandling error_handling = 8;
}

// HookType represents the type of template hook
enum HookType {
  HOOK_TYPE_UNSPECIFIED = 0;
  HOOK_TYPE_PRE_RENDER = 1;
  HOOK_TYPE_POST_RENDER = 2;
  HOOK_TYPE_PRE_APPLY = 3;
  HOOK_TYPE_POST_APPLY = 4;
  HOOK_TYPE_PRE_VALIDATE = 5;
  HOOK_TYPE_POST_VALIDATE = 6;
}

// HookErrorHandling represents how to handle hook errors
enum HookErrorHandling {
  HOOK_ERROR_HANDLING_UNSPECIFIED = 0;
  HOOK_ERROR_HANDLING_IGNORE = 1;
  HOOK_ERROR_HANDLING_WARN = 2;
  HOOK_ERROR_HANDLING_FAIL = 3;
}

// TemplateChange represents a change in template history
message TemplateChange {
  // Change version
  string version = 1;

  // Change description
  string description = 2;

  // Change author
  string author = 3;

  // Change timestamp
  google.protobuf.Timestamp timestamp = 4;

  // Change type
  ChangeType type = 5;

  // Breaking change flag
  bool breaking = 6;

  // Change details
  repeated string details = 7;

  // Migration notes
  string migration_notes = 8;
}

// ChangeType represents the type of template change
enum ChangeType {
  CHANGE_TYPE_UNSPECIFIED = 0;
  CHANGE_TYPE_FEATURE = 1;
  CHANGE_TYPE_BUGFIX = 2;
  CHANGE_TYPE_ENHANCEMENT = 3;
  CHANGE_TYPE_DEPRECATED = 4;
  CHANGE_TYPE_SECURITY = 5;
  CHANGE_TYPE_BREAKING = 6;
}

// TemplateFormat represents the format of template content
enum TemplateFormat {
  TEMPLATE_FORMAT_UNSPECIFIED = 0;
  TEMPLATE_FORMAT_JSON = 1;
  TEMPLATE_FORMAT_YAML = 2;
  TEMPLATE_FORMAT_TOML = 3;
  TEMPLATE_FORMAT_XML = 4;
  TEMPLATE_FORMAT_PROPERTIES = 5;
  TEMPLATE_FORMAT_INI = 6;
  TEMPLATE_FORMAT_CUSTOM = 7;
}

// TemplateStatus represents the status of a template
enum TemplateStatus {
  TEMPLATE_STATUS_UNSPECIFIED = 0;
  TEMPLATE_STATUS_DRAFT = 1;
  TEMPLATE_STATUS_ACTIVE = 2;
  TEMPLATE_STATUS_DEPRECATED = 3;
  TEMPLATE_STATUS_ARCHIVED = 4;
  TEMPLATE_STATUS_DELETED = 5;
}
