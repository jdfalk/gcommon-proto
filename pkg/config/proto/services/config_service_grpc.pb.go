// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/config/proto/services/config_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/config/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/config/proto/responses"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_Get_FullMethodName         = "/gcommon.v1.config.ConfigService/Get"
	ConfigService_Set_FullMethodName         = "/gcommon.v1.config.ConfigService/Set"
	ConfigService_Delete_FullMethodName      = "/gcommon.v1.config.ConfigService/Delete"
	ConfigService_List_FullMethodName        = "/gcommon.v1.config.ConfigService/List"
	ConfigService_Watch_FullMethodName       = "/gcommon.v1.config.ConfigService/Watch"
	ConfigService_GetMultiple_FullMethodName = "/gcommon.v1.config.ConfigService/GetMultiple"
	ConfigService_SetMultiple_FullMethodName = "/gcommon.v1.config.ConfigService/SetMultiple"
	ConfigService_Validate_FullMethodName    = "/gcommon.v1.config.ConfigService/Validate"
	ConfigService_GetSchema_FullMethodName   = "/gcommon.v1.config.ConfigService/GetSchema"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// ConfigService provides configuration management capabilities.
// Supports hierarchical configuration, validation, and real-time updates.
type ConfigServiceClient interface {
	// Get retrieves a configuration value
	Get(ctx context.Context, in *requests.GetConfigRequest, opts ...grpc.CallOption) (*responses.GetConfigResponse, error)
	// Set stores a configuration value
	Set(ctx context.Context, in *requests.SetConfigRequest, opts ...grpc.CallOption) (*responses.SetConfigResponse, error)
	// Delete removes a configuration value
	Delete(ctx context.Context, in *requests.DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List configuration keys with optional filtering
	List(ctx context.Context, in *requests.ListConfigRequest, opts ...grpc.CallOption) (*responses.ListConfigResponse, error)
	// Watch for configuration changes
	Watch(ctx context.Context, in *requests.WatchConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[responses.WatchConfigResponse], error)
	// GetMultiple retrieves multiple configuration values
	GetMultiple(ctx context.Context, in *requests.GetMultipleConfigRequest, opts ...grpc.CallOption) (*responses.GetMultipleConfigResponse, error)
	// SetMultiple stores multiple configuration values
	SetMultiple(ctx context.Context, in *requests.SetMultipleConfigRequest, opts ...grpc.CallOption) (*responses.SetMultipleConfigResponse, error)
	// Validate configuration values
	Validate(ctx context.Context, in *requests.ValidateConfigRequest, opts ...grpc.CallOption) (*responses.ValidateConfigResponse, error)
	// GetSchema retrieves configuration schema
	GetSchema(ctx context.Context, in *requests.GetSchemaRequest, opts ...grpc.CallOption) (*responses.GetSchemaResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Get(ctx context.Context, in *requests.GetConfigRequest, opts ...grpc.CallOption) (*responses.GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Set(ctx context.Context, in *requests.SetConfigRequest, opts ...grpc.CallOption) (*responses.SetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.SetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Delete(ctx context.Context, in *requests.DeleteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) List(ctx context.Context, in *requests.ListConfigRequest, opts ...grpc.CallOption) (*responses.ListConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Watch(ctx context.Context, in *requests.WatchConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[responses.WatchConfigResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfigService_ServiceDesc.Streams[0], ConfigService_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[requests.WatchConfigRequest, responses.WatchConfigResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_WatchClient = grpc.ServerStreamingClient[responses.WatchConfigResponse]

func (c *configServiceClient) GetMultiple(ctx context.Context, in *requests.GetMultipleConfigRequest, opts ...grpc.CallOption) (*responses.GetMultipleConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetMultipleConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetMultiple(ctx context.Context, in *requests.SetMultipleConfigRequest, opts ...grpc.CallOption) (*responses.SetMultipleConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.SetMultipleConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_SetMultiple_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Validate(ctx context.Context, in *requests.ValidateConfigRequest, opts ...grpc.CallOption) (*responses.ValidateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ValidateConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetSchema(ctx context.Context, in *requests.GetSchemaRequest, opts ...grpc.CallOption) (*responses.GetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetSchemaResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility.
//
// *
// ConfigService provides configuration management capabilities.
// Supports hierarchical configuration, validation, and real-time updates.
type ConfigServiceServer interface {
	// Get retrieves a configuration value
	Get(context.Context, *requests.GetConfigRequest) (*responses.GetConfigResponse, error)
	// Set stores a configuration value
	Set(context.Context, *requests.SetConfigRequest) (*responses.SetConfigResponse, error)
	// Delete removes a configuration value
	Delete(context.Context, *requests.DeleteConfigRequest) (*emptypb.Empty, error)
	// List configuration keys with optional filtering
	List(context.Context, *requests.ListConfigRequest) (*responses.ListConfigResponse, error)
	// Watch for configuration changes
	Watch(*requests.WatchConfigRequest, grpc.ServerStreamingServer[responses.WatchConfigResponse]) error
	// GetMultiple retrieves multiple configuration values
	GetMultiple(context.Context, *requests.GetMultipleConfigRequest) (*responses.GetMultipleConfigResponse, error)
	// SetMultiple stores multiple configuration values
	SetMultiple(context.Context, *requests.SetMultipleConfigRequest) (*responses.SetMultipleConfigResponse, error)
	// Validate configuration values
	Validate(context.Context, *requests.ValidateConfigRequest) (*responses.ValidateConfigResponse, error)
	// GetSchema retrieves configuration schema
	GetSchema(context.Context, *requests.GetSchemaRequest) (*responses.GetSchemaResponse, error)
}

// UnimplementedConfigServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) Get(context.Context, *requests.GetConfigRequest) (*responses.GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfigServiceServer) Set(context.Context, *requests.SetConfigRequest) (*responses.SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedConfigServiceServer) Delete(context.Context, *requests.DeleteConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigServiceServer) List(context.Context, *requests.ListConfigRequest) (*responses.ListConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConfigServiceServer) Watch(*requests.WatchConfigRequest, grpc.ServerStreamingServer[responses.WatchConfigResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedConfigServiceServer) GetMultiple(context.Context, *requests.GetMultipleConfigRequest) (*responses.GetMultipleConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiple not implemented")
}
func (UnimplementedConfigServiceServer) SetMultiple(context.Context, *requests.SetMultipleConfigRequest) (*responses.SetMultipleConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiple not implemented")
}
func (UnimplementedConfigServiceServer) Validate(context.Context, *requests.ValidateConfigRequest) (*responses.ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedConfigServiceServer) GetSchema(context.Context, *requests.GetSchemaRequest) (*responses.GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedConfigServiceServer) testEmbeddedByValue() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Get(ctx, req.(*requests.GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Set(ctx, req.(*requests.SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Delete(ctx, req.(*requests.DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).List(ctx, req.(*requests.ListConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(requests.WatchConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServiceServer).Watch(m, &grpc.GenericServerStream[requests.WatchConfigRequest, responses.WatchConfigResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfigService_WatchServer = grpc.ServerStreamingServer[responses.WatchConfigResponse]

func _ConfigService_GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetMultipleConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetMultiple(ctx, req.(*requests.GetMultipleConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.SetMultipleConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_SetMultiple_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetMultiple(ctx, req.(*requests.SetMultipleConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Validate(ctx, req.(*requests.ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetSchema(ctx, req.(*requests.GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConfigService_List_Handler,
		},
		{
			MethodName: "GetMultiple",
			Handler:    _ConfigService_GetMultiple_Handler,
		},
		{
			MethodName: "SetMultiple",
			Handler:    _ConfigService_SetMultiple_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ConfigService_Validate_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _ConfigService_GetSchema_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ConfigService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/config/proto/services/config_service.proto",
}
