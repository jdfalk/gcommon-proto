// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/cache/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockCacheAdminServiceServer creates a new instance of MockCacheAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheAdminServiceServer {
	mock := &MockCacheAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheAdminServiceServer is an autogenerated mock type for the CacheAdminServiceServer type
type MockCacheAdminServiceServer struct {
	mock.Mock
}

type MockCacheAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheAdminServiceServer) EXPECT() *MockCacheAdminServiceServer_Expecter {
	return &MockCacheAdminServiceServer_Expecter{mock: &_m.Mock}
}

// ConfigurePolicy provides a mock function for the type MockCacheAdminServiceServer
func (_mock *MockCacheAdminServiceServer) ConfigurePolicy(context1 context.Context, configurePolicyRequest *proto.ConfigurePolicyRequest) (*proto.ConfigurePolicyResponse, error) {
	ret := _mock.Called(context1, configurePolicyRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigurePolicy")
	}

	var r0 *proto.ConfigurePolicyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigurePolicyRequest) (*proto.ConfigurePolicyResponse, error)); ok {
		return returnFunc(context1, configurePolicyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigurePolicyRequest) *proto.ConfigurePolicyResponse); ok {
		r0 = returnFunc(context1, configurePolicyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigurePolicyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigurePolicyRequest) error); ok {
		r1 = returnFunc(context1, configurePolicyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceServer_ConfigurePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigurePolicy'
type MockCacheAdminServiceServer_ConfigurePolicy_Call struct {
	*mock.Call
}

// ConfigurePolicy is a helper method to define mock.On call
//   - context1 context.Context
//   - configurePolicyRequest *proto.ConfigurePolicyRequest
func (_e *MockCacheAdminServiceServer_Expecter) ConfigurePolicy(context1 interface{}, configurePolicyRequest interface{}) *MockCacheAdminServiceServer_ConfigurePolicy_Call {
	return &MockCacheAdminServiceServer_ConfigurePolicy_Call{Call: _e.mock.On("ConfigurePolicy", context1, configurePolicyRequest)}
}

func (_c *MockCacheAdminServiceServer_ConfigurePolicy_Call) Run(run func(context1 context.Context, configurePolicyRequest *proto.ConfigurePolicyRequest)) *MockCacheAdminServiceServer_ConfigurePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigurePolicyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigurePolicyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceServer_ConfigurePolicy_Call) Return(configurePolicyResponse *proto.ConfigurePolicyResponse, err error) *MockCacheAdminServiceServer_ConfigurePolicy_Call {
	_c.Call.Return(configurePolicyResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceServer_ConfigurePolicy_Call) RunAndReturn(run func(context1 context.Context, configurePolicyRequest *proto.ConfigurePolicyRequest) (*proto.ConfigurePolicyResponse, error)) *MockCacheAdminServiceServer_ConfigurePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNamespace provides a mock function for the type MockCacheAdminServiceServer
func (_mock *MockCacheAdminServiceServer) CreateNamespace(context1 context.Context, createNamespaceRequest *proto.CreateNamespaceRequest) (*proto.CreateNamespaceResponse, error) {
	ret := _mock.Called(context1, createNamespaceRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *proto.CreateNamespaceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateNamespaceRequest) (*proto.CreateNamespaceResponse, error)); ok {
		return returnFunc(context1, createNamespaceRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateNamespaceRequest) *proto.CreateNamespaceResponse); ok {
		r0 = returnFunc(context1, createNamespaceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateNamespaceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateNamespaceRequest) error); ok {
		r1 = returnFunc(context1, createNamespaceRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceServer_CreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNamespace'
type MockCacheAdminServiceServer_CreateNamespace_Call struct {
	*mock.Call
}

// CreateNamespace is a helper method to define mock.On call
//   - context1 context.Context
//   - createNamespaceRequest *proto.CreateNamespaceRequest
func (_e *MockCacheAdminServiceServer_Expecter) CreateNamespace(context1 interface{}, createNamespaceRequest interface{}) *MockCacheAdminServiceServer_CreateNamespace_Call {
	return &MockCacheAdminServiceServer_CreateNamespace_Call{Call: _e.mock.On("CreateNamespace", context1, createNamespaceRequest)}
}

func (_c *MockCacheAdminServiceServer_CreateNamespace_Call) Run(run func(context1 context.Context, createNamespaceRequest *proto.CreateNamespaceRequest)) *MockCacheAdminServiceServer_CreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateNamespaceRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateNamespaceRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceServer_CreateNamespace_Call) Return(createNamespaceResponse *proto.CreateNamespaceResponse, err error) *MockCacheAdminServiceServer_CreateNamespace_Call {
	_c.Call.Return(createNamespaceResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceServer_CreateNamespace_Call) RunAndReturn(run func(context1 context.Context, createNamespaceRequest *proto.CreateNamespaceRequest) (*proto.CreateNamespaceResponse, error)) *MockCacheAdminServiceServer_CreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function for the type MockCacheAdminServiceServer
func (_mock *MockCacheAdminServiceServer) DeleteNamespace(context1 context.Context, deleteNamespaceRequest *proto.DeleteNamespaceRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteNamespaceRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteNamespaceRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteNamespaceRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteNamespaceRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteNamespaceRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteNamespaceRequest) error); ok {
		r1 = returnFunc(context1, deleteNamespaceRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceServer_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type MockCacheAdminServiceServer_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteNamespaceRequest *proto.DeleteNamespaceRequest
func (_e *MockCacheAdminServiceServer_Expecter) DeleteNamespace(context1 interface{}, deleteNamespaceRequest interface{}) *MockCacheAdminServiceServer_DeleteNamespace_Call {
	return &MockCacheAdminServiceServer_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace", context1, deleteNamespaceRequest)}
}

func (_c *MockCacheAdminServiceServer_DeleteNamespace_Call) Run(run func(context1 context.Context, deleteNamespaceRequest *proto.DeleteNamespaceRequest)) *MockCacheAdminServiceServer_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteNamespaceRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteNamespaceRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceServer_DeleteNamespace_Call) Return(empty *emptypb.Empty, err error) *MockCacheAdminServiceServer_DeleteNamespace_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockCacheAdminServiceServer_DeleteNamespace_Call) RunAndReturn(run func(context1 context.Context, deleteNamespaceRequest *proto.DeleteNamespaceRequest) (*emptypb.Empty, error)) *MockCacheAdminServiceServer_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaceStats provides a mock function for the type MockCacheAdminServiceServer
func (_mock *MockCacheAdminServiceServer) GetNamespaceStats(context1 context.Context, getNamespaceStatsRequest *proto.GetNamespaceStatsRequest) (*proto.GetNamespaceStatsResponse, error) {
	ret := _mock.Called(context1, getNamespaceStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaceStats")
	}

	var r0 *proto.GetNamespaceStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetNamespaceStatsRequest) (*proto.GetNamespaceStatsResponse, error)); ok {
		return returnFunc(context1, getNamespaceStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetNamespaceStatsRequest) *proto.GetNamespaceStatsResponse); ok {
		r0 = returnFunc(context1, getNamespaceStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetNamespaceStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetNamespaceStatsRequest) error); ok {
		r1 = returnFunc(context1, getNamespaceStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceServer_GetNamespaceStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceStats'
type MockCacheAdminServiceServer_GetNamespaceStats_Call struct {
	*mock.Call
}

// GetNamespaceStats is a helper method to define mock.On call
//   - context1 context.Context
//   - getNamespaceStatsRequest *proto.GetNamespaceStatsRequest
func (_e *MockCacheAdminServiceServer_Expecter) GetNamespaceStats(context1 interface{}, getNamespaceStatsRequest interface{}) *MockCacheAdminServiceServer_GetNamespaceStats_Call {
	return &MockCacheAdminServiceServer_GetNamespaceStats_Call{Call: _e.mock.On("GetNamespaceStats", context1, getNamespaceStatsRequest)}
}

func (_c *MockCacheAdminServiceServer_GetNamespaceStats_Call) Run(run func(context1 context.Context, getNamespaceStatsRequest *proto.GetNamespaceStatsRequest)) *MockCacheAdminServiceServer_GetNamespaceStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetNamespaceStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetNamespaceStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceServer_GetNamespaceStats_Call) Return(getNamespaceStatsResponse *proto.GetNamespaceStatsResponse, err error) *MockCacheAdminServiceServer_GetNamespaceStats_Call {
	_c.Call.Return(getNamespaceStatsResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceServer_GetNamespaceStats_Call) RunAndReturn(run func(context1 context.Context, getNamespaceStatsRequest *proto.GetNamespaceStatsRequest) (*proto.GetNamespaceStatsResponse, error)) *MockCacheAdminServiceServer_GetNamespaceStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function for the type MockCacheAdminServiceServer
func (_mock *MockCacheAdminServiceServer) ListNamespaces(context1 context.Context, listNamespacesRequest *proto.ListNamespacesRequest) (*proto.ListNamespacesResponse, error) {
	ret := _mock.Called(context1, listNamespacesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *proto.ListNamespacesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListNamespacesRequest) (*proto.ListNamespacesResponse, error)); ok {
		return returnFunc(context1, listNamespacesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListNamespacesRequest) *proto.ListNamespacesResponse); ok {
		r0 = returnFunc(context1, listNamespacesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListNamespacesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListNamespacesRequest) error); ok {
		r1 = returnFunc(context1, listNamespacesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceServer_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type MockCacheAdminServiceServer_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - context1 context.Context
//   - listNamespacesRequest *proto.ListNamespacesRequest
func (_e *MockCacheAdminServiceServer_Expecter) ListNamespaces(context1 interface{}, listNamespacesRequest interface{}) *MockCacheAdminServiceServer_ListNamespaces_Call {
	return &MockCacheAdminServiceServer_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", context1, listNamespacesRequest)}
}

func (_c *MockCacheAdminServiceServer_ListNamespaces_Call) Run(run func(context1 context.Context, listNamespacesRequest *proto.ListNamespacesRequest)) *MockCacheAdminServiceServer_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListNamespacesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListNamespacesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceServer_ListNamespaces_Call) Return(listNamespacesResponse *proto.ListNamespacesResponse, err error) *MockCacheAdminServiceServer_ListNamespaces_Call {
	_c.Call.Return(listNamespacesResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceServer_ListNamespaces_Call) RunAndReturn(run func(context1 context.Context, listNamespacesRequest *proto.ListNamespacesRequest) (*proto.ListNamespacesResponse, error)) *MockCacheAdminServiceServer_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}
