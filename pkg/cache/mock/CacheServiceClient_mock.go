// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/cache/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockCacheServiceClient creates a new instance of MockCacheServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheServiceClient {
	mock := &MockCacheServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheServiceClient is an autogenerated mock type for the CacheServiceClient type
type MockCacheServiceClient struct {
	mock.Mock
}

type MockCacheServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheServiceClient) EXPECT() *MockCacheServiceClient_Expecter {
	return &MockCacheServiceClient_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Clear(ctx context.Context, in *proto.ClearRequest, opts ...grpc.CallOption) (*proto.ClearResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 *proto.ClearResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest, ...grpc.CallOption) (*proto.ClearResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest, ...grpc.CallOption) *proto.ClearResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ClearResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ClearRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCacheServiceClient_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ClearRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Clear(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Clear_Call {
	return &MockCacheServiceClient_Clear_Call{Call: _e.mock.On("Clear",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Clear_Call) Run(run func(ctx context.Context, in *proto.ClearRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ClearRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ClearRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Clear_Call) Return(clearResponse *proto.ClearResponse, err error) *MockCacheServiceClient_Clear_Call {
	_c.Call.Return(clearResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Clear_Call) RunAndReturn(run func(ctx context.Context, in *proto.ClearRequest, opts ...grpc.CallOption) (*proto.ClearResponse, error)) *MockCacheServiceClient_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Decrement(ctx context.Context, in *proto.DecrementRequest, opts ...grpc.CallOption) (*proto.DecrementResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 *proto.DecrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest, ...grpc.CallOption) (*proto.DecrementResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest, ...grpc.CallOption) *proto.DecrementResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DecrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DecrementRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type MockCacheServiceClient_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DecrementRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Decrement(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Decrement_Call {
	return &MockCacheServiceClient_Decrement_Call{Call: _e.mock.On("Decrement",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Decrement_Call) Run(run func(ctx context.Context, in *proto.DecrementRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DecrementRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DecrementRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Decrement_Call) Return(decrementResponse *proto.DecrementResponse, err error) *MockCacheServiceClient_Decrement_Call {
	_c.Call.Return(decrementResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Decrement_Call) RunAndReturn(run func(ctx context.Context, in *proto.DecrementRequest, opts ...grpc.CallOption) (*proto.DecrementResponse, error)) *MockCacheServiceClient_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Delete(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *proto.DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest, ...grpc.CallOption) (*proto.DeleteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest, ...grpc.CallOption) *proto.DeleteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Delete_Call {
	return &MockCacheServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Delete_Call) Run(run func(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Delete_Call) Return(deleteResponse *proto.DeleteResponse, err error) *MockCacheServiceClient_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Delete_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteRequest, opts ...grpc.CallOption) (*proto.DeleteResponse, error)) *MockCacheServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMultiple provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) DeleteMultiple(ctx context.Context, in *proto.DeleteMultipleRequest, opts ...grpc.CallOption) (*proto.DeleteMultipleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiple")
	}

	var r0 *proto.DeleteMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultipleRequest, ...grpc.CallOption) (*proto.DeleteMultipleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultipleRequest, ...grpc.CallOption) *proto.DeleteMultipleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteMultipleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_DeleteMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMultiple'
type MockCacheServiceClient_DeleteMultiple_Call struct {
	*mock.Call
}

// DeleteMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteMultipleRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) DeleteMultiple(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_DeleteMultiple_Call {
	return &MockCacheServiceClient_DeleteMultiple_Call{Call: _e.mock.On("DeleteMultiple",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_DeleteMultiple_Call) Run(run func(ctx context.Context, in *proto.DeleteMultipleRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_DeleteMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteMultipleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_DeleteMultiple_Call) Return(deleteMultipleResponse *proto.DeleteMultipleResponse, err error) *MockCacheServiceClient_DeleteMultiple_Call {
	_c.Call.Return(deleteMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_DeleteMultiple_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteMultipleRequest, opts ...grpc.CallOption) (*proto.DeleteMultipleResponse, error)) *MockCacheServiceClient_DeleteMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Exists(ctx context.Context, in *proto.ExistsRequest, opts ...grpc.CallOption) (*proto.ExistsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *proto.ExistsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest, ...grpc.CallOption) (*proto.ExistsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest, ...grpc.CallOption) *proto.ExistsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExistsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExistsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCacheServiceClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ExistsRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Exists(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Exists_Call {
	return &MockCacheServiceClient_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Exists_Call) Run(run func(ctx context.Context, in *proto.ExistsRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExistsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExistsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Exists_Call) Return(existsResponse *proto.ExistsResponse, err error) *MockCacheServiceClient_Exists_Call {
	_c.Call.Return(existsResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Exists_Call) RunAndReturn(run func(ctx context.Context, in *proto.ExistsRequest, opts ...grpc.CallOption) (*proto.ExistsResponse, error)) *MockCacheServiceClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Flush(ctx context.Context, in *proto.FlushRequest, opts ...grpc.CallOption) (*proto.FlushResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *proto.FlushResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest, ...grpc.CallOption) (*proto.FlushResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest, ...grpc.CallOption) *proto.FlushResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlushResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.FlushRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockCacheServiceClient_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.FlushRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Flush(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Flush_Call {
	return &MockCacheServiceClient_Flush_Call{Call: _e.mock.On("Flush",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Flush_Call) Run(run func(ctx context.Context, in *proto.FlushRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.FlushRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.FlushRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Flush_Call) Return(flushResponse *proto.FlushResponse, err error) *MockCacheServiceClient_Flush_Call {
	_c.Call.Return(flushResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Flush_Call) RunAndReturn(run func(ctx context.Context, in *proto.FlushRequest, opts ...grpc.CallOption) (*proto.FlushResponse, error)) *MockCacheServiceClient_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Get(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption) (*proto.GetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest, ...grpc.CallOption) (*proto.GetResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest, ...grpc.CallOption) *proto.GetResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Get_Call {
	return &MockCacheServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Get_Call) Run(run func(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Get_Call) Return(getResponse *proto.GetResponse, err error) *MockCacheServiceClient_Get_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Get_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetRequest, opts ...grpc.CallOption) (*proto.GetResponse, error)) *MockCacheServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiple provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) GetMultiple(ctx context.Context, in *proto.GetMultipleRequest, opts ...grpc.CallOption) (*proto.GetMultipleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetMultiple")
	}

	var r0 *proto.GetMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleRequest, ...grpc.CallOption) (*proto.GetMultipleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleRequest, ...grpc.CallOption) *proto.GetMultipleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMultipleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_GetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiple'
type MockCacheServiceClient_GetMultiple_Call struct {
	*mock.Call
}

// GetMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetMultipleRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) GetMultiple(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_GetMultiple_Call {
	return &MockCacheServiceClient_GetMultiple_Call{Call: _e.mock.On("GetMultiple",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_GetMultiple_Call) Run(run func(ctx context.Context, in *proto.GetMultipleRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_GetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMultipleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_GetMultiple_Call) Return(getMultipleResponse *proto.GetMultipleResponse, err error) *MockCacheServiceClient_GetMultiple_Call {
	_c.Call.Return(getMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_GetMultiple_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetMultipleRequest, opts ...grpc.CallOption) (*proto.GetMultipleResponse, error)) *MockCacheServiceClient_GetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) GetStats(ctx context.Context, in *proto.GetStatsRequest, opts ...grpc.CallOption) (*proto.GetStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *proto.GetStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetStatsRequest, ...grpc.CallOption) (*proto.GetStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetStatsRequest, ...grpc.CallOption) *proto.GetStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockCacheServiceClient_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) GetStats(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_GetStats_Call {
	return &MockCacheServiceClient_GetStats_Call{Call: _e.mock.On("GetStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_GetStats_Call) Run(run func(ctx context.Context, in *proto.GetStatsRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_GetStats_Call) Return(getStatsResponse *proto.GetStatsResponse, err error) *MockCacheServiceClient_GetStats_Call {
	_c.Call.Return(getStatsResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_GetStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetStatsRequest, opts ...grpc.CallOption) (*proto.GetStatsResponse, error)) *MockCacheServiceClient_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Increment(ctx context.Context, in *proto.IncrementRequest, opts ...grpc.CallOption) (*proto.IncrementResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 *proto.IncrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest, ...grpc.CallOption) (*proto.IncrementResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest, ...grpc.CallOption) *proto.IncrementResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.IncrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.IncrementRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCacheServiceClient_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.IncrementRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Increment(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Increment_Call {
	return &MockCacheServiceClient_Increment_Call{Call: _e.mock.On("Increment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Increment_Call) Run(run func(ctx context.Context, in *proto.IncrementRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.IncrementRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.IncrementRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Increment_Call) Return(incrementResponse *proto.IncrementResponse, err error) *MockCacheServiceClient_Increment_Call {
	_c.Call.Return(incrementResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Increment_Call) RunAndReturn(run func(ctx context.Context, in *proto.IncrementRequest, opts ...grpc.CallOption) (*proto.IncrementResponse, error)) *MockCacheServiceClient_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Keys(ctx context.Context, in *proto.KeysRequest, opts ...grpc.CallOption) (*proto.KeysResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 *proto.KeysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.KeysRequest, ...grpc.CallOption) (*proto.KeysResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.KeysRequest, ...grpc.CallOption) *proto.KeysResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.KeysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.KeysRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockCacheServiceClient_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.KeysRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Keys(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Keys_Call {
	return &MockCacheServiceClient_Keys_Call{Call: _e.mock.On("Keys",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Keys_Call) Run(run func(ctx context.Context, in *proto.KeysRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.KeysRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.KeysRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Keys_Call) Return(keysResponse *proto.KeysResponse, err error) *MockCacheServiceClient_Keys_Call {
	_c.Call.Return(keysResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Keys_Call) RunAndReturn(run func(ctx context.Context, in *proto.KeysRequest, opts ...grpc.CallOption) (*proto.KeysResponse, error)) *MockCacheServiceClient_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) Set(ctx context.Context, in *proto.SetRequest, opts ...grpc.CallOption) (*proto.SetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest, ...grpc.CallOption) (*proto.SetResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest, ...grpc.CallOption) *proto.SetResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheServiceClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SetRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) Set(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_Set_Call {
	return &MockCacheServiceClient_Set_Call{Call: _e.mock.On("Set",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_Set_Call) Run(run func(ctx context.Context, in *proto.SetRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_Set_Call) Return(setResponse *proto.SetResponse, err error) *MockCacheServiceClient_Set_Call {
	_c.Call.Return(setResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_Set_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetRequest, opts ...grpc.CallOption) (*proto.SetResponse, error)) *MockCacheServiceClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMultiple provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) SetMultiple(ctx context.Context, in *proto.SetMultipleRequest, opts ...grpc.CallOption) (*proto.SetMultipleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 *proto.SetMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleRequest, ...grpc.CallOption) (*proto.SetMultipleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleRequest, ...grpc.CallOption) *proto.SetMultipleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetMultipleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type MockCacheServiceClient_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SetMultipleRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) SetMultiple(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_SetMultiple_Call {
	return &MockCacheServiceClient_SetMultiple_Call{Call: _e.mock.On("SetMultiple",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_SetMultiple_Call) Run(run func(ctx context.Context, in *proto.SetMultipleRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetMultipleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_SetMultiple_Call) Return(setMultipleResponse *proto.SetMultipleResponse, err error) *MockCacheServiceClient_SetMultiple_Call {
	_c.Call.Return(setMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_SetMultiple_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetMultipleRequest, opts ...grpc.CallOption) (*proto.SetMultipleResponse, error)) *MockCacheServiceClient_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// TouchExpiration provides a mock function for the type MockCacheServiceClient
func (_mock *MockCacheServiceClient) TouchExpiration(ctx context.Context, in *proto.TouchExpirationRequest, opts ...grpc.CallOption) (*proto.TouchExpirationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for TouchExpiration")
	}

	var r0 *proto.TouchExpirationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TouchExpirationRequest, ...grpc.CallOption) (*proto.TouchExpirationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TouchExpirationRequest, ...grpc.CallOption) *proto.TouchExpirationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TouchExpirationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TouchExpirationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceClient_TouchExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TouchExpiration'
type MockCacheServiceClient_TouchExpiration_Call struct {
	*mock.Call
}

// TouchExpiration is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.TouchExpirationRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheServiceClient_Expecter) TouchExpiration(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheServiceClient_TouchExpiration_Call {
	return &MockCacheServiceClient_TouchExpiration_Call{Call: _e.mock.On("TouchExpiration",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheServiceClient_TouchExpiration_Call) Run(run func(ctx context.Context, in *proto.TouchExpirationRequest, opts ...grpc.CallOption)) *MockCacheServiceClient_TouchExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.TouchExpirationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.TouchExpirationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheServiceClient_TouchExpiration_Call) Return(touchExpirationResponse *proto.TouchExpirationResponse, err error) *MockCacheServiceClient_TouchExpiration_Call {
	_c.Call.Return(touchExpirationResponse, err)
	return _c
}

func (_c *MockCacheServiceClient_TouchExpiration_Call) RunAndReturn(run func(ctx context.Context, in *proto.TouchExpirationRequest, opts ...grpc.CallOption) (*proto.TouchExpirationResponse, error)) *MockCacheServiceClient_TouchExpiration_Call {
	_c.Call.Return(run)
	return _c
}
