// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/cache/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockCacheAdminServiceClient creates a new instance of MockCacheAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheAdminServiceClient {
	mock := &MockCacheAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheAdminServiceClient is an autogenerated mock type for the CacheAdminServiceClient type
type MockCacheAdminServiceClient struct {
	mock.Mock
}

type MockCacheAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheAdminServiceClient) EXPECT() *MockCacheAdminServiceClient_Expecter {
	return &MockCacheAdminServiceClient_Expecter{mock: &_m.Mock}
}

// ConfigurePolicy provides a mock function for the type MockCacheAdminServiceClient
func (_mock *MockCacheAdminServiceClient) ConfigurePolicy(ctx context.Context, in *proto.ConfigurePolicyRequest, opts ...grpc.CallOption) (*proto.ConfigurePolicyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ConfigurePolicy")
	}

	var r0 *proto.ConfigurePolicyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigurePolicyRequest, ...grpc.CallOption) (*proto.ConfigurePolicyResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigurePolicyRequest, ...grpc.CallOption) *proto.ConfigurePolicyResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigurePolicyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigurePolicyRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceClient_ConfigurePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigurePolicy'
type MockCacheAdminServiceClient_ConfigurePolicy_Call struct {
	*mock.Call
}

// ConfigurePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ConfigurePolicyRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheAdminServiceClient_Expecter) ConfigurePolicy(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheAdminServiceClient_ConfigurePolicy_Call {
	return &MockCacheAdminServiceClient_ConfigurePolicy_Call{Call: _e.mock.On("ConfigurePolicy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheAdminServiceClient_ConfigurePolicy_Call) Run(run func(ctx context.Context, in *proto.ConfigurePolicyRequest, opts ...grpc.CallOption)) *MockCacheAdminServiceClient_ConfigurePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigurePolicyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigurePolicyRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceClient_ConfigurePolicy_Call) Return(configurePolicyResponse *proto.ConfigurePolicyResponse, err error) *MockCacheAdminServiceClient_ConfigurePolicy_Call {
	_c.Call.Return(configurePolicyResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceClient_ConfigurePolicy_Call) RunAndReturn(run func(ctx context.Context, in *proto.ConfigurePolicyRequest, opts ...grpc.CallOption) (*proto.ConfigurePolicyResponse, error)) *MockCacheAdminServiceClient_ConfigurePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNamespace provides a mock function for the type MockCacheAdminServiceClient
func (_mock *MockCacheAdminServiceClient) CreateNamespace(ctx context.Context, in *proto.CreateNamespaceRequest, opts ...grpc.CallOption) (*proto.CreateNamespaceResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *proto.CreateNamespaceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateNamespaceRequest, ...grpc.CallOption) (*proto.CreateNamespaceResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateNamespaceRequest, ...grpc.CallOption) *proto.CreateNamespaceResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateNamespaceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceClient_CreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNamespace'
type MockCacheAdminServiceClient_CreateNamespace_Call struct {
	*mock.Call
}

// CreateNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheAdminServiceClient_Expecter) CreateNamespace(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheAdminServiceClient_CreateNamespace_Call {
	return &MockCacheAdminServiceClient_CreateNamespace_Call{Call: _e.mock.On("CreateNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheAdminServiceClient_CreateNamespace_Call) Run(run func(ctx context.Context, in *proto.CreateNamespaceRequest, opts ...grpc.CallOption)) *MockCacheAdminServiceClient_CreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateNamespaceRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateNamespaceRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceClient_CreateNamespace_Call) Return(createNamespaceResponse *proto.CreateNamespaceResponse, err error) *MockCacheAdminServiceClient_CreateNamespace_Call {
	_c.Call.Return(createNamespaceResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceClient_CreateNamespace_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateNamespaceRequest, opts ...grpc.CallOption) (*proto.CreateNamespaceResponse, error)) *MockCacheAdminServiceClient_CreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function for the type MockCacheAdminServiceClient
func (_mock *MockCacheAdminServiceClient) DeleteNamespace(ctx context.Context, in *proto.DeleteNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteNamespaceRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteNamespaceRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteNamespaceRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceClient_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type MockCacheAdminServiceClient_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteNamespaceRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheAdminServiceClient_Expecter) DeleteNamespace(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheAdminServiceClient_DeleteNamespace_Call {
	return &MockCacheAdminServiceClient_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheAdminServiceClient_DeleteNamespace_Call) Run(run func(ctx context.Context, in *proto.DeleteNamespaceRequest, opts ...grpc.CallOption)) *MockCacheAdminServiceClient_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteNamespaceRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteNamespaceRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceClient_DeleteNamespace_Call) Return(empty *emptypb.Empty, err error) *MockCacheAdminServiceClient_DeleteNamespace_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockCacheAdminServiceClient_DeleteNamespace_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockCacheAdminServiceClient_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaceStats provides a mock function for the type MockCacheAdminServiceClient
func (_mock *MockCacheAdminServiceClient) GetNamespaceStats(ctx context.Context, in *proto.GetNamespaceStatsRequest, opts ...grpc.CallOption) (*proto.GetNamespaceStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaceStats")
	}

	var r0 *proto.GetNamespaceStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetNamespaceStatsRequest, ...grpc.CallOption) (*proto.GetNamespaceStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetNamespaceStatsRequest, ...grpc.CallOption) *proto.GetNamespaceStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetNamespaceStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetNamespaceStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceClient_GetNamespaceStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceStats'
type MockCacheAdminServiceClient_GetNamespaceStats_Call struct {
	*mock.Call
}

// GetNamespaceStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetNamespaceStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheAdminServiceClient_Expecter) GetNamespaceStats(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheAdminServiceClient_GetNamespaceStats_Call {
	return &MockCacheAdminServiceClient_GetNamespaceStats_Call{Call: _e.mock.On("GetNamespaceStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheAdminServiceClient_GetNamespaceStats_Call) Run(run func(ctx context.Context, in *proto.GetNamespaceStatsRequest, opts ...grpc.CallOption)) *MockCacheAdminServiceClient_GetNamespaceStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetNamespaceStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetNamespaceStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceClient_GetNamespaceStats_Call) Return(getNamespaceStatsResponse *proto.GetNamespaceStatsResponse, err error) *MockCacheAdminServiceClient_GetNamespaceStats_Call {
	_c.Call.Return(getNamespaceStatsResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceClient_GetNamespaceStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetNamespaceStatsRequest, opts ...grpc.CallOption) (*proto.GetNamespaceStatsResponse, error)) *MockCacheAdminServiceClient_GetNamespaceStats_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function for the type MockCacheAdminServiceClient
func (_mock *MockCacheAdminServiceClient) ListNamespaces(ctx context.Context, in *proto.ListNamespacesRequest, opts ...grpc.CallOption) (*proto.ListNamespacesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *proto.ListNamespacesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListNamespacesRequest, ...grpc.CallOption) (*proto.ListNamespacesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListNamespacesRequest, ...grpc.CallOption) *proto.ListNamespacesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListNamespacesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListNamespacesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheAdminServiceClient_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type MockCacheAdminServiceClient_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListNamespacesRequest
//   - opts ...grpc.CallOption
func (_e *MockCacheAdminServiceClient_Expecter) ListNamespaces(ctx interface{}, in interface{}, opts ...interface{}) *MockCacheAdminServiceClient_ListNamespaces_Call {
	return &MockCacheAdminServiceClient_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCacheAdminServiceClient_ListNamespaces_Call) Run(run func(ctx context.Context, in *proto.ListNamespacesRequest, opts ...grpc.CallOption)) *MockCacheAdminServiceClient_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListNamespacesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListNamespacesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCacheAdminServiceClient_ListNamespaces_Call) Return(listNamespacesResponse *proto.ListNamespacesResponse, err error) *MockCacheAdminServiceClient_ListNamespaces_Call {
	_c.Call.Return(listNamespacesResponse, err)
	return _c
}

func (_c *MockCacheAdminServiceClient_ListNamespaces_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListNamespacesRequest, opts ...grpc.CallOption) (*proto.ListNamespacesResponse, error)) *MockCacheAdminServiceClient_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}
