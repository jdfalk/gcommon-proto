// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/cache/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheServiceServer creates a new instance of MockCacheServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheServiceServer {
	mock := &MockCacheServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheServiceServer is an autogenerated mock type for the CacheServiceServer type
type MockCacheServiceServer struct {
	mock.Mock
}

type MockCacheServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheServiceServer) EXPECT() *MockCacheServiceServer_Expecter {
	return &MockCacheServiceServer_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Clear(context1 context.Context, clearRequest *proto.ClearRequest) (*proto.ClearResponse, error) {
	ret := _mock.Called(context1, clearRequest)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 *proto.ClearResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest) (*proto.ClearResponse, error)); ok {
		return returnFunc(context1, clearRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest) *proto.ClearResponse); ok {
		r0 = returnFunc(context1, clearRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ClearResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ClearRequest) error); ok {
		r1 = returnFunc(context1, clearRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCacheServiceServer_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - context1 context.Context
//   - clearRequest *proto.ClearRequest
func (_e *MockCacheServiceServer_Expecter) Clear(context1 interface{}, clearRequest interface{}) *MockCacheServiceServer_Clear_Call {
	return &MockCacheServiceServer_Clear_Call{Call: _e.mock.On("Clear", context1, clearRequest)}
}

func (_c *MockCacheServiceServer_Clear_Call) Run(run func(context1 context.Context, clearRequest *proto.ClearRequest)) *MockCacheServiceServer_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ClearRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ClearRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Clear_Call) Return(clearResponse *proto.ClearResponse, err error) *MockCacheServiceServer_Clear_Call {
	_c.Call.Return(clearResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Clear_Call) RunAndReturn(run func(context1 context.Context, clearRequest *proto.ClearRequest) (*proto.ClearResponse, error)) *MockCacheServiceServer_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Decrement(context1 context.Context, decrementRequest *proto.DecrementRequest) (*proto.DecrementResponse, error) {
	ret := _mock.Called(context1, decrementRequest)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 *proto.DecrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest) (*proto.DecrementResponse, error)); ok {
		return returnFunc(context1, decrementRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest) *proto.DecrementResponse); ok {
		r0 = returnFunc(context1, decrementRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DecrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DecrementRequest) error); ok {
		r1 = returnFunc(context1, decrementRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type MockCacheServiceServer_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - context1 context.Context
//   - decrementRequest *proto.DecrementRequest
func (_e *MockCacheServiceServer_Expecter) Decrement(context1 interface{}, decrementRequest interface{}) *MockCacheServiceServer_Decrement_Call {
	return &MockCacheServiceServer_Decrement_Call{Call: _e.mock.On("Decrement", context1, decrementRequest)}
}

func (_c *MockCacheServiceServer_Decrement_Call) Run(run func(context1 context.Context, decrementRequest *proto.DecrementRequest)) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DecrementRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DecrementRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Decrement_Call) Return(decrementResponse *proto.DecrementResponse, err error) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Return(decrementResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Decrement_Call) RunAndReturn(run func(context1 context.Context, decrementRequest *proto.DecrementRequest) (*proto.DecrementResponse, error)) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Delete(context1 context.Context, deleteRequest *proto.DeleteRequest) (*proto.DeleteResponse, error) {
	ret := _mock.Called(context1, deleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *proto.DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest) (*proto.DeleteResponse, error)); ok {
		return returnFunc(context1, deleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest) *proto.DeleteResponse); ok {
		r0 = returnFunc(context1, deleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteRequest) error); ok {
		r1 = returnFunc(context1, deleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteRequest *proto.DeleteRequest
func (_e *MockCacheServiceServer_Expecter) Delete(context1 interface{}, deleteRequest interface{}) *MockCacheServiceServer_Delete_Call {
	return &MockCacheServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, deleteRequest)}
}

func (_c *MockCacheServiceServer_Delete_Call) Run(run func(context1 context.Context, deleteRequest *proto.DeleteRequest)) *MockCacheServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Delete_Call) Return(deleteResponse *proto.DeleteResponse, err error) *MockCacheServiceServer_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteRequest *proto.DeleteRequest) (*proto.DeleteResponse, error)) *MockCacheServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMultiple provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) DeleteMultiple(context1 context.Context, deleteMultipleRequest *proto.DeleteMultipleRequest) (*proto.DeleteMultipleResponse, error) {
	ret := _mock.Called(context1, deleteMultipleRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiple")
	}

	var r0 *proto.DeleteMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultipleRequest) (*proto.DeleteMultipleResponse, error)); ok {
		return returnFunc(context1, deleteMultipleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultipleRequest) *proto.DeleteMultipleResponse); ok {
		r0 = returnFunc(context1, deleteMultipleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteMultipleRequest) error); ok {
		r1 = returnFunc(context1, deleteMultipleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_DeleteMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMultiple'
type MockCacheServiceServer_DeleteMultiple_Call struct {
	*mock.Call
}

// DeleteMultiple is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteMultipleRequest *proto.DeleteMultipleRequest
func (_e *MockCacheServiceServer_Expecter) DeleteMultiple(context1 interface{}, deleteMultipleRequest interface{}) *MockCacheServiceServer_DeleteMultiple_Call {
	return &MockCacheServiceServer_DeleteMultiple_Call{Call: _e.mock.On("DeleteMultiple", context1, deleteMultipleRequest)}
}

func (_c *MockCacheServiceServer_DeleteMultiple_Call) Run(run func(context1 context.Context, deleteMultipleRequest *proto.DeleteMultipleRequest)) *MockCacheServiceServer_DeleteMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteMultipleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_DeleteMultiple_Call) Return(deleteMultipleResponse *proto.DeleteMultipleResponse, err error) *MockCacheServiceServer_DeleteMultiple_Call {
	_c.Call.Return(deleteMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_DeleteMultiple_Call) RunAndReturn(run func(context1 context.Context, deleteMultipleRequest *proto.DeleteMultipleRequest) (*proto.DeleteMultipleResponse, error)) *MockCacheServiceServer_DeleteMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Exists(context1 context.Context, existsRequest *proto.ExistsRequest) (*proto.ExistsResponse, error) {
	ret := _mock.Called(context1, existsRequest)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *proto.ExistsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest) (*proto.ExistsResponse, error)); ok {
		return returnFunc(context1, existsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest) *proto.ExistsResponse); ok {
		r0 = returnFunc(context1, existsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExistsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExistsRequest) error); ok {
		r1 = returnFunc(context1, existsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCacheServiceServer_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - context1 context.Context
//   - existsRequest *proto.ExistsRequest
func (_e *MockCacheServiceServer_Expecter) Exists(context1 interface{}, existsRequest interface{}) *MockCacheServiceServer_Exists_Call {
	return &MockCacheServiceServer_Exists_Call{Call: _e.mock.On("Exists", context1, existsRequest)}
}

func (_c *MockCacheServiceServer_Exists_Call) Run(run func(context1 context.Context, existsRequest *proto.ExistsRequest)) *MockCacheServiceServer_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExistsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExistsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Exists_Call) Return(existsResponse *proto.ExistsResponse, err error) *MockCacheServiceServer_Exists_Call {
	_c.Call.Return(existsResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Exists_Call) RunAndReturn(run func(context1 context.Context, existsRequest *proto.ExistsRequest) (*proto.ExistsResponse, error)) *MockCacheServiceServer_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Flush(context1 context.Context, flushRequest *proto.FlushRequest) (*proto.FlushResponse, error) {
	ret := _mock.Called(context1, flushRequest)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *proto.FlushResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest) (*proto.FlushResponse, error)); ok {
		return returnFunc(context1, flushRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest) *proto.FlushResponse); ok {
		r0 = returnFunc(context1, flushRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlushResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.FlushRequest) error); ok {
		r1 = returnFunc(context1, flushRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockCacheServiceServer_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - context1 context.Context
//   - flushRequest *proto.FlushRequest
func (_e *MockCacheServiceServer_Expecter) Flush(context1 interface{}, flushRequest interface{}) *MockCacheServiceServer_Flush_Call {
	return &MockCacheServiceServer_Flush_Call{Call: _e.mock.On("Flush", context1, flushRequest)}
}

func (_c *MockCacheServiceServer_Flush_Call) Run(run func(context1 context.Context, flushRequest *proto.FlushRequest)) *MockCacheServiceServer_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.FlushRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.FlushRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Flush_Call) Return(flushResponse *proto.FlushResponse, err error) *MockCacheServiceServer_Flush_Call {
	_c.Call.Return(flushResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Flush_Call) RunAndReturn(run func(context1 context.Context, flushRequest *proto.FlushRequest) (*proto.FlushResponse, error)) *MockCacheServiceServer_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Get(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error) {
	ret := _mock.Called(context1, getRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) (*proto.GetResponse, error)); ok {
		return returnFunc(context1, getRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) *proto.GetResponse); ok {
		r0 = returnFunc(context1, getRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRequest) error); ok {
		r1 = returnFunc(context1, getRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getRequest *proto.GetRequest
func (_e *MockCacheServiceServer_Expecter) Get(context1 interface{}, getRequest interface{}) *MockCacheServiceServer_Get_Call {
	return &MockCacheServiceServer_Get_Call{Call: _e.mock.On("Get", context1, getRequest)}
}

func (_c *MockCacheServiceServer_Get_Call) Run(run func(context1 context.Context, getRequest *proto.GetRequest)) *MockCacheServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Get_Call) Return(getResponse *proto.GetResponse, err error) *MockCacheServiceServer_Get_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error)) *MockCacheServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMultiple provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) GetMultiple(context1 context.Context, getMultipleRequest *proto.GetMultipleRequest) (*proto.GetMultipleResponse, error) {
	ret := _mock.Called(context1, getMultipleRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiple")
	}

	var r0 *proto.GetMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleRequest) (*proto.GetMultipleResponse, error)); ok {
		return returnFunc(context1, getMultipleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultipleRequest) *proto.GetMultipleResponse); ok {
		r0 = returnFunc(context1, getMultipleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMultipleRequest) error); ok {
		r1 = returnFunc(context1, getMultipleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_GetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMultiple'
type MockCacheServiceServer_GetMultiple_Call struct {
	*mock.Call
}

// GetMultiple is a helper method to define mock.On call
//   - context1 context.Context
//   - getMultipleRequest *proto.GetMultipleRequest
func (_e *MockCacheServiceServer_Expecter) GetMultiple(context1 interface{}, getMultipleRequest interface{}) *MockCacheServiceServer_GetMultiple_Call {
	return &MockCacheServiceServer_GetMultiple_Call{Call: _e.mock.On("GetMultiple", context1, getMultipleRequest)}
}

func (_c *MockCacheServiceServer_GetMultiple_Call) Run(run func(context1 context.Context, getMultipleRequest *proto.GetMultipleRequest)) *MockCacheServiceServer_GetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetMultipleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_GetMultiple_Call) Return(getMultipleResponse *proto.GetMultipleResponse, err error) *MockCacheServiceServer_GetMultiple_Call {
	_c.Call.Return(getMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_GetMultiple_Call) RunAndReturn(run func(context1 context.Context, getMultipleRequest *proto.GetMultipleRequest) (*proto.GetMultipleResponse, error)) *MockCacheServiceServer_GetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) GetStats(context1 context.Context, getStatsRequest *proto.GetStatsRequest) (*proto.GetStatsResponse, error) {
	ret := _mock.Called(context1, getStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *proto.GetStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetStatsRequest) (*proto.GetStatsResponse, error)); ok {
		return returnFunc(context1, getStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetStatsRequest) *proto.GetStatsResponse); ok {
		r0 = returnFunc(context1, getStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetStatsRequest) error); ok {
		r1 = returnFunc(context1, getStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockCacheServiceServer_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - context1 context.Context
//   - getStatsRequest *proto.GetStatsRequest
func (_e *MockCacheServiceServer_Expecter) GetStats(context1 interface{}, getStatsRequest interface{}) *MockCacheServiceServer_GetStats_Call {
	return &MockCacheServiceServer_GetStats_Call{Call: _e.mock.On("GetStats", context1, getStatsRequest)}
}

func (_c *MockCacheServiceServer_GetStats_Call) Run(run func(context1 context.Context, getStatsRequest *proto.GetStatsRequest)) *MockCacheServiceServer_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_GetStats_Call) Return(getStatsResponse *proto.GetStatsResponse, err error) *MockCacheServiceServer_GetStats_Call {
	_c.Call.Return(getStatsResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_GetStats_Call) RunAndReturn(run func(context1 context.Context, getStatsRequest *proto.GetStatsRequest) (*proto.GetStatsResponse, error)) *MockCacheServiceServer_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Increment(context1 context.Context, incrementRequest *proto.IncrementRequest) (*proto.IncrementResponse, error) {
	ret := _mock.Called(context1, incrementRequest)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 *proto.IncrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest) (*proto.IncrementResponse, error)); ok {
		return returnFunc(context1, incrementRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest) *proto.IncrementResponse); ok {
		r0 = returnFunc(context1, incrementRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.IncrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.IncrementRequest) error); ok {
		r1 = returnFunc(context1, incrementRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCacheServiceServer_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - context1 context.Context
//   - incrementRequest *proto.IncrementRequest
func (_e *MockCacheServiceServer_Expecter) Increment(context1 interface{}, incrementRequest interface{}) *MockCacheServiceServer_Increment_Call {
	return &MockCacheServiceServer_Increment_Call{Call: _e.mock.On("Increment", context1, incrementRequest)}
}

func (_c *MockCacheServiceServer_Increment_Call) Run(run func(context1 context.Context, incrementRequest *proto.IncrementRequest)) *MockCacheServiceServer_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.IncrementRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.IncrementRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Increment_Call) Return(incrementResponse *proto.IncrementResponse, err error) *MockCacheServiceServer_Increment_Call {
	_c.Call.Return(incrementResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Increment_Call) RunAndReturn(run func(context1 context.Context, incrementRequest *proto.IncrementRequest) (*proto.IncrementResponse, error)) *MockCacheServiceServer_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Keys(context1 context.Context, keysRequest *proto.KeysRequest) (*proto.KeysResponse, error) {
	ret := _mock.Called(context1, keysRequest)

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 *proto.KeysResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.KeysRequest) (*proto.KeysResponse, error)); ok {
		return returnFunc(context1, keysRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.KeysRequest) *proto.KeysResponse); ok {
		r0 = returnFunc(context1, keysRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.KeysResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.KeysRequest) error); ok {
		r1 = returnFunc(context1, keysRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockCacheServiceServer_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - context1 context.Context
//   - keysRequest *proto.KeysRequest
func (_e *MockCacheServiceServer_Expecter) Keys(context1 interface{}, keysRequest interface{}) *MockCacheServiceServer_Keys_Call {
	return &MockCacheServiceServer_Keys_Call{Call: _e.mock.On("Keys", context1, keysRequest)}
}

func (_c *MockCacheServiceServer_Keys_Call) Run(run func(context1 context.Context, keysRequest *proto.KeysRequest)) *MockCacheServiceServer_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.KeysRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.KeysRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Keys_Call) Return(keysResponse *proto.KeysResponse, err error) *MockCacheServiceServer_Keys_Call {
	_c.Call.Return(keysResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Keys_Call) RunAndReturn(run func(context1 context.Context, keysRequest *proto.KeysRequest) (*proto.KeysResponse, error)) *MockCacheServiceServer_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Set(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error) {
	ret := _mock.Called(context1, setRequest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) (*proto.SetResponse, error)); ok {
		return returnFunc(context1, setRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) *proto.SetResponse); ok {
		r0 = returnFunc(context1, setRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetRequest) error); ok {
		r1 = returnFunc(context1, setRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheServiceServer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1 context.Context
//   - setRequest *proto.SetRequest
func (_e *MockCacheServiceServer_Expecter) Set(context1 interface{}, setRequest interface{}) *MockCacheServiceServer_Set_Call {
	return &MockCacheServiceServer_Set_Call{Call: _e.mock.On("Set", context1, setRequest)}
}

func (_c *MockCacheServiceServer_Set_Call) Run(run func(context1 context.Context, setRequest *proto.SetRequest)) *MockCacheServiceServer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_Set_Call) Return(setResponse *proto.SetResponse, err error) *MockCacheServiceServer_Set_Call {
	_c.Call.Return(setResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Set_Call) RunAndReturn(run func(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error)) *MockCacheServiceServer_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMultiple provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) SetMultiple(context1 context.Context, setMultipleRequest *proto.SetMultipleRequest) (*proto.SetMultipleResponse, error) {
	ret := _mock.Called(context1, setMultipleRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetMultiple")
	}

	var r0 *proto.SetMultipleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleRequest) (*proto.SetMultipleResponse, error)); ok {
		return returnFunc(context1, setMultipleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultipleRequest) *proto.SetMultipleResponse); ok {
		r0 = returnFunc(context1, setMultipleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetMultipleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetMultipleRequest) error); ok {
		r1 = returnFunc(context1, setMultipleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_SetMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMultiple'
type MockCacheServiceServer_SetMultiple_Call struct {
	*mock.Call
}

// SetMultiple is a helper method to define mock.On call
//   - context1 context.Context
//   - setMultipleRequest *proto.SetMultipleRequest
func (_e *MockCacheServiceServer_Expecter) SetMultiple(context1 interface{}, setMultipleRequest interface{}) *MockCacheServiceServer_SetMultiple_Call {
	return &MockCacheServiceServer_SetMultiple_Call{Call: _e.mock.On("SetMultiple", context1, setMultipleRequest)}
}

func (_c *MockCacheServiceServer_SetMultiple_Call) Run(run func(context1 context.Context, setMultipleRequest *proto.SetMultipleRequest)) *MockCacheServiceServer_SetMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetMultipleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetMultipleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_SetMultiple_Call) Return(setMultipleResponse *proto.SetMultipleResponse, err error) *MockCacheServiceServer_SetMultiple_Call {
	_c.Call.Return(setMultipleResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_SetMultiple_Call) RunAndReturn(run func(context1 context.Context, setMultipleRequest *proto.SetMultipleRequest) (*proto.SetMultipleResponse, error)) *MockCacheServiceServer_SetMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// TouchExpiration provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) TouchExpiration(context1 context.Context, touchExpirationRequest *proto.TouchExpirationRequest) (*proto.TouchExpirationResponse, error) {
	ret := _mock.Called(context1, touchExpirationRequest)

	if len(ret) == 0 {
		panic("no return value specified for TouchExpiration")
	}

	var r0 *proto.TouchExpirationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TouchExpirationRequest) (*proto.TouchExpirationResponse, error)); ok {
		return returnFunc(context1, touchExpirationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TouchExpirationRequest) *proto.TouchExpirationResponse); ok {
		r0 = returnFunc(context1, touchExpirationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TouchExpirationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TouchExpirationRequest) error); ok {
		r1 = returnFunc(context1, touchExpirationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_TouchExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TouchExpiration'
type MockCacheServiceServer_TouchExpiration_Call struct {
	*mock.Call
}

// TouchExpiration is a helper method to define mock.On call
//   - context1 context.Context
//   - touchExpirationRequest *proto.TouchExpirationRequest
func (_e *MockCacheServiceServer_Expecter) TouchExpiration(context1 interface{}, touchExpirationRequest interface{}) *MockCacheServiceServer_TouchExpiration_Call {
	return &MockCacheServiceServer_TouchExpiration_Call{Call: _e.mock.On("TouchExpiration", context1, touchExpirationRequest)}
}

func (_c *MockCacheServiceServer_TouchExpiration_Call) Run(run func(context1 context.Context, touchExpirationRequest *proto.TouchExpirationRequest)) *MockCacheServiceServer_TouchExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.TouchExpirationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.TouchExpirationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheServiceServer_TouchExpiration_Call) Return(touchExpirationResponse *proto.TouchExpirationResponse, err error) *MockCacheServiceServer_TouchExpiration_Call {
	_c.Call.Return(touchExpirationResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_TouchExpiration_Call) RunAndReturn(run func(context1 context.Context, touchExpirationRequest *proto.TouchExpirationRequest) (*proto.TouchExpirationResponse, error)) *MockCacheServiceServer_TouchExpiration_Call {
	_c.Call.Return(run)
	return _c
}
