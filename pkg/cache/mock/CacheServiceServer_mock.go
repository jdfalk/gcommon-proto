// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/cache/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheServiceServer creates a new instance of MockCacheServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheServiceServer {
	mock := &MockCacheServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheServiceServer is an autogenerated mock type for the CacheServiceServer type
type MockCacheServiceServer struct {
	mock.Mock
}

type MockCacheServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheServiceServer) EXPECT() *MockCacheServiceServer_Expecter {
	return &MockCacheServiceServer_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Clear(context1 context.Context, clearRequest *proto.ClearRequest) (*proto.ClearResponse, error) {
	ret := _mock.Called(context1, clearRequest)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 *proto.ClearResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest) (*proto.ClearResponse, error)); ok {
		return returnFunc(context1, clearRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ClearRequest) *proto.ClearResponse); ok {
		r0 = returnFunc(context1, clearRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ClearResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ClearRequest) error); ok {
		r1 = returnFunc(context1, clearRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCacheServiceServer_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - context1
//   - clearRequest
func (_e *MockCacheServiceServer_Expecter) Clear(context1 interface{}, clearRequest interface{}) *MockCacheServiceServer_Clear_Call {
	return &MockCacheServiceServer_Clear_Call{Call: _e.mock.On("Clear", context1, clearRequest)}
}

func (_c *MockCacheServiceServer_Clear_Call) Run(run func(context1 context.Context, clearRequest *proto.ClearRequest)) *MockCacheServiceServer_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ClearRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Clear_Call) Return(clearResponse *proto.ClearResponse, err error) *MockCacheServiceServer_Clear_Call {
	_c.Call.Return(clearResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Clear_Call) RunAndReturn(run func(context1 context.Context, clearRequest *proto.ClearRequest) (*proto.ClearResponse, error)) *MockCacheServiceServer_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Decrement(context1 context.Context, decrementRequest *proto.DecrementRequest) (*proto.DecrementResponse, error) {
	ret := _mock.Called(context1, decrementRequest)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 *proto.DecrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest) (*proto.DecrementResponse, error)); ok {
		return returnFunc(context1, decrementRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DecrementRequest) *proto.DecrementResponse); ok {
		r0 = returnFunc(context1, decrementRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DecrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DecrementRequest) error); ok {
		r1 = returnFunc(context1, decrementRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type MockCacheServiceServer_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - context1
//   - decrementRequest
func (_e *MockCacheServiceServer_Expecter) Decrement(context1 interface{}, decrementRequest interface{}) *MockCacheServiceServer_Decrement_Call {
	return &MockCacheServiceServer_Decrement_Call{Call: _e.mock.On("Decrement", context1, decrementRequest)}
}

func (_c *MockCacheServiceServer_Decrement_Call) Run(run func(context1 context.Context, decrementRequest *proto.DecrementRequest)) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DecrementRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Decrement_Call) Return(decrementResponse *proto.DecrementResponse, err error) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Return(decrementResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Decrement_Call) RunAndReturn(run func(context1 context.Context, decrementRequest *proto.DecrementRequest) (*proto.DecrementResponse, error)) *MockCacheServiceServer_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Delete(context1 context.Context, deleteRequest *proto.DeleteRequest) (*proto.DeleteResponse, error) {
	ret := _mock.Called(context1, deleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *proto.DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest) (*proto.DeleteResponse, error)); ok {
		return returnFunc(context1, deleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRequest) *proto.DeleteResponse); ok {
		r0 = returnFunc(context1, deleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteRequest) error); ok {
		r1 = returnFunc(context1, deleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1
//   - deleteRequest
func (_e *MockCacheServiceServer_Expecter) Delete(context1 interface{}, deleteRequest interface{}) *MockCacheServiceServer_Delete_Call {
	return &MockCacheServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, deleteRequest)}
}

func (_c *MockCacheServiceServer_Delete_Call) Run(run func(context1 context.Context, deleteRequest *proto.DeleteRequest)) *MockCacheServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DeleteRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Delete_Call) Return(deleteResponse *proto.DeleteResponse, err error) *MockCacheServiceServer_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteRequest *proto.DeleteRequest) (*proto.DeleteResponse, error)) *MockCacheServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMulti provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) DeleteMulti(context1 context.Context, deleteMultiRequest *proto.DeleteMultiRequest) (*proto.DeleteMultiResponse, error) {
	ret := _mock.Called(context1, deleteMultiRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMulti")
	}

	var r0 *proto.DeleteMultiResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultiRequest) (*proto.DeleteMultiResponse, error)); ok {
		return returnFunc(context1, deleteMultiRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteMultiRequest) *proto.DeleteMultiResponse); ok {
		r0 = returnFunc(context1, deleteMultiRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteMultiResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteMultiRequest) error); ok {
		r1 = returnFunc(context1, deleteMultiRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_DeleteMulti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMulti'
type MockCacheServiceServer_DeleteMulti_Call struct {
	*mock.Call
}

// DeleteMulti is a helper method to define mock.On call
//   - context1
//   - deleteMultiRequest
func (_e *MockCacheServiceServer_Expecter) DeleteMulti(context1 interface{}, deleteMultiRequest interface{}) *MockCacheServiceServer_DeleteMulti_Call {
	return &MockCacheServiceServer_DeleteMulti_Call{Call: _e.mock.On("DeleteMulti", context1, deleteMultiRequest)}
}

func (_c *MockCacheServiceServer_DeleteMulti_Call) Run(run func(context1 context.Context, deleteMultiRequest *proto.DeleteMultiRequest)) *MockCacheServiceServer_DeleteMulti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DeleteMultiRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_DeleteMulti_Call) Return(deleteMultiResponse *proto.DeleteMultiResponse, err error) *MockCacheServiceServer_DeleteMulti_Call {
	_c.Call.Return(deleteMultiResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_DeleteMulti_Call) RunAndReturn(run func(context1 context.Context, deleteMultiRequest *proto.DeleteMultiRequest) (*proto.DeleteMultiResponse, error)) *MockCacheServiceServer_DeleteMulti_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Exists(context1 context.Context, existsRequest *proto.ExistsRequest) (*proto.ExistsResponse, error) {
	ret := _mock.Called(context1, existsRequest)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *proto.ExistsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest) (*proto.ExistsResponse, error)); ok {
		return returnFunc(context1, existsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExistsRequest) *proto.ExistsResponse); ok {
		r0 = returnFunc(context1, existsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExistsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExistsRequest) error); ok {
		r1 = returnFunc(context1, existsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCacheServiceServer_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - context1
//   - existsRequest
func (_e *MockCacheServiceServer_Expecter) Exists(context1 interface{}, existsRequest interface{}) *MockCacheServiceServer_Exists_Call {
	return &MockCacheServiceServer_Exists_Call{Call: _e.mock.On("Exists", context1, existsRequest)}
}

func (_c *MockCacheServiceServer_Exists_Call) Run(run func(context1 context.Context, existsRequest *proto.ExistsRequest)) *MockCacheServiceServer_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ExistsRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Exists_Call) Return(existsResponse *proto.ExistsResponse, err error) *MockCacheServiceServer_Exists_Call {
	_c.Call.Return(existsResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Exists_Call) RunAndReturn(run func(context1 context.Context, existsRequest *proto.ExistsRequest) (*proto.ExistsResponse, error)) *MockCacheServiceServer_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Get(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error) {
	ret := _mock.Called(context1, getRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *proto.GetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) (*proto.GetResponse, error)); ok {
		return returnFunc(context1, getRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRequest) *proto.GetResponse); ok {
		r0 = returnFunc(context1, getRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRequest) error); ok {
		r1 = returnFunc(context1, getRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1
//   - getRequest
func (_e *MockCacheServiceServer_Expecter) Get(context1 interface{}, getRequest interface{}) *MockCacheServiceServer_Get_Call {
	return &MockCacheServiceServer_Get_Call{Call: _e.mock.On("Get", context1, getRequest)}
}

func (_c *MockCacheServiceServer_Get_Call) Run(run func(context1 context.Context, getRequest *proto.GetRequest)) *MockCacheServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Get_Call) Return(getResponse *proto.GetResponse, err error) *MockCacheServiceServer_Get_Call {
	_c.Call.Return(getResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, getRequest *proto.GetRequest) (*proto.GetResponse, error)) *MockCacheServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMulti provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) GetMulti(context1 context.Context, getMultiRequest *proto.GetMultiRequest) (*proto.GetMultiResponse, error) {
	ret := _mock.Called(context1, getMultiRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetMulti")
	}

	var r0 *proto.GetMultiResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultiRequest) (*proto.GetMultiResponse, error)); ok {
		return returnFunc(context1, getMultiRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetMultiRequest) *proto.GetMultiResponse); ok {
		r0 = returnFunc(context1, getMultiRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetMultiResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetMultiRequest) error); ok {
		r1 = returnFunc(context1, getMultiRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_GetMulti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMulti'
type MockCacheServiceServer_GetMulti_Call struct {
	*mock.Call
}

// GetMulti is a helper method to define mock.On call
//   - context1
//   - getMultiRequest
func (_e *MockCacheServiceServer_Expecter) GetMulti(context1 interface{}, getMultiRequest interface{}) *MockCacheServiceServer_GetMulti_Call {
	return &MockCacheServiceServer_GetMulti_Call{Call: _e.mock.On("GetMulti", context1, getMultiRequest)}
}

func (_c *MockCacheServiceServer_GetMulti_Call) Run(run func(context1 context.Context, getMultiRequest *proto.GetMultiRequest)) *MockCacheServiceServer_GetMulti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetMultiRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_GetMulti_Call) Return(getMultiResponse *proto.GetMultiResponse, err error) *MockCacheServiceServer_GetMulti_Call {
	_c.Call.Return(getMultiResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_GetMulti_Call) RunAndReturn(run func(context1 context.Context, getMultiRequest *proto.GetMultiRequest) (*proto.GetMultiResponse, error)) *MockCacheServiceServer_GetMulti_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Increment(context1 context.Context, incrementRequest *proto.IncrementRequest) (*proto.IncrementResponse, error) {
	ret := _mock.Called(context1, incrementRequest)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 *proto.IncrementResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest) (*proto.IncrementResponse, error)); ok {
		return returnFunc(context1, incrementRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.IncrementRequest) *proto.IncrementResponse); ok {
		r0 = returnFunc(context1, incrementRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.IncrementResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.IncrementRequest) error); ok {
		r1 = returnFunc(context1, incrementRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCacheServiceServer_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - context1
//   - incrementRequest
func (_e *MockCacheServiceServer_Expecter) Increment(context1 interface{}, incrementRequest interface{}) *MockCacheServiceServer_Increment_Call {
	return &MockCacheServiceServer_Increment_Call{Call: _e.mock.On("Increment", context1, incrementRequest)}
}

func (_c *MockCacheServiceServer_Increment_Call) Run(run func(context1 context.Context, incrementRequest *proto.IncrementRequest)) *MockCacheServiceServer_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.IncrementRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Increment_Call) Return(incrementResponse *proto.IncrementResponse, err error) *MockCacheServiceServer_Increment_Call {
	_c.Call.Return(incrementResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Increment_Call) RunAndReturn(run func(context1 context.Context, incrementRequest *proto.IncrementRequest) (*proto.IncrementResponse, error)) *MockCacheServiceServer_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Set(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error) {
	ret := _mock.Called(context1, setRequest)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 *proto.SetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) (*proto.SetResponse, error)); ok {
		return returnFunc(context1, setRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetRequest) *proto.SetResponse); ok {
		r0 = returnFunc(context1, setRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetRequest) error); ok {
		r1 = returnFunc(context1, setRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheServiceServer_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - context1
//   - setRequest
func (_e *MockCacheServiceServer_Expecter) Set(context1 interface{}, setRequest interface{}) *MockCacheServiceServer_Set_Call {
	return &MockCacheServiceServer_Set_Call{Call: _e.mock.On("Set", context1, setRequest)}
}

func (_c *MockCacheServiceServer_Set_Call) Run(run func(context1 context.Context, setRequest *proto.SetRequest)) *MockCacheServiceServer_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Set_Call) Return(setResponse *proto.SetResponse, err error) *MockCacheServiceServer_Set_Call {
	_c.Call.Return(setResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Set_Call) RunAndReturn(run func(context1 context.Context, setRequest *proto.SetRequest) (*proto.SetResponse, error)) *MockCacheServiceServer_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetMulti provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) SetMulti(context1 context.Context, setMultiRequest *proto.SetMultiRequest) (*proto.SetMultiResponse, error) {
	ret := _mock.Called(context1, setMultiRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetMulti")
	}

	var r0 *proto.SetMultiResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultiRequest) (*proto.SetMultiResponse, error)); ok {
		return returnFunc(context1, setMultiRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetMultiRequest) *proto.SetMultiResponse); ok {
		r0 = returnFunc(context1, setMultiRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetMultiResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetMultiRequest) error); ok {
		r1 = returnFunc(context1, setMultiRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_SetMulti_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMulti'
type MockCacheServiceServer_SetMulti_Call struct {
	*mock.Call
}

// SetMulti is a helper method to define mock.On call
//   - context1
//   - setMultiRequest
func (_e *MockCacheServiceServer_Expecter) SetMulti(context1 interface{}, setMultiRequest interface{}) *MockCacheServiceServer_SetMulti_Call {
	return &MockCacheServiceServer_SetMulti_Call{Call: _e.mock.On("SetMulti", context1, setMultiRequest)}
}

func (_c *MockCacheServiceServer_SetMulti_Call) Run(run func(context1 context.Context, setMultiRequest *proto.SetMultiRequest)) *MockCacheServiceServer_SetMulti_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetMultiRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_SetMulti_Call) Return(setMultiResponse *proto.SetMultiResponse, err error) *MockCacheServiceServer_SetMulti_Call {
	_c.Call.Return(setMultiResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_SetMulti_Call) RunAndReturn(run func(context1 context.Context, setMultiRequest *proto.SetMultiRequest) (*proto.SetMultiResponse, error)) *MockCacheServiceServer_SetMulti_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) Stats(context1 context.Context, statsRequest *proto.StatsRequest) (*proto.StatsResponse, error) {
	ret := _mock.Called(context1, statsRequest)

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 *proto.StatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest) (*proto.StatsResponse, error)); ok {
		return returnFunc(context1, statsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest) *proto.StatsResponse); ok {
		r0 = returnFunc(context1, statsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StatsRequest) error); ok {
		r1 = returnFunc(context1, statsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCacheServiceServer_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockCacheServiceServer_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
//   - context1
//   - statsRequest
func (_e *MockCacheServiceServer_Expecter) Stats(context1 interface{}, statsRequest interface{}) *MockCacheServiceServer_Stats_Call {
	return &MockCacheServiceServer_Stats_Call{Call: _e.mock.On("Stats", context1, statsRequest)}
}

func (_c *MockCacheServiceServer_Stats_Call) Run(run func(context1 context.Context, statsRequest *proto.StatsRequest)) *MockCacheServiceServer_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.StatsRequest))
	})
	return _c
}

func (_c *MockCacheServiceServer_Stats_Call) Return(statsResponse *proto.StatsResponse, err error) *MockCacheServiceServer_Stats_Call {
	_c.Call.Return(statsResponse, err)
	return _c
}

func (_c *MockCacheServiceServer_Stats_Call) RunAndReturn(run func(context1 context.Context, statsRequest *proto.StatsRequest) (*proto.StatsResponse, error)) *MockCacheServiceServer_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCacheServiceServer provides a mock function for the type MockCacheServiceServer
func (_mock *MockCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {
	_mock.Called()
	return
}

// MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCacheServiceServer'
type MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCacheServiceServer is a helper method to define mock.On call
func (_e *MockCacheServiceServer_Expecter) mustEmbedUnimplementedCacheServiceServer() *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call {
	return &MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCacheServiceServer")}
}

func (_c *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call) Run(run func()) *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call) Return() *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call) RunAndReturn(run func()) *MockCacheServiceServer_mustEmbedUnimplementedCacheServiceServer_Call {
	_c.Run(run)
	return _c
}
