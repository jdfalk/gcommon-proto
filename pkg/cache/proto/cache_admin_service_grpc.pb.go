// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/cache/proto/cache_admin_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CacheAdminService_CreateNamespace_FullMethodName   = "/gcommon.v1.cache.CacheAdminService/CreateNamespace"
	CacheAdminService_DeleteNamespace_FullMethodName   = "/gcommon.v1.cache.CacheAdminService/DeleteNamespace"
	CacheAdminService_ListNamespaces_FullMethodName    = "/gcommon.v1.cache.CacheAdminService/ListNamespaces"
	CacheAdminService_GetNamespaceStats_FullMethodName = "/gcommon.v1.cache.CacheAdminService/GetNamespaceStats"
	CacheAdminService_ConfigurePolicy_FullMethodName   = "/gcommon.v1.cache.CacheAdminService/ConfigurePolicy"
)

// CacheAdminServiceClient is the client API for CacheAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Administrative cache management operations.
type CacheAdminServiceClient interface {
	// CreateNamespace creates a new cache namespace
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// DeleteNamespace removes a cache namespace
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListNamespaces returns all available namespaces
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	// GetNamespaceStats returns statistics for a namespace
	GetNamespaceStats(ctx context.Context, in *GetNamespaceStatsRequest, opts ...grpc.CallOption) (*GetNamespaceStatsResponse, error)
	// ConfigurePolicy sets cache policies for a namespace
	ConfigurePolicy(ctx context.Context, in *ConfigurePolicyRequest, opts ...grpc.CallOption) (*ConfigurePolicyResponse, error)
}

type cacheAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheAdminServiceClient(cc grpc.ClientConnInterface) CacheAdminServiceClient {
	return &cacheAdminServiceClient{cc}
}

func (c *cacheAdminServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, CacheAdminService_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CacheAdminService_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, CacheAdminService_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminServiceClient) GetNamespaceStats(ctx context.Context, in *GetNamespaceStatsRequest, opts ...grpc.CallOption) (*GetNamespaceStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, CacheAdminService_GetNamespaceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheAdminServiceClient) ConfigurePolicy(ctx context.Context, in *ConfigurePolicyRequest, opts ...grpc.CallOption) (*ConfigurePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigurePolicyResponse)
	err := c.cc.Invoke(ctx, CacheAdminService_ConfigurePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheAdminServiceServer is the server API for CacheAdminService service.
// All implementations should embed UnimplementedCacheAdminServiceServer
// for forward compatibility.
//
// *
// Administrative cache management operations.
type CacheAdminServiceServer interface {
	// CreateNamespace creates a new cache namespace
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// DeleteNamespace removes a cache namespace
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*emptypb.Empty, error)
	// ListNamespaces returns all available namespaces
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// GetNamespaceStats returns statistics for a namespace
	GetNamespaceStats(context.Context, *GetNamespaceStatsRequest) (*GetNamespaceStatsResponse, error)
	// ConfigurePolicy sets cache policies for a namespace
	ConfigurePolicy(context.Context, *ConfigurePolicyRequest) (*ConfigurePolicyResponse, error)
}

// UnimplementedCacheAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheAdminServiceServer struct{}

func (UnimplementedCacheAdminServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedCacheAdminServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedCacheAdminServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedCacheAdminServiceServer) GetNamespaceStats(context.Context, *GetNamespaceStatsRequest) (*GetNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceStats not implemented")
}
func (UnimplementedCacheAdminServiceServer) ConfigurePolicy(context.Context, *ConfigurePolicyRequest) (*ConfigurePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePolicy not implemented")
}
func (UnimplementedCacheAdminServiceServer) testEmbeddedByValue() {}

// UnsafeCacheAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheAdminServiceServer will
// result in compilation errors.
type UnsafeCacheAdminServiceServer interface {
	mustEmbedUnimplementedCacheAdminServiceServer()
}

func RegisterCacheAdminServiceServer(s grpc.ServiceRegistrar, srv CacheAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedCacheAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CacheAdminService_ServiceDesc, srv)
}

func _CacheAdminService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdminService_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdminService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdminService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdminService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdminService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdminService_GetNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServiceServer).GetNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdminService_GetNamespaceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServiceServer).GetNamespaceStats(ctx, req.(*GetNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheAdminService_ConfigurePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheAdminServiceServer).ConfigurePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheAdminService_ConfigurePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheAdminServiceServer).ConfigurePolicy(ctx, req.(*ConfigurePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheAdminService_ServiceDesc is the grpc.ServiceDesc for CacheAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.cache.CacheAdminService",
	HandlerType: (*CacheAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _CacheAdminService_CreateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _CacheAdminService_DeleteNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _CacheAdminService_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespaceStats",
			Handler:    _CacheAdminService_GetNamespaceStats_Handler,
		},
		{
			MethodName: "ConfigurePolicy",
			Handler:    _CacheAdminService_ConfigurePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/cache/proto/cache_admin_service.proto",
}
