// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/web/proto/messages/tls_config.proto

//go:build protoopaque

package webpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// TLSConfig defines TLS/SSL configuration for web servers.
type TLSConfig struct {
	state                        protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_CertFile          *string                `protobuf:"bytes,1,opt,name=cert_file,json=certFile"`
	xxx_hidden_KeyFile           *string                `protobuf:"bytes,2,opt,name=key_file,json=keyFile"`
	xxx_hidden_CaFile            *string                `protobuf:"bytes,11,opt,name=ca_file,json=caFile"`
	xxx_hidden_MinVersion        *string                `protobuf:"bytes,12,opt,name=min_version,json=minVersion"`
	xxx_hidden_MaxVersion        *string                `protobuf:"bytes,13,opt,name=max_version,json=maxVersion"`
	xxx_hidden_CipherSuites      []string               `protobuf:"bytes,14,rep,name=cipher_suites,json=cipherSuites"`
	xxx_hidden_RequireClientCert bool                   `protobuf:"varint,15,opt,name=require_client_cert,json=requireClientCert"`
	xxx_hidden_VerifyClientCert  bool                   `protobuf:"varint,16,opt,name=verify_client_cert,json=verifyClientCert"`
	xxx_hidden_ServerName        *string                `protobuf:"bytes,17,opt,name=server_name,json=serverName"`
	XXX_raceDetectHookData       protoimpl.RaceDetectHookData
	XXX_presence                 [1]uint32
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	mi := &file_pkg_web_proto_messages_tls_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_web_proto_messages_tls_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TLSConfig) GetCertFile() string {
	if x != nil {
		if x.xxx_hidden_CertFile != nil {
			return *x.xxx_hidden_CertFile
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetKeyFile() string {
	if x != nil {
		if x.xxx_hidden_KeyFile != nil {
			return *x.xxx_hidden_KeyFile
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetCaFile() string {
	if x != nil {
		if x.xxx_hidden_CaFile != nil {
			return *x.xxx_hidden_CaFile
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetMinVersion() string {
	if x != nil {
		if x.xxx_hidden_MinVersion != nil {
			return *x.xxx_hidden_MinVersion
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetMaxVersion() string {
	if x != nil {
		if x.xxx_hidden_MaxVersion != nil {
			return *x.xxx_hidden_MaxVersion
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) GetCipherSuites() []string {
	if x != nil {
		return x.xxx_hidden_CipherSuites
	}
	return nil
}

func (x *TLSConfig) GetRequireClientCert() bool {
	if x != nil {
		return x.xxx_hidden_RequireClientCert
	}
	return false
}

func (x *TLSConfig) GetVerifyClientCert() bool {
	if x != nil {
		return x.xxx_hidden_VerifyClientCert
	}
	return false
}

func (x *TLSConfig) GetServerName() string {
	if x != nil {
		if x.xxx_hidden_ServerName != nil {
			return *x.xxx_hidden_ServerName
		}
		return ""
	}
	return ""
}

func (x *TLSConfig) SetCertFile(v string) {
	x.xxx_hidden_CertFile = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *TLSConfig) SetKeyFile(v string) {
	x.xxx_hidden_KeyFile = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *TLSConfig) SetCaFile(v string) {
	x.xxx_hidden_CaFile = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *TLSConfig) SetMinVersion(v string) {
	x.xxx_hidden_MinVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *TLSConfig) SetMaxVersion(v string) {
	x.xxx_hidden_MaxVersion = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *TLSConfig) SetCipherSuites(v []string) {
	x.xxx_hidden_CipherSuites = v
}

func (x *TLSConfig) SetRequireClientCert(v bool) {
	x.xxx_hidden_RequireClientCert = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *TLSConfig) SetVerifyClientCert(v bool) {
	x.xxx_hidden_VerifyClientCert = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 9)
}

func (x *TLSConfig) SetServerName(v string) {
	x.xxx_hidden_ServerName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 9)
}

func (x *TLSConfig) HasCertFile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TLSConfig) HasKeyFile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TLSConfig) HasCaFile() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TLSConfig) HasMinVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TLSConfig) HasMaxVersion() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TLSConfig) HasRequireClientCert() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *TLSConfig) HasVerifyClientCert() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *TLSConfig) HasServerName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *TLSConfig) ClearCertFile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_CertFile = nil
}

func (x *TLSConfig) ClearKeyFile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_KeyFile = nil
}

func (x *TLSConfig) ClearCaFile() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_CaFile = nil
}

func (x *TLSConfig) ClearMinVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_MinVersion = nil
}

func (x *TLSConfig) ClearMaxVersion() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_MaxVersion = nil
}

func (x *TLSConfig) ClearRequireClientCert() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_RequireClientCert = false
}

func (x *TLSConfig) ClearVerifyClientCert() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_VerifyClientCert = false
}

func (x *TLSConfig) ClearServerName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_ServerName = nil
}

type TLSConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// *
	// Certificate file path or content.
	CertFile *string
	// *
	// Private key file path or content.
	KeyFile *string
	// *
	// CA certificate file path for client verification.
	CaFile *string
	// *
	// Minimum TLS version (e.g., "1.2", "1.3").
	MinVersion *string
	// *
	// Maximum TLS version (e.g., "1.2", "1.3").
	MaxVersion *string
	// *
	// List of supported cipher suites.
	CipherSuites []string
	// *
	// Whether to require client certificates.
	RequireClientCert *bool
	// *
	// Whether to verify client certificates.
	VerifyClientCert *bool
	// *
	// Server name for SNI (Server Name Indication).
	ServerName *string
}

func (b0 TLSConfig_builder) Build() *TLSConfig {
	m0 := &TLSConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.CertFile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_CertFile = b.CertFile
	}
	if b.KeyFile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_KeyFile = b.KeyFile
	}
	if b.CaFile != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_CaFile = b.CaFile
	}
	if b.MinVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_MinVersion = b.MinVersion
	}
	if b.MaxVersion != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_MaxVersion = b.MaxVersion
	}
	x.xxx_hidden_CipherSuites = b.CipherSuites
	if b.RequireClientCert != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_RequireClientCert = *b.RequireClientCert
	}
	if b.VerifyClientCert != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 9)
		x.xxx_hidden_VerifyClientCert = *b.VerifyClientCert
	}
	if b.ServerName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 9)
		x.xxx_hidden_ServerName = b.ServerName
	}
	return m0
}

var File_pkg_web_proto_messages_tls_config_proto protoreflect.FileDescriptor

const file_pkg_web_proto_messages_tls_config_proto_rawDesc = "" +
	"\n" +
	"'pkg/web/proto/messages/tls_config.proto\x12\x0egcommon.v1.web\x1a!google/protobuf/go_features.proto\"\xc2\x02\n" +
	"\tTLSConfig\x12\x1b\n" +
	"\tcert_file\x18\x01 \x01(\tR\bcertFile\x12\x19\n" +
	"\bkey_file\x18\x02 \x01(\tR\akeyFile\x12\x17\n" +
	"\aca_file\x18\v \x01(\tR\x06caFile\x12\x1f\n" +
	"\vmin_version\x18\f \x01(\tR\n" +
	"minVersion\x12\x1f\n" +
	"\vmax_version\x18\r \x01(\tR\n" +
	"maxVersion\x12#\n" +
	"\rcipher_suites\x18\x0e \x03(\tR\fcipherSuites\x12.\n" +
	"\x13require_client_cert\x18\x0f \x01(\bR\x11requireClientCert\x12,\n" +
	"\x12verify_client_cert\x18\x10 \x01(\bR\x10verifyClientCert\x12\x1f\n" +
	"\vserver_name\x18\x11 \x01(\tR\n" +
	"serverNameB\xa7\x01\n" +
	"\x12com.gcommon.v1.webB\x0eTlsConfigProtoP\x01Z\x1f../../../../pkg/web/proto;webpb\xa2\x02\x03GVW\xaa\x02\x0eGcommon.V1.Web\xca\x02\x0eGcommon\\V1\\Web\xe2\x02\x1aGcommon\\V1\\Web\\GPBMetadata\xea\x02\x10Gcommon::V1::Web\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_web_proto_messages_tls_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_web_proto_messages_tls_config_proto_goTypes = []any{
	(*TLSConfig)(nil), // 0: gcommon.v1.web.TLSConfig
}
var file_pkg_web_proto_messages_tls_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_web_proto_messages_tls_config_proto_init() }
func file_pkg_web_proto_messages_tls_config_proto_init() {
	if File_pkg_web_proto_messages_tls_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_web_proto_messages_tls_config_proto_rawDesc), len(file_pkg_web_proto_messages_tls_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_web_proto_messages_tls_config_proto_goTypes,
		DependencyIndexes: file_pkg_web_proto_messages_tls_config_proto_depIdxs,
		MessageInfos:      file_pkg_web_proto_messages_tls_config_proto_msgTypes,
	}.Build()
	File_pkg_web_proto_messages_tls_config_proto = out.File
	file_pkg_web_proto_messages_tls_config_proto_goTypes = nil
	file_pkg_web_proto_messages_tls_config_proto_depIdxs = nil
}
