// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/web/proto/messages/compression_config.proto

//go:build !protoopaque

package webpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CompressionConfig message definition.
type CompressionConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Compression algorithm to use for HTTP responses
	CompressionType *CompressionType `protobuf:"varint,1,opt,name=compression_type,json=compressionType,enum=gcommon.v1.web.CompressionType" json:"compression_type,omitempty"`
	// Minimum content length in bytes before compression is applied
	MinLength *int32 `protobuf:"varint,2,opt,name=min_length,json=minLength" json:"min_length,omitempty"`
	// Compression level (implementation specific)
	Level         *int32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompressionConfig) Reset() {
	*x = CompressionConfig{}
	mi := &file_pkg_web_proto_messages_compression_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressionConfig) ProtoMessage() {}

func (x *CompressionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_web_proto_messages_compression_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CompressionConfig) GetCompressionType() CompressionType {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *CompressionConfig) GetMinLength() int32 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *CompressionConfig) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CompressionConfig) SetCompressionType(v CompressionType) {
	x.CompressionType = &v
}

func (x *CompressionConfig) SetMinLength(v int32) {
	x.MinLength = &v
}

func (x *CompressionConfig) SetLevel(v int32) {
	x.Level = &v
}

func (x *CompressionConfig) HasCompressionType() bool {
	if x == nil {
		return false
	}
	return x.CompressionType != nil
}

func (x *CompressionConfig) HasMinLength() bool {
	if x == nil {
		return false
	}
	return x.MinLength != nil
}

func (x *CompressionConfig) HasLevel() bool {
	if x == nil {
		return false
	}
	return x.Level != nil
}

func (x *CompressionConfig) ClearCompressionType() {
	x.CompressionType = nil
}

func (x *CompressionConfig) ClearMinLength() {
	x.MinLength = nil
}

func (x *CompressionConfig) ClearLevel() {
	x.Level = nil
}

type CompressionConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Compression algorithm to use for HTTP responses
	CompressionType *CompressionType
	// Minimum content length in bytes before compression is applied
	MinLength *int32
	// Compression level (implementation specific)
	Level *int32
}

func (b0 CompressionConfig_builder) Build() *CompressionConfig {
	m0 := &CompressionConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.CompressionType = b.CompressionType
	x.MinLength = b.MinLength
	x.Level = b.Level
	return m0
}

var File_pkg_web_proto_messages_compression_config_proto protoreflect.FileDescriptor

const file_pkg_web_proto_messages_compression_config_proto_rawDesc = "" +
	"\n" +
	"/pkg/web/proto/messages/compression_config.proto\x12\x0egcommon.v1.web\x1a!google/protobuf/go_features.proto\x1a*pkg/web/proto/enums/compression_type.proto\"\x94\x01\n" +
	"\x11CompressionConfig\x12J\n" +
	"\x10compression_type\x18\x01 \x01(\x0e2\x1f.gcommon.v1.web.CompressionTypeR\x0fcompressionType\x12\x1d\n" +
	"\n" +
	"min_length\x18\x02 \x01(\x05R\tminLength\x12\x14\n" +
	"\x05level\x18\x03 \x01(\x05R\x05levelB\xac\x01\n" +
	"\x12com.gcommon.v1.webB\x16CompressionConfigProtoP\x01Z\x1c../../../../pkg/web/pb;webpb\xa2\x02\x03GVW\xaa\x02\x0eGcommon.V1.Web\xca\x02\x0eGcommon\\V1\\Web\xe2\x02\x1aGcommon\\V1\\Web\\GPBMetadata\xea\x02\x10Gcommon::V1::Web\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_web_proto_messages_compression_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_web_proto_messages_compression_config_proto_goTypes = []any{
	(*CompressionConfig)(nil), // 0: gcommon.v1.web.CompressionConfig
	(CompressionType)(0),      // 1: gcommon.v1.web.CompressionType
}
var file_pkg_web_proto_messages_compression_config_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.web.CompressionConfig.compression_type:type_name -> gcommon.v1.web.CompressionType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_web_proto_messages_compression_config_proto_init() }
func file_pkg_web_proto_messages_compression_config_proto_init() {
	if File_pkg_web_proto_messages_compression_config_proto != nil {
		return
	}
	file_pkg_web_proto_enums_compression_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_web_proto_messages_compression_config_proto_rawDesc), len(file_pkg_web_proto_messages_compression_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_web_proto_messages_compression_config_proto_goTypes,
		DependencyIndexes: file_pkg_web_proto_messages_compression_config_proto_depIdxs,
		MessageInfos:      file_pkg_web_proto_messages_compression_config_proto_msgTypes,
	}.Build()
	File_pkg_web_proto_messages_compression_config_proto = out.File
	file_pkg_web_proto_messages_compression_config_proto_goTypes = nil
	file_pkg_web_proto_messages_compression_config_proto_depIdxs = nil
}
