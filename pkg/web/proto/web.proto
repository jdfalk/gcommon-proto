// file: pkg/web/proto/web.proto
edition = "2023";

package gcommon.v1.web;

import "google/protobuf/go_features.proto";

// Import existing request types
import "pkg/web/proto/requests/get_server_status_request.proto";
import "pkg/web/proto/requests/list_middleware_request.proto";
import "pkg/web/proto/requests/list_routes_request.proto";
import "pkg/web/proto/requests/register_route_request.proto";
import "pkg/web/proto/requests/start_server_request.proto";
import "pkg/web/proto/requests/stop_server_request.proto";
import "pkg/web/proto/requests/unregister_route_request.proto";
import "pkg/web/proto/requests/update_server_config_request.proto";

// Import new request types
import "pkg/web/proto/requests/add_middleware_request.proto";
import "pkg/web/proto/requests/configure_global_request.proto";
import "pkg/web/proto/requests/create_server_request.proto";
import "pkg/web/proto/requests/export_server_config_request.proto";
import "pkg/web/proto/requests/get_access_logs_request.proto";
import "pkg/web/proto/requests/get_route_metrics_request.proto";
import "pkg/web/proto/requests/get_ssl_certificate_info_request.proto";
import "pkg/web/proto/requests/get_server_health_request.proto";
import "pkg/web/proto/requests/get_server_logs_request.proto";
import "pkg/web/proto/requests/get_server_metrics_request.proto";
import "pkg/web/proto/requests/handle_request_request.proto";
import "pkg/web/proto/requests/import_server_config_request.proto";
import "pkg/web/proto/requests/list_servers_request.proto";
import "pkg/web/proto/requests/reload_server_config_request.proto";
import "pkg/web/proto/requests/remove_middleware_request.proto";
import "pkg/web/proto/requests/stream_server_events_request.proto";
import "pkg/web/proto/requests/update_ssl_certificate_request.proto";

// Import existing response types
import "pkg/web/proto/responses/get_server_status_response.proto";
import "pkg/web/proto/responses/list_middleware_response.proto";
import "pkg/web/proto/responses/list_routes_response.proto";
import "pkg/web/proto/responses/register_route_response.proto";
import "pkg/web/proto/responses/start_server_response.proto";
import "pkg/web/proto/responses/stop_server_response.proto";
import "pkg/web/proto/responses/unregister_route_response.proto";
import "pkg/web/proto/responses/update_server_config_response.proto";

// Import new response types
import "pkg/web/proto/responses/add_middleware_response.proto";
import "pkg/web/proto/responses/configure_global_response.proto";
import "pkg/web/proto/responses/create_server_response.proto";
import "pkg/web/proto/responses/export_server_config_response.proto";
import "pkg/web/proto/responses/get_access_logs_response.proto";
import "pkg/web/proto/responses/get_route_metrics_response.proto";
import "pkg/web/proto/responses/get_ssl_certificate_info_response.proto";
import "pkg/web/proto/responses/get_server_health_response.proto";
import "pkg/web/proto/responses/get_server_logs_response.proto";
import "pkg/web/proto/responses/get_server_metrics_response.proto";
import "pkg/web/proto/responses/handle_request_response.proto";
import "pkg/web/proto/responses/import_server_config_response.proto";
import "pkg/web/proto/responses/list_servers_response.proto";
import "pkg/web/proto/responses/reload_server_config_response.proto";
import "pkg/web/proto/responses/remove_middleware_response.proto";
import "pkg/web/proto/responses/update_ssl_certificate_response.proto";

// Import message types
import "pkg/web/proto/messages/server_event.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/web/proto;webpb";
option features.(pb.go).api_level = API_HYBRID;

// WebService provides HTTP server and web framework functionality
service WebService {
  // Create an HTTP server
  rpc CreateServer(CreateServerRequest) returns (CreateServerResponse);

  // Start a server
  rpc StartServer(StartServerRequest) returns (StartServerResponse);

  // Stop a server
  rpc StopServer(StopServerRequest) returns (StopServerResponse);

  // Get server status
  rpc GetServerStatus(GetServerStatusRequest) returns (GetServerStatusResponse);

  // List servers
  rpc ListServers(ListServersRequest) returns (ListServersResponse);

  // Register a route
  rpc RegisterRoute(RegisterRouteRequest) returns (RegisterRouteResponse);

  // Unregister a route
  rpc UnregisterRoute(UnregisterRouteRequest) returns (UnregisterRouteResponse);

  // List routes
  rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse);

  // Add middleware
  rpc AddMiddleware(AddMiddlewareRequest) returns (AddMiddlewareResponse);

  // Remove middleware
  rpc RemoveMiddleware(RemoveMiddlewareRequest) returns (RemoveMiddlewareResponse);

  // List middleware
  rpc ListMiddleware(ListMiddlewareRequest) returns (ListMiddlewareResponse);

  // Get server metrics
  rpc GetServerMetrics(GetServerMetricsRequest) returns (GetServerMetricsResponse);

  // Get route metrics
  rpc GetRouteMetrics(GetRouteMetricsRequest) returns (GetRouteMetricsResponse);

  // Handle HTTP request
  rpc HandleRequest(HandleRequestRequest) returns (HandleRequestResponse);

  // Stream server events
  rpc StreamServerEvents(StreamServerEventsRequest) returns (stream ServerEvent);
}

// WebAdminService provides web server administration
service WebAdminService {
  // Configure global settings
  rpc ConfigureGlobal(ConfigureGlobalRequest) returns (ConfigureGlobalResponse);

  // Update server configuration
  rpc UpdateServerConfig(UpdateServerConfigRequest) returns (UpdateServerConfigResponse);

  // Get server logs
  rpc GetServerLogs(GetServerLogsRequest) returns (GetServerLogsResponse);

  // Get access logs
  rpc GetAccessLogs(GetAccessLogsRequest) returns (GetAccessLogsResponse);

  // Reload server configuration
  rpc ReloadServerConfig(ReloadServerConfigRequest) returns (ReloadServerConfigResponse);

  // Get SSL certificate info
  rpc GetSSLCertificateInfo(GetSSLCertificateInfoRequest) returns (GetSSLCertificateInfoResponse);

  // Update SSL certificate
  rpc UpdateSSLCertificate(UpdateSSLCertificateRequest) returns (UpdateSSLCertificateResponse);

  // Get server health
  rpc GetServerHealth(GetServerHealthRequest) returns (GetServerHealthResponse);

  // Export server configuration
  rpc ExportServerConfig(ExportServerConfigRequest) returns (ExportServerConfigResponse);

  // Import server configuration
  rpc ImportServerConfig(ImportServerConfigRequest) returns (ImportServerConfigResponse);
}
