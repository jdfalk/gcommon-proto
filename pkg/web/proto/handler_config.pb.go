// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: pkg/web/proto/handler_config.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HandlerConfig message definition.
type HandlerConfig struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type        HandlerType            `protobuf:"varint,1,opt,name=type,enum=gcommon.v1.web.HandlerType"`
	xxx_hidden_Config      *anypb.Any             `protobuf:"bytes,2,opt,name=config"`
	xxx_hidden_Target      *string                `protobuf:"bytes,3,opt,name=target"`
	xxx_hidden_Options     map[string]string      `protobuf:"bytes,4,rep,name=options" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HandlerConfig) Reset() {
	*x = HandlerConfig{}
	mi := &file_pkg_web_proto_handler_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandlerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlerConfig) ProtoMessage() {}

func (x *HandlerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_web_proto_handler_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HandlerConfig) GetType() HandlerType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return HandlerType_HANDLER_TYPE_UNSPECIFIED
}

func (x *HandlerConfig) GetConfig() *anypb.Any {
	if x != nil {
		return x.xxx_hidden_Config
	}
	return nil
}

func (x *HandlerConfig) GetTarget() string {
	if x != nil {
		if x.xxx_hidden_Target != nil {
			return *x.xxx_hidden_Target
		}
		return ""
	}
	return ""
}

func (x *HandlerConfig) GetOptions() map[string]string {
	if x != nil {
		return x.xxx_hidden_Options
	}
	return nil
}

func (x *HandlerConfig) SetType(v HandlerType) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *HandlerConfig) SetConfig(v *anypb.Any) {
	x.xxx_hidden_Config = v
}

func (x *HandlerConfig) SetTarget(v string) {
	x.xxx_hidden_Target = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *HandlerConfig) SetOptions(v map[string]string) {
	x.xxx_hidden_Options = v
}

func (x *HandlerConfig) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HandlerConfig) HasConfig() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Config != nil
}

func (x *HandlerConfig) HasTarget() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *HandlerConfig) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = HandlerType_HANDLER_TYPE_UNSPECIFIED
}

func (x *HandlerConfig) ClearConfig() {
	x.xxx_hidden_Config = nil
}

func (x *HandlerConfig) ClearTarget() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Target = nil
}

type HandlerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Handler type
	Type *HandlerType
	// Handler-specific configuration
	Config *anypb.Any
	// Target for the handler (URL, function name, etc.)
	Target *string
	// Additional handler options
	Options map[string]string
}

func (b0 HandlerConfig_builder) Build() *HandlerConfig {
	m0 := &HandlerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Type = *b.Type
	}
	x.xxx_hidden_Config = b.Config
	if b.Target != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Target = b.Target
	}
	x.xxx_hidden_Options = b.Options
	return m0
}

var File_pkg_web_proto_handler_config_proto protoreflect.FileDescriptor

const file_pkg_web_proto_handler_config_proto_rawDesc = "" +
	"\n" +
	"\"pkg/web/proto/handler_config.proto\x12\x0egcommon.v1.web\x1a\x19google/protobuf/any.proto\x1a!google/protobuf/go_features.proto\x1a pkg/web/proto/handler_type.proto\"\x88\x02\n" +
	"\rHandlerConfig\x12/\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1b.gcommon.v1.web.HandlerTypeR\x04type\x12,\n" +
	"\x06config\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x06config\x12\x16\n" +
	"\x06target\x18\x03 \x01(\tR\x06target\x12D\n" +
	"\aoptions\x18\x04 \x03(\v2*.gcommon.v1.web.HandlerConfig.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xb3\x01\n" +
	"\x12com.gcommon.v1.webB\x12HandlerConfigProtoP\x01Z'github.com/jdfalk/gcommon/pkg/web/proto\xa2\x02\x03GVW\xaa\x02\x0eGcommon.V1.Web\xca\x02\x0eGcommon\\V1\\Web\xe2\x02\x1aGcommon\\V1\\Web\\GPBMetadata\xea\x02\x10Gcommon::V1::Web\x92\x03\x05\xd2>\x02\x10\x03b\beditionsp\xe8\a"

var file_pkg_web_proto_handler_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_web_proto_handler_config_proto_goTypes = []any{
	(*HandlerConfig)(nil), // 0: gcommon.v1.web.HandlerConfig
	nil,                   // 1: gcommon.v1.web.HandlerConfig.OptionsEntry
	(HandlerType)(0),      // 2: gcommon.v1.web.HandlerType
	(*anypb.Any)(nil),     // 3: google.protobuf.Any
}
var file_pkg_web_proto_handler_config_proto_depIdxs = []int32{
	2, // 0: gcommon.v1.web.HandlerConfig.type:type_name -> gcommon.v1.web.HandlerType
	3, // 1: gcommon.v1.web.HandlerConfig.config:type_name -> google.protobuf.Any
	1, // 2: gcommon.v1.web.HandlerConfig.options:type_name -> gcommon.v1.web.HandlerConfig.OptionsEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_web_proto_handler_config_proto_init() }
func file_pkg_web_proto_handler_config_proto_init() {
	if File_pkg_web_proto_handler_config_proto != nil {
		return
	}
	file_pkg_web_proto_handler_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_web_proto_handler_config_proto_rawDesc), len(file_pkg_web_proto_handler_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_web_proto_handler_config_proto_goTypes,
		DependencyIndexes: file_pkg_web_proto_handler_config_proto_depIdxs,
		MessageInfos:      file_pkg_web_proto_handler_config_proto_msgTypes,
	}.Build()
	File_pkg_web_proto_handler_config_proto = out.File
	file_pkg_web_proto_handler_config_proto_goTypes = nil
	file_pkg_web_proto_handler_config_proto_depIdxs = nil
}
