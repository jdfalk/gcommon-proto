// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/web/proto/web.proto

package webpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebService_CreateServer_FullMethodName       = "/gcommon.v1.web.WebService/CreateServer"
	WebService_StartServer_FullMethodName        = "/gcommon.v1.web.WebService/StartServer"
	WebService_StopServer_FullMethodName         = "/gcommon.v1.web.WebService/StopServer"
	WebService_GetServerStatus_FullMethodName    = "/gcommon.v1.web.WebService/GetServerStatus"
	WebService_ListServers_FullMethodName        = "/gcommon.v1.web.WebService/ListServers"
	WebService_RegisterRoute_FullMethodName      = "/gcommon.v1.web.WebService/RegisterRoute"
	WebService_UnregisterRoute_FullMethodName    = "/gcommon.v1.web.WebService/UnregisterRoute"
	WebService_ListRoutes_FullMethodName         = "/gcommon.v1.web.WebService/ListRoutes"
	WebService_AddMiddleware_FullMethodName      = "/gcommon.v1.web.WebService/AddMiddleware"
	WebService_RemoveMiddleware_FullMethodName   = "/gcommon.v1.web.WebService/RemoveMiddleware"
	WebService_ListMiddleware_FullMethodName     = "/gcommon.v1.web.WebService/ListMiddleware"
	WebService_GetServerMetrics_FullMethodName   = "/gcommon.v1.web.WebService/GetServerMetrics"
	WebService_GetRouteMetrics_FullMethodName    = "/gcommon.v1.web.WebService/GetRouteMetrics"
	WebService_HandleRequest_FullMethodName      = "/gcommon.v1.web.WebService/HandleRequest"
	WebService_StreamServerEvents_FullMethodName = "/gcommon.v1.web.WebService/StreamServerEvents"
)

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebService provides HTTP server and web framework functionality
type WebServiceClient interface {
	// Create an HTTP server
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	// Start a server
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	// Stop a server
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
	// Get server status
	GetServerStatus(ctx context.Context, in *GetServerStatusRequest, opts ...grpc.CallOption) (*GetServerStatusResponse, error)
	// List servers
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	// Register a route
	RegisterRoute(ctx context.Context, in *RegisterRouteRequest, opts ...grpc.CallOption) (*RegisterRouteResponse, error)
	// Unregister a route
	UnregisterRoute(ctx context.Context, in *UnregisterRouteRequest, opts ...grpc.CallOption) (*UnregisterRouteResponse, error)
	// List routes
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// Add middleware
	AddMiddleware(ctx context.Context, in *AddMiddlewareRequest, opts ...grpc.CallOption) (*AddMiddlewareResponse, error)
	// Remove middleware
	RemoveMiddleware(ctx context.Context, in *RemoveMiddlewareRequest, opts ...grpc.CallOption) (*RemoveMiddlewareResponse, error)
	// List middleware
	ListMiddleware(ctx context.Context, in *ListMiddlewareRequest, opts ...grpc.CallOption) (*ListMiddlewareResponse, error)
	// Get server metrics
	GetServerMetrics(ctx context.Context, in *GetServerMetricsRequest, opts ...grpc.CallOption) (*GetServerMetricsResponse, error)
	// Get route metrics
	GetRouteMetrics(ctx context.Context, in *GetRouteMetricsRequest, opts ...grpc.CallOption) (*GetRouteMetricsResponse, error)
	// Handle HTTP request
	HandleRequest(ctx context.Context, in *HandleRequestRequest, opts ...grpc.CallOption) (*HandleRequestResponse, error)
	// Stream server events
	StreamServerEvents(ctx context.Context, in *StreamServerEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerEvent], error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, WebService_CreateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, WebService_StartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, WebService_StopServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetServerStatus(ctx context.Context, in *GetServerStatusRequest, opts ...grpc.CallOption) (*GetServerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerStatusResponse)
	err := c.cc.Invoke(ctx, WebService_GetServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, WebService_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) RegisterRoute(ctx context.Context, in *RegisterRouteRequest, opts ...grpc.CallOption) (*RegisterRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterRouteResponse)
	err := c.cc.Invoke(ctx, WebService_RegisterRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UnregisterRoute(ctx context.Context, in *UnregisterRouteRequest, opts ...grpc.CallOption) (*UnregisterRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterRouteResponse)
	err := c.cc.Invoke(ctx, WebService_UnregisterRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, WebService_ListRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) AddMiddleware(ctx context.Context, in *AddMiddlewareRequest, opts ...grpc.CallOption) (*AddMiddlewareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMiddlewareResponse)
	err := c.cc.Invoke(ctx, WebService_AddMiddleware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) RemoveMiddleware(ctx context.Context, in *RemoveMiddlewareRequest, opts ...grpc.CallOption) (*RemoveMiddlewareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMiddlewareResponse)
	err := c.cc.Invoke(ctx, WebService_RemoveMiddleware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListMiddleware(ctx context.Context, in *ListMiddlewareRequest, opts ...grpc.CallOption) (*ListMiddlewareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMiddlewareResponse)
	err := c.cc.Invoke(ctx, WebService_ListMiddleware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetServerMetrics(ctx context.Context, in *GetServerMetricsRequest, opts ...grpc.CallOption) (*GetServerMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerMetricsResponse)
	err := c.cc.Invoke(ctx, WebService_GetServerMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetRouteMetrics(ctx context.Context, in *GetRouteMetricsRequest, opts ...grpc.CallOption) (*GetRouteMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteMetricsResponse)
	err := c.cc.Invoke(ctx, WebService_GetRouteMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) HandleRequest(ctx context.Context, in *HandleRequestRequest, opts ...grpc.CallOption) (*HandleRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleRequestResponse)
	err := c.cc.Invoke(ctx, WebService_HandleRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) StreamServerEvents(ctx context.Context, in *StreamServerEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServerEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebService_ServiceDesc.Streams[0], WebService_StreamServerEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamServerEventsRequest, ServerEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_StreamServerEventsClient = grpc.ServerStreamingClient[ServerEvent]

// WebServiceServer is the server API for WebService service.
// All implementations should embed UnimplementedWebServiceServer
// for forward compatibility.
//
// WebService provides HTTP server and web framework functionality
type WebServiceServer interface {
	// Create an HTTP server
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	// Start a server
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	// Stop a server
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	// Get server status
	GetServerStatus(context.Context, *GetServerStatusRequest) (*GetServerStatusResponse, error)
	// List servers
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	// Register a route
	RegisterRoute(context.Context, *RegisterRouteRequest) (*RegisterRouteResponse, error)
	// Unregister a route
	UnregisterRoute(context.Context, *UnregisterRouteRequest) (*UnregisterRouteResponse, error)
	// List routes
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// Add middleware
	AddMiddleware(context.Context, *AddMiddlewareRequest) (*AddMiddlewareResponse, error)
	// Remove middleware
	RemoveMiddleware(context.Context, *RemoveMiddlewareRequest) (*RemoveMiddlewareResponse, error)
	// List middleware
	ListMiddleware(context.Context, *ListMiddlewareRequest) (*ListMiddlewareResponse, error)
	// Get server metrics
	GetServerMetrics(context.Context, *GetServerMetricsRequest) (*GetServerMetricsResponse, error)
	// Get route metrics
	GetRouteMetrics(context.Context, *GetRouteMetricsRequest) (*GetRouteMetricsResponse, error)
	// Handle HTTP request
	HandleRequest(context.Context, *HandleRequestRequest) (*HandleRequestResponse, error)
	// Stream server events
	StreamServerEvents(*StreamServerEventsRequest, grpc.ServerStreamingServer[ServerEvent]) error
}

// UnimplementedWebServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebServiceServer struct{}

func (UnimplementedWebServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedWebServiceServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedWebServiceServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedWebServiceServer) GetServerStatus(context.Context, *GetServerStatusRequest) (*GetServerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStatus not implemented")
}
func (UnimplementedWebServiceServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedWebServiceServer) RegisterRoute(context.Context, *RegisterRouteRequest) (*RegisterRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoute not implemented")
}
func (UnimplementedWebServiceServer) UnregisterRoute(context.Context, *UnregisterRouteRequest) (*UnregisterRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterRoute not implemented")
}
func (UnimplementedWebServiceServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedWebServiceServer) AddMiddleware(context.Context, *AddMiddlewareRequest) (*AddMiddlewareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMiddleware not implemented")
}
func (UnimplementedWebServiceServer) RemoveMiddleware(context.Context, *RemoveMiddlewareRequest) (*RemoveMiddlewareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMiddleware not implemented")
}
func (UnimplementedWebServiceServer) ListMiddleware(context.Context, *ListMiddlewareRequest) (*ListMiddlewareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiddleware not implemented")
}
func (UnimplementedWebServiceServer) GetServerMetrics(context.Context, *GetServerMetricsRequest) (*GetServerMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerMetrics not implemented")
}
func (UnimplementedWebServiceServer) GetRouteMetrics(context.Context, *GetRouteMetricsRequest) (*GetRouteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteMetrics not implemented")
}
func (UnimplementedWebServiceServer) HandleRequest(context.Context, *HandleRequestRequest) (*HandleRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRequest not implemented")
}
func (UnimplementedWebServiceServer) StreamServerEvents(*StreamServerEventsRequest, grpc.ServerStreamingServer[ServerEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamServerEvents not implemented")
}
func (UnimplementedWebServiceServer) testEmbeddedByValue() {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_StartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_StopServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetServerStatus(ctx, req.(*GetServerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_RegisterRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RegisterRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_RegisterRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RegisterRoute(ctx, req.(*RegisterRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UnregisterRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UnregisterRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_UnregisterRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UnregisterRoute(ctx, req.(*UnregisterRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_AddMiddleware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMiddlewareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).AddMiddleware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_AddMiddleware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).AddMiddleware(ctx, req.(*AddMiddlewareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_RemoveMiddleware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMiddlewareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RemoveMiddleware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_RemoveMiddleware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RemoveMiddleware(ctx, req.(*RemoveMiddlewareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListMiddleware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiddlewareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListMiddleware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_ListMiddleware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListMiddleware(ctx, req.(*ListMiddlewareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetServerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetServerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetServerMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetServerMetrics(ctx, req.(*GetServerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetRouteMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetRouteMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetRouteMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetRouteMetrics(ctx, req.(*GetRouteMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_HandleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).HandleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_HandleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).HandleRequest(ctx, req.(*HandleRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_StreamServerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamServerEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebServiceServer).StreamServerEvents(m, &grpc.GenericServerStream[StreamServerEventsRequest, ServerEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_StreamServerEventsServer = grpc.ServerStreamingServer[ServerEvent]

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.web.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _WebService_CreateServer_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _WebService_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _WebService_StopServer_Handler,
		},
		{
			MethodName: "GetServerStatus",
			Handler:    _WebService_GetServerStatus_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _WebService_ListServers_Handler,
		},
		{
			MethodName: "RegisterRoute",
			Handler:    _WebService_RegisterRoute_Handler,
		},
		{
			MethodName: "UnregisterRoute",
			Handler:    _WebService_UnregisterRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _WebService_ListRoutes_Handler,
		},
		{
			MethodName: "AddMiddleware",
			Handler:    _WebService_AddMiddleware_Handler,
		},
		{
			MethodName: "RemoveMiddleware",
			Handler:    _WebService_RemoveMiddleware_Handler,
		},
		{
			MethodName: "ListMiddleware",
			Handler:    _WebService_ListMiddleware_Handler,
		},
		{
			MethodName: "GetServerMetrics",
			Handler:    _WebService_GetServerMetrics_Handler,
		},
		{
			MethodName: "GetRouteMetrics",
			Handler:    _WebService_GetRouteMetrics_Handler,
		},
		{
			MethodName: "HandleRequest",
			Handler:    _WebService_HandleRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServerEvents",
			Handler:       _WebService_StreamServerEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/web/proto/web.proto",
}
