// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: web.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebService_ServeStatic_FullMethodName    = "/web.WebService/ServeStatic"
	WebService_RenderTemplate_FullMethodName = "/web.WebService/RenderTemplate"
	WebService_GetRouteInfo_FullMethodName   = "/web.WebService/GetRouteInfo"
	WebService_ForwardRequest_FullMethodName = "/web.WebService/ForwardRequest"
	WebService_CheckSecurity_FullMethodName  = "/web.WebService/CheckSecurity"
)

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebService defines web-related operations
type WebServiceClient interface {
	// ServeStatic serves static assets
	ServeStatic(ctx context.Context, in *ServeStaticRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaticResponse], error)
	// RenderTemplate renders a template
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
	// GetRouteInfo gets information about registered routes
	GetRouteInfo(ctx context.Context, in *GetRouteInfoRequest, opts ...grpc.CallOption) (*GetRouteInfoResponse, error)
	// ForwardRequest forwards a web request
	ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error)
	// CheckSecurity performs a security check
	CheckSecurity(ctx context.Context, in *CheckSecurityRequest, opts ...grpc.CallOption) (*CheckSecurityResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) ServeStatic(ctx context.Context, in *ServeStaticRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaticResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebService_ServiceDesc.Streams[0], WebService_ServeStatic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ServeStaticRequest, StaticResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_ServeStaticClient = grpc.ServerStreamingClient[StaticResponse]

func (c *webServiceClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, WebService_RenderTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetRouteInfo(ctx context.Context, in *GetRouteInfoRequest, opts ...grpc.CallOption) (*GetRouteInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteInfoResponse)
	err := c.cc.Invoke(ctx, WebService_GetRouteInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ForwardRequest(ctx context.Context, in *ForwardRequestRequest, opts ...grpc.CallOption) (*ForwardRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardRequestResponse)
	err := c.cc.Invoke(ctx, WebService_ForwardRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) CheckSecurity(ctx context.Context, in *CheckSecurityRequest, opts ...grpc.CallOption) (*CheckSecurityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSecurityResponse)
	err := c.cc.Invoke(ctx, WebService_CheckSecurity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
// All implementations must embed UnimplementedWebServiceServer
// for forward compatibility.
//
// WebService defines web-related operations
type WebServiceServer interface {
	// ServeStatic serves static assets
	ServeStatic(*ServeStaticRequest, grpc.ServerStreamingServer[StaticResponse]) error
	// RenderTemplate renders a template
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	// GetRouteInfo gets information about registered routes
	GetRouteInfo(context.Context, *GetRouteInfoRequest) (*GetRouteInfoResponse, error)
	// ForwardRequest forwards a web request
	ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error)
	// CheckSecurity performs a security check
	CheckSecurity(context.Context, *CheckSecurityRequest) (*CheckSecurityResponse, error)
	mustEmbedUnimplementedWebServiceServer()
}

// UnimplementedWebServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebServiceServer struct{}

func (UnimplementedWebServiceServer) ServeStatic(*ServeStaticRequest, grpc.ServerStreamingServer[StaticResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServeStatic not implemented")
}
func (UnimplementedWebServiceServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedWebServiceServer) GetRouteInfo(context.Context, *GetRouteInfoRequest) (*GetRouteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteInfo not implemented")
}
func (UnimplementedWebServiceServer) ForwardRequest(context.Context, *ForwardRequestRequest) (*ForwardRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardRequest not implemented")
}
func (UnimplementedWebServiceServer) CheckSecurity(context.Context, *CheckSecurityRequest) (*CheckSecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSecurity not implemented")
}
func (UnimplementedWebServiceServer) mustEmbedUnimplementedWebServiceServer() {}
func (UnimplementedWebServiceServer) testEmbeddedByValue()                    {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_ServeStatic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServeStaticRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebServiceServer).ServeStatic(m, &grpc.GenericServerStream[ServeStaticRequest, StaticResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebService_ServeStaticServer = grpc.ServerStreamingServer[StaticResponse]

func _WebService_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_RenderTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetRouteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetRouteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_GetRouteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetRouteInfo(ctx, req.(*GetRouteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_ForwardRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ForwardRequest(ctx, req.(*ForwardRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_CheckSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSecurityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).CheckSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebService_CheckSecurity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).CheckSecurity(ctx, req.(*CheckSecurityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderTemplate",
			Handler:    _WebService_RenderTemplate_Handler,
		},
		{
			MethodName: "GetRouteInfo",
			Handler:    _WebService_GetRouteInfo_Handler,
		},
		{
			MethodName: "ForwardRequest",
			Handler:    _WebService_ForwardRequest_Handler,
		},
		{
			MethodName: "CheckSecurity",
			Handler:    _WebService_CheckSecurity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServeStatic",
			Handler:       _WebService_ServeStatic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "web.proto",
}
