// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockWebServiceClient creates a new instance of MockWebServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceClient {
	mock := &MockWebServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebServiceClient is an autogenerated mock type for the WebServiceClient type
type MockWebServiceClient struct {
	mock.Mock
}

type MockWebServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceClient) EXPECT() *MockWebServiceClient_Expecter {
	return &MockWebServiceClient_Expecter{mock: &_m.Mock}
}

// CheckSecurity provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) CheckSecurity(ctx context.Context, in *proto.CheckSecurityRequest, opts ...grpc.CallOption) (*proto.CheckSecurityResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CheckSecurity")
	}

	var r0 *proto.CheckSecurityResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CheckSecurityRequest, ...grpc.CallOption) (*proto.CheckSecurityResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CheckSecurityRequest, ...grpc.CallOption) *proto.CheckSecurityResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CheckSecurityResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CheckSecurityRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_CheckSecurity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSecurity'
type MockWebServiceClient_CheckSecurity_Call struct {
	*mock.Call
}

// CheckSecurity is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockWebServiceClient_Expecter) CheckSecurity(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_CheckSecurity_Call {
	return &MockWebServiceClient_CheckSecurity_Call{Call: _e.mock.On("CheckSecurity",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_CheckSecurity_Call) Run(run func(ctx context.Context, in *proto.CheckSecurityRequest, opts ...grpc.CallOption)) *MockWebServiceClient_CheckSecurity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.CheckSecurityRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWebServiceClient_CheckSecurity_Call) Return(checkSecurityResponse *proto.CheckSecurityResponse, err error) *MockWebServiceClient_CheckSecurity_Call {
	_c.Call.Return(checkSecurityResponse, err)
	return _c
}

func (_c *MockWebServiceClient_CheckSecurity_Call) RunAndReturn(run func(ctx context.Context, in *proto.CheckSecurityRequest, opts ...grpc.CallOption) (*proto.CheckSecurityResponse, error)) *MockWebServiceClient_CheckSecurity_Call {
	_c.Call.Return(run)
	return _c
}

// ForwardRequest provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) ForwardRequest(ctx context.Context, in *proto.ForwardRequestRequest, opts ...grpc.CallOption) (*proto.ForwardRequestResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ForwardRequest")
	}

	var r0 *proto.ForwardRequestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ForwardRequestRequest, ...grpc.CallOption) (*proto.ForwardRequestResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ForwardRequestRequest, ...grpc.CallOption) *proto.ForwardRequestResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ForwardRequestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ForwardRequestRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_ForwardRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardRequest'
type MockWebServiceClient_ForwardRequest_Call struct {
	*mock.Call
}

// ForwardRequest is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockWebServiceClient_Expecter) ForwardRequest(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_ForwardRequest_Call {
	return &MockWebServiceClient_ForwardRequest_Call{Call: _e.mock.On("ForwardRequest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_ForwardRequest_Call) Run(run func(ctx context.Context, in *proto.ForwardRequestRequest, opts ...grpc.CallOption)) *MockWebServiceClient_ForwardRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ForwardRequestRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWebServiceClient_ForwardRequest_Call) Return(forwardRequestResponse *proto.ForwardRequestResponse, err error) *MockWebServiceClient_ForwardRequest_Call {
	_c.Call.Return(forwardRequestResponse, err)
	return _c
}

func (_c *MockWebServiceClient_ForwardRequest_Call) RunAndReturn(run func(ctx context.Context, in *proto.ForwardRequestRequest, opts ...grpc.CallOption) (*proto.ForwardRequestResponse, error)) *MockWebServiceClient_ForwardRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteInfo provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) GetRouteInfo(ctx context.Context, in *proto.GetRouteInfoRequest, opts ...grpc.CallOption) (*proto.GetRouteInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetRouteInfo")
	}

	var r0 *proto.GetRouteInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRouteInfoRequest, ...grpc.CallOption) (*proto.GetRouteInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRouteInfoRequest, ...grpc.CallOption) *proto.GetRouteInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetRouteInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRouteInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_GetRouteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteInfo'
type MockWebServiceClient_GetRouteInfo_Call struct {
	*mock.Call
}

// GetRouteInfo is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockWebServiceClient_Expecter) GetRouteInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_GetRouteInfo_Call {
	return &MockWebServiceClient_GetRouteInfo_Call{Call: _e.mock.On("GetRouteInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_GetRouteInfo_Call) Run(run func(ctx context.Context, in *proto.GetRouteInfoRequest, opts ...grpc.CallOption)) *MockWebServiceClient_GetRouteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GetRouteInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWebServiceClient_GetRouteInfo_Call) Return(getRouteInfoResponse *proto.GetRouteInfoResponse, err error) *MockWebServiceClient_GetRouteInfo_Call {
	_c.Call.Return(getRouteInfoResponse, err)
	return _c
}

func (_c *MockWebServiceClient_GetRouteInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetRouteInfoRequest, opts ...grpc.CallOption) (*proto.GetRouteInfoResponse, error)) *MockWebServiceClient_GetRouteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RenderTemplate provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) RenderTemplate(ctx context.Context, in *proto.RenderTemplateRequest, opts ...grpc.CallOption) (*proto.RenderTemplateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 *proto.RenderTemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RenderTemplateRequest, ...grpc.CallOption) (*proto.RenderTemplateResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RenderTemplateRequest, ...grpc.CallOption) *proto.RenderTemplateResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RenderTemplateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RenderTemplateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockWebServiceClient_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockWebServiceClient_Expecter) RenderTemplate(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_RenderTemplate_Call {
	return &MockWebServiceClient_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_RenderTemplate_Call) Run(run func(ctx context.Context, in *proto.RenderTemplateRequest, opts ...grpc.CallOption)) *MockWebServiceClient_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.RenderTemplateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWebServiceClient_RenderTemplate_Call) Return(renderTemplateResponse *proto.RenderTemplateResponse, err error) *MockWebServiceClient_RenderTemplate_Call {
	_c.Call.Return(renderTemplateResponse, err)
	return _c
}

func (_c *MockWebServiceClient_RenderTemplate_Call) RunAndReturn(run func(ctx context.Context, in *proto.RenderTemplateRequest, opts ...grpc.CallOption) (*proto.RenderTemplateResponse, error)) *MockWebServiceClient_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ServeStatic provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) ServeStatic(ctx context.Context, in *proto.ServeStaticRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.StaticResponse], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ServeStatic")
	}

	var r0 grpc.ServerStreamingClient[proto.StaticResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ServeStaticRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.StaticResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ServeStaticRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.StaticResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.StaticResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ServeStaticRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_ServeStatic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeStatic'
type MockWebServiceClient_ServeStatic_Call struct {
	*mock.Call
}

// ServeStatic is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockWebServiceClient_Expecter) ServeStatic(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_ServeStatic_Call {
	return &MockWebServiceClient_ServeStatic_Call{Call: _e.mock.On("ServeStatic",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_ServeStatic_Call) Run(run func(ctx context.Context, in *proto.ServeStaticRequest, opts ...grpc.CallOption)) *MockWebServiceClient_ServeStatic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ServeStaticRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockWebServiceClient_ServeStatic_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.StaticResponse], err error) *MockWebServiceClient_ServeStatic_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockWebServiceClient_ServeStatic_Call) RunAndReturn(run func(ctx context.Context, in *proto.ServeStaticRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.StaticResponse], error)) *MockWebServiceClient_ServeStatic_Call {
	_c.Call.Return(run)
	return _c
}
