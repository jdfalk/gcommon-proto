// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockWebServiceClient creates a new instance of MockWebServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceClient {
	mock := &MockWebServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebServiceClient is an autogenerated mock type for the WebServiceClient type
type MockWebServiceClient struct {
	mock.Mock
}

type MockWebServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceClient) EXPECT() *MockWebServiceClient_Expecter {
	return &MockWebServiceClient_Expecter{mock: &_m.Mock}
}

// HandleRequest provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) HandleRequest(ctx context.Context, in *proto.HandleRequestRequest, opts ...grpc.CallOption) (*proto.HandleRequestResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HandleRequest")
	}

	var r0 *proto.HandleRequestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HandleRequestRequest, ...grpc.CallOption) (*proto.HandleRequestResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HandleRequestRequest, ...grpc.CallOption) *proto.HandleRequestResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HandleRequestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HandleRequestRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_HandleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleRequest'
type MockWebServiceClient_HandleRequest_Call struct {
	*mock.Call
}

// HandleRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.HandleRequestRequest
//   - opts ...grpc.CallOption
func (_e *MockWebServiceClient_Expecter) HandleRequest(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_HandleRequest_Call {
	return &MockWebServiceClient_HandleRequest_Call{Call: _e.mock.On("HandleRequest",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_HandleRequest_Call) Run(run func(ctx context.Context, in *proto.HandleRequestRequest, opts ...grpc.CallOption)) *MockWebServiceClient_HandleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HandleRequestRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HandleRequestRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWebServiceClient_HandleRequest_Call) Return(handleRequestResponse *proto.HandleRequestResponse, err error) *MockWebServiceClient_HandleRequest_Call {
	_c.Call.Return(handleRequestResponse, err)
	return _c
}

func (_c *MockWebServiceClient_HandleRequest_Call) RunAndReturn(run func(ctx context.Context, in *proto.HandleRequestRequest, opts ...grpc.CallOption) (*proto.HandleRequestResponse, error)) *MockWebServiceClient_HandleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockWebServiceClient
func (_mock *MockWebServiceClient) HealthCheck(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceClient_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockWebServiceClient_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.HealthCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockWebServiceClient_Expecter) HealthCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockWebServiceClient_HealthCheck_Call {
	return &MockWebServiceClient_HealthCheck_Call{Call: _e.mock.On("HealthCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebServiceClient_HealthCheck_Call) Run(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption)) *MockWebServiceClient_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWebServiceClient_HealthCheck_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockWebServiceClient_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockWebServiceClient_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error)) *MockWebServiceClient_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}
