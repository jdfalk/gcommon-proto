// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockWebAdminServiceClient creates a new instance of MockWebAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebAdminServiceClient {
	mock := &MockWebAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebAdminServiceClient is an autogenerated mock type for the WebAdminServiceClient type
type MockWebAdminServiceClient struct {
	mock.Mock
}

type MockWebAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebAdminServiceClient) EXPECT() *MockWebAdminServiceClient_Expecter {
	return &MockWebAdminServiceClient_Expecter{mock: &_m.Mock}
}

// FlushCache provides a mock function for the type MockWebAdminServiceClient
func (_mock *MockWebAdminServiceClient) FlushCache(ctx context.Context, in *proto.FlushCacheRequest, opts ...grpc.CallOption) (*proto.FlushCacheResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for FlushCache")
	}

	var r0 *proto.FlushCacheResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushCacheRequest, ...grpc.CallOption) (*proto.FlushCacheResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushCacheRequest, ...grpc.CallOption) *proto.FlushCacheResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlushCacheResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.FlushCacheRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceClient_FlushCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushCache'
type MockWebAdminServiceClient_FlushCache_Call struct {
	*mock.Call
}

// FlushCache is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.FlushCacheRequest
//   - opts ...grpc.CallOption
func (_e *MockWebAdminServiceClient_Expecter) FlushCache(ctx interface{}, in interface{}, opts ...interface{}) *MockWebAdminServiceClient_FlushCache_Call {
	return &MockWebAdminServiceClient_FlushCache_Call{Call: _e.mock.On("FlushCache",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebAdminServiceClient_FlushCache_Call) Run(run func(ctx context.Context, in *proto.FlushCacheRequest, opts ...grpc.CallOption)) *MockWebAdminServiceClient_FlushCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.FlushCacheRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.FlushCacheRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceClient_FlushCache_Call) Return(flushCacheResponse *proto.FlushCacheResponse, err error) *MockWebAdminServiceClient_FlushCache_Call {
	_c.Call.Return(flushCacheResponse, err)
	return _c
}

func (_c *MockWebAdminServiceClient_FlushCache_Call) RunAndReturn(run func(ctx context.Context, in *proto.FlushCacheRequest, opts ...grpc.CallOption) (*proto.FlushCacheResponse, error)) *MockWebAdminServiceClient_FlushCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheConfig provides a mock function for the type MockWebAdminServiceClient
func (_mock *MockWebAdminServiceClient) GetCacheConfig(ctx context.Context, in *proto.GetCacheConfigRequest, opts ...grpc.CallOption) (*proto.GetCacheConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCacheConfig")
	}

	var r0 *proto.GetCacheConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetCacheConfigRequest, ...grpc.CallOption) (*proto.GetCacheConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetCacheConfigRequest, ...grpc.CallOption) *proto.GetCacheConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetCacheConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetCacheConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceClient_GetCacheConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheConfig'
type MockWebAdminServiceClient_GetCacheConfig_Call struct {
	*mock.Call
}

// GetCacheConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetCacheConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockWebAdminServiceClient_Expecter) GetCacheConfig(ctx interface{}, in interface{}, opts ...interface{}) *MockWebAdminServiceClient_GetCacheConfig_Call {
	return &MockWebAdminServiceClient_GetCacheConfig_Call{Call: _e.mock.On("GetCacheConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebAdminServiceClient_GetCacheConfig_Call) Run(run func(ctx context.Context, in *proto.GetCacheConfigRequest, opts ...grpc.CallOption)) *MockWebAdminServiceClient_GetCacheConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetCacheConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetCacheConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceClient_GetCacheConfig_Call) Return(getCacheConfigResponse *proto.GetCacheConfigResponse, err error) *MockWebAdminServiceClient_GetCacheConfig_Call {
	_c.Call.Return(getCacheConfigResponse, err)
	return _c
}

func (_c *MockWebAdminServiceClient_GetCacheConfig_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetCacheConfigRequest, opts ...grpc.CallOption) (*proto.GetCacheConfigResponse, error)) *MockWebAdminServiceClient_GetCacheConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCacheConfig provides a mock function for the type MockWebAdminServiceClient
func (_mock *MockWebAdminServiceClient) UpdateCacheConfig(ctx context.Context, in *proto.UpdateCacheConfigRequest, opts ...grpc.CallOption) (*proto.UpdateCacheConfigResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateCacheConfig")
	}

	var r0 *proto.UpdateCacheConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateCacheConfigRequest, ...grpc.CallOption) (*proto.UpdateCacheConfigResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateCacheConfigRequest, ...grpc.CallOption) *proto.UpdateCacheConfigResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateCacheConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateCacheConfigRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceClient_UpdateCacheConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCacheConfig'
type MockWebAdminServiceClient_UpdateCacheConfig_Call struct {
	*mock.Call
}

// UpdateCacheConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateCacheConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockWebAdminServiceClient_Expecter) UpdateCacheConfig(ctx interface{}, in interface{}, opts ...interface{}) *MockWebAdminServiceClient_UpdateCacheConfig_Call {
	return &MockWebAdminServiceClient_UpdateCacheConfig_Call{Call: _e.mock.On("UpdateCacheConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockWebAdminServiceClient_UpdateCacheConfig_Call) Run(run func(ctx context.Context, in *proto.UpdateCacheConfigRequest, opts ...grpc.CallOption)) *MockWebAdminServiceClient_UpdateCacheConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateCacheConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateCacheConfigRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceClient_UpdateCacheConfig_Call) Return(updateCacheConfigResponse *proto.UpdateCacheConfigResponse, err error) *MockWebAdminServiceClient_UpdateCacheConfig_Call {
	_c.Call.Return(updateCacheConfigResponse, err)
	return _c
}

func (_c *MockWebAdminServiceClient_UpdateCacheConfig_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateCacheConfigRequest, opts ...grpc.CallOption) (*proto.UpdateCacheConfigResponse, error)) *MockWebAdminServiceClient_UpdateCacheConfig_Call {
	_c.Call.Return(run)
	return _c
}
