// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebServiceServer creates a new instance of MockWebServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceServer {
	mock := &MockWebServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebServiceServer is an autogenerated mock type for the WebServiceServer type
type MockWebServiceServer struct {
	mock.Mock
}

type MockWebServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceServer) EXPECT() *MockWebServiceServer_Expecter {
	return &MockWebServiceServer_Expecter{mock: &_m.Mock}
}

// HandleRequest provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) HandleRequest(context1 context.Context, handleRequestRequest *proto.HandleRequestRequest) (*proto.HandleRequestResponse, error) {
	ret := _mock.Called(context1, handleRequestRequest)

	if len(ret) == 0 {
		panic("no return value specified for HandleRequest")
	}

	var r0 *proto.HandleRequestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HandleRequestRequest) (*proto.HandleRequestResponse, error)); ok {
		return returnFunc(context1, handleRequestRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HandleRequestRequest) *proto.HandleRequestResponse); ok {
		r0 = returnFunc(context1, handleRequestRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HandleRequestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HandleRequestRequest) error); ok {
		r1 = returnFunc(context1, handleRequestRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_HandleRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleRequest'
type MockWebServiceServer_HandleRequest_Call struct {
	*mock.Call
}

// HandleRequest is a helper method to define mock.On call
//   - context1 context.Context
//   - handleRequestRequest *proto.HandleRequestRequest
func (_e *MockWebServiceServer_Expecter) HandleRequest(context1 interface{}, handleRequestRequest interface{}) *MockWebServiceServer_HandleRequest_Call {
	return &MockWebServiceServer_HandleRequest_Call{Call: _e.mock.On("HandleRequest", context1, handleRequestRequest)}
}

func (_c *MockWebServiceServer_HandleRequest_Call) Run(run func(context1 context.Context, handleRequestRequest *proto.HandleRequestRequest)) *MockWebServiceServer_HandleRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HandleRequestRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HandleRequestRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceServer_HandleRequest_Call) Return(handleRequestResponse *proto.HandleRequestResponse, err error) *MockWebServiceServer_HandleRequest_Call {
	_c.Call.Return(handleRequestResponse, err)
	return _c
}

func (_c *MockWebServiceServer_HandleRequest_Call) RunAndReturn(run func(context1 context.Context, handleRequestRequest *proto.HandleRequestRequest) (*proto.HandleRequestResponse, error)) *MockWebServiceServer_HandleRequest_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) HealthCheck(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error) {
	ret := _mock.Called(context1, healthCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(context1, healthCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(context1, healthCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest) error); ok {
		r1 = returnFunc(context1, healthCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockWebServiceServer_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - healthCheckRequest *proto.HealthCheckRequest
func (_e *MockWebServiceServer_Expecter) HealthCheck(context1 interface{}, healthCheckRequest interface{}) *MockWebServiceServer_HealthCheck_Call {
	return &MockWebServiceServer_HealthCheck_Call{Call: _e.mock.On("HealthCheck", context1, healthCheckRequest)}
}

func (_c *MockWebServiceServer_HealthCheck_Call) Run(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest)) *MockWebServiceServer_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebServiceServer_HealthCheck_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockWebServiceServer_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockWebServiceServer_HealthCheck_Call) RunAndReturn(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)) *MockWebServiceServer_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}
