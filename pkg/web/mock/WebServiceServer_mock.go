// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockWebServiceServer creates a new instance of MockWebServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceServer {
	mock := &MockWebServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebServiceServer is an autogenerated mock type for the WebServiceServer type
type MockWebServiceServer struct {
	mock.Mock
}

type MockWebServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceServer) EXPECT() *MockWebServiceServer_Expecter {
	return &MockWebServiceServer_Expecter{mock: &_m.Mock}
}

// CheckSecurity provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) CheckSecurity(context1 context.Context, checkSecurityRequest *proto.CheckSecurityRequest) (*proto.CheckSecurityResponse, error) {
	ret := _mock.Called(context1, checkSecurityRequest)

	if len(ret) == 0 {
		panic("no return value specified for CheckSecurity")
	}

	var r0 *proto.CheckSecurityResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CheckSecurityRequest) (*proto.CheckSecurityResponse, error)); ok {
		return returnFunc(context1, checkSecurityRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CheckSecurityRequest) *proto.CheckSecurityResponse); ok {
		r0 = returnFunc(context1, checkSecurityRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CheckSecurityResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CheckSecurityRequest) error); ok {
		r1 = returnFunc(context1, checkSecurityRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_CheckSecurity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSecurity'
type MockWebServiceServer_CheckSecurity_Call struct {
	*mock.Call
}

// CheckSecurity is a helper method to define mock.On call
//   - context1
//   - checkSecurityRequest
func (_e *MockWebServiceServer_Expecter) CheckSecurity(context1 interface{}, checkSecurityRequest interface{}) *MockWebServiceServer_CheckSecurity_Call {
	return &MockWebServiceServer_CheckSecurity_Call{Call: _e.mock.On("CheckSecurity", context1, checkSecurityRequest)}
}

func (_c *MockWebServiceServer_CheckSecurity_Call) Run(run func(context1 context.Context, checkSecurityRequest *proto.CheckSecurityRequest)) *MockWebServiceServer_CheckSecurity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CheckSecurityRequest))
	})
	return _c
}

func (_c *MockWebServiceServer_CheckSecurity_Call) Return(checkSecurityResponse *proto.CheckSecurityResponse, err error) *MockWebServiceServer_CheckSecurity_Call {
	_c.Call.Return(checkSecurityResponse, err)
	return _c
}

func (_c *MockWebServiceServer_CheckSecurity_Call) RunAndReturn(run func(context1 context.Context, checkSecurityRequest *proto.CheckSecurityRequest) (*proto.CheckSecurityResponse, error)) *MockWebServiceServer_CheckSecurity_Call {
	_c.Call.Return(run)
	return _c
}

// ForwardRequest provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) ForwardRequest(context1 context.Context, forwardRequestRequest *proto.ForwardRequestRequest) (*proto.ForwardRequestResponse, error) {
	ret := _mock.Called(context1, forwardRequestRequest)

	if len(ret) == 0 {
		panic("no return value specified for ForwardRequest")
	}

	var r0 *proto.ForwardRequestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ForwardRequestRequest) (*proto.ForwardRequestResponse, error)); ok {
		return returnFunc(context1, forwardRequestRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ForwardRequestRequest) *proto.ForwardRequestResponse); ok {
		r0 = returnFunc(context1, forwardRequestRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ForwardRequestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ForwardRequestRequest) error); ok {
		r1 = returnFunc(context1, forwardRequestRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_ForwardRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardRequest'
type MockWebServiceServer_ForwardRequest_Call struct {
	*mock.Call
}

// ForwardRequest is a helper method to define mock.On call
//   - context1
//   - forwardRequestRequest
func (_e *MockWebServiceServer_Expecter) ForwardRequest(context1 interface{}, forwardRequestRequest interface{}) *MockWebServiceServer_ForwardRequest_Call {
	return &MockWebServiceServer_ForwardRequest_Call{Call: _e.mock.On("ForwardRequest", context1, forwardRequestRequest)}
}

func (_c *MockWebServiceServer_ForwardRequest_Call) Run(run func(context1 context.Context, forwardRequestRequest *proto.ForwardRequestRequest)) *MockWebServiceServer_ForwardRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ForwardRequestRequest))
	})
	return _c
}

func (_c *MockWebServiceServer_ForwardRequest_Call) Return(forwardRequestResponse *proto.ForwardRequestResponse, err error) *MockWebServiceServer_ForwardRequest_Call {
	_c.Call.Return(forwardRequestResponse, err)
	return _c
}

func (_c *MockWebServiceServer_ForwardRequest_Call) RunAndReturn(run func(context1 context.Context, forwardRequestRequest *proto.ForwardRequestRequest) (*proto.ForwardRequestResponse, error)) *MockWebServiceServer_ForwardRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteInfo provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) GetRouteInfo(context1 context.Context, getRouteInfoRequest *proto.GetRouteInfoRequest) (*proto.GetRouteInfoResponse, error) {
	ret := _mock.Called(context1, getRouteInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteInfo")
	}

	var r0 *proto.GetRouteInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRouteInfoRequest) (*proto.GetRouteInfoResponse, error)); ok {
		return returnFunc(context1, getRouteInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetRouteInfoRequest) *proto.GetRouteInfoResponse); ok {
		r0 = returnFunc(context1, getRouteInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetRouteInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetRouteInfoRequest) error); ok {
		r1 = returnFunc(context1, getRouteInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_GetRouteInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteInfo'
type MockWebServiceServer_GetRouteInfo_Call struct {
	*mock.Call
}

// GetRouteInfo is a helper method to define mock.On call
//   - context1
//   - getRouteInfoRequest
func (_e *MockWebServiceServer_Expecter) GetRouteInfo(context1 interface{}, getRouteInfoRequest interface{}) *MockWebServiceServer_GetRouteInfo_Call {
	return &MockWebServiceServer_GetRouteInfo_Call{Call: _e.mock.On("GetRouteInfo", context1, getRouteInfoRequest)}
}

func (_c *MockWebServiceServer_GetRouteInfo_Call) Run(run func(context1 context.Context, getRouteInfoRequest *proto.GetRouteInfoRequest)) *MockWebServiceServer_GetRouteInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetRouteInfoRequest))
	})
	return _c
}

func (_c *MockWebServiceServer_GetRouteInfo_Call) Return(getRouteInfoResponse *proto.GetRouteInfoResponse, err error) *MockWebServiceServer_GetRouteInfo_Call {
	_c.Call.Return(getRouteInfoResponse, err)
	return _c
}

func (_c *MockWebServiceServer_GetRouteInfo_Call) RunAndReturn(run func(context1 context.Context, getRouteInfoRequest *proto.GetRouteInfoRequest) (*proto.GetRouteInfoResponse, error)) *MockWebServiceServer_GetRouteInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RenderTemplate provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) RenderTemplate(context1 context.Context, renderTemplateRequest *proto.RenderTemplateRequest) (*proto.RenderTemplateResponse, error) {
	ret := _mock.Called(context1, renderTemplateRequest)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 *proto.RenderTemplateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RenderTemplateRequest) (*proto.RenderTemplateResponse, error)); ok {
		return returnFunc(context1, renderTemplateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RenderTemplateRequest) *proto.RenderTemplateResponse); ok {
		r0 = returnFunc(context1, renderTemplateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RenderTemplateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RenderTemplateRequest) error); ok {
		r1 = returnFunc(context1, renderTemplateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebServiceServer_RenderTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenderTemplate'
type MockWebServiceServer_RenderTemplate_Call struct {
	*mock.Call
}

// RenderTemplate is a helper method to define mock.On call
//   - context1
//   - renderTemplateRequest
func (_e *MockWebServiceServer_Expecter) RenderTemplate(context1 interface{}, renderTemplateRequest interface{}) *MockWebServiceServer_RenderTemplate_Call {
	return &MockWebServiceServer_RenderTemplate_Call{Call: _e.mock.On("RenderTemplate", context1, renderTemplateRequest)}
}

func (_c *MockWebServiceServer_RenderTemplate_Call) Run(run func(context1 context.Context, renderTemplateRequest *proto.RenderTemplateRequest)) *MockWebServiceServer_RenderTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.RenderTemplateRequest))
	})
	return _c
}

func (_c *MockWebServiceServer_RenderTemplate_Call) Return(renderTemplateResponse *proto.RenderTemplateResponse, err error) *MockWebServiceServer_RenderTemplate_Call {
	_c.Call.Return(renderTemplateResponse, err)
	return _c
}

func (_c *MockWebServiceServer_RenderTemplate_Call) RunAndReturn(run func(context1 context.Context, renderTemplateRequest *proto.RenderTemplateRequest) (*proto.RenderTemplateResponse, error)) *MockWebServiceServer_RenderTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ServeStatic provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) ServeStatic(serveStaticRequest *proto.ServeStaticRequest, serverStreamingServer grpc.ServerStreamingServer[proto.StaticResponse]) error {
	ret := _mock.Called(serveStaticRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for ServeStatic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.ServeStaticRequest, grpc.ServerStreamingServer[proto.StaticResponse]) error); ok {
		r0 = returnFunc(serveStaticRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebServiceServer_ServeStatic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeStatic'
type MockWebServiceServer_ServeStatic_Call struct {
	*mock.Call
}

// ServeStatic is a helper method to define mock.On call
//   - serveStaticRequest
//   - serverStreamingServer
func (_e *MockWebServiceServer_Expecter) ServeStatic(serveStaticRequest interface{}, serverStreamingServer interface{}) *MockWebServiceServer_ServeStatic_Call {
	return &MockWebServiceServer_ServeStatic_Call{Call: _e.mock.On("ServeStatic", serveStaticRequest, serverStreamingServer)}
}

func (_c *MockWebServiceServer_ServeStatic_Call) Run(run func(serveStaticRequest *proto.ServeStaticRequest, serverStreamingServer grpc.ServerStreamingServer[proto.StaticResponse])) *MockWebServiceServer_ServeStatic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.ServeStaticRequest), args[1].(grpc.ServerStreamingServer[proto.StaticResponse]))
	})
	return _c
}

func (_c *MockWebServiceServer_ServeStatic_Call) Return(err error) *MockWebServiceServer_ServeStatic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebServiceServer_ServeStatic_Call) RunAndReturn(run func(serveStaticRequest *proto.ServeStaticRequest, serverStreamingServer grpc.ServerStreamingServer[proto.StaticResponse]) error) *MockWebServiceServer_ServeStatic_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedWebServiceServer provides a mock function for the type MockWebServiceServer
func (_mock *MockWebServiceServer) mustEmbedUnimplementedWebServiceServer() {
	_mock.Called()
	return
}

// MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedWebServiceServer'
type MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedWebServiceServer is a helper method to define mock.On call
func (_e *MockWebServiceServer_Expecter) mustEmbedUnimplementedWebServiceServer() *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call {
	return &MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedWebServiceServer")}
}

func (_c *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call) Run(run func()) *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call) Return() *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call) RunAndReturn(run func()) *MockWebServiceServer_mustEmbedUnimplementedWebServiceServer_Call {
	_c.Run(run)
	return _c
}
