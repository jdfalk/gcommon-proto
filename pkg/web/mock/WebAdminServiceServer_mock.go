// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/web/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebAdminServiceServer creates a new instance of MockWebAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebAdminServiceServer {
	mock := &MockWebAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebAdminServiceServer is an autogenerated mock type for the WebAdminServiceServer type
type MockWebAdminServiceServer struct {
	mock.Mock
}

type MockWebAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebAdminServiceServer) EXPECT() *MockWebAdminServiceServer_Expecter {
	return &MockWebAdminServiceServer_Expecter{mock: &_m.Mock}
}

// FlushCache provides a mock function for the type MockWebAdminServiceServer
func (_mock *MockWebAdminServiceServer) FlushCache(context1 context.Context, flushCacheRequest *proto.FlushCacheRequest) (*proto.FlushCacheResponse, error) {
	ret := _mock.Called(context1, flushCacheRequest)

	if len(ret) == 0 {
		panic("no return value specified for FlushCache")
	}

	var r0 *proto.FlushCacheResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushCacheRequest) (*proto.FlushCacheResponse, error)); ok {
		return returnFunc(context1, flushCacheRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.FlushCacheRequest) *proto.FlushCacheResponse); ok {
		r0 = returnFunc(context1, flushCacheRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlushCacheResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.FlushCacheRequest) error); ok {
		r1 = returnFunc(context1, flushCacheRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceServer_FlushCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushCache'
type MockWebAdminServiceServer_FlushCache_Call struct {
	*mock.Call
}

// FlushCache is a helper method to define mock.On call
//   - context1 context.Context
//   - flushCacheRequest *proto.FlushCacheRequest
func (_e *MockWebAdminServiceServer_Expecter) FlushCache(context1 interface{}, flushCacheRequest interface{}) *MockWebAdminServiceServer_FlushCache_Call {
	return &MockWebAdminServiceServer_FlushCache_Call{Call: _e.mock.On("FlushCache", context1, flushCacheRequest)}
}

func (_c *MockWebAdminServiceServer_FlushCache_Call) Run(run func(context1 context.Context, flushCacheRequest *proto.FlushCacheRequest)) *MockWebAdminServiceServer_FlushCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.FlushCacheRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.FlushCacheRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceServer_FlushCache_Call) Return(flushCacheResponse *proto.FlushCacheResponse, err error) *MockWebAdminServiceServer_FlushCache_Call {
	_c.Call.Return(flushCacheResponse, err)
	return _c
}

func (_c *MockWebAdminServiceServer_FlushCache_Call) RunAndReturn(run func(context1 context.Context, flushCacheRequest *proto.FlushCacheRequest) (*proto.FlushCacheResponse, error)) *MockWebAdminServiceServer_FlushCache_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheConfig provides a mock function for the type MockWebAdminServiceServer
func (_mock *MockWebAdminServiceServer) GetCacheConfig(context1 context.Context, getCacheConfigRequest *proto.GetCacheConfigRequest) (*proto.GetCacheConfigResponse, error) {
	ret := _mock.Called(context1, getCacheConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheConfig")
	}

	var r0 *proto.GetCacheConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetCacheConfigRequest) (*proto.GetCacheConfigResponse, error)); ok {
		return returnFunc(context1, getCacheConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetCacheConfigRequest) *proto.GetCacheConfigResponse); ok {
		r0 = returnFunc(context1, getCacheConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetCacheConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetCacheConfigRequest) error); ok {
		r1 = returnFunc(context1, getCacheConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceServer_GetCacheConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheConfig'
type MockWebAdminServiceServer_GetCacheConfig_Call struct {
	*mock.Call
}

// GetCacheConfig is a helper method to define mock.On call
//   - context1 context.Context
//   - getCacheConfigRequest *proto.GetCacheConfigRequest
func (_e *MockWebAdminServiceServer_Expecter) GetCacheConfig(context1 interface{}, getCacheConfigRequest interface{}) *MockWebAdminServiceServer_GetCacheConfig_Call {
	return &MockWebAdminServiceServer_GetCacheConfig_Call{Call: _e.mock.On("GetCacheConfig", context1, getCacheConfigRequest)}
}

func (_c *MockWebAdminServiceServer_GetCacheConfig_Call) Run(run func(context1 context.Context, getCacheConfigRequest *proto.GetCacheConfigRequest)) *MockWebAdminServiceServer_GetCacheConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetCacheConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetCacheConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceServer_GetCacheConfig_Call) Return(getCacheConfigResponse *proto.GetCacheConfigResponse, err error) *MockWebAdminServiceServer_GetCacheConfig_Call {
	_c.Call.Return(getCacheConfigResponse, err)
	return _c
}

func (_c *MockWebAdminServiceServer_GetCacheConfig_Call) RunAndReturn(run func(context1 context.Context, getCacheConfigRequest *proto.GetCacheConfigRequest) (*proto.GetCacheConfigResponse, error)) *MockWebAdminServiceServer_GetCacheConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCacheConfig provides a mock function for the type MockWebAdminServiceServer
func (_mock *MockWebAdminServiceServer) UpdateCacheConfig(context1 context.Context, updateCacheConfigRequest *proto.UpdateCacheConfigRequest) (*proto.UpdateCacheConfigResponse, error) {
	ret := _mock.Called(context1, updateCacheConfigRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCacheConfig")
	}

	var r0 *proto.UpdateCacheConfigResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateCacheConfigRequest) (*proto.UpdateCacheConfigResponse, error)); ok {
		return returnFunc(context1, updateCacheConfigRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateCacheConfigRequest) *proto.UpdateCacheConfigResponse); ok {
		r0 = returnFunc(context1, updateCacheConfigRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateCacheConfigResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateCacheConfigRequest) error); ok {
		r1 = returnFunc(context1, updateCacheConfigRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebAdminServiceServer_UpdateCacheConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCacheConfig'
type MockWebAdminServiceServer_UpdateCacheConfig_Call struct {
	*mock.Call
}

// UpdateCacheConfig is a helper method to define mock.On call
//   - context1 context.Context
//   - updateCacheConfigRequest *proto.UpdateCacheConfigRequest
func (_e *MockWebAdminServiceServer_Expecter) UpdateCacheConfig(context1 interface{}, updateCacheConfigRequest interface{}) *MockWebAdminServiceServer_UpdateCacheConfig_Call {
	return &MockWebAdminServiceServer_UpdateCacheConfig_Call{Call: _e.mock.On("UpdateCacheConfig", context1, updateCacheConfigRequest)}
}

func (_c *MockWebAdminServiceServer_UpdateCacheConfig_Call) Run(run func(context1 context.Context, updateCacheConfigRequest *proto.UpdateCacheConfigRequest)) *MockWebAdminServiceServer_UpdateCacheConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateCacheConfigRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateCacheConfigRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWebAdminServiceServer_UpdateCacheConfig_Call) Return(updateCacheConfigResponse *proto.UpdateCacheConfigResponse, err error) *MockWebAdminServiceServer_UpdateCacheConfig_Call {
	_c.Call.Return(updateCacheConfigResponse, err)
	return _c
}

func (_c *MockWebAdminServiceServer_UpdateCacheConfig_Call) RunAndReturn(run func(context1 context.Context, updateCacheConfigRequest *proto.UpdateCacheConfigRequest) (*proto.UpdateCacheConfigResponse, error)) *MockWebAdminServiceServer_UpdateCacheConfig_Call {
	_c.Call.Return(run)
	return _c
}
