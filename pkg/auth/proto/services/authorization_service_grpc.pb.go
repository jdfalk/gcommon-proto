// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/auth/proto/services/authorization_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/auth/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/auth/proto/responses"
	types "github.com/jdfalk/gcommon/pkg/auth/proto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorizationService_Authorize_FullMethodName          = "/gcommon.v1.auth.AuthorizationService/Authorize"
	AuthorizationService_GetUserPermissions_FullMethodName = "/gcommon.v1.auth.AuthorizationService/GetUserPermissions"
	AuthorizationService_GetUserRoles_FullMethodName       = "/gcommon.v1.auth.AuthorizationService/GetUserRoles"
	AuthorizationService_AssignRole_FullMethodName         = "/gcommon.v1.auth.AuthorizationService/AssignRole"
	AuthorizationService_RemoveRole_FullMethodName         = "/gcommon.v1.auth.AuthorizationService/RemoveRole"
	AuthorizationService_CreateRole_FullMethodName         = "/gcommon.v1.auth.AuthorizationService/CreateRole"
	AuthorizationService_UpdateRole_FullMethodName         = "/gcommon.v1.auth.AuthorizationService/UpdateRole"
	AuthorizationService_DeleteRole_FullMethodName         = "/gcommon.v1.auth.AuthorizationService/DeleteRole"
	AuthorizationService_ListRoles_FullMethodName          = "/gcommon.v1.auth.AuthorizationService/ListRoles"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// AuthorizationService provides authorization and permission management.
// Handles role-based access control (RBAC), permission checking,
// and role lifecycle management for fine-grained access control.
type AuthorizationServiceClient interface {
	// Check if a user is authorized for a specific action on a resource
	Authorize(ctx context.Context, in *requests.AuthorizeRequest, opts ...grpc.CallOption) (*responses.AuthorizeResponse, error)
	// Get all permissions granted to a user (direct and via roles)
	GetUserPermissions(ctx context.Context, in *requests.GetUserPermissionsRequest, opts ...grpc.CallOption) (*responses.GetUserPermissionsResponse, error)
	// Get all roles assigned to a user
	GetUserRoles(ctx context.Context, in *requests.GetUserRolesRequest, opts ...grpc.CallOption) (*responses.GetUserRolesResponse, error)
	// Assign a role to a user
	AssignRole(ctx context.Context, in *requests.AssignRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Remove a role from a user
	RemoveRole(ctx context.Context, in *requests.RemoveRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a new role with specified permissions
	CreateRole(ctx context.Context, in *requests.CreateRoleRequest, opts ...grpc.CallOption) (*types.Role, error)
	// Update an existing role's permissions or metadata
	UpdateRole(ctx context.Context, in *requests.UpdateRoleRequest, opts ...grpc.CallOption) (*types.Role, error)
	// Delete a role (must not be assigned to any users)
	DeleteRole(ctx context.Context, in *requests.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List roles with filtering and pagination support
	ListRoles(ctx context.Context, in *requests.ListRolesRequest, opts ...grpc.CallOption) (*responses.ListRolesResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) Authorize(ctx context.Context, in *requests.AuthorizeRequest, opts ...grpc.CallOption) (*responses.AuthorizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.AuthorizeResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetUserPermissions(ctx context.Context, in *requests.GetUserPermissionsRequest, opts ...grpc.CallOption) (*responses.GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetUserRoles(ctx context.Context, in *requests.GetUserRolesRequest, opts ...grpc.CallOption) (*responses.GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetUserRolesResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) AssignRole(ctx context.Context, in *requests.AssignRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorizationService_AssignRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) RemoveRole(ctx context.Context, in *requests.RemoveRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorizationService_RemoveRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) CreateRole(ctx context.Context, in *requests.CreateRoleRequest, opts ...grpc.CallOption) (*types.Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.Role)
	err := c.cc.Invoke(ctx, AuthorizationService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdateRole(ctx context.Context, in *requests.UpdateRoleRequest, opts ...grpc.CallOption) (*types.Role, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.Role)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteRole(ctx context.Context, in *requests.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) ListRoles(ctx context.Context, in *requests.ListRolesRequest, opts ...grpc.CallOption) (*responses.ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListRolesResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations should embed UnimplementedAuthorizationServiceServer
// for forward compatibility.
//
// *
// AuthorizationService provides authorization and permission management.
// Handles role-based access control (RBAC), permission checking,
// and role lifecycle management for fine-grained access control.
type AuthorizationServiceServer interface {
	// Check if a user is authorized for a specific action on a resource
	Authorize(context.Context, *requests.AuthorizeRequest) (*responses.AuthorizeResponse, error)
	// Get all permissions granted to a user (direct and via roles)
	GetUserPermissions(context.Context, *requests.GetUserPermissionsRequest) (*responses.GetUserPermissionsResponse, error)
	// Get all roles assigned to a user
	GetUserRoles(context.Context, *requests.GetUserRolesRequest) (*responses.GetUserRolesResponse, error)
	// Assign a role to a user
	AssignRole(context.Context, *requests.AssignRoleRequest) (*emptypb.Empty, error)
	// Remove a role from a user
	RemoveRole(context.Context, *requests.RemoveRoleRequest) (*emptypb.Empty, error)
	// Create a new role with specified permissions
	CreateRole(context.Context, *requests.CreateRoleRequest) (*types.Role, error)
	// Update an existing role's permissions or metadata
	UpdateRole(context.Context, *requests.UpdateRoleRequest) (*types.Role, error)
	// Delete a role (must not be assigned to any users)
	DeleteRole(context.Context, *requests.DeleteRoleRequest) (*emptypb.Empty, error)
	// List roles with filtering and pagination support
	ListRoles(context.Context, *requests.ListRolesRequest) (*responses.ListRolesResponse, error)
}

// UnimplementedAuthorizationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorizationServiceServer struct{}

func (UnimplementedAuthorizationServiceServer) Authorize(context.Context, *requests.AuthorizeRequest) (*responses.AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetUserPermissions(context.Context, *requests.GetUserPermissionsRequest) (*responses.GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetUserRoles(context.Context, *requests.GetUserRolesRequest) (*responses.GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedAuthorizationServiceServer) AssignRole(context.Context, *requests.AssignRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) RemoveRole(context.Context, *requests.RemoveRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) CreateRole(context.Context, *requests.CreateRoleRequest) (*types.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdateRole(context.Context, *requests.UpdateRoleRequest) (*types.Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteRole(context.Context, *requests.DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorizationServiceServer) ListRoles(context.Context, *requests.ListRolesRequest) (*responses.ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAuthorizationServiceServer) testEmbeddedByValue() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.AuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Authorize(ctx, req.(*requests.AuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetUserPermissions(ctx, req.(*requests.GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetUserRoles(ctx, req.(*requests.GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_AssignRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).AssignRole(ctx, req.(*requests.AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.RemoveRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_RemoveRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).RemoveRole(ctx, req.(*requests.RemoveRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CreateRole(ctx, req.(*requests.CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdateRole(ctx, req.(*requests.UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteRole(ctx, req.(*requests.DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).ListRoles(ctx, req.(*requests.ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.auth.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthorizationService_Authorize_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _AuthorizationService_GetUserPermissions_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _AuthorizationService_GetUserRoles_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _AuthorizationService_AssignRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _AuthorizationService_RemoveRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _AuthorizationService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AuthorizationService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthorizationService_DeleteRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AuthorizationService_ListRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/auth/proto/services/authorization_service.proto",
}
