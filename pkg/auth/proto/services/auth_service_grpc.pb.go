// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/auth/proto/services/auth_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/auth/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/auth/proto/responses"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Authenticate_FullMethodName          = "/gcommon.v1.auth.AuthService/Authenticate"
	AuthService_ValidateToken_FullMethodName         = "/gcommon.v1.auth.AuthService/ValidateToken"
	AuthService_VerifyCredentials_FullMethodName     = "/gcommon.v1.auth.AuthService/VerifyCredentials"
	AuthService_RefreshToken_FullMethodName          = "/gcommon.v1.auth.AuthService/RefreshToken"
	AuthService_RevokeToken_FullMethodName           = "/gcommon.v1.auth.AuthService/RevokeToken"
	AuthService_GetUserInfo_FullMethodName           = "/gcommon.v1.auth.AuthService/GetUserInfo"
	AuthService_InitiatePasswordReset_FullMethodName = "/gcommon.v1.auth.AuthService/InitiatePasswordReset"
	AuthService_CompletePasswordReset_FullMethodName = "/gcommon.v1.auth.AuthService/CompletePasswordReset"
	AuthService_ChangePassword_FullMethodName        = "/gcommon.v1.auth.AuthService/ChangePassword"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// AuthService provides comprehensive authentication capabilities.
// Handles user authentication, token validation, password management,
// and credential verification for secure access control.
type AuthServiceClient interface {
	// Authenticate a user with various credential types (password, OAuth, etc.)
	Authenticate(ctx context.Context, in *requests.AuthenticateRequest, opts ...grpc.CallOption) (*responses.AuthenticateResponse, error)
	// Validate an access token and return token information
	ValidateToken(ctx context.Context, in *requests.ValidateTokenRequest, opts ...grpc.CallOption) (*responses.ValidateTokenResponse, error)
	// Verify user credentials without issuing tokens (for validation only)
	VerifyCredentials(ctx context.Context, in *requests.VerifyCredentialsRequest, opts ...grpc.CallOption) (*responses.VerifyCredentialsResponse, error)
	// Refresh an access token using a valid refresh token
	RefreshToken(ctx context.Context, in *requests.RefreshTokenRequest, opts ...grpc.CallOption) (*responses.RefreshTokenResponse, error)
	// Revoke a token (access or refresh) to invalidate it
	RevokeToken(ctx context.Context, in *requests.RevokeTokenRequest, opts ...grpc.CallOption) (*responses.RevokeTokenResponse, error)
	// Get user information from a valid token
	GetUserInfo(ctx context.Context, in *requests.GetUserInfoRequest, opts ...grpc.CallOption) (*responses.GetUserInfoResponse, error)
	// Initiate password reset flow (send reset email/token)
	InitiatePasswordReset(ctx context.Context, in *requests.InitiatePasswordResetRequest, opts ...grpc.CallOption) (*responses.InitiatePasswordResetResponse, error)
	// Complete password reset with validation token
	CompletePasswordReset(ctx context.Context, in *requests.CompletePasswordResetRequest, opts ...grpc.CallOption) (*responses.CompletePasswordResetResponse, error)
	// Change user password (requires current password authentication)
	ChangePassword(ctx context.Context, in *requests.ChangePasswordRequest, opts ...grpc.CallOption) (*responses.ChangePasswordResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Authenticate(ctx context.Context, in *requests.AuthenticateRequest, opts ...grpc.CallOption) (*responses.AuthenticateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.AuthenticateResponse)
	err := c.cc.Invoke(ctx, AuthService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateToken(ctx context.Context, in *requests.ValidateTokenRequest, opts ...grpc.CallOption) (*responses.ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ValidateTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyCredentials(ctx context.Context, in *requests.VerifyCredentialsRequest, opts ...grpc.CallOption) (*responses.VerifyCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.VerifyCredentialsResponse)
	err := c.cc.Invoke(ctx, AuthService_VerifyCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *requests.RefreshTokenRequest, opts ...grpc.CallOption) (*responses.RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.RefreshTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeToken(ctx context.Context, in *requests.RevokeTokenRequest, opts ...grpc.CallOption) (*responses.RevokeTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.RevokeTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_RevokeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUserInfo(ctx context.Context, in *requests.GetUserInfoRequest, opts ...grpc.CallOption) (*responses.GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetUserInfoResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) InitiatePasswordReset(ctx context.Context, in *requests.InitiatePasswordResetRequest, opts ...grpc.CallOption) (*responses.InitiatePasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.InitiatePasswordResetResponse)
	err := c.cc.Invoke(ctx, AuthService_InitiatePasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CompletePasswordReset(ctx context.Context, in *requests.CompletePasswordResetRequest, opts ...grpc.CallOption) (*responses.CompletePasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CompletePasswordResetResponse)
	err := c.cc.Invoke(ctx, AuthService_CompletePasswordReset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ChangePassword(ctx context.Context, in *requests.ChangePasswordRequest, opts ...grpc.CallOption) (*responses.ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ChangePasswordResponse)
	err := c.cc.Invoke(ctx, AuthService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility.
//
// *
// AuthService provides comprehensive authentication capabilities.
// Handles user authentication, token validation, password management,
// and credential verification for secure access control.
type AuthServiceServer interface {
	// Authenticate a user with various credential types (password, OAuth, etc.)
	Authenticate(context.Context, *requests.AuthenticateRequest) (*responses.AuthenticateResponse, error)
	// Validate an access token and return token information
	ValidateToken(context.Context, *requests.ValidateTokenRequest) (*responses.ValidateTokenResponse, error)
	// Verify user credentials without issuing tokens (for validation only)
	VerifyCredentials(context.Context, *requests.VerifyCredentialsRequest) (*responses.VerifyCredentialsResponse, error)
	// Refresh an access token using a valid refresh token
	RefreshToken(context.Context, *requests.RefreshTokenRequest) (*responses.RefreshTokenResponse, error)
	// Revoke a token (access or refresh) to invalidate it
	RevokeToken(context.Context, *requests.RevokeTokenRequest) (*responses.RevokeTokenResponse, error)
	// Get user information from a valid token
	GetUserInfo(context.Context, *requests.GetUserInfoRequest) (*responses.GetUserInfoResponse, error)
	// Initiate password reset flow (send reset email/token)
	InitiatePasswordReset(context.Context, *requests.InitiatePasswordResetRequest) (*responses.InitiatePasswordResetResponse, error)
	// Complete password reset with validation token
	CompletePasswordReset(context.Context, *requests.CompletePasswordResetRequest) (*responses.CompletePasswordResetResponse, error)
	// Change user password (requires current password authentication)
	ChangePassword(context.Context, *requests.ChangePasswordRequest) (*responses.ChangePasswordResponse, error)
}

// UnimplementedAuthServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Authenticate(context.Context, *requests.AuthenticateRequest) (*responses.AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServiceServer) ValidateToken(context.Context, *requests.ValidateTokenRequest) (*responses.ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthServiceServer) VerifyCredentials(context.Context, *requests.VerifyCredentialsRequest) (*responses.VerifyCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCredentials not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *requests.RefreshTokenRequest) (*responses.RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) RevokeToken(context.Context, *requests.RevokeTokenRequest) (*responses.RevokeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedAuthServiceServer) GetUserInfo(context.Context, *requests.GetUserInfoRequest) (*responses.GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAuthServiceServer) InitiatePasswordReset(context.Context, *requests.InitiatePasswordResetRequest) (*responses.InitiatePasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePasswordReset not implemented")
}
func (UnimplementedAuthServiceServer) CompletePasswordReset(context.Context, *requests.CompletePasswordResetRequest) (*responses.CompletePasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePasswordReset not implemented")
}
func (UnimplementedAuthServiceServer) ChangePassword(context.Context, *requests.ChangePasswordRequest) (*responses.ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServiceServer) testEmbeddedByValue() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Authenticate(ctx, req.(*requests.AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateToken(ctx, req.(*requests.ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.VerifyCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_VerifyCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyCredentials(ctx, req.(*requests.VerifyCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*requests.RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.RevokeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeToken(ctx, req.(*requests.RevokeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUserInfo(ctx, req.(*requests.GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_InitiatePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.InitiatePasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InitiatePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_InitiatePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InitiatePasswordReset(ctx, req.(*requests.InitiatePasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CompletePasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CompletePasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CompletePasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CompletePasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CompletePasswordReset(ctx, req.(*requests.CompletePasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ChangePassword(ctx, req.(*requests.ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthService_Authenticate_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _AuthService_ValidateToken_Handler,
		},
		{
			MethodName: "VerifyCredentials",
			Handler:    _AuthService_VerifyCredentials_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _AuthService_RevokeToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _AuthService_GetUserInfo_Handler,
		},
		{
			MethodName: "InitiatePasswordReset",
			Handler:    _AuthService_InitiatePasswordReset_Handler,
		},
		{
			MethodName: "CompletePasswordReset",
			Handler:    _AuthService_CompletePasswordReset_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AuthService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/auth/proto/services/auth_service.proto",
}
