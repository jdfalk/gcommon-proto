// file: pkg/auth/proto/services/authorization_service.proto
edition = "2023";

package gcommon.v1.auth;

import "google/protobuf/go_features.proto";
import "pkg/auth/proto/requests/authorize_request.proto";
import "pkg/auth/proto/responses/authorize_response.proto";
import "pkg/auth/proto/requests/get_user_permissions_request.proto";
import "pkg/auth/proto/responses/get_user_permissions_response.proto";
import "pkg/auth/proto/requests/get_user_roles_request.proto";
import "pkg/auth/proto/responses/get_user_roles_response.proto";

option go_package = "../../../../pb;authpb";
option features.(pb.go).api_level = API_HYBRID;

/**
 * AuthorizationService provides authorization and permission management.
 * Handles role-based access control (RBAC), permission checking,
 * and role lifecycle management for fine-grained access control.
 */
service AuthorizationService {
  // Check if a user is authorized for a specific action on a resource
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);

  // Get all permissions granted to a user (direct and via roles)
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse);

  // Get all roles assigned to a user
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
}
