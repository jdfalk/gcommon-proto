// file: pkg/auth/proto/services/auth_service.proto
edition = "2023";

package gcommon.v1.auth;

import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
// TODO: Add imports when message types are created
// import "pkg/auth/proto/authenticate_response.proto";
// import "pkg/auth/proto/validate_token_response.proto";
// import "pkg/auth/proto/verify_credentials_response.proto";
// import "pkg/auth/proto/refresh_token_response.proto";
// import "pkg/auth/proto/revoke_token_response.proto";
// import "pkg/auth/proto/get_user_info_response.proto";
// import "pkg/auth/proto/initiate_password_reset_response.proto";
// import "pkg/auth/proto/complete_password_reset_response.proto";
// import "pkg/auth/proto/change_password_response.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/auth/proto";

/**
 * AuthService provides comprehensive authentication capabilities.
 * Handles user authentication, token validation, password management,
 * and credential verification for secure access control.
 */
service AuthService {
  // TODO: All methods commented out until message types are created
  /*
     // Authenticate a user with various credential types (password, OAuth, etc.)
     rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);

     // Validate an access token and return token information
     rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);

     // Verify user credentials without issuing tokens (for validation only)
     rpc VerifyCredentials(VerifyCredentialsRequest) returns (VerifyCredentialsResponse);

     // Refresh an access token using a valid refresh token
     rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

     // Revoke a token (access or refresh) to invalidate it
     rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse);

     // Get user information from a valid token
     rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);

     // Initiate password reset flow (send reset email/token)
     rpc InitiatePasswordReset(InitiatePasswordResetRequest) returns (InitiatePasswordResetResponse);

     // Complete password reset with validation token
     rpc CompletePasswordReset(CompletePasswordResetRequest) returns (CompletePasswordResetResponse);

     // Change user password (requires current password authentication)
     rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  */
}
