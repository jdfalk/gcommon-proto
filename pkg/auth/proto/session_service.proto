// file: pkg/auth/proto/services/session_service.proto
edition = "2023";

package gcommon.v1.auth;

import "pkg/auth/proto/session.proto";
import "pkg/auth/proto/create_session_request.proto";
import "pkg/auth/proto/create_session_response.proto";
import "pkg/auth/proto/delete_session_request.proto";
import "pkg/auth/proto/delete_session_response.proto";
import "pkg/auth/proto/get_session_request.proto";
import "pkg/auth/proto/get_session_response.proto";
import "pkg/auth/proto/list_sessions_request.proto";
import "pkg/auth/proto/list_sessions_response.proto";
import "pkg/auth/proto/list_user_sessions_request.proto";
import "pkg/auth/proto/list_user_sessions_response.proto";
import "pkg/auth/proto/terminate_session_request.proto";
import "pkg/auth/proto/terminate_session_response.proto";
import "pkg/auth/proto/update_session_request.proto";
import "pkg/auth/proto/update_session_response.proto";
import "pkg/auth/proto/validate_session_request.proto";
import "pkg/auth/proto/validate_session_response.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/auth/proto";
/**
 * SessionService manages user sessions and session lifecycle.
 * Provides session creation, validation, tracking, and termination
 * for stateful authentication and user activity monitoring.
 */
service SessionService {
  // Create a new session for an authenticated user
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);

  // Get detailed information about a specific session
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

  // Update session information (e.g., refresh activity timestamp)
  rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse);

  // Validate a session and return session information
  rpc ValidateSession(ValidateSessionRequest) returns (ValidateSessionResponse);

  // Terminate a session (logout)
  rpc TerminateSession(TerminateSessionRequest) returns (TerminateSessionResponse);

  // Delete a specific session
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);

  // List all active sessions for a user
  rpc ListUserSessions(ListUserSessionsRequest) returns (ListUserSessionsResponse);

  // List all sessions (admin only)
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
}
