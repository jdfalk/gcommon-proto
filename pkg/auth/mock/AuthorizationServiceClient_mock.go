// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockAuthorizationServiceClient creates a new instance of MockAuthorizationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationServiceClient {
	mock := &MockAuthorizationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorizationServiceClient is an autogenerated mock type for the AuthorizationServiceClient type
type MockAuthorizationServiceClient struct {
	mock.Mock
}

type MockAuthorizationServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationServiceClient) EXPECT() *MockAuthorizationServiceClient_Expecter {
	return &MockAuthorizationServiceClient_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockAuthorizationServiceClient
func (_mock *MockAuthorizationServiceClient) Authorize(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption) (*proto.AuthorizeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *proto.AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) (*proto.AuthorizeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) *proto.AuthorizeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceClient_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthorizationServiceClient_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.AuthorizeRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthorizationServiceClient_Expecter) Authorize(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthorizationServiceClient_Authorize_Call {
	return &MockAuthorizationServiceClient_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthorizationServiceClient_Authorize_Call) Run(run func(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption)) *MockAuthorizationServiceClient_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AuthorizeRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AuthorizeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceClient_Authorize_Call) Return(authorizeResponse *proto.AuthorizeResponse, err error) *MockAuthorizationServiceClient_Authorize_Call {
	_c.Call.Return(authorizeResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceClient_Authorize_Call) RunAndReturn(run func(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption) (*proto.AuthorizeResponse, error)) *MockAuthorizationServiceClient_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPermissions provides a mock function for the type MockAuthorizationServiceClient
func (_mock *MockAuthorizationServiceClient) GetUserPermissions(ctx context.Context, in *proto.GetUserPermissionsRequest, opts ...grpc.CallOption) (*proto.GetUserPermissionsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 *proto.GetUserPermissionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserPermissionsRequest, ...grpc.CallOption) (*proto.GetUserPermissionsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserPermissionsRequest, ...grpc.CallOption) *proto.GetUserPermissionsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserPermissionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserPermissionsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceClient_GetUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPermissions'
type MockAuthorizationServiceClient_GetUserPermissions_Call struct {
	*mock.Call
}

// GetUserPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetUserPermissionsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthorizationServiceClient_Expecter) GetUserPermissions(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthorizationServiceClient_GetUserPermissions_Call {
	return &MockAuthorizationServiceClient_GetUserPermissions_Call{Call: _e.mock.On("GetUserPermissions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthorizationServiceClient_GetUserPermissions_Call) Run(run func(ctx context.Context, in *proto.GetUserPermissionsRequest, opts ...grpc.CallOption)) *MockAuthorizationServiceClient_GetUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserPermissionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserPermissionsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceClient_GetUserPermissions_Call) Return(getUserPermissionsResponse *proto.GetUserPermissionsResponse, err error) *MockAuthorizationServiceClient_GetUserPermissions_Call {
	_c.Call.Return(getUserPermissionsResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceClient_GetUserPermissions_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetUserPermissionsRequest, opts ...grpc.CallOption) (*proto.GetUserPermissionsResponse, error)) *MockAuthorizationServiceClient_GetUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function for the type MockAuthorizationServiceClient
func (_mock *MockAuthorizationServiceClient) GetUserRoles(ctx context.Context, in *proto.GetUserRolesRequest, opts ...grpc.CallOption) (*proto.GetUserRolesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 *proto.GetUserRolesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRolesRequest, ...grpc.CallOption) (*proto.GetUserRolesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRolesRequest, ...grpc.CallOption) *proto.GetUserRolesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserRolesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserRolesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceClient_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockAuthorizationServiceClient_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetUserRolesRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthorizationServiceClient_Expecter) GetUserRoles(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthorizationServiceClient_GetUserRoles_Call {
	return &MockAuthorizationServiceClient_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthorizationServiceClient_GetUserRoles_Call) Run(run func(ctx context.Context, in *proto.GetUserRolesRequest, opts ...grpc.CallOption)) *MockAuthorizationServiceClient_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserRolesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserRolesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceClient_GetUserRoles_Call) Return(getUserRolesResponse *proto.GetUserRolesResponse, err error) *MockAuthorizationServiceClient_GetUserRoles_Call {
	_c.Call.Return(getUserRolesResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceClient_GetUserRoles_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetUserRolesRequest, opts ...grpc.CallOption) (*proto.GetUserRolesResponse, error)) *MockAuthorizationServiceClient_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}
