// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockAuthAdminServiceClient creates a new instance of MockAuthAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthAdminServiceClient {
	mock := &MockAuthAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthAdminServiceClient is an autogenerated mock type for the AuthAdminServiceClient type
type MockAuthAdminServiceClient struct {
	mock.Mock
}

type MockAuthAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthAdminServiceClient) EXPECT() *MockAuthAdminServiceClient_Expecter {
	return &MockAuthAdminServiceClient_Expecter{mock: &_m.Mock}
}

// AssignRole provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) AssignRole(ctx context.Context, in *proto.AssignRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AssignRoleRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AssignRoleRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AssignRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type MockAuthAdminServiceClient_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.AssignRoleRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) AssignRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_AssignRole_Call {
	return &MockAuthAdminServiceClient_AssignRole_Call{Call: _e.mock.On("AssignRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_AssignRole_Call) Run(run func(ctx context.Context, in *proto.AssignRoleRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AssignRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AssignRoleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_AssignRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceClient_AssignRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_AssignRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.AssignRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockAuthAdminServiceClient_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) CreateRole(ctx context.Context, in *proto.CreateRoleRequest, opts ...grpc.CallOption) (*proto.CreateRoleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *proto.CreateRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) (*proto.CreateRoleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) *proto.CreateRoleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockAuthAdminServiceClient_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateRoleRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) CreateRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_CreateRole_Call {
	return &MockAuthAdminServiceClient_CreateRole_Call{Call: _e.mock.On("CreateRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_CreateRole_Call) Run(run func(ctx context.Context, in *proto.CreateRoleRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateRoleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_CreateRole_Call) Return(createRoleResponse *proto.CreateRoleResponse, err error) *MockAuthAdminServiceClient_CreateRole_Call {
	_c.Call.Return(createRoleResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_CreateRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateRoleRequest, opts ...grpc.CallOption) (*proto.CreateRoleResponse, error)) *MockAuthAdminServiceClient_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) CreateUser(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *proto.CreateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) (*proto.CreateUserResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) *proto.CreateUserResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthAdminServiceClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_CreateUser_Call {
	return &MockAuthAdminServiceClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_CreateUser_Call) Run(run func(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateUserRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_CreateUser_Call) Return(createUserResponse *proto.CreateUserResponse, err error) *MockAuthAdminServiceClient_CreateUser_Call {
	_c.Call.Return(createUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_CreateUser_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserResponse, error)) *MockAuthAdminServiceClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) DeleteRole(ctx context.Context, in *proto.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRoleRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRoleRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockAuthAdminServiceClient_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteRoleRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) DeleteRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_DeleteRole_Call {
	return &MockAuthAdminServiceClient_DeleteRole_Call{Call: _e.mock.On("DeleteRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_DeleteRole_Call) Run(run func(ctx context.Context, in *proto.DeleteRoleRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteRoleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_DeleteRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceClient_DeleteRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_DeleteRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockAuthAdminServiceClient_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) DeleteUser(ctx context.Context, in *proto.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteUserRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteUserRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockAuthAdminServiceClient_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteUserRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) DeleteUser(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_DeleteUser_Call {
	return &MockAuthAdminServiceClient_DeleteUser_Call{Call: _e.mock.On("DeleteUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_DeleteUser_Call) Run(run func(ctx context.Context, in *proto.DeleteUserRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteUserRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_DeleteUser_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceClient_DeleteUser_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockAuthAdminServiceClient_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStats provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) GetSystemStats(ctx context.Context, in *proto.GetSystemStatsRequest, opts ...grpc.CallOption) (*proto.GetSystemStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSystemStats")
	}

	var r0 *proto.GetSystemStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSystemStatsRequest, ...grpc.CallOption) (*proto.GetSystemStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSystemStatsRequest, ...grpc.CallOption) *proto.GetSystemStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSystemStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSystemStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_GetSystemStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStats'
type MockAuthAdminServiceClient_GetSystemStats_Call struct {
	*mock.Call
}

// GetSystemStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetSystemStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) GetSystemStats(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_GetSystemStats_Call {
	return &MockAuthAdminServiceClient_GetSystemStats_Call{Call: _e.mock.On("GetSystemStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_GetSystemStats_Call) Run(run func(ctx context.Context, in *proto.GetSystemStatsRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_GetSystemStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSystemStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSystemStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_GetSystemStats_Call) Return(getSystemStatsResponse *proto.GetSystemStatsResponse, err error) *MockAuthAdminServiceClient_GetSystemStats_Call {
	_c.Call.Return(getSystemStatsResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_GetSystemStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetSystemStatsRequest, opts ...grpc.CallOption) (*proto.GetSystemStatsResponse, error)) *MockAuthAdminServiceClient_GetSystemStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) GetUser(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption) (*proto.GetUserResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *proto.GetUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) (*proto.GetUserResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) *proto.GetUserResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthAdminServiceClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetUserRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) GetUser(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_GetUser_Call {
	return &MockAuthAdminServiceClient_GetUser_Call{Call: _e.mock.On("GetUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_GetUser_Call) Run(run func(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_GetUser_Call) Return(getUserResponse *proto.GetUserResponse, err error) *MockAuthAdminServiceClient_GetUser_Call {
	_c.Call.Return(getUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_GetUser_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption) (*proto.GetUserResponse, error)) *MockAuthAdminServiceClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateUserSessions provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) InvalidateUserSessions(ctx context.Context, in *proto.InvalidateUserSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserSessions")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InvalidateUserSessionsRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InvalidateUserSessionsRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.InvalidateUserSessionsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_InvalidateUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateUserSessions'
type MockAuthAdminServiceClient_InvalidateUserSessions_Call struct {
	*mock.Call
}

// InvalidateUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.InvalidateUserSessionsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) InvalidateUserSessions(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_InvalidateUserSessions_Call {
	return &MockAuthAdminServiceClient_InvalidateUserSessions_Call{Call: _e.mock.On("InvalidateUserSessions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_InvalidateUserSessions_Call) Run(run func(ctx context.Context, in *proto.InvalidateUserSessionsRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_InvalidateUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.InvalidateUserSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.InvalidateUserSessionsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_InvalidateUserSessions_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceClient_InvalidateUserSessions_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_InvalidateUserSessions_Call) RunAndReturn(run func(ctx context.Context, in *proto.InvalidateUserSessionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockAuthAdminServiceClient_InvalidateUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) ListRoles(ctx context.Context, in *proto.ListRolesRequest, opts ...grpc.CallOption) (*proto.ListRolesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *proto.ListRolesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListRolesRequest, ...grpc.CallOption) (*proto.ListRolesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListRolesRequest, ...grpc.CallOption) *proto.ListRolesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListRolesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListRolesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockAuthAdminServiceClient_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListRolesRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) ListRoles(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_ListRoles_Call {
	return &MockAuthAdminServiceClient_ListRoles_Call{Call: _e.mock.On("ListRoles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_ListRoles_Call) Run(run func(ctx context.Context, in *proto.ListRolesRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListRolesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListRolesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_ListRoles_Call) Return(listRolesResponse *proto.ListRolesResponse, err error) *MockAuthAdminServiceClient_ListRoles_Call {
	_c.Call.Return(listRolesResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_ListRoles_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListRolesRequest, opts ...grpc.CallOption) (*proto.ListRolesResponse, error)) *MockAuthAdminServiceClient_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) ListUsers(ctx context.Context, in *proto.ListUsersRequest, opts ...grpc.CallOption) (*proto.ListUsersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *proto.ListUsersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUsersRequest, ...grpc.CallOption) (*proto.ListUsersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUsersRequest, ...grpc.CallOption) *proto.ListUsersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListUsersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListUsersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockAuthAdminServiceClient_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListUsersRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) ListUsers(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_ListUsers_Call {
	return &MockAuthAdminServiceClient_ListUsers_Call{Call: _e.mock.On("ListUsers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_ListUsers_Call) Run(run func(ctx context.Context, in *proto.ListUsersRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListUsersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListUsersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_ListUsers_Call) Return(listUsersResponse *proto.ListUsersResponse, err error) *MockAuthAdminServiceClient_ListUsers_Call {
	_c.Call.Return(listUsersResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_ListUsers_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListUsersRequest, opts ...grpc.CallOption) (*proto.ListUsersResponse, error)) *MockAuthAdminServiceClient_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRole provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) RemoveRole(ctx context.Context, in *proto.RemoveRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveRoleRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveRoleRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RemoveRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_RemoveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRole'
type MockAuthAdminServiceClient_RemoveRole_Call struct {
	*mock.Call
}

// RemoveRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RemoveRoleRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) RemoveRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_RemoveRole_Call {
	return &MockAuthAdminServiceClient_RemoveRole_Call{Call: _e.mock.On("RemoveRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_RemoveRole_Call) Run(run func(ctx context.Context, in *proto.RemoveRoleRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_RemoveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RemoveRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RemoveRoleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_RemoveRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceClient_RemoveRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_RemoveRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.RemoveRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockAuthAdminServiceClient_RemoveRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) UpdateRole(ctx context.Context, in *proto.UpdateRoleRequest, opts ...grpc.CallOption) (*proto.UpdateRoleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 *proto.UpdateRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRoleRequest, ...grpc.CallOption) (*proto.UpdateRoleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRoleRequest, ...grpc.CallOption) *proto.UpdateRoleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockAuthAdminServiceClient_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateRoleRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) UpdateRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_UpdateRole_Call {
	return &MockAuthAdminServiceClient_UpdateRole_Call{Call: _e.mock.On("UpdateRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_UpdateRole_Call) Run(run func(ctx context.Context, in *proto.UpdateRoleRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateRoleRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_UpdateRole_Call) Return(updateRoleResponse *proto.UpdateRoleResponse, err error) *MockAuthAdminServiceClient_UpdateRole_Call {
	_c.Call.Return(updateRoleResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_UpdateRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateRoleRequest, opts ...grpc.CallOption) (*proto.UpdateRoleResponse, error)) *MockAuthAdminServiceClient_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockAuthAdminServiceClient
func (_mock *MockAuthAdminServiceClient) UpdateUser(ctx context.Context, in *proto.UpdateUserRequest, opts ...grpc.CallOption) (*proto.UpdateUserResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *proto.UpdateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateUserRequest, ...grpc.CallOption) (*proto.UpdateUserResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateUserRequest, ...grpc.CallOption) *proto.UpdateUserResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAuthAdminServiceClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateUserRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthAdminServiceClient_Expecter) UpdateUser(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthAdminServiceClient_UpdateUser_Call {
	return &MockAuthAdminServiceClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthAdminServiceClient_UpdateUser_Call) Run(run func(ctx context.Context, in *proto.UpdateUserRequest, opts ...grpc.CallOption)) *MockAuthAdminServiceClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateUserRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceClient_UpdateUser_Call) Return(updateUserResponse *proto.UpdateUserResponse, err error) *MockAuthAdminServiceClient_UpdateUser_Call {
	_c.Call.Return(updateUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceClient_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateUserRequest, opts ...grpc.CallOption) (*proto.UpdateUserResponse, error)) *MockAuthAdminServiceClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
