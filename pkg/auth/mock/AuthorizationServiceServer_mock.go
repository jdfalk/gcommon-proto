// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthorizationServiceServer creates a new instance of MockAuthorizationServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizationServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizationServiceServer {
	mock := &MockAuthorizationServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorizationServiceServer is an autogenerated mock type for the AuthorizationServiceServer type
type MockAuthorizationServiceServer struct {
	mock.Mock
}

type MockAuthorizationServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizationServiceServer) EXPECT() *MockAuthorizationServiceServer_Expecter {
	return &MockAuthorizationServiceServer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockAuthorizationServiceServer
func (_mock *MockAuthorizationServiceServer) Authorize(context1 context.Context, authorizeRequest *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error) {
	ret := _mock.Called(context1, authorizeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *proto.AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error)); ok {
		return returnFunc(context1, authorizeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest) *proto.AuthorizeResponse); ok {
		r0 = returnFunc(context1, authorizeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthorizeRequest) error); ok {
		r1 = returnFunc(context1, authorizeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceServer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthorizationServiceServer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - context1 context.Context
//   - authorizeRequest *proto.AuthorizeRequest
func (_e *MockAuthorizationServiceServer_Expecter) Authorize(context1 interface{}, authorizeRequest interface{}) *MockAuthorizationServiceServer_Authorize_Call {
	return &MockAuthorizationServiceServer_Authorize_Call{Call: _e.mock.On("Authorize", context1, authorizeRequest)}
}

func (_c *MockAuthorizationServiceServer_Authorize_Call) Run(run func(context1 context.Context, authorizeRequest *proto.AuthorizeRequest)) *MockAuthorizationServiceServer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AuthorizeRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AuthorizeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceServer_Authorize_Call) Return(authorizeResponse *proto.AuthorizeResponse, err error) *MockAuthorizationServiceServer_Authorize_Call {
	_c.Call.Return(authorizeResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceServer_Authorize_Call) RunAndReturn(run func(context1 context.Context, authorizeRequest *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error)) *MockAuthorizationServiceServer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPermissions provides a mock function for the type MockAuthorizationServiceServer
func (_mock *MockAuthorizationServiceServer) GetUserPermissions(context1 context.Context, getUserPermissionsRequest *proto.GetUserPermissionsRequest) (*proto.GetUserPermissionsResponse, error) {
	ret := _mock.Called(context1, getUserPermissionsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 *proto.GetUserPermissionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserPermissionsRequest) (*proto.GetUserPermissionsResponse, error)); ok {
		return returnFunc(context1, getUserPermissionsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserPermissionsRequest) *proto.GetUserPermissionsResponse); ok {
		r0 = returnFunc(context1, getUserPermissionsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserPermissionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserPermissionsRequest) error); ok {
		r1 = returnFunc(context1, getUserPermissionsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceServer_GetUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPermissions'
type MockAuthorizationServiceServer_GetUserPermissions_Call struct {
	*mock.Call
}

// GetUserPermissions is a helper method to define mock.On call
//   - context1 context.Context
//   - getUserPermissionsRequest *proto.GetUserPermissionsRequest
func (_e *MockAuthorizationServiceServer_Expecter) GetUserPermissions(context1 interface{}, getUserPermissionsRequest interface{}) *MockAuthorizationServiceServer_GetUserPermissions_Call {
	return &MockAuthorizationServiceServer_GetUserPermissions_Call{Call: _e.mock.On("GetUserPermissions", context1, getUserPermissionsRequest)}
}

func (_c *MockAuthorizationServiceServer_GetUserPermissions_Call) Run(run func(context1 context.Context, getUserPermissionsRequest *proto.GetUserPermissionsRequest)) *MockAuthorizationServiceServer_GetUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserPermissionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserPermissionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceServer_GetUserPermissions_Call) Return(getUserPermissionsResponse *proto.GetUserPermissionsResponse, err error) *MockAuthorizationServiceServer_GetUserPermissions_Call {
	_c.Call.Return(getUserPermissionsResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceServer_GetUserPermissions_Call) RunAndReturn(run func(context1 context.Context, getUserPermissionsRequest *proto.GetUserPermissionsRequest) (*proto.GetUserPermissionsResponse, error)) *MockAuthorizationServiceServer_GetUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRoles provides a mock function for the type MockAuthorizationServiceServer
func (_mock *MockAuthorizationServiceServer) GetUserRoles(context1 context.Context, getUserRolesRequest *proto.GetUserRolesRequest) (*proto.GetUserRolesResponse, error) {
	ret := _mock.Called(context1, getUserRolesRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 *proto.GetUserRolesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRolesRequest) (*proto.GetUserRolesResponse, error)); ok {
		return returnFunc(context1, getUserRolesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRolesRequest) *proto.GetUserRolesResponse); ok {
		r0 = returnFunc(context1, getUserRolesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserRolesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserRolesRequest) error); ok {
		r1 = returnFunc(context1, getUserRolesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthorizationServiceServer_GetUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRoles'
type MockAuthorizationServiceServer_GetUserRoles_Call struct {
	*mock.Call
}

// GetUserRoles is a helper method to define mock.On call
//   - context1 context.Context
//   - getUserRolesRequest *proto.GetUserRolesRequest
func (_e *MockAuthorizationServiceServer_Expecter) GetUserRoles(context1 interface{}, getUserRolesRequest interface{}) *MockAuthorizationServiceServer_GetUserRoles_Call {
	return &MockAuthorizationServiceServer_GetUserRoles_Call{Call: _e.mock.On("GetUserRoles", context1, getUserRolesRequest)}
}

func (_c *MockAuthorizationServiceServer_GetUserRoles_Call) Run(run func(context1 context.Context, getUserRolesRequest *proto.GetUserRolesRequest)) *MockAuthorizationServiceServer_GetUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserRolesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserRolesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthorizationServiceServer_GetUserRoles_Call) Return(getUserRolesResponse *proto.GetUserRolesResponse, err error) *MockAuthorizationServiceServer_GetUserRoles_Call {
	_c.Call.Return(getUserRolesResponse, err)
	return _c
}

func (_c *MockAuthorizationServiceServer_GetUserRoles_Call) RunAndReturn(run func(context1 context.Context, getUserRolesRequest *proto.GetUserRolesRequest) (*proto.GetUserRolesResponse, error)) *MockAuthorizationServiceServer_GetUserRoles_Call {
	_c.Call.Return(run)
	return _c
}
