// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockAuthServiceClient creates a new instance of MockAuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type MockAuthServiceClient struct {
	mock.Mock
}

type MockAuthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceClient) EXPECT() *MockAuthServiceClient_Expecter {
	return &MockAuthServiceClient_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) Authenticate(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption) (*proto.AuthenticateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *proto.AuthenticateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) (*proto.AuthenticateResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) *proto.AuthenticateResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthenticateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthServiceClient_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) Authenticate(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_Authenticate_Call {
	return &MockAuthServiceClient_Authenticate_Call{Call: _e.mock.On("Authenticate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_Authenticate_Call) Run(run func(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.AuthenticateRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_Authenticate_Call) Return(authenticateResponse *proto.AuthenticateResponse, err error) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Return(authenticateResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_Authenticate_Call) RunAndReturn(run func(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption) (*proto.AuthenticateResponse, error)) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Authorize provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) Authorize(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption) (*proto.AuthorizeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *proto.AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) (*proto.AuthorizeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) *proto.AuthorizeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthorizeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthServiceClient_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) Authorize(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_Authorize_Call {
	return &MockAuthServiceClient_Authorize_Call{Call: _e.mock.On("Authorize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_Authorize_Call) Run(run func(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.AuthorizeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_Authorize_Call) Return(authorizeResponse *proto.AuthorizeResponse, err error) *MockAuthServiceClient_Authorize_Call {
	_c.Call.Return(authorizeResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_Authorize_Call) RunAndReturn(run func(ctx context.Context, in *proto.AuthorizeRequest, opts ...grpc.CallOption) (*proto.AuthorizeResponse, error)) *MockAuthServiceClient_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) GenerateToken(ctx context.Context, in *proto.GenerateTokenRequest, opts ...grpc.CallOption) (*proto.GenerateTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *proto.GenerateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GenerateTokenRequest, ...grpc.CallOption) (*proto.GenerateTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GenerateTokenRequest, ...grpc.CallOption) *proto.GenerateTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GenerateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GenerateTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthServiceClient_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) GenerateToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_GenerateToken_Call {
	return &MockAuthServiceClient_GenerateToken_Call{Call: _e.mock.On("GenerateToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_GenerateToken_Call) Run(run func(ctx context.Context, in *proto.GenerateTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GenerateTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_GenerateToken_Call) Return(generateTokenResponse *proto.GenerateTokenResponse, err error) *MockAuthServiceClient_GenerateToken_Call {
	_c.Call.Return(generateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_GenerateToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.GenerateTokenRequest, opts ...grpc.CallOption) (*proto.GenerateTokenResponse, error)) *MockAuthServiceClient_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// HasRole provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) HasRole(ctx context.Context, in *proto.HasRoleRequest, opts ...grpc.CallOption) (*proto.HasRoleResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HasRole")
	}

	var r0 *proto.HasRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRoleRequest, ...grpc.CallOption) (*proto.HasRoleResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRoleRequest, ...grpc.CallOption) *proto.HasRoleResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HasRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HasRoleRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_HasRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRole'
type MockAuthServiceClient_HasRole_Call struct {
	*mock.Call
}

// HasRole is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) HasRole(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_HasRole_Call {
	return &MockAuthServiceClient_HasRole_Call{Call: _e.mock.On("HasRole",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_HasRole_Call) Run(run func(ctx context.Context, in *proto.HasRoleRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_HasRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.HasRoleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_HasRole_Call) Return(hasRoleResponse *proto.HasRoleResponse, err error) *MockAuthServiceClient_HasRole_Call {
	_c.Call.Return(hasRoleResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_HasRole_Call) RunAndReturn(run func(ctx context.Context, in *proto.HasRoleRequest, opts ...grpc.CallOption) (*proto.HasRoleResponse, error)) *MockAuthServiceClient_HasRole_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) RefreshToken(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption) (*proto.RefreshTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *proto.RefreshTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) (*proto.RefreshTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) *proto.RefreshTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RefreshTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthServiceClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) RefreshToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_RefreshToken_Call {
	return &MockAuthServiceClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_RefreshToken_Call) Run(run func(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.RefreshTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_RefreshToken_Call) Return(refreshTokenResponse *proto.RefreshTokenResponse, err error) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Return(refreshTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption) (*proto.RefreshTokenResponse, error)) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) ValidateToken(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption) (*proto.ValidateTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *proto.ValidateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) (*proto.ValidateTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) *proto.ValidateTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthServiceClient_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockAuthServiceClient_Expecter) ValidateToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_ValidateToken_Call {
	return &MockAuthServiceClient_ValidateToken_Call{Call: _e.mock.On("ValidateToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_ValidateToken_Call) Run(run func(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ValidateTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockAuthServiceClient_ValidateToken_Call) Return(validateTokenResponse *proto.ValidateTokenResponse, err error) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Return(validateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_ValidateToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption) (*proto.ValidateTokenResponse, error)) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
