// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockAuthServiceClient creates a new instance of MockAuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type MockAuthServiceClient struct {
	mock.Mock
}

type MockAuthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceClient) EXPECT() *MockAuthServiceClient_Expecter {
	return &MockAuthServiceClient_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) Authenticate(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption) (*proto.AuthenticateResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *proto.AuthenticateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) (*proto.AuthenticateResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) *proto.AuthenticateResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthenticateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthenticateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthServiceClient_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.AuthenticateRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) Authenticate(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_Authenticate_Call {
	return &MockAuthServiceClient_Authenticate_Call{Call: _e.mock.On("Authenticate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_Authenticate_Call) Run(run func(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AuthenticateRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AuthenticateRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_Authenticate_Call) Return(authenticateResponse *proto.AuthenticateResponse, err error) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Return(authenticateResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_Authenticate_Call) RunAndReturn(run func(ctx context.Context, in *proto.AuthenticateRequest, opts ...grpc.CallOption) (*proto.AuthenticateResponse, error)) *MockAuthServiceClient_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) ChangePassword(ctx context.Context, in *proto.ChangePasswordRequest, opts ...grpc.CallOption) (*proto.ChangePasswordResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *proto.ChangePasswordResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ChangePasswordRequest, ...grpc.CallOption) (*proto.ChangePasswordResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ChangePasswordRequest, ...grpc.CallOption) *proto.ChangePasswordResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ChangePasswordResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ChangePasswordRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockAuthServiceClient_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ChangePasswordRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) ChangePassword(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_ChangePassword_Call {
	return &MockAuthServiceClient_ChangePassword_Call{Call: _e.mock.On("ChangePassword",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_ChangePassword_Call) Run(run func(ctx context.Context, in *proto.ChangePasswordRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ChangePasswordRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ChangePasswordRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_ChangePassword_Call) Return(changePasswordResponse *proto.ChangePasswordResponse, err error) *MockAuthServiceClient_ChangePassword_Call {
	_c.Call.Return(changePasswordResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_ChangePassword_Call) RunAndReturn(run func(ctx context.Context, in *proto.ChangePasswordRequest, opts ...grpc.CallOption) (*proto.ChangePasswordResponse, error)) *MockAuthServiceClient_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CompletePasswordReset provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) CompletePasswordReset(ctx context.Context, in *proto.CompletePasswordResetRequest, opts ...grpc.CallOption) (*proto.CompletePasswordResetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CompletePasswordReset")
	}

	var r0 *proto.CompletePasswordResetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CompletePasswordResetRequest, ...grpc.CallOption) (*proto.CompletePasswordResetResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CompletePasswordResetRequest, ...grpc.CallOption) *proto.CompletePasswordResetResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CompletePasswordResetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CompletePasswordResetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_CompletePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompletePasswordReset'
type MockAuthServiceClient_CompletePasswordReset_Call struct {
	*mock.Call
}

// CompletePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CompletePasswordResetRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) CompletePasswordReset(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_CompletePasswordReset_Call {
	return &MockAuthServiceClient_CompletePasswordReset_Call{Call: _e.mock.On("CompletePasswordReset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_CompletePasswordReset_Call) Run(run func(ctx context.Context, in *proto.CompletePasswordResetRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_CompletePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CompletePasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CompletePasswordResetRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_CompletePasswordReset_Call) Return(completePasswordResetResponse *proto.CompletePasswordResetResponse, err error) *MockAuthServiceClient_CompletePasswordReset_Call {
	_c.Call.Return(completePasswordResetResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_CompletePasswordReset_Call) RunAndReturn(run func(ctx context.Context, in *proto.CompletePasswordResetRequest, opts ...grpc.CallOption) (*proto.CompletePasswordResetResponse, error)) *MockAuthServiceClient_CompletePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) GetUserInfo(ctx context.Context, in *proto.GetUserInfoRequest, opts ...grpc.CallOption) (*proto.GetUserInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *proto.GetUserInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserInfoRequest, ...grpc.CallOption) (*proto.GetUserInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserInfoRequest, ...grpc.CallOption) *proto.GetUserInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockAuthServiceClient_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetUserInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) GetUserInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_GetUserInfo_Call {
	return &MockAuthServiceClient_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_GetUserInfo_Call) Run(run func(ctx context.Context, in *proto.GetUserInfoRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserInfoRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_GetUserInfo_Call) Return(getUserInfoResponse *proto.GetUserInfoResponse, err error) *MockAuthServiceClient_GetUserInfo_Call {
	_c.Call.Return(getUserInfoResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_GetUserInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetUserInfoRequest, opts ...grpc.CallOption) (*proto.GetUserInfoResponse, error)) *MockAuthServiceClient_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePasswordReset provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) InitiatePasswordReset(ctx context.Context, in *proto.InitiatePasswordResetRequest, opts ...grpc.CallOption) (*proto.InitiatePasswordResetResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for InitiatePasswordReset")
	}

	var r0 *proto.InitiatePasswordResetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitiatePasswordResetRequest, ...grpc.CallOption) (*proto.InitiatePasswordResetResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitiatePasswordResetRequest, ...grpc.CallOption) *proto.InitiatePasswordResetResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.InitiatePasswordResetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.InitiatePasswordResetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_InitiatePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePasswordReset'
type MockAuthServiceClient_InitiatePasswordReset_Call struct {
	*mock.Call
}

// InitiatePasswordReset is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.InitiatePasswordResetRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) InitiatePasswordReset(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_InitiatePasswordReset_Call {
	return &MockAuthServiceClient_InitiatePasswordReset_Call{Call: _e.mock.On("InitiatePasswordReset",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_InitiatePasswordReset_Call) Run(run func(ctx context.Context, in *proto.InitiatePasswordResetRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_InitiatePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.InitiatePasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.InitiatePasswordResetRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_InitiatePasswordReset_Call) Return(initiatePasswordResetResponse *proto.InitiatePasswordResetResponse, err error) *MockAuthServiceClient_InitiatePasswordReset_Call {
	_c.Call.Return(initiatePasswordResetResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_InitiatePasswordReset_Call) RunAndReturn(run func(ctx context.Context, in *proto.InitiatePasswordResetRequest, opts ...grpc.CallOption) (*proto.InitiatePasswordResetResponse, error)) *MockAuthServiceClient_InitiatePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) RefreshToken(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption) (*proto.RefreshTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *proto.RefreshTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) (*proto.RefreshTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) *proto.RefreshTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RefreshTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthServiceClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RefreshTokenRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) RefreshToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_RefreshToken_Call {
	return &MockAuthServiceClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_RefreshToken_Call) Run(run func(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RefreshTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RefreshTokenRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_RefreshToken_Call) Return(refreshTokenResponse *proto.RefreshTokenResponse, err error) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Return(refreshTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.RefreshTokenRequest, opts ...grpc.CallOption) (*proto.RefreshTokenResponse, error)) *MockAuthServiceClient_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) RevokeToken(ctx context.Context, in *proto.RevokeTokenRequest, opts ...grpc.CallOption) (*proto.RevokeTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 *proto.RevokeTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RevokeTokenRequest, ...grpc.CallOption) (*proto.RevokeTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RevokeTokenRequest, ...grpc.CallOption) *proto.RevokeTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RevokeTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RevokeTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockAuthServiceClient_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RevokeTokenRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) RevokeToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_RevokeToken_Call {
	return &MockAuthServiceClient_RevokeToken_Call{Call: _e.mock.On("RevokeToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_RevokeToken_Call) Run(run func(ctx context.Context, in *proto.RevokeTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RevokeTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RevokeTokenRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_RevokeToken_Call) Return(revokeTokenResponse *proto.RevokeTokenResponse, err error) *MockAuthServiceClient_RevokeToken_Call {
	_c.Call.Return(revokeTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_RevokeToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.RevokeTokenRequest, opts ...grpc.CallOption) (*proto.RevokeTokenResponse, error)) *MockAuthServiceClient_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) ValidateToken(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption) (*proto.ValidateTokenResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *proto.ValidateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) (*proto.ValidateTokenResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) *proto.ValidateTokenResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateTokenRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthServiceClient_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ValidateTokenRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) ValidateToken(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_ValidateToken_Call {
	return &MockAuthServiceClient_ValidateToken_Call{Call: _e.mock.On("ValidateToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_ValidateToken_Call) Run(run func(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateTokenRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_ValidateToken_Call) Return(validateTokenResponse *proto.ValidateTokenResponse, err error) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Return(validateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_ValidateToken_Call) RunAndReturn(run func(ctx context.Context, in *proto.ValidateTokenRequest, opts ...grpc.CallOption) (*proto.ValidateTokenResponse, error)) *MockAuthServiceClient_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyCredentials provides a mock function for the type MockAuthServiceClient
func (_mock *MockAuthServiceClient) VerifyCredentials(ctx context.Context, in *proto.VerifyCredentialsRequest, opts ...grpc.CallOption) (*proto.VerifyCredentialsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for VerifyCredentials")
	}

	var r0 *proto.VerifyCredentialsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.VerifyCredentialsRequest, ...grpc.CallOption) (*proto.VerifyCredentialsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.VerifyCredentialsRequest, ...grpc.CallOption) *proto.VerifyCredentialsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VerifyCredentialsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.VerifyCredentialsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceClient_VerifyCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyCredentials'
type MockAuthServiceClient_VerifyCredentials_Call struct {
	*mock.Call
}

// VerifyCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.VerifyCredentialsRequest
//   - opts ...grpc.CallOption
func (_e *MockAuthServiceClient_Expecter) VerifyCredentials(ctx interface{}, in interface{}, opts ...interface{}) *MockAuthServiceClient_VerifyCredentials_Call {
	return &MockAuthServiceClient_VerifyCredentials_Call{Call: _e.mock.On("VerifyCredentials",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockAuthServiceClient_VerifyCredentials_Call) Run(run func(ctx context.Context, in *proto.VerifyCredentialsRequest, opts ...grpc.CallOption)) *MockAuthServiceClient_VerifyCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.VerifyCredentialsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.VerifyCredentialsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockAuthServiceClient_VerifyCredentials_Call) Return(verifyCredentialsResponse *proto.VerifyCredentialsResponse, err error) *MockAuthServiceClient_VerifyCredentials_Call {
	_c.Call.Return(verifyCredentialsResponse, err)
	return _c
}

func (_c *MockAuthServiceClient_VerifyCredentials_Call) RunAndReturn(run func(ctx context.Context, in *proto.VerifyCredentialsRequest, opts ...grpc.CallOption) (*proto.VerifyCredentialsResponse, error)) *MockAuthServiceClient_VerifyCredentials_Call {
	_c.Call.Return(run)
	return _c
}
