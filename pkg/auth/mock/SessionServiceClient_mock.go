// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockSessionServiceClient creates a new instance of MockSessionServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionServiceClient {
	mock := &MockSessionServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionServiceClient is an autogenerated mock type for the SessionServiceClient type
type MockSessionServiceClient struct {
	mock.Mock
}

type MockSessionServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionServiceClient) EXPECT() *MockSessionServiceClient_Expecter {
	return &MockSessionServiceClient_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) CreateSession(ctx context.Context, in *proto.CreateSessionRequest, opts ...grpc.CallOption) (*proto.CreateSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *proto.CreateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSessionRequest, ...grpc.CallOption) (*proto.CreateSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSessionRequest, ...grpc.CallOption) *proto.CreateSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionServiceClient_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) CreateSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_CreateSession_Call {
	return &MockSessionServiceClient_CreateSession_Call{Call: _e.mock.On("CreateSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_CreateSession_Call) Run(run func(ctx context.Context, in *proto.CreateSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_CreateSession_Call) Return(createSessionResponse *proto.CreateSessionResponse, err error) *MockSessionServiceClient_CreateSession_Call {
	_c.Call.Return(createSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_CreateSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateSessionRequest, opts ...grpc.CallOption) (*proto.CreateSessionResponse, error)) *MockSessionServiceClient_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) DeleteSession(ctx context.Context, in *proto.DeleteSessionRequest, opts ...grpc.CallOption) (*proto.DeleteSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 *proto.DeleteSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteSessionRequest, ...grpc.CallOption) (*proto.DeleteSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteSessionRequest, ...grpc.CallOption) *proto.DeleteSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionServiceClient_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) DeleteSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_DeleteSession_Call {
	return &MockSessionServiceClient_DeleteSession_Call{Call: _e.mock.On("DeleteSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_DeleteSession_Call) Run(run func(ctx context.Context, in *proto.DeleteSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_DeleteSession_Call) Return(deleteSessionResponse *proto.DeleteSessionResponse, err error) *MockSessionServiceClient_DeleteSession_Call {
	_c.Call.Return(deleteSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_DeleteSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteSessionRequest, opts ...grpc.CallOption) (*proto.DeleteSessionResponse, error)) *MockSessionServiceClient_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) GetSession(ctx context.Context, in *proto.GetSessionRequest, opts ...grpc.CallOption) (*proto.GetSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *proto.GetSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSessionRequest, ...grpc.CallOption) (*proto.GetSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSessionRequest, ...grpc.CallOption) *proto.GetSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockSessionServiceClient_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) GetSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_GetSession_Call {
	return &MockSessionServiceClient_GetSession_Call{Call: _e.mock.On("GetSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_GetSession_Call) Run(run func(ctx context.Context, in *proto.GetSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_GetSession_Call) Return(getSessionResponse *proto.GetSessionResponse, err error) *MockSessionServiceClient_GetSession_Call {
	_c.Call.Return(getSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_GetSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetSessionRequest, opts ...grpc.CallOption) (*proto.GetSessionResponse, error)) *MockSessionServiceClient_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// ListSessions provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) ListSessions(ctx context.Context, in *proto.ListSessionsRequest, opts ...grpc.CallOption) (*proto.ListSessionsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *proto.ListSessionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSessionsRequest, ...grpc.CallOption) (*proto.ListSessionsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSessionsRequest, ...grpc.CallOption) *proto.ListSessionsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListSessionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListSessionsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_ListSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSessions'
type MockSessionServiceClient_ListSessions_Call struct {
	*mock.Call
}

// ListSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListSessionsRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) ListSessions(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_ListSessions_Call {
	return &MockSessionServiceClient_ListSessions_Call{Call: _e.mock.On("ListSessions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_ListSessions_Call) Run(run func(ctx context.Context, in *proto.ListSessionsRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_ListSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListSessionsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_ListSessions_Call) Return(listSessionsResponse *proto.ListSessionsResponse, err error) *MockSessionServiceClient_ListSessions_Call {
	_c.Call.Return(listSessionsResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_ListSessions_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListSessionsRequest, opts ...grpc.CallOption) (*proto.ListSessionsResponse, error)) *MockSessionServiceClient_ListSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserSessions provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) ListUserSessions(ctx context.Context, in *proto.ListUserSessionsRequest, opts ...grpc.CallOption) (*proto.ListUserSessionsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListUserSessions")
	}

	var r0 *proto.ListUserSessionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUserSessionsRequest, ...grpc.CallOption) (*proto.ListUserSessionsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUserSessionsRequest, ...grpc.CallOption) *proto.ListUserSessionsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListUserSessionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListUserSessionsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_ListUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserSessions'
type MockSessionServiceClient_ListUserSessions_Call struct {
	*mock.Call
}

// ListUserSessions is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListUserSessionsRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) ListUserSessions(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_ListUserSessions_Call {
	return &MockSessionServiceClient_ListUserSessions_Call{Call: _e.mock.On("ListUserSessions",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_ListUserSessions_Call) Run(run func(ctx context.Context, in *proto.ListUserSessionsRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_ListUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListUserSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListUserSessionsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_ListUserSessions_Call) Return(listUserSessionsResponse *proto.ListUserSessionsResponse, err error) *MockSessionServiceClient_ListUserSessions_Call {
	_c.Call.Return(listUserSessionsResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_ListUserSessions_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListUserSessionsRequest, opts ...grpc.CallOption) (*proto.ListUserSessionsResponse, error)) *MockSessionServiceClient_ListUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) TerminateSession(ctx context.Context, in *proto.TerminateSessionRequest, opts ...grpc.CallOption) (*proto.TerminateSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for TerminateSession")
	}

	var r0 *proto.TerminateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TerminateSessionRequest, ...grpc.CallOption) (*proto.TerminateSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TerminateSessionRequest, ...grpc.CallOption) *proto.TerminateSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TerminateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TerminateSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_TerminateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateSession'
type MockSessionServiceClient_TerminateSession_Call struct {
	*mock.Call
}

// TerminateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.TerminateSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) TerminateSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_TerminateSession_Call {
	return &MockSessionServiceClient_TerminateSession_Call{Call: _e.mock.On("TerminateSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_TerminateSession_Call) Run(run func(ctx context.Context, in *proto.TerminateSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_TerminateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.TerminateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.TerminateSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_TerminateSession_Call) Return(terminateSessionResponse *proto.TerminateSessionResponse, err error) *MockSessionServiceClient_TerminateSession_Call {
	_c.Call.Return(terminateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_TerminateSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.TerminateSessionRequest, opts ...grpc.CallOption) (*proto.TerminateSessionResponse, error)) *MockSessionServiceClient_TerminateSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) UpdateSession(ctx context.Context, in *proto.UpdateSessionRequest, opts ...grpc.CallOption) (*proto.UpdateSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 *proto.UpdateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateSessionRequest, ...grpc.CallOption) (*proto.UpdateSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateSessionRequest, ...grpc.CallOption) *proto.UpdateSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type MockSessionServiceClient_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) UpdateSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_UpdateSession_Call {
	return &MockSessionServiceClient_UpdateSession_Call{Call: _e.mock.On("UpdateSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_UpdateSession_Call) Run(run func(ctx context.Context, in *proto.UpdateSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_UpdateSession_Call) Return(updateSessionResponse *proto.UpdateSessionResponse, err error) *MockSessionServiceClient_UpdateSession_Call {
	_c.Call.Return(updateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_UpdateSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateSessionRequest, opts ...grpc.CallOption) (*proto.UpdateSessionResponse, error)) *MockSessionServiceClient_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function for the type MockSessionServiceClient
func (_mock *MockSessionServiceClient) ValidateSession(ctx context.Context, in *proto.ValidateSessionRequest, opts ...grpc.CallOption) (*proto.ValidateSessionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 *proto.ValidateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateSessionRequest, ...grpc.CallOption) (*proto.ValidateSessionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateSessionRequest, ...grpc.CallOption) *proto.ValidateSessionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateSessionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceClient_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type MockSessionServiceClient_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ValidateSessionRequest
//   - opts ...grpc.CallOption
func (_e *MockSessionServiceClient_Expecter) ValidateSession(ctx interface{}, in interface{}, opts ...interface{}) *MockSessionServiceClient_ValidateSession_Call {
	return &MockSessionServiceClient_ValidateSession_Call{Call: _e.mock.On("ValidateSession",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSessionServiceClient_ValidateSession_Call) Run(run func(ctx context.Context, in *proto.ValidateSessionRequest, opts ...grpc.CallOption)) *MockSessionServiceClient_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateSessionRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockSessionServiceClient_ValidateSession_Call) Return(validateSessionResponse *proto.ValidateSessionResponse, err error) *MockSessionServiceClient_ValidateSession_Call {
	_c.Call.Return(validateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceClient_ValidateSession_Call) RunAndReturn(run func(ctx context.Context, in *proto.ValidateSessionRequest, opts ...grpc.CallOption) (*proto.ValidateSessionResponse, error)) *MockSessionServiceClient_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}
