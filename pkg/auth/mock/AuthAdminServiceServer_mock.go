// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockAuthAdminServiceServer creates a new instance of MockAuthAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthAdminServiceServer {
	mock := &MockAuthAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthAdminServiceServer is an autogenerated mock type for the AuthAdminServiceServer type
type MockAuthAdminServiceServer struct {
	mock.Mock
}

type MockAuthAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthAdminServiceServer) EXPECT() *MockAuthAdminServiceServer_Expecter {
	return &MockAuthAdminServiceServer_Expecter{mock: &_m.Mock}
}

// AssignRole provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) AssignRole(context1 context.Context, assignRoleRequest *proto.AssignRoleRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, assignRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for AssignRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AssignRoleRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, assignRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AssignRoleRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, assignRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AssignRoleRequest) error); ok {
		r1 = returnFunc(context1, assignRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_AssignRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRole'
type MockAuthAdminServiceServer_AssignRole_Call struct {
	*mock.Call
}

// AssignRole is a helper method to define mock.On call
//   - context1 context.Context
//   - assignRoleRequest *proto.AssignRoleRequest
func (_e *MockAuthAdminServiceServer_Expecter) AssignRole(context1 interface{}, assignRoleRequest interface{}) *MockAuthAdminServiceServer_AssignRole_Call {
	return &MockAuthAdminServiceServer_AssignRole_Call{Call: _e.mock.On("AssignRole", context1, assignRoleRequest)}
}

func (_c *MockAuthAdminServiceServer_AssignRole_Call) Run(run func(context1 context.Context, assignRoleRequest *proto.AssignRoleRequest)) *MockAuthAdminServiceServer_AssignRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AssignRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AssignRoleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_AssignRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceServer_AssignRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_AssignRole_Call) RunAndReturn(run func(context1 context.Context, assignRoleRequest *proto.AssignRoleRequest) (*emptypb.Empty, error)) *MockAuthAdminServiceServer_AssignRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) CreateRole(context1 context.Context, createRoleRequest *proto.CreateRoleRequest) (*proto.CreateRoleResponse, error) {
	ret := _mock.Called(context1, createRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *proto.CreateRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest) (*proto.CreateRoleResponse, error)); ok {
		return returnFunc(context1, createRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateRoleRequest) *proto.CreateRoleResponse); ok {
		r0 = returnFunc(context1, createRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateRoleRequest) error); ok {
		r1 = returnFunc(context1, createRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type MockAuthAdminServiceServer_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - context1 context.Context
//   - createRoleRequest *proto.CreateRoleRequest
func (_e *MockAuthAdminServiceServer_Expecter) CreateRole(context1 interface{}, createRoleRequest interface{}) *MockAuthAdminServiceServer_CreateRole_Call {
	return &MockAuthAdminServiceServer_CreateRole_Call{Call: _e.mock.On("CreateRole", context1, createRoleRequest)}
}

func (_c *MockAuthAdminServiceServer_CreateRole_Call) Run(run func(context1 context.Context, createRoleRequest *proto.CreateRoleRequest)) *MockAuthAdminServiceServer_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateRoleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_CreateRole_Call) Return(createRoleResponse *proto.CreateRoleResponse, err error) *MockAuthAdminServiceServer_CreateRole_Call {
	_c.Call.Return(createRoleResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_CreateRole_Call) RunAndReturn(run func(context1 context.Context, createRoleRequest *proto.CreateRoleRequest) (*proto.CreateRoleResponse, error)) *MockAuthAdminServiceServer_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) CreateUser(context1 context.Context, createUserRequest *proto.CreateUserRequest) (*proto.CreateUserResponse, error) {
	ret := _mock.Called(context1, createUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *proto.CreateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest) (*proto.CreateUserResponse, error)); ok {
		return returnFunc(context1, createUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateUserRequest) *proto.CreateUserResponse); ok {
		r0 = returnFunc(context1, createUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateUserRequest) error); ok {
		r1 = returnFunc(context1, createUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthAdminServiceServer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - context1 context.Context
//   - createUserRequest *proto.CreateUserRequest
func (_e *MockAuthAdminServiceServer_Expecter) CreateUser(context1 interface{}, createUserRequest interface{}) *MockAuthAdminServiceServer_CreateUser_Call {
	return &MockAuthAdminServiceServer_CreateUser_Call{Call: _e.mock.On("CreateUser", context1, createUserRequest)}
}

func (_c *MockAuthAdminServiceServer_CreateUser_Call) Run(run func(context1 context.Context, createUserRequest *proto.CreateUserRequest)) *MockAuthAdminServiceServer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_CreateUser_Call) Return(createUserResponse *proto.CreateUserResponse, err error) *MockAuthAdminServiceServer_CreateUser_Call {
	_c.Call.Return(createUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_CreateUser_Call) RunAndReturn(run func(context1 context.Context, createUserRequest *proto.CreateUserRequest) (*proto.CreateUserResponse, error)) *MockAuthAdminServiceServer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) DeleteRole(context1 context.Context, deleteRoleRequest *proto.DeleteRoleRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRoleRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteRoleRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteRoleRequest) error); ok {
		r1 = returnFunc(context1, deleteRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type MockAuthAdminServiceServer_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteRoleRequest *proto.DeleteRoleRequest
func (_e *MockAuthAdminServiceServer_Expecter) DeleteRole(context1 interface{}, deleteRoleRequest interface{}) *MockAuthAdminServiceServer_DeleteRole_Call {
	return &MockAuthAdminServiceServer_DeleteRole_Call{Call: _e.mock.On("DeleteRole", context1, deleteRoleRequest)}
}

func (_c *MockAuthAdminServiceServer_DeleteRole_Call) Run(run func(context1 context.Context, deleteRoleRequest *proto.DeleteRoleRequest)) *MockAuthAdminServiceServer_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteRoleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_DeleteRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceServer_DeleteRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_DeleteRole_Call) RunAndReturn(run func(context1 context.Context, deleteRoleRequest *proto.DeleteRoleRequest) (*emptypb.Empty, error)) *MockAuthAdminServiceServer_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) DeleteUser(context1 context.Context, deleteUserRequest *proto.DeleteUserRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, deleteUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteUserRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, deleteUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteUserRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, deleteUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteUserRequest) error); ok {
		r1 = returnFunc(context1, deleteUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockAuthAdminServiceServer_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteUserRequest *proto.DeleteUserRequest
func (_e *MockAuthAdminServiceServer_Expecter) DeleteUser(context1 interface{}, deleteUserRequest interface{}) *MockAuthAdminServiceServer_DeleteUser_Call {
	return &MockAuthAdminServiceServer_DeleteUser_Call{Call: _e.mock.On("DeleteUser", context1, deleteUserRequest)}
}

func (_c *MockAuthAdminServiceServer_DeleteUser_Call) Run(run func(context1 context.Context, deleteUserRequest *proto.DeleteUserRequest)) *MockAuthAdminServiceServer_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_DeleteUser_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceServer_DeleteUser_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_DeleteUser_Call) RunAndReturn(run func(context1 context.Context, deleteUserRequest *proto.DeleteUserRequest) (*emptypb.Empty, error)) *MockAuthAdminServiceServer_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStats provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) GetSystemStats(context1 context.Context, getSystemStatsRequest *proto.GetSystemStatsRequest) (*proto.GetSystemStatsResponse, error) {
	ret := _mock.Called(context1, getSystemStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemStats")
	}

	var r0 *proto.GetSystemStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSystemStatsRequest) (*proto.GetSystemStatsResponse, error)); ok {
		return returnFunc(context1, getSystemStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSystemStatsRequest) *proto.GetSystemStatsResponse); ok {
		r0 = returnFunc(context1, getSystemStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSystemStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSystemStatsRequest) error); ok {
		r1 = returnFunc(context1, getSystemStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_GetSystemStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStats'
type MockAuthAdminServiceServer_GetSystemStats_Call struct {
	*mock.Call
}

// GetSystemStats is a helper method to define mock.On call
//   - context1 context.Context
//   - getSystemStatsRequest *proto.GetSystemStatsRequest
func (_e *MockAuthAdminServiceServer_Expecter) GetSystemStats(context1 interface{}, getSystemStatsRequest interface{}) *MockAuthAdminServiceServer_GetSystemStats_Call {
	return &MockAuthAdminServiceServer_GetSystemStats_Call{Call: _e.mock.On("GetSystemStats", context1, getSystemStatsRequest)}
}

func (_c *MockAuthAdminServiceServer_GetSystemStats_Call) Run(run func(context1 context.Context, getSystemStatsRequest *proto.GetSystemStatsRequest)) *MockAuthAdminServiceServer_GetSystemStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSystemStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSystemStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_GetSystemStats_Call) Return(getSystemStatsResponse *proto.GetSystemStatsResponse, err error) *MockAuthAdminServiceServer_GetSystemStats_Call {
	_c.Call.Return(getSystemStatsResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_GetSystemStats_Call) RunAndReturn(run func(context1 context.Context, getSystemStatsRequest *proto.GetSystemStatsRequest) (*proto.GetSystemStatsResponse, error)) *MockAuthAdminServiceServer_GetSystemStats_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) GetUser(context1 context.Context, getUserRequest *proto.GetUserRequest) (*proto.GetUserResponse, error) {
	ret := _mock.Called(context1, getUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *proto.GetUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest) (*proto.GetUserResponse, error)); ok {
		return returnFunc(context1, getUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserRequest) *proto.GetUserResponse); ok {
		r0 = returnFunc(context1, getUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserRequest) error); ok {
		r1 = returnFunc(context1, getUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockAuthAdminServiceServer_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - context1 context.Context
//   - getUserRequest *proto.GetUserRequest
func (_e *MockAuthAdminServiceServer_Expecter) GetUser(context1 interface{}, getUserRequest interface{}) *MockAuthAdminServiceServer_GetUser_Call {
	return &MockAuthAdminServiceServer_GetUser_Call{Call: _e.mock.On("GetUser", context1, getUserRequest)}
}

func (_c *MockAuthAdminServiceServer_GetUser_Call) Run(run func(context1 context.Context, getUserRequest *proto.GetUserRequest)) *MockAuthAdminServiceServer_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_GetUser_Call) Return(getUserResponse *proto.GetUserResponse, err error) *MockAuthAdminServiceServer_GetUser_Call {
	_c.Call.Return(getUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_GetUser_Call) RunAndReturn(run func(context1 context.Context, getUserRequest *proto.GetUserRequest) (*proto.GetUserResponse, error)) *MockAuthAdminServiceServer_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateUserSessions provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) InvalidateUserSessions(context1 context.Context, invalidateUserSessionsRequest *proto.InvalidateUserSessionsRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, invalidateUserSessionsRequest)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateUserSessions")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InvalidateUserSessionsRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, invalidateUserSessionsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InvalidateUserSessionsRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, invalidateUserSessionsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.InvalidateUserSessionsRequest) error); ok {
		r1 = returnFunc(context1, invalidateUserSessionsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_InvalidateUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateUserSessions'
type MockAuthAdminServiceServer_InvalidateUserSessions_Call struct {
	*mock.Call
}

// InvalidateUserSessions is a helper method to define mock.On call
//   - context1 context.Context
//   - invalidateUserSessionsRequest *proto.InvalidateUserSessionsRequest
func (_e *MockAuthAdminServiceServer_Expecter) InvalidateUserSessions(context1 interface{}, invalidateUserSessionsRequest interface{}) *MockAuthAdminServiceServer_InvalidateUserSessions_Call {
	return &MockAuthAdminServiceServer_InvalidateUserSessions_Call{Call: _e.mock.On("InvalidateUserSessions", context1, invalidateUserSessionsRequest)}
}

func (_c *MockAuthAdminServiceServer_InvalidateUserSessions_Call) Run(run func(context1 context.Context, invalidateUserSessionsRequest *proto.InvalidateUserSessionsRequest)) *MockAuthAdminServiceServer_InvalidateUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.InvalidateUserSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.InvalidateUserSessionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_InvalidateUserSessions_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceServer_InvalidateUserSessions_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_InvalidateUserSessions_Call) RunAndReturn(run func(context1 context.Context, invalidateUserSessionsRequest *proto.InvalidateUserSessionsRequest) (*emptypb.Empty, error)) *MockAuthAdminServiceServer_InvalidateUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoles provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) ListRoles(context1 context.Context, listRolesRequest *proto.ListRolesRequest) (*proto.ListRolesResponse, error) {
	ret := _mock.Called(context1, listRolesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *proto.ListRolesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListRolesRequest) (*proto.ListRolesResponse, error)); ok {
		return returnFunc(context1, listRolesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListRolesRequest) *proto.ListRolesResponse); ok {
		r0 = returnFunc(context1, listRolesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListRolesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListRolesRequest) error); ok {
		r1 = returnFunc(context1, listRolesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockAuthAdminServiceServer_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
//   - context1 context.Context
//   - listRolesRequest *proto.ListRolesRequest
func (_e *MockAuthAdminServiceServer_Expecter) ListRoles(context1 interface{}, listRolesRequest interface{}) *MockAuthAdminServiceServer_ListRoles_Call {
	return &MockAuthAdminServiceServer_ListRoles_Call{Call: _e.mock.On("ListRoles", context1, listRolesRequest)}
}

func (_c *MockAuthAdminServiceServer_ListRoles_Call) Run(run func(context1 context.Context, listRolesRequest *proto.ListRolesRequest)) *MockAuthAdminServiceServer_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListRolesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListRolesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_ListRoles_Call) Return(listRolesResponse *proto.ListRolesResponse, err error) *MockAuthAdminServiceServer_ListRoles_Call {
	_c.Call.Return(listRolesResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_ListRoles_Call) RunAndReturn(run func(context1 context.Context, listRolesRequest *proto.ListRolesRequest) (*proto.ListRolesResponse, error)) *MockAuthAdminServiceServer_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) ListUsers(context1 context.Context, listUsersRequest *proto.ListUsersRequest) (*proto.ListUsersResponse, error) {
	ret := _mock.Called(context1, listUsersRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *proto.ListUsersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUsersRequest) (*proto.ListUsersResponse, error)); ok {
		return returnFunc(context1, listUsersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUsersRequest) *proto.ListUsersResponse); ok {
		r0 = returnFunc(context1, listUsersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListUsersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListUsersRequest) error); ok {
		r1 = returnFunc(context1, listUsersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockAuthAdminServiceServer_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - context1 context.Context
//   - listUsersRequest *proto.ListUsersRequest
func (_e *MockAuthAdminServiceServer_Expecter) ListUsers(context1 interface{}, listUsersRequest interface{}) *MockAuthAdminServiceServer_ListUsers_Call {
	return &MockAuthAdminServiceServer_ListUsers_Call{Call: _e.mock.On("ListUsers", context1, listUsersRequest)}
}

func (_c *MockAuthAdminServiceServer_ListUsers_Call) Run(run func(context1 context.Context, listUsersRequest *proto.ListUsersRequest)) *MockAuthAdminServiceServer_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListUsersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListUsersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_ListUsers_Call) Return(listUsersResponse *proto.ListUsersResponse, err error) *MockAuthAdminServiceServer_ListUsers_Call {
	_c.Call.Return(listUsersResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_ListUsers_Call) RunAndReturn(run func(context1 context.Context, listUsersRequest *proto.ListUsersRequest) (*proto.ListUsersResponse, error)) *MockAuthAdminServiceServer_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRole provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) RemoveRole(context1 context.Context, removeRoleRequest *proto.RemoveRoleRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, removeRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveRoleRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, removeRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveRoleRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, removeRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RemoveRoleRequest) error); ok {
		r1 = returnFunc(context1, removeRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_RemoveRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRole'
type MockAuthAdminServiceServer_RemoveRole_Call struct {
	*mock.Call
}

// RemoveRole is a helper method to define mock.On call
//   - context1 context.Context
//   - removeRoleRequest *proto.RemoveRoleRequest
func (_e *MockAuthAdminServiceServer_Expecter) RemoveRole(context1 interface{}, removeRoleRequest interface{}) *MockAuthAdminServiceServer_RemoveRole_Call {
	return &MockAuthAdminServiceServer_RemoveRole_Call{Call: _e.mock.On("RemoveRole", context1, removeRoleRequest)}
}

func (_c *MockAuthAdminServiceServer_RemoveRole_Call) Run(run func(context1 context.Context, removeRoleRequest *proto.RemoveRoleRequest)) *MockAuthAdminServiceServer_RemoveRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RemoveRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RemoveRoleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_RemoveRole_Call) Return(empty *emptypb.Empty, err error) *MockAuthAdminServiceServer_RemoveRole_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_RemoveRole_Call) RunAndReturn(run func(context1 context.Context, removeRoleRequest *proto.RemoveRoleRequest) (*emptypb.Empty, error)) *MockAuthAdminServiceServer_RemoveRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) UpdateRole(context1 context.Context, updateRoleRequest *proto.UpdateRoleRequest) (*proto.UpdateRoleResponse, error) {
	ret := _mock.Called(context1, updateRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 *proto.UpdateRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRoleRequest) (*proto.UpdateRoleResponse, error)); ok {
		return returnFunc(context1, updateRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateRoleRequest) *proto.UpdateRoleResponse); ok {
		r0 = returnFunc(context1, updateRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateRoleRequest) error); ok {
		r1 = returnFunc(context1, updateRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type MockAuthAdminServiceServer_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - context1 context.Context
//   - updateRoleRequest *proto.UpdateRoleRequest
func (_e *MockAuthAdminServiceServer_Expecter) UpdateRole(context1 interface{}, updateRoleRequest interface{}) *MockAuthAdminServiceServer_UpdateRole_Call {
	return &MockAuthAdminServiceServer_UpdateRole_Call{Call: _e.mock.On("UpdateRole", context1, updateRoleRequest)}
}

func (_c *MockAuthAdminServiceServer_UpdateRole_Call) Run(run func(context1 context.Context, updateRoleRequest *proto.UpdateRoleRequest)) *MockAuthAdminServiceServer_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateRoleRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateRoleRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_UpdateRole_Call) Return(updateRoleResponse *proto.UpdateRoleResponse, err error) *MockAuthAdminServiceServer_UpdateRole_Call {
	_c.Call.Return(updateRoleResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_UpdateRole_Call) RunAndReturn(run func(context1 context.Context, updateRoleRequest *proto.UpdateRoleRequest) (*proto.UpdateRoleResponse, error)) *MockAuthAdminServiceServer_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockAuthAdminServiceServer
func (_mock *MockAuthAdminServiceServer) UpdateUser(context1 context.Context, updateUserRequest *proto.UpdateUserRequest) (*proto.UpdateUserResponse, error) {
	ret := _mock.Called(context1, updateUserRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *proto.UpdateUserResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateUserRequest) (*proto.UpdateUserResponse, error)); ok {
		return returnFunc(context1, updateUserRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateUserRequest) *proto.UpdateUserResponse); ok {
		r0 = returnFunc(context1, updateUserRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateUserResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateUserRequest) error); ok {
		r1 = returnFunc(context1, updateUserRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthAdminServiceServer_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAuthAdminServiceServer_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - context1 context.Context
//   - updateUserRequest *proto.UpdateUserRequest
func (_e *MockAuthAdminServiceServer_Expecter) UpdateUser(context1 interface{}, updateUserRequest interface{}) *MockAuthAdminServiceServer_UpdateUser_Call {
	return &MockAuthAdminServiceServer_UpdateUser_Call{Call: _e.mock.On("UpdateUser", context1, updateUserRequest)}
}

func (_c *MockAuthAdminServiceServer_UpdateUser_Call) Run(run func(context1 context.Context, updateUserRequest *proto.UpdateUserRequest)) *MockAuthAdminServiceServer_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthAdminServiceServer_UpdateUser_Call) Return(updateUserResponse *proto.UpdateUserResponse, err error) *MockAuthAdminServiceServer_UpdateUser_Call {
	_c.Call.Return(updateUserResponse, err)
	return _c
}

func (_c *MockAuthAdminServiceServer_UpdateUser_Call) RunAndReturn(run func(context1 context.Context, updateUserRequest *proto.UpdateUserRequest) (*proto.UpdateUserResponse, error)) *MockAuthAdminServiceServer_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
