// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionServiceServer creates a new instance of MockSessionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionServiceServer {
	mock := &MockSessionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionServiceServer is an autogenerated mock type for the SessionServiceServer type
type MockSessionServiceServer struct {
	mock.Mock
}

type MockSessionServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionServiceServer) EXPECT() *MockSessionServiceServer_Expecter {
	return &MockSessionServiceServer_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) CreateSession(context1 context.Context, createSessionRequest *proto.CreateSessionRequest) (*proto.CreateSessionResponse, error) {
	ret := _mock.Called(context1, createSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *proto.CreateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSessionRequest) (*proto.CreateSessionResponse, error)); ok {
		return returnFunc(context1, createSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSessionRequest) *proto.CreateSessionResponse); ok {
		r0 = returnFunc(context1, createSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateSessionRequest) error); ok {
		r1 = returnFunc(context1, createSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionServiceServer_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - context1 context.Context
//   - createSessionRequest *proto.CreateSessionRequest
func (_e *MockSessionServiceServer_Expecter) CreateSession(context1 interface{}, createSessionRequest interface{}) *MockSessionServiceServer_CreateSession_Call {
	return &MockSessionServiceServer_CreateSession_Call{Call: _e.mock.On("CreateSession", context1, createSessionRequest)}
}

func (_c *MockSessionServiceServer_CreateSession_Call) Run(run func(context1 context.Context, createSessionRequest *proto.CreateSessionRequest)) *MockSessionServiceServer_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_CreateSession_Call) Return(createSessionResponse *proto.CreateSessionResponse, err error) *MockSessionServiceServer_CreateSession_Call {
	_c.Call.Return(createSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_CreateSession_Call) RunAndReturn(run func(context1 context.Context, createSessionRequest *proto.CreateSessionRequest) (*proto.CreateSessionResponse, error)) *MockSessionServiceServer_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) DeleteSession(context1 context.Context, deleteSessionRequest *proto.DeleteSessionRequest) (*proto.DeleteSessionResponse, error) {
	ret := _mock.Called(context1, deleteSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 *proto.DeleteSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteSessionRequest) (*proto.DeleteSessionResponse, error)); ok {
		return returnFunc(context1, deleteSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteSessionRequest) *proto.DeleteSessionResponse); ok {
		r0 = returnFunc(context1, deleteSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteSessionRequest) error); ok {
		r1 = returnFunc(context1, deleteSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type MockSessionServiceServer_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteSessionRequest *proto.DeleteSessionRequest
func (_e *MockSessionServiceServer_Expecter) DeleteSession(context1 interface{}, deleteSessionRequest interface{}) *MockSessionServiceServer_DeleteSession_Call {
	return &MockSessionServiceServer_DeleteSession_Call{Call: _e.mock.On("DeleteSession", context1, deleteSessionRequest)}
}

func (_c *MockSessionServiceServer_DeleteSession_Call) Run(run func(context1 context.Context, deleteSessionRequest *proto.DeleteSessionRequest)) *MockSessionServiceServer_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_DeleteSession_Call) Return(deleteSessionResponse *proto.DeleteSessionResponse, err error) *MockSessionServiceServer_DeleteSession_Call {
	_c.Call.Return(deleteSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_DeleteSession_Call) RunAndReturn(run func(context1 context.Context, deleteSessionRequest *proto.DeleteSessionRequest) (*proto.DeleteSessionResponse, error)) *MockSessionServiceServer_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) GetSession(context1 context.Context, getSessionRequest *proto.GetSessionRequest) (*proto.GetSessionResponse, error) {
	ret := _mock.Called(context1, getSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *proto.GetSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSessionRequest) (*proto.GetSessionResponse, error)); ok {
		return returnFunc(context1, getSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetSessionRequest) *proto.GetSessionResponse); ok {
		r0 = returnFunc(context1, getSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetSessionRequest) error); ok {
		r1 = returnFunc(context1, getSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockSessionServiceServer_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - context1 context.Context
//   - getSessionRequest *proto.GetSessionRequest
func (_e *MockSessionServiceServer_Expecter) GetSession(context1 interface{}, getSessionRequest interface{}) *MockSessionServiceServer_GetSession_Call {
	return &MockSessionServiceServer_GetSession_Call{Call: _e.mock.On("GetSession", context1, getSessionRequest)}
}

func (_c *MockSessionServiceServer_GetSession_Call) Run(run func(context1 context.Context, getSessionRequest *proto.GetSessionRequest)) *MockSessionServiceServer_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_GetSession_Call) Return(getSessionResponse *proto.GetSessionResponse, err error) *MockSessionServiceServer_GetSession_Call {
	_c.Call.Return(getSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_GetSession_Call) RunAndReturn(run func(context1 context.Context, getSessionRequest *proto.GetSessionRequest) (*proto.GetSessionResponse, error)) *MockSessionServiceServer_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// ListSessions provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) ListSessions(context1 context.Context, listSessionsRequest *proto.ListSessionsRequest) (*proto.ListSessionsResponse, error) {
	ret := _mock.Called(context1, listSessionsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *proto.ListSessionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSessionsRequest) (*proto.ListSessionsResponse, error)); ok {
		return returnFunc(context1, listSessionsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSessionsRequest) *proto.ListSessionsResponse); ok {
		r0 = returnFunc(context1, listSessionsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListSessionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListSessionsRequest) error); ok {
		r1 = returnFunc(context1, listSessionsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_ListSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSessions'
type MockSessionServiceServer_ListSessions_Call struct {
	*mock.Call
}

// ListSessions is a helper method to define mock.On call
//   - context1 context.Context
//   - listSessionsRequest *proto.ListSessionsRequest
func (_e *MockSessionServiceServer_Expecter) ListSessions(context1 interface{}, listSessionsRequest interface{}) *MockSessionServiceServer_ListSessions_Call {
	return &MockSessionServiceServer_ListSessions_Call{Call: _e.mock.On("ListSessions", context1, listSessionsRequest)}
}

func (_c *MockSessionServiceServer_ListSessions_Call) Run(run func(context1 context.Context, listSessionsRequest *proto.ListSessionsRequest)) *MockSessionServiceServer_ListSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListSessionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_ListSessions_Call) Return(listSessionsResponse *proto.ListSessionsResponse, err error) *MockSessionServiceServer_ListSessions_Call {
	_c.Call.Return(listSessionsResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_ListSessions_Call) RunAndReturn(run func(context1 context.Context, listSessionsRequest *proto.ListSessionsRequest) (*proto.ListSessionsResponse, error)) *MockSessionServiceServer_ListSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserSessions provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) ListUserSessions(context1 context.Context, listUserSessionsRequest *proto.ListUserSessionsRequest) (*proto.ListUserSessionsResponse, error) {
	ret := _mock.Called(context1, listUserSessionsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListUserSessions")
	}

	var r0 *proto.ListUserSessionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUserSessionsRequest) (*proto.ListUserSessionsResponse, error)); ok {
		return returnFunc(context1, listUserSessionsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListUserSessionsRequest) *proto.ListUserSessionsResponse); ok {
		r0 = returnFunc(context1, listUserSessionsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListUserSessionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListUserSessionsRequest) error); ok {
		r1 = returnFunc(context1, listUserSessionsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_ListUserSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserSessions'
type MockSessionServiceServer_ListUserSessions_Call struct {
	*mock.Call
}

// ListUserSessions is a helper method to define mock.On call
//   - context1 context.Context
//   - listUserSessionsRequest *proto.ListUserSessionsRequest
func (_e *MockSessionServiceServer_Expecter) ListUserSessions(context1 interface{}, listUserSessionsRequest interface{}) *MockSessionServiceServer_ListUserSessions_Call {
	return &MockSessionServiceServer_ListUserSessions_Call{Call: _e.mock.On("ListUserSessions", context1, listUserSessionsRequest)}
}

func (_c *MockSessionServiceServer_ListUserSessions_Call) Run(run func(context1 context.Context, listUserSessionsRequest *proto.ListUserSessionsRequest)) *MockSessionServiceServer_ListUserSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListUserSessionsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListUserSessionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_ListUserSessions_Call) Return(listUserSessionsResponse *proto.ListUserSessionsResponse, err error) *MockSessionServiceServer_ListUserSessions_Call {
	_c.Call.Return(listUserSessionsResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_ListUserSessions_Call) RunAndReturn(run func(context1 context.Context, listUserSessionsRequest *proto.ListUserSessionsRequest) (*proto.ListUserSessionsResponse, error)) *MockSessionServiceServer_ListUserSessions_Call {
	_c.Call.Return(run)
	return _c
}

// TerminateSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) TerminateSession(context1 context.Context, terminateSessionRequest *proto.TerminateSessionRequest) (*proto.TerminateSessionResponse, error) {
	ret := _mock.Called(context1, terminateSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for TerminateSession")
	}

	var r0 *proto.TerminateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TerminateSessionRequest) (*proto.TerminateSessionResponse, error)); ok {
		return returnFunc(context1, terminateSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TerminateSessionRequest) *proto.TerminateSessionResponse); ok {
		r0 = returnFunc(context1, terminateSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TerminateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TerminateSessionRequest) error); ok {
		r1 = returnFunc(context1, terminateSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_TerminateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TerminateSession'
type MockSessionServiceServer_TerminateSession_Call struct {
	*mock.Call
}

// TerminateSession is a helper method to define mock.On call
//   - context1 context.Context
//   - terminateSessionRequest *proto.TerminateSessionRequest
func (_e *MockSessionServiceServer_Expecter) TerminateSession(context1 interface{}, terminateSessionRequest interface{}) *MockSessionServiceServer_TerminateSession_Call {
	return &MockSessionServiceServer_TerminateSession_Call{Call: _e.mock.On("TerminateSession", context1, terminateSessionRequest)}
}

func (_c *MockSessionServiceServer_TerminateSession_Call) Run(run func(context1 context.Context, terminateSessionRequest *proto.TerminateSessionRequest)) *MockSessionServiceServer_TerminateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.TerminateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.TerminateSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_TerminateSession_Call) Return(terminateSessionResponse *proto.TerminateSessionResponse, err error) *MockSessionServiceServer_TerminateSession_Call {
	_c.Call.Return(terminateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_TerminateSession_Call) RunAndReturn(run func(context1 context.Context, terminateSessionRequest *proto.TerminateSessionRequest) (*proto.TerminateSessionResponse, error)) *MockSessionServiceServer_TerminateSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) UpdateSession(context1 context.Context, updateSessionRequest *proto.UpdateSessionRequest) (*proto.UpdateSessionResponse, error) {
	ret := _mock.Called(context1, updateSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 *proto.UpdateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateSessionRequest) (*proto.UpdateSessionResponse, error)); ok {
		return returnFunc(context1, updateSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateSessionRequest) *proto.UpdateSessionResponse); ok {
		r0 = returnFunc(context1, updateSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateSessionRequest) error); ok {
		r1 = returnFunc(context1, updateSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_UpdateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSession'
type MockSessionServiceServer_UpdateSession_Call struct {
	*mock.Call
}

// UpdateSession is a helper method to define mock.On call
//   - context1 context.Context
//   - updateSessionRequest *proto.UpdateSessionRequest
func (_e *MockSessionServiceServer_Expecter) UpdateSession(context1 interface{}, updateSessionRequest interface{}) *MockSessionServiceServer_UpdateSession_Call {
	return &MockSessionServiceServer_UpdateSession_Call{Call: _e.mock.On("UpdateSession", context1, updateSessionRequest)}
}

func (_c *MockSessionServiceServer_UpdateSession_Call) Run(run func(context1 context.Context, updateSessionRequest *proto.UpdateSessionRequest)) *MockSessionServiceServer_UpdateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_UpdateSession_Call) Return(updateSessionResponse *proto.UpdateSessionResponse, err error) *MockSessionServiceServer_UpdateSession_Call {
	_c.Call.Return(updateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_UpdateSession_Call) RunAndReturn(run func(context1 context.Context, updateSessionRequest *proto.UpdateSessionRequest) (*proto.UpdateSessionResponse, error)) *MockSessionServiceServer_UpdateSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function for the type MockSessionServiceServer
func (_mock *MockSessionServiceServer) ValidateSession(context1 context.Context, validateSessionRequest *proto.ValidateSessionRequest) (*proto.ValidateSessionResponse, error) {
	ret := _mock.Called(context1, validateSessionRequest)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 *proto.ValidateSessionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateSessionRequest) (*proto.ValidateSessionResponse, error)); ok {
		return returnFunc(context1, validateSessionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateSessionRequest) *proto.ValidateSessionResponse); ok {
		r0 = returnFunc(context1, validateSessionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateSessionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateSessionRequest) error); ok {
		r1 = returnFunc(context1, validateSessionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionServiceServer_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type MockSessionServiceServer_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - context1 context.Context
//   - validateSessionRequest *proto.ValidateSessionRequest
func (_e *MockSessionServiceServer_Expecter) ValidateSession(context1 interface{}, validateSessionRequest interface{}) *MockSessionServiceServer_ValidateSession_Call {
	return &MockSessionServiceServer_ValidateSession_Call{Call: _e.mock.On("ValidateSession", context1, validateSessionRequest)}
}

func (_c *MockSessionServiceServer_ValidateSession_Call) Run(run func(context1 context.Context, validateSessionRequest *proto.ValidateSessionRequest)) *MockSessionServiceServer_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateSessionRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateSessionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionServiceServer_ValidateSession_Call) Return(validateSessionResponse *proto.ValidateSessionResponse, err error) *MockSessionServiceServer_ValidateSession_Call {
	_c.Call.Return(validateSessionResponse, err)
	return _c
}

func (_c *MockSessionServiceServer_ValidateSession_Call) RunAndReturn(run func(context1 context.Context, validateSessionRequest *proto.ValidateSessionRequest) (*proto.ValidateSessionResponse, error)) *MockSessionServiceServer_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}
