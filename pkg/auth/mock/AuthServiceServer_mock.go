// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthServiceServer creates a new instance of MockAuthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type MockAuthServiceServer struct {
	mock.Mock
}

type MockAuthServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceServer) EXPECT() *MockAuthServiceServer_Expecter {
	return &MockAuthServiceServer_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) Authenticate(context1 context.Context, authenticateRequest *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error) {
	ret := _mock.Called(context1, authenticateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *proto.AuthenticateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error)); ok {
		return returnFunc(context1, authenticateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest) *proto.AuthenticateResponse); ok {
		r0 = returnFunc(context1, authenticateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthenticateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthenticateRequest) error); ok {
		r1 = returnFunc(context1, authenticateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthServiceServer_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - context1
//   - authenticateRequest
func (_e *MockAuthServiceServer_Expecter) Authenticate(context1 interface{}, authenticateRequest interface{}) *MockAuthServiceServer_Authenticate_Call {
	return &MockAuthServiceServer_Authenticate_Call{Call: _e.mock.On("Authenticate", context1, authenticateRequest)}
}

func (_c *MockAuthServiceServer_Authenticate_Call) Run(run func(context1 context.Context, authenticateRequest *proto.AuthenticateRequest)) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AuthenticateRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_Authenticate_Call) Return(authenticateResponse *proto.AuthenticateResponse, err error) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Return(authenticateResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_Authenticate_Call) RunAndReturn(run func(context1 context.Context, authenticateRequest *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error)) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Authorize provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) Authorize(context1 context.Context, authorizeRequest *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error) {
	ret := _mock.Called(context1, authorizeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *proto.AuthorizeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error)); ok {
		return returnFunc(context1, authorizeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest) *proto.AuthorizeResponse); ok {
		r0 = returnFunc(context1, authorizeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthorizeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthorizeRequest) error); ok {
		r1 = returnFunc(context1, authorizeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthServiceServer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - context1
//   - authorizeRequest
func (_e *MockAuthServiceServer_Expecter) Authorize(context1 interface{}, authorizeRequest interface{}) *MockAuthServiceServer_Authorize_Call {
	return &MockAuthServiceServer_Authorize_Call{Call: _e.mock.On("Authorize", context1, authorizeRequest)}
}

func (_c *MockAuthServiceServer_Authorize_Call) Run(run func(context1 context.Context, authorizeRequest *proto.AuthorizeRequest)) *MockAuthServiceServer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AuthorizeRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_Authorize_Call) Return(authorizeResponse *proto.AuthorizeResponse, err error) *MockAuthServiceServer_Authorize_Call {
	_c.Call.Return(authorizeResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_Authorize_Call) RunAndReturn(run func(context1 context.Context, authorizeRequest *proto.AuthorizeRequest) (*proto.AuthorizeResponse, error)) *MockAuthServiceServer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) GenerateToken(context1 context.Context, generateTokenRequest *proto.GenerateTokenRequest) (*proto.GenerateTokenResponse, error) {
	ret := _mock.Called(context1, generateTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *proto.GenerateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GenerateTokenRequest) (*proto.GenerateTokenResponse, error)); ok {
		return returnFunc(context1, generateTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GenerateTokenRequest) *proto.GenerateTokenResponse); ok {
		r0 = returnFunc(context1, generateTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GenerateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GenerateTokenRequest) error); ok {
		r1 = returnFunc(context1, generateTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthServiceServer_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - context1
//   - generateTokenRequest
func (_e *MockAuthServiceServer_Expecter) GenerateToken(context1 interface{}, generateTokenRequest interface{}) *MockAuthServiceServer_GenerateToken_Call {
	return &MockAuthServiceServer_GenerateToken_Call{Call: _e.mock.On("GenerateToken", context1, generateTokenRequest)}
}

func (_c *MockAuthServiceServer_GenerateToken_Call) Run(run func(context1 context.Context, generateTokenRequest *proto.GenerateTokenRequest)) *MockAuthServiceServer_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GenerateTokenRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_GenerateToken_Call) Return(generateTokenResponse *proto.GenerateTokenResponse, err error) *MockAuthServiceServer_GenerateToken_Call {
	_c.Call.Return(generateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_GenerateToken_Call) RunAndReturn(run func(context1 context.Context, generateTokenRequest *proto.GenerateTokenRequest) (*proto.GenerateTokenResponse, error)) *MockAuthServiceServer_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// HasRole provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) HasRole(context1 context.Context, hasRoleRequest *proto.HasRoleRequest) (*proto.HasRoleResponse, error) {
	ret := _mock.Called(context1, hasRoleRequest)

	if len(ret) == 0 {
		panic("no return value specified for HasRole")
	}

	var r0 *proto.HasRoleResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRoleRequest) (*proto.HasRoleResponse, error)); ok {
		return returnFunc(context1, hasRoleRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HasRoleRequest) *proto.HasRoleResponse); ok {
		r0 = returnFunc(context1, hasRoleRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HasRoleResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HasRoleRequest) error); ok {
		r1 = returnFunc(context1, hasRoleRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_HasRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasRole'
type MockAuthServiceServer_HasRole_Call struct {
	*mock.Call
}

// HasRole is a helper method to define mock.On call
//   - context1
//   - hasRoleRequest
func (_e *MockAuthServiceServer_Expecter) HasRole(context1 interface{}, hasRoleRequest interface{}) *MockAuthServiceServer_HasRole_Call {
	return &MockAuthServiceServer_HasRole_Call{Call: _e.mock.On("HasRole", context1, hasRoleRequest)}
}

func (_c *MockAuthServiceServer_HasRole_Call) Run(run func(context1 context.Context, hasRoleRequest *proto.HasRoleRequest)) *MockAuthServiceServer_HasRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.HasRoleRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_HasRole_Call) Return(hasRoleResponse *proto.HasRoleResponse, err error) *MockAuthServiceServer_HasRole_Call {
	_c.Call.Return(hasRoleResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_HasRole_Call) RunAndReturn(run func(context1 context.Context, hasRoleRequest *proto.HasRoleRequest) (*proto.HasRoleResponse, error)) *MockAuthServiceServer_HasRole_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) RefreshToken(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error) {
	ret := _mock.Called(context1, refreshTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *proto.RefreshTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error)); ok {
		return returnFunc(context1, refreshTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest) *proto.RefreshTokenResponse); ok {
		r0 = returnFunc(context1, refreshTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RefreshTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RefreshTokenRequest) error); ok {
		r1 = returnFunc(context1, refreshTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthServiceServer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - context1
//   - refreshTokenRequest
func (_e *MockAuthServiceServer_Expecter) RefreshToken(context1 interface{}, refreshTokenRequest interface{}) *MockAuthServiceServer_RefreshToken_Call {
	return &MockAuthServiceServer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", context1, refreshTokenRequest)}
}

func (_c *MockAuthServiceServer_RefreshToken_Call) Run(run func(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest)) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.RefreshTokenRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_RefreshToken_Call) Return(refreshTokenResponse *proto.RefreshTokenResponse, err error) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Return(refreshTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_RefreshToken_Call) RunAndReturn(run func(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error)) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) ValidateToken(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error) {
	ret := _mock.Called(context1, validateTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *proto.ValidateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error)); ok {
		return returnFunc(context1, validateTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest) *proto.ValidateTokenResponse); ok {
		r0 = returnFunc(context1, validateTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateTokenRequest) error); ok {
		r1 = returnFunc(context1, validateTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthServiceServer_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - context1
//   - validateTokenRequest
func (_e *MockAuthServiceServer_Expecter) ValidateToken(context1 interface{}, validateTokenRequest interface{}) *MockAuthServiceServer_ValidateToken_Call {
	return &MockAuthServiceServer_ValidateToken_Call{Call: _e.mock.On("ValidateToken", context1, validateTokenRequest)}
}

func (_c *MockAuthServiceServer_ValidateToken_Call) Run(run func(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest)) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ValidateTokenRequest))
	})
	return _c
}

func (_c *MockAuthServiceServer_ValidateToken_Call) Return(validateTokenResponse *proto.ValidateTokenResponse, err error) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Return(validateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_ValidateToken_Call) RunAndReturn(run func(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error)) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAuthServiceServer provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	_mock.Called()
	return
}

// MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAuthServiceServer'
type MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAuthServiceServer is a helper method to define mock.On call
func (_e *MockAuthServiceServer_Expecter) mustEmbedUnimplementedAuthServiceServer() *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call {
	return &MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAuthServiceServer")}
}

func (_c *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call) Run(run func()) *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call) Return() *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call) RunAndReturn(run func()) *MockAuthServiceServer_mustEmbedUnimplementedAuthServiceServer_Call {
	_c.Run(run)
	return _c
}
