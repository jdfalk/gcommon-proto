// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/auth/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthServiceServer creates a new instance of MockAuthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type MockAuthServiceServer struct {
	mock.Mock
}

type MockAuthServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthServiceServer) EXPECT() *MockAuthServiceServer_Expecter {
	return &MockAuthServiceServer_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) Authenticate(context1 context.Context, authenticateRequest *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error) {
	ret := _mock.Called(context1, authenticateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *proto.AuthenticateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error)); ok {
		return returnFunc(context1, authenticateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AuthenticateRequest) *proto.AuthenticateResponse); ok {
		r0 = returnFunc(context1, authenticateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthenticateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AuthenticateRequest) error); ok {
		r1 = returnFunc(context1, authenticateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthServiceServer_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - context1 context.Context
//   - authenticateRequest *proto.AuthenticateRequest
func (_e *MockAuthServiceServer_Expecter) Authenticate(context1 interface{}, authenticateRequest interface{}) *MockAuthServiceServer_Authenticate_Call {
	return &MockAuthServiceServer_Authenticate_Call{Call: _e.mock.On("Authenticate", context1, authenticateRequest)}
}

func (_c *MockAuthServiceServer_Authenticate_Call) Run(run func(context1 context.Context, authenticateRequest *proto.AuthenticateRequest)) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AuthenticateRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AuthenticateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_Authenticate_Call) Return(authenticateResponse *proto.AuthenticateResponse, err error) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Return(authenticateResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_Authenticate_Call) RunAndReturn(run func(context1 context.Context, authenticateRequest *proto.AuthenticateRequest) (*proto.AuthenticateResponse, error)) *MockAuthServiceServer_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) ChangePassword(context1 context.Context, changePasswordRequest *proto.ChangePasswordRequest) (*proto.ChangePasswordResponse, error) {
	ret := _mock.Called(context1, changePasswordRequest)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *proto.ChangePasswordResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ChangePasswordRequest) (*proto.ChangePasswordResponse, error)); ok {
		return returnFunc(context1, changePasswordRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ChangePasswordRequest) *proto.ChangePasswordResponse); ok {
		r0 = returnFunc(context1, changePasswordRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ChangePasswordResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ChangePasswordRequest) error); ok {
		r1 = returnFunc(context1, changePasswordRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockAuthServiceServer_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - context1 context.Context
//   - changePasswordRequest *proto.ChangePasswordRequest
func (_e *MockAuthServiceServer_Expecter) ChangePassword(context1 interface{}, changePasswordRequest interface{}) *MockAuthServiceServer_ChangePassword_Call {
	return &MockAuthServiceServer_ChangePassword_Call{Call: _e.mock.On("ChangePassword", context1, changePasswordRequest)}
}

func (_c *MockAuthServiceServer_ChangePassword_Call) Run(run func(context1 context.Context, changePasswordRequest *proto.ChangePasswordRequest)) *MockAuthServiceServer_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ChangePasswordRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ChangePasswordRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_ChangePassword_Call) Return(changePasswordResponse *proto.ChangePasswordResponse, err error) *MockAuthServiceServer_ChangePassword_Call {
	_c.Call.Return(changePasswordResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_ChangePassword_Call) RunAndReturn(run func(context1 context.Context, changePasswordRequest *proto.ChangePasswordRequest) (*proto.ChangePasswordResponse, error)) *MockAuthServiceServer_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// CompletePasswordReset provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) CompletePasswordReset(context1 context.Context, completePasswordResetRequest *proto.CompletePasswordResetRequest) (*proto.CompletePasswordResetResponse, error) {
	ret := _mock.Called(context1, completePasswordResetRequest)

	if len(ret) == 0 {
		panic("no return value specified for CompletePasswordReset")
	}

	var r0 *proto.CompletePasswordResetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CompletePasswordResetRequest) (*proto.CompletePasswordResetResponse, error)); ok {
		return returnFunc(context1, completePasswordResetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CompletePasswordResetRequest) *proto.CompletePasswordResetResponse); ok {
		r0 = returnFunc(context1, completePasswordResetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CompletePasswordResetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CompletePasswordResetRequest) error); ok {
		r1 = returnFunc(context1, completePasswordResetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_CompletePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompletePasswordReset'
type MockAuthServiceServer_CompletePasswordReset_Call struct {
	*mock.Call
}

// CompletePasswordReset is a helper method to define mock.On call
//   - context1 context.Context
//   - completePasswordResetRequest *proto.CompletePasswordResetRequest
func (_e *MockAuthServiceServer_Expecter) CompletePasswordReset(context1 interface{}, completePasswordResetRequest interface{}) *MockAuthServiceServer_CompletePasswordReset_Call {
	return &MockAuthServiceServer_CompletePasswordReset_Call{Call: _e.mock.On("CompletePasswordReset", context1, completePasswordResetRequest)}
}

func (_c *MockAuthServiceServer_CompletePasswordReset_Call) Run(run func(context1 context.Context, completePasswordResetRequest *proto.CompletePasswordResetRequest)) *MockAuthServiceServer_CompletePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CompletePasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CompletePasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_CompletePasswordReset_Call) Return(completePasswordResetResponse *proto.CompletePasswordResetResponse, err error) *MockAuthServiceServer_CompletePasswordReset_Call {
	_c.Call.Return(completePasswordResetResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_CompletePasswordReset_Call) RunAndReturn(run func(context1 context.Context, completePasswordResetRequest *proto.CompletePasswordResetRequest) (*proto.CompletePasswordResetResponse, error)) *MockAuthServiceServer_CompletePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) GetUserInfo(context1 context.Context, getUserInfoRequest *proto.GetUserInfoRequest) (*proto.GetUserInfoResponse, error) {
	ret := _mock.Called(context1, getUserInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *proto.GetUserInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserInfoRequest) (*proto.GetUserInfoResponse, error)); ok {
		return returnFunc(context1, getUserInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetUserInfoRequest) *proto.GetUserInfoResponse); ok {
		r0 = returnFunc(context1, getUserInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetUserInfoRequest) error); ok {
		r1 = returnFunc(context1, getUserInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockAuthServiceServer_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getUserInfoRequest *proto.GetUserInfoRequest
func (_e *MockAuthServiceServer_Expecter) GetUserInfo(context1 interface{}, getUserInfoRequest interface{}) *MockAuthServiceServer_GetUserInfo_Call {
	return &MockAuthServiceServer_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", context1, getUserInfoRequest)}
}

func (_c *MockAuthServiceServer_GetUserInfo_Call) Run(run func(context1 context.Context, getUserInfoRequest *proto.GetUserInfoRequest)) *MockAuthServiceServer_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetUserInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetUserInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_GetUserInfo_Call) Return(getUserInfoResponse *proto.GetUserInfoResponse, err error) *MockAuthServiceServer_GetUserInfo_Call {
	_c.Call.Return(getUserInfoResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_GetUserInfo_Call) RunAndReturn(run func(context1 context.Context, getUserInfoRequest *proto.GetUserInfoRequest) (*proto.GetUserInfoResponse, error)) *MockAuthServiceServer_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// InitiatePasswordReset provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) InitiatePasswordReset(context1 context.Context, initiatePasswordResetRequest *proto.InitiatePasswordResetRequest) (*proto.InitiatePasswordResetResponse, error) {
	ret := _mock.Called(context1, initiatePasswordResetRequest)

	if len(ret) == 0 {
		panic("no return value specified for InitiatePasswordReset")
	}

	var r0 *proto.InitiatePasswordResetResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitiatePasswordResetRequest) (*proto.InitiatePasswordResetResponse, error)); ok {
		return returnFunc(context1, initiatePasswordResetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.InitiatePasswordResetRequest) *proto.InitiatePasswordResetResponse); ok {
		r0 = returnFunc(context1, initiatePasswordResetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.InitiatePasswordResetResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.InitiatePasswordResetRequest) error); ok {
		r1 = returnFunc(context1, initiatePasswordResetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_InitiatePasswordReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiatePasswordReset'
type MockAuthServiceServer_InitiatePasswordReset_Call struct {
	*mock.Call
}

// InitiatePasswordReset is a helper method to define mock.On call
//   - context1 context.Context
//   - initiatePasswordResetRequest *proto.InitiatePasswordResetRequest
func (_e *MockAuthServiceServer_Expecter) InitiatePasswordReset(context1 interface{}, initiatePasswordResetRequest interface{}) *MockAuthServiceServer_InitiatePasswordReset_Call {
	return &MockAuthServiceServer_InitiatePasswordReset_Call{Call: _e.mock.On("InitiatePasswordReset", context1, initiatePasswordResetRequest)}
}

func (_c *MockAuthServiceServer_InitiatePasswordReset_Call) Run(run func(context1 context.Context, initiatePasswordResetRequest *proto.InitiatePasswordResetRequest)) *MockAuthServiceServer_InitiatePasswordReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.InitiatePasswordResetRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.InitiatePasswordResetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_InitiatePasswordReset_Call) Return(initiatePasswordResetResponse *proto.InitiatePasswordResetResponse, err error) *MockAuthServiceServer_InitiatePasswordReset_Call {
	_c.Call.Return(initiatePasswordResetResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_InitiatePasswordReset_Call) RunAndReturn(run func(context1 context.Context, initiatePasswordResetRequest *proto.InitiatePasswordResetRequest) (*proto.InitiatePasswordResetResponse, error)) *MockAuthServiceServer_InitiatePasswordReset_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) RefreshToken(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error) {
	ret := _mock.Called(context1, refreshTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *proto.RefreshTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error)); ok {
		return returnFunc(context1, refreshTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RefreshTokenRequest) *proto.RefreshTokenResponse); ok {
		r0 = returnFunc(context1, refreshTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RefreshTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RefreshTokenRequest) error); ok {
		r1 = returnFunc(context1, refreshTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthServiceServer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - context1 context.Context
//   - refreshTokenRequest *proto.RefreshTokenRequest
func (_e *MockAuthServiceServer_Expecter) RefreshToken(context1 interface{}, refreshTokenRequest interface{}) *MockAuthServiceServer_RefreshToken_Call {
	return &MockAuthServiceServer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", context1, refreshTokenRequest)}
}

func (_c *MockAuthServiceServer_RefreshToken_Call) Run(run func(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest)) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RefreshTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RefreshTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_RefreshToken_Call) Return(refreshTokenResponse *proto.RefreshTokenResponse, err error) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Return(refreshTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_RefreshToken_Call) RunAndReturn(run func(context1 context.Context, refreshTokenRequest *proto.RefreshTokenRequest) (*proto.RefreshTokenResponse, error)) *MockAuthServiceServer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) RevokeToken(context1 context.Context, revokeTokenRequest *proto.RevokeTokenRequest) (*proto.RevokeTokenResponse, error) {
	ret := _mock.Called(context1, revokeTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 *proto.RevokeTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RevokeTokenRequest) (*proto.RevokeTokenResponse, error)); ok {
		return returnFunc(context1, revokeTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RevokeTokenRequest) *proto.RevokeTokenResponse); ok {
		r0 = returnFunc(context1, revokeTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RevokeTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RevokeTokenRequest) error); ok {
		r1 = returnFunc(context1, revokeTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockAuthServiceServer_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - context1 context.Context
//   - revokeTokenRequest *proto.RevokeTokenRequest
func (_e *MockAuthServiceServer_Expecter) RevokeToken(context1 interface{}, revokeTokenRequest interface{}) *MockAuthServiceServer_RevokeToken_Call {
	return &MockAuthServiceServer_RevokeToken_Call{Call: _e.mock.On("RevokeToken", context1, revokeTokenRequest)}
}

func (_c *MockAuthServiceServer_RevokeToken_Call) Run(run func(context1 context.Context, revokeTokenRequest *proto.RevokeTokenRequest)) *MockAuthServiceServer_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RevokeTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RevokeTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_RevokeToken_Call) Return(revokeTokenResponse *proto.RevokeTokenResponse, err error) *MockAuthServiceServer_RevokeToken_Call {
	_c.Call.Return(revokeTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_RevokeToken_Call) RunAndReturn(run func(context1 context.Context, revokeTokenRequest *proto.RevokeTokenRequest) (*proto.RevokeTokenResponse, error)) *MockAuthServiceServer_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) ValidateToken(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error) {
	ret := _mock.Called(context1, validateTokenRequest)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *proto.ValidateTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error)); ok {
		return returnFunc(context1, validateTokenRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ValidateTokenRequest) *proto.ValidateTokenResponse); ok {
		r0 = returnFunc(context1, validateTokenRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ValidateTokenResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ValidateTokenRequest) error); ok {
		r1 = returnFunc(context1, validateTokenRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthServiceServer_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - context1 context.Context
//   - validateTokenRequest *proto.ValidateTokenRequest
func (_e *MockAuthServiceServer_Expecter) ValidateToken(context1 interface{}, validateTokenRequest interface{}) *MockAuthServiceServer_ValidateToken_Call {
	return &MockAuthServiceServer_ValidateToken_Call{Call: _e.mock.On("ValidateToken", context1, validateTokenRequest)}
}

func (_c *MockAuthServiceServer_ValidateToken_Call) Run(run func(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest)) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ValidateTokenRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ValidateTokenRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_ValidateToken_Call) Return(validateTokenResponse *proto.ValidateTokenResponse, err error) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Return(validateTokenResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_ValidateToken_Call) RunAndReturn(run func(context1 context.Context, validateTokenRequest *proto.ValidateTokenRequest) (*proto.ValidateTokenResponse, error)) *MockAuthServiceServer_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyCredentials provides a mock function for the type MockAuthServiceServer
func (_mock *MockAuthServiceServer) VerifyCredentials(context1 context.Context, verifyCredentialsRequest *proto.VerifyCredentialsRequest) (*proto.VerifyCredentialsResponse, error) {
	ret := _mock.Called(context1, verifyCredentialsRequest)

	if len(ret) == 0 {
		panic("no return value specified for VerifyCredentials")
	}

	var r0 *proto.VerifyCredentialsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.VerifyCredentialsRequest) (*proto.VerifyCredentialsResponse, error)); ok {
		return returnFunc(context1, verifyCredentialsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.VerifyCredentialsRequest) *proto.VerifyCredentialsResponse); ok {
		r0 = returnFunc(context1, verifyCredentialsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.VerifyCredentialsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.VerifyCredentialsRequest) error); ok {
		r1 = returnFunc(context1, verifyCredentialsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthServiceServer_VerifyCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyCredentials'
type MockAuthServiceServer_VerifyCredentials_Call struct {
	*mock.Call
}

// VerifyCredentials is a helper method to define mock.On call
//   - context1 context.Context
//   - verifyCredentialsRequest *proto.VerifyCredentialsRequest
func (_e *MockAuthServiceServer_Expecter) VerifyCredentials(context1 interface{}, verifyCredentialsRequest interface{}) *MockAuthServiceServer_VerifyCredentials_Call {
	return &MockAuthServiceServer_VerifyCredentials_Call{Call: _e.mock.On("VerifyCredentials", context1, verifyCredentialsRequest)}
}

func (_c *MockAuthServiceServer_VerifyCredentials_Call) Run(run func(context1 context.Context, verifyCredentialsRequest *proto.VerifyCredentialsRequest)) *MockAuthServiceServer_VerifyCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.VerifyCredentialsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.VerifyCredentialsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthServiceServer_VerifyCredentials_Call) Return(verifyCredentialsResponse *proto.VerifyCredentialsResponse, err error) *MockAuthServiceServer_VerifyCredentials_Call {
	_c.Call.Return(verifyCredentialsResponse, err)
	return _c
}

func (_c *MockAuthServiceServer_VerifyCredentials_Call) RunAndReturn(run func(context1 context.Context, verifyCredentialsRequest *proto.VerifyCredentialsRequest) (*proto.VerifyCredentialsResponse, error)) *MockAuthServiceServer_VerifyCredentials_Call {
	_c.Call.Return(run)
	return _c
}
