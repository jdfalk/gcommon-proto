// file: pkg/organization/proto/types/tenant_isolation.proto
edition = "2023";

package gcommon.v1.organization;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/organization/proto/enums/isolation_level.proto";
import "pkg/common/proto/types/key_value.proto";

option go_package = "../../../../pb;organizationpb";
option features.(pb.go).api_level = API_HYBRID;

/**
 * TenantIsolation type defining the isolation configuration for a tenant.
 * Specifies how tenant data and resources are separated from other tenants.
 */
message TenantIsolation {
  // Tenant identifier
  string tenant_id = 1;

  // Isolation level for this tenant
  IsolationLevel level = 2;

  // Database isolation configuration
  DatabaseIsolation database = 3;

  // Network isolation configuration
  NetworkIsolation network = 4;

  // Storage isolation configuration
  StorageIsolation storage = 5;

  // Compute isolation configuration
  ComputeIsolation compute = 6;

  // Encryption configuration for tenant data
  EncryptionConfig encryption = 7;

  // Access control configuration
  AccessControl access_control = 8;

  // Audit and compliance configuration
  AuditConfig audit = 9;

  // Isolation metadata and custom settings
  repeated gcommon.v1.common.KeyValue metadata = 10 [lazy = true];

  // Isolation configuration creation timestamp
  google.protobuf.Timestamp created_at = 11 [lazy = true];

  // Last update timestamp
  google.protobuf.Timestamp updated_at = 12 [lazy = true];

  // User ID who configured this isolation
  string configured_by = 13;
}

/**
 * DatabaseIsolation type defining database-level isolation for a tenant.
 */
message DatabaseIsolation {
  // Database instance identifier (for INFRASTRUCTURE isolation)
  string database_instance = 1;

  // Schema or database name for this tenant
  string schema_name = 2;

  // Database connection parameters
  repeated gcommon.v1.common.KeyValue connection_params = 3 [lazy = true];

  // Whether tenant has dedicated database
  bool dedicated_database = 4;

  // Database backup configuration
  BackupConfig backup = 5;

  // Database access restrictions
  repeated string allowed_operations = 6;

  // Maximum connections allowed for this tenant
  int32 max_connections = 7;

  // Query timeout in seconds
  int32 query_timeout_seconds = 8;
}

/**
 * NetworkIsolation type defining network-level isolation for a tenant.
 */
message NetworkIsolation {
  // Virtual private cloud (VPC) identifier
  string vpc_id = 1;

  // Subnet identifier for this tenant
  string subnet_id = 2;

  // Security group identifiers
  repeated string security_group_ids = 3;

  // Network access control list (ACL) rules
  repeated NetworkACLRule acl_rules = 4;

  // Whether tenant has dedicated network
  bool dedicated_network = 5;

  // Load balancer configuration for this tenant
  LoadBalancerConfig load_balancer = 6;

  // CDN configuration for this tenant
  CDNConfig cdn = 7;

  // Custom domain configuration
  DomainConfig domain = 8;
}

/**
 * StorageIsolation type defining storage-level isolation for a tenant.
 */
message StorageIsolation {
  // Storage bucket or container identifier
  string storage_bucket = 1;

  // Storage path prefix for this tenant
  string path_prefix = 2;

  // Whether tenant has dedicated storage
  bool dedicated_storage = 3;

  // Storage encryption configuration
  StorageEncryption encryption = 4;

  // Storage access policies
  repeated StoragePolicy policies = 5;

  // Backup and replication configuration
  StorageBackupConfig backup = 6;

  // Storage quota limits
  StorageQuota quota = 7;
}

/**
 * ComputeIsolation type defining compute-level isolation for a tenant.
 */
message ComputeIsolation {
  // Dedicated compute instance identifier
  string compute_instance = 1;

  // Container or namespace identifier
  string namespace = 2;

  // CPU allocation for this tenant
  CPUAllocation cpu = 3;

  // Memory allocation for this tenant
  MemoryAllocation memory = 4;

  // Whether tenant has dedicated compute resources
  bool dedicated_compute = 5;

  // Resource limits and quotas
  ResourceLimits limits = 6;

  // Auto-scaling configuration
  AutoScalingConfig auto_scaling = 7;
}

/**
 * Supporting message types for isolation configuration.
 */
message EncryptionConfig {
  // Whether encryption at rest is enabled
  bool encryption_at_rest = 1;

  // Whether encryption in transit is enabled
  bool encryption_in_transit = 2;

  // Encryption key management service
  string key_management_service = 3;

  // Customer-managed encryption key ID
  string customer_key_id = 4;

  // Encryption algorithm used
  string encryption_algorithm = 5;
}

message AccessControl {
  // IP address whitelist for tenant access
  repeated string ip_whitelist = 1;

  // Allowed authentication methods
  repeated string auth_methods = 2;

  // Session timeout in minutes
  int32 session_timeout = 3;

  // Maximum concurrent sessions
  int32 max_concurrent_sessions = 4;

  // Geographic access restrictions
  repeated string allowed_countries = 5;

  // Time-based access restrictions
  repeated TimeRestriction time_restrictions = 6;
}

message AuditConfig {
  // Whether audit logging is enabled
  bool audit_enabled = 1;

  // Audit log retention period in days
  int32 retention_days = 2;

  // Audit log storage location
  string storage_location = 3;

  // Events to audit
  repeated string audited_events = 4;

  // Whether real-time monitoring is enabled
  bool real_time_monitoring = 5;

  // Alert configuration for audit events
  repeated AuditAlert alerts = 6;
}

message BackupConfig {
  // Whether automated backups are enabled
  bool enabled = 1;

  // Backup frequency (hourly, daily, weekly)
  string frequency = 2;

  // Backup retention period in days
  int32 retention_days = 3;

  // Backup storage location
  string storage_location = 4;

  // Whether point-in-time recovery is enabled
  bool point_in_time_recovery = 5;
}

message NetworkACLRule {
  // Rule action (allow, deny)
  string action = 1;

  // Source IP or CIDR block
  string source = 2;

  // Destination IP or CIDR block
  string destination = 3;

  // Protocol (TCP, UDP, ICMP)
  string protocol = 4;

  // Port range
  string port_range = 5;

  // Rule priority
  int32 priority = 6;
}

message LoadBalancerConfig {
  // Load balancer type (application, network)
  string type = 1;

  // Load balancing algorithm
  string algorithm = 2;

  // Health check configuration
  HealthCheckConfig health_check = 3;

  // SSL/TLS configuration
  SSLConfig ssl = 4;
}

message CDNConfig {
  // CDN provider
  string provider = 1;

  // CDN distribution ID
  string distribution_id = 2;

  // Cache behavior settings
  repeated CacheBehavior cache_behaviors = 3;

  // Origin configuration
  OriginConfig origin = 4;
}

message DomainConfig {
  // Custom domain name
  string domain_name = 1;

  // SSL certificate ARN or ID
  string ssl_certificate = 2;

  // DNS configuration
  DNSConfig dns = 3;

  // Domain validation status
  string validation_status = 4;
}

message StorageEncryption {
  // Encryption type (AES256, KMS)
  string type = 1;

  // Key ID for KMS encryption
  string key_id = 2;

  // Whether server-side encryption is enabled
  bool server_side = 3;

  // Whether client-side encryption is enabled
  bool client_side = 4;
}

message StoragePolicy {
  // Policy name
  string name = 1;

  // Policy statement (JSON)
  string statement = 2;

  // Policy effect (Allow, Deny)
  string effect = 3;

  // Resources covered by this policy
  repeated string resources = 4;

  // Actions covered by this policy
  repeated string actions = 5;
}

message StorageBackupConfig {
  // Whether backup is enabled
  bool enabled = 1;

  // Backup schedule (cron expression)
  string schedule = 2;

  // Backup retention period
  int32 retention_days = 3;

  // Cross-region backup enabled
  bool cross_region = 4;

  // Backup encryption enabled
  bool encryption_enabled = 5;
}

message StorageQuota {
  // Maximum storage size in bytes
  int64 max_size_bytes = 1;

  // Maximum number of objects
  int64 max_objects = 2;

  // Maximum request rate per second
  int32 max_requests_per_second = 3;

  // Transfer quota in bytes per month
  int64 transfer_quota_bytes = 4;
}

message CPUAllocation {
  // Number of CPU cores
  int32 cores = 1;

  // CPU frequency in MHz
  int32 frequency_mhz = 2;

  // CPU usage limit percentage
  int32 usage_limit_percent = 3;

  // CPU priority
  int32 priority = 4;
}

message MemoryAllocation {
  // Memory size in MB
  int64 size_mb = 1;

  // Memory usage limit percentage
  int32 usage_limit_percent = 2;

  // Swap allocation in MB
  int64 swap_mb = 3;
}

message ResourceLimits {
  // Maximum CPU usage percentage
  int32 max_cpu_percent = 1;

  // Maximum memory usage in MB
  int64 max_memory_mb = 2;

  // Maximum disk I/O operations per second
  int32 max_disk_iops = 3;

  // Maximum network bandwidth in Mbps
  int32 max_network_mbps = 4;

  // Maximum number of processes
  int32 max_processes = 5;

  // Maximum number of file descriptors
  int32 max_file_descriptors = 6;
}

message AutoScalingConfig {
  // Whether auto-scaling is enabled
  bool enabled = 1;

  // Minimum number of instances
  int32 min_instances = 2;

  // Maximum number of instances
  int32 max_instances = 3;

  // Target CPU utilization percentage
  int32 target_cpu_percent = 4;

  // Target memory utilization percentage
  int32 target_memory_percent = 5;

  // Scale-up cooldown period in seconds
  int32 scale_up_cooldown = 6;

  // Scale-down cooldown period in seconds
  int32 scale_down_cooldown = 7;
}

message TimeRestriction {
  // Day of week (0-6, 0=Sunday)
  int32 day_of_week = 1;

  // Start time (24-hour format, e.g., "09:00")
  string start_time = 2;

  // End time (24-hour format, e.g., "17:00")
  string end_time = 3;

  // Timezone for this restriction
  string timezone = 4;
}

message AuditAlert {
  // Alert name
  string name = 1;

  // Event patterns to match
  repeated string event_patterns = 2;

  // Alert severity level
  string severity = 3;

  // Notification channels for this alert
  repeated string notification_channels = 4;

  // Alert threshold (if applicable)
  int32 threshold = 5;

  // Time window for threshold evaluation in minutes
  int32 time_window_minutes = 6;
}

message HealthCheckConfig {
  // Health check path
  string path = 1;

  // Health check port
  int32 port = 2;

  // Health check protocol (HTTP, HTTPS, TCP)
  string protocol = 3;

  // Health check interval in seconds
  int32 interval_seconds = 4;

  // Health check timeout in seconds
  int32 timeout_seconds = 5;

  // Healthy threshold
  int32 healthy_threshold = 6;

  // Unhealthy threshold
  int32 unhealthy_threshold = 7;
}

message SSLConfig {
  // SSL certificate ARN or ID
  string certificate_id = 1;

  // SSL policy
  string ssl_policy = 2;

  // Whether to redirect HTTP to HTTPS
  bool redirect_http = 3;

  // Minimum TLS version
  string min_tls_version = 4;
}

message CacheBehavior {
  // Path pattern for this behavior
  string path_pattern = 1;

  // Cache TTL in seconds
  int64 ttl_seconds = 2;

  // Whether to compress objects
  bool compress = 3;

  // Allowed HTTP methods
  repeated string allowed_methods = 4;

  // Cache key policy
  CacheKeyPolicy cache_key = 5;
}

message OriginConfig {
  // Origin domain name
  string domain_name = 1;

  // Origin path
  string origin_path = 2;

  // Origin protocol policy
  string protocol_policy = 3;

  // Custom headers to send to origin
  repeated gcommon.v1.common.KeyValue custom_headers = 4;
}

message DNSConfig {
  // DNS provider
  string provider = 1;

  // DNS zone ID
  string zone_id = 2;

  // DNS records
  repeated DNSRecord records = 3;

  // TTL for DNS records
  int32 ttl = 4;
}

message DNSRecord {
  // Record type (A, CNAME, TXT, etc.)
  string type = 1;

  // Record name
  string name = 2;

  // Record value
  string value = 3;

  // Record TTL
  int32 ttl = 4;

  // Record priority (for MX records)
  int32 priority = 5;
}

message CacheKeyPolicy {
  // Whether to include query strings in cache key
  bool include_query_strings = 1;

  // Query string whitelist
  repeated string query_string_whitelist = 2;

  // Whether to include headers in cache key
  bool include_headers = 3;

  // Header whitelist
  repeated string header_whitelist = 4;

  // Whether to include cookies in cache key
  bool include_cookies = 5;

  // Cookie whitelist
  repeated string cookie_whitelist = 6;
}