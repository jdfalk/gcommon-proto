// file: pkg/organization/proto/messages/organization_hierarchy.proto
edition = "2023";

package gcommon.v1.organization;

import "pkg/common/proto/key_value.proto";
import "google/protobuf/timestamp.proto";
import "pkg/organization/proto/types/key_value.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/organization/proto";

/**
 * OrganizationHierarchy message representing the hierarchical structure of an organization.
 * Defines parent-child relationships between organizational units and supports
 * multiple hierarchy types (department, team, project, geographic, etc.).
 */
message OrganizationHierarchy {
  // Unique hierarchy identifier
  string id = 1;

  // Organization identifier
  string organization_id = 2;

  // Type of hierarchy structure
  HierarchyType hierarchy_type = 3;

  // Name of this hierarchy configuration
  string name = 4;

  // Description of this hierarchy structure
  string description = 5;

  // Root node of the hierarchy (typically the organization itself)
  HierarchyNode root_node = 6;

  // Whether this hierarchy is currently active/primary
  bool active = 7;

  // Hierarchy metadata and configuration
  repeated gcommon.v1.common.KeyValue metadata = 8 [lazy = true];

  // Hierarchy creation timestamp
  google.protobuf.Timestamp created_at = 9 [lazy = true];

  // Last update timestamp
  google.protobuf.Timestamp updated_at = 10 [lazy = true];

  // User ID who created this hierarchy
  string created_by = 11;

  // User ID who last updated this hierarchy
  string updated_by = 12;
}

/**
 * HierarchyNode message representing a single node in the organizational hierarchy.
 * Can represent departments, teams, projects, or any other organizational unit.
 */
message HierarchyNode {
  // Unique node identifier
  string id = 1;

  // Node name
  string name = 2;

  // Type of organizational unit (department, team, project, etc.)
  string node_type = 3;

  // Reference ID to the actual entity (department_id, team_id, etc.)
  string entity_id = 4;

  // Parent node ID (null for root node)
  string parent_id = 5;

  // List of direct child node IDs
  repeated string child_ids = 6;

  // Node level in the hierarchy (0 for root)
  int32 level = 7;

  // Node position among siblings (for ordering)
  int32 position = 8;

  // Node path from root (e.g., "/org/dept1/team1")
  string path = 9;

  // Manager or responsible person for this node
  string manager_id = 10;

  // Node metadata and custom attributes
  repeated gcommon.v1.common.KeyValue metadata = 11 [lazy = true];

  // Whether this node is currently active
  bool active = 12;
}

/**
 * HierarchyPath message representing a complete path in the organizational hierarchy.
 * Used for efficient hierarchy traversal and relationship queries.
 */
message HierarchyPath {
  // Descendant node ID
  string descendant_id = 1;

  // Ancestor node ID
  string ancestor_id = 2;

  // Distance between ancestor and descendant (1 = direct parent-child)
  int32 distance = 3;

  // Complete path from ancestor to descendant
  repeated string path_nodes = 4;
}
