// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/organization/proto/messages/organization_hierarchy.proto

//go:build protoopaque

package organizationpb

import (
	pb "../../../../pkg/common/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// OrganizationHierarchy message representing the hierarchical structure of an organization.
// Defines parent-child relationships between organizational units and supports
// multiple hierarchy types (department, team, project, geographic, etc.).
type OrganizationHierarchy struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id             *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_OrganizationId *string                `protobuf:"bytes,2,opt,name=organization_id,json=organizationId"`
	xxx_hidden_HierarchyType  HierarchyType          `protobuf:"varint,3,opt,name=hierarchy_type,json=hierarchyType,enum=gcommon.v1.organization.HierarchyType"`
	xxx_hidden_Name           *string                `protobuf:"bytes,4,opt,name=name"`
	xxx_hidden_Description    *string                `protobuf:"bytes,5,opt,name=description"`
	xxx_hidden_RootNode       *HierarchyNode         `protobuf:"bytes,6,opt,name=root_node,json=rootNode"`
	xxx_hidden_Active         bool                   `protobuf:"varint,7,opt,name=active"`
	xxx_hidden_Metadata       *[]*pb.KeyValue        `protobuf:"bytes,8,rep,name=metadata"`
	xxx_hidden_CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt"`
	xxx_hidden_UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt"`
	xxx_hidden_CreatedBy      *string                `protobuf:"bytes,11,opt,name=created_by,json=createdBy"`
	xxx_hidden_UpdatedBy      *string                `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *OrganizationHierarchy) Reset() {
	*x = OrganizationHierarchy{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationHierarchy) ProtoMessage() {}

func (x *OrganizationHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OrganizationHierarchy) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) GetOrganizationId() string {
	if x != nil {
		if x.xxx_hidden_OrganizationId != nil {
			return *x.xxx_hidden_OrganizationId
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) GetHierarchyType() HierarchyType {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_HierarchyType
		}
	}
	return HierarchyType_HIERARCHY_TYPE_UNSPECIFIED
}

func (x *OrganizationHierarchy) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) GetDescription() string {
	if x != nil {
		if x.xxx_hidden_Description != nil {
			return *x.xxx_hidden_Description
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) GetRootNode() *HierarchyNode {
	if x != nil {
		return x.xxx_hidden_RootNode
	}
	return nil
}

func (x *OrganizationHierarchy) GetActive() bool {
	if x != nil {
		return x.xxx_hidden_Active
	}
	return false
}

func (x *OrganizationHierarchy) GetMetadata() []*pb.KeyValue {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 7) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Metadata) {
				protoimpl.X.UnmarshalField(x, 8)
			}
			var rv *[]*pb.KeyValue
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *OrganizationHierarchy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 8) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_CreatedAt) {
				protoimpl.X.UnmarshalField(x, 9)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_CreatedAt), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *OrganizationHierarchy) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 9) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_UpdatedAt) {
				protoimpl.X.UnmarshalField(x, 10)
			}
			var rv *timestamppb.Timestamp
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_UpdatedAt), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *OrganizationHierarchy) GetCreatedBy() string {
	if x != nil {
		if x.xxx_hidden_CreatedBy != nil {
			return *x.xxx_hidden_CreatedBy
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) GetUpdatedBy() string {
	if x != nil {
		if x.xxx_hidden_UpdatedBy != nil {
			return *x.xxx_hidden_UpdatedBy
		}
		return ""
	}
	return ""
}

func (x *OrganizationHierarchy) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *OrganizationHierarchy) SetOrganizationId(v string) {
	x.xxx_hidden_OrganizationId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *OrganizationHierarchy) SetHierarchyType(v HierarchyType) {
	x.xxx_hidden_HierarchyType = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
}

func (x *OrganizationHierarchy) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 12)
}

func (x *OrganizationHierarchy) SetDescription(v string) {
	x.xxx_hidden_Description = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 12)
}

func (x *OrganizationHierarchy) SetRootNode(v *HierarchyNode) {
	x.xxx_hidden_RootNode = v
}

func (x *OrganizationHierarchy) SetActive(v bool) {
	x.xxx_hidden_Active = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

func (x *OrganizationHierarchy) SetMetadata(v []*pb.KeyValue) {
	var sv *[]*pb.KeyValue
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*pb.KeyValue{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 12)
}

func (x *OrganizationHierarchy) SetCreatedAt(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
	}
}

func (x *OrganizationHierarchy) SetUpdatedAt(v *timestamppb.Timestamp) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_UpdatedAt, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 12)
	}
}

func (x *OrganizationHierarchy) SetCreatedBy(v string) {
	x.xxx_hidden_CreatedBy = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 12)
}

func (x *OrganizationHierarchy) SetUpdatedBy(v string) {
	x.xxx_hidden_UpdatedBy = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 12)
}

func (x *OrganizationHierarchy) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *OrganizationHierarchy) HasOrganizationId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *OrganizationHierarchy) HasHierarchyType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *OrganizationHierarchy) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *OrganizationHierarchy) HasDescription() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *OrganizationHierarchy) HasRootNode() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_RootNode != nil
}

func (x *OrganizationHierarchy) HasActive() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *OrganizationHierarchy) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *OrganizationHierarchy) HasUpdatedAt() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *OrganizationHierarchy) HasCreatedBy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 10)
}

func (x *OrganizationHierarchy) HasUpdatedBy() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *OrganizationHierarchy) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *OrganizationHierarchy) ClearOrganizationId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_OrganizationId = nil
}

func (x *OrganizationHierarchy) ClearHierarchyType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_HierarchyType = HierarchyType_HIERARCHY_TYPE_UNSPECIFIED
}

func (x *OrganizationHierarchy) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Name = nil
}

func (x *OrganizationHierarchy) ClearDescription() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Description = nil
}

func (x *OrganizationHierarchy) ClearRootNode() {
	x.xxx_hidden_RootNode = nil
}

func (x *OrganizationHierarchy) ClearActive() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Active = false
}

func (x *OrganizationHierarchy) ClearCreatedAt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_CreatedAt, (*timestamppb.Timestamp)(nil))
}

func (x *OrganizationHierarchy) ClearUpdatedAt() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_UpdatedAt, (*timestamppb.Timestamp)(nil))
}

func (x *OrganizationHierarchy) ClearCreatedBy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 10)
	x.xxx_hidden_CreatedBy = nil
}

func (x *OrganizationHierarchy) ClearUpdatedBy() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_UpdatedBy = nil
}

type OrganizationHierarchy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique hierarchy identifier
	Id *string
	// Organization identifier
	OrganizationId *string
	// Type of hierarchy structure
	HierarchyType *HierarchyType
	// Name of this hierarchy configuration
	Name *string
	// Description of this hierarchy structure
	Description *string
	// Root node of the hierarchy (typically the organization itself)
	RootNode *HierarchyNode
	// Whether this hierarchy is currently active/primary
	Active *bool
	// Hierarchy metadata and configuration
	Metadata []*pb.KeyValue
	// Hierarchy creation timestamp
	CreatedAt *timestamppb.Timestamp
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp
	// User ID who created this hierarchy
	CreatedBy *string
	// User ID who last updated this hierarchy
	UpdatedBy *string
}

func (b0 OrganizationHierarchy_builder) Build() *OrganizationHierarchy {
	m0 := &OrganizationHierarchy{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Id = b.Id
	}
	if b.OrganizationId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_OrganizationId = b.OrganizationId
	}
	if b.HierarchyType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_HierarchyType = *b.HierarchyType
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 12)
		x.xxx_hidden_Name = b.Name
	}
	if b.Description != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 12)
		x.xxx_hidden_Description = b.Description
	}
	x.xxx_hidden_RootNode = b.RootNode
	if b.Active != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_Active = *b.Active
	}
	if b.Metadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 12)
		x.xxx_hidden_Metadata = &b.Metadata
	}
	if b.CreatedAt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_CreatedAt = b.CreatedAt
	}
	if b.UpdatedAt != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 12)
		x.xxx_hidden_UpdatedAt = b.UpdatedAt
	}
	if b.CreatedBy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 12)
		x.xxx_hidden_CreatedBy = b.CreatedBy
	}
	if b.UpdatedBy != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 12)
		x.xxx_hidden_UpdatedBy = b.UpdatedBy
	}
	return m0
}

// *
// HierarchyNode message representing a single node in the organizational hierarchy.
// Can represent departments, teams, projects, or any other organizational unit.
type HierarchyNode struct {
	state                protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id        *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name      *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_NodeType  *string                `protobuf:"bytes,3,opt,name=node_type,json=nodeType"`
	xxx_hidden_EntityId  *string                `protobuf:"bytes,4,opt,name=entity_id,json=entityId"`
	xxx_hidden_ParentId  *string                `protobuf:"bytes,5,opt,name=parent_id,json=parentId"`
	xxx_hidden_ChildIds  []string               `protobuf:"bytes,6,rep,name=child_ids,json=childIds"`
	xxx_hidden_Level     int32                  `protobuf:"varint,7,opt,name=level"`
	xxx_hidden_Position  int32                  `protobuf:"varint,8,opt,name=position"`
	xxx_hidden_Path      *string                `protobuf:"bytes,9,opt,name=path"`
	xxx_hidden_ManagerId *string                `protobuf:"bytes,10,opt,name=manager_id,json=managerId"`
	xxx_hidden_Metadata  *[]*pb.KeyValue        `protobuf:"bytes,11,rep,name=metadata"`
	xxx_hidden_Active    bool                   `protobuf:"varint,12,opt,name=active"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HierarchyNode) Reset() {
	*x = HierarchyNode{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyNode) ProtoMessage() {}

func (x *HierarchyNode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HierarchyNode) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetNodeType() string {
	if x != nil {
		if x.xxx_hidden_NodeType != nil {
			return *x.xxx_hidden_NodeType
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetEntityId() string {
	if x != nil {
		if x.xxx_hidden_EntityId != nil {
			return *x.xxx_hidden_EntityId
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetParentId() string {
	if x != nil {
		if x.xxx_hidden_ParentId != nil {
			return *x.xxx_hidden_ParentId
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetChildIds() []string {
	if x != nil {
		return x.xxx_hidden_ChildIds
	}
	return nil
}

func (x *HierarchyNode) GetLevel() int32 {
	if x != nil {
		return x.xxx_hidden_Level
	}
	return 0
}

func (x *HierarchyNode) GetPosition() int32 {
	if x != nil {
		return x.xxx_hidden_Position
	}
	return 0
}

func (x *HierarchyNode) GetPath() string {
	if x != nil {
		if x.xxx_hidden_Path != nil {
			return *x.xxx_hidden_Path
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetManagerId() string {
	if x != nil {
		if x.xxx_hidden_ManagerId != nil {
			return *x.xxx_hidden_ManagerId
		}
		return ""
	}
	return ""
}

func (x *HierarchyNode) GetMetadata() []*pb.KeyValue {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 10) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Metadata) {
				protoimpl.X.UnmarshalField(x, 11)
			}
			var rv *[]*pb.KeyValue
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&rv))
			return *rv
		}
	}
	return nil
}

func (x *HierarchyNode) GetActive() bool {
	if x != nil {
		return x.xxx_hidden_Active
	}
	return false
}

func (x *HierarchyNode) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 12)
}

func (x *HierarchyNode) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 12)
}

func (x *HierarchyNode) SetNodeType(v string) {
	x.xxx_hidden_NodeType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 12)
}

func (x *HierarchyNode) SetEntityId(v string) {
	x.xxx_hidden_EntityId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 12)
}

func (x *HierarchyNode) SetParentId(v string) {
	x.xxx_hidden_ParentId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 12)
}

func (x *HierarchyNode) SetChildIds(v []string) {
	x.xxx_hidden_ChildIds = v
}

func (x *HierarchyNode) SetLevel(v int32) {
	x.xxx_hidden_Level = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 12)
}

func (x *HierarchyNode) SetPosition(v int32) {
	x.xxx_hidden_Position = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 7, 12)
}

func (x *HierarchyNode) SetPath(v string) {
	x.xxx_hidden_Path = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 8, 12)
}

func (x *HierarchyNode) SetManagerId(v string) {
	x.xxx_hidden_ManagerId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 9, 12)
}

func (x *HierarchyNode) SetMetadata(v []*pb.KeyValue) {
	var sv *[]*pb.KeyValue
	protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&sv))
	if sv == nil {
		sv = &[]*pb.KeyValue{}
		protoimpl.X.AtomicInitializePointer(protoimpl.Pointer(&x.xxx_hidden_Metadata), protoimpl.Pointer(&sv))
	}
	*sv = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 10, 12)
}

func (x *HierarchyNode) SetActive(v bool) {
	x.xxx_hidden_Active = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 11, 12)
}

func (x *HierarchyNode) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HierarchyNode) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HierarchyNode) HasNodeType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *HierarchyNode) HasEntityId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *HierarchyNode) HasParentId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *HierarchyNode) HasLevel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *HierarchyNode) HasPosition() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 7)
}

func (x *HierarchyNode) HasPath() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 8)
}

func (x *HierarchyNode) HasManagerId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 9)
}

func (x *HierarchyNode) HasActive() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 11)
}

func (x *HierarchyNode) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *HierarchyNode) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *HierarchyNode) ClearNodeType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_NodeType = nil
}

func (x *HierarchyNode) ClearEntityId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_EntityId = nil
}

func (x *HierarchyNode) ClearParentId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_ParentId = nil
}

func (x *HierarchyNode) ClearLevel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Level = 0
}

func (x *HierarchyNode) ClearPosition() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 7)
	x.xxx_hidden_Position = 0
}

func (x *HierarchyNode) ClearPath() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 8)
	x.xxx_hidden_Path = nil
}

func (x *HierarchyNode) ClearManagerId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 9)
	x.xxx_hidden_ManagerId = nil
}

func (x *HierarchyNode) ClearActive() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 11)
	x.xxx_hidden_Active = false
}

type HierarchyNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique node identifier
	Id *string
	// Node name
	Name *string
	// Type of organizational unit (department, team, project, etc.)
	NodeType *string
	// Reference ID to the actual entity (department_id, team_id, etc.)
	EntityId *string
	// Parent node ID (null for root node)
	ParentId *string
	// List of direct child node IDs
	ChildIds []string
	// Node level in the hierarchy (0 for root)
	Level *int32
	// Node position among siblings (for ordering)
	Position *int32
	// Node path from root (e.g., "/org/dept1/team1")
	Path *string
	// Manager or responsible person for this node
	ManagerId *string
	// Node metadata and custom attributes
	Metadata []*pb.KeyValue
	// Whether this node is currently active
	Active *bool
}

func (b0 HierarchyNode_builder) Build() *HierarchyNode {
	m0 := &HierarchyNode{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 12)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 12)
		x.xxx_hidden_Name = b.Name
	}
	if b.NodeType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 12)
		x.xxx_hidden_NodeType = b.NodeType
	}
	if b.EntityId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 12)
		x.xxx_hidden_EntityId = b.EntityId
	}
	if b.ParentId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 12)
		x.xxx_hidden_ParentId = b.ParentId
	}
	x.xxx_hidden_ChildIds = b.ChildIds
	if b.Level != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 12)
		x.xxx_hidden_Level = *b.Level
	}
	if b.Position != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 7, 12)
		x.xxx_hidden_Position = *b.Position
	}
	if b.Path != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 8, 12)
		x.xxx_hidden_Path = b.Path
	}
	if b.ManagerId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 9, 12)
		x.xxx_hidden_ManagerId = b.ManagerId
	}
	if b.Metadata != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 10, 12)
		x.xxx_hidden_Metadata = &b.Metadata
	}
	if b.Active != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 11, 12)
		x.xxx_hidden_Active = *b.Active
	}
	return m0
}

// *
// HierarchyPath message representing a complete path in the organizational hierarchy.
// Used for efficient hierarchy traversal and relationship queries.
type HierarchyPath struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DescendantId *string                `protobuf:"bytes,1,opt,name=descendant_id,json=descendantId"`
	xxx_hidden_AncestorId   *string                `protobuf:"bytes,2,opt,name=ancestor_id,json=ancestorId"`
	xxx_hidden_Distance     int32                  `protobuf:"varint,3,opt,name=distance"`
	xxx_hidden_PathNodes    []string               `protobuf:"bytes,4,rep,name=path_nodes,json=pathNodes"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HierarchyPath) Reset() {
	*x = HierarchyPath{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchyPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyPath) ProtoMessage() {}

func (x *HierarchyPath) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HierarchyPath) GetDescendantId() string {
	if x != nil {
		if x.xxx_hidden_DescendantId != nil {
			return *x.xxx_hidden_DescendantId
		}
		return ""
	}
	return ""
}

func (x *HierarchyPath) GetAncestorId() string {
	if x != nil {
		if x.xxx_hidden_AncestorId != nil {
			return *x.xxx_hidden_AncestorId
		}
		return ""
	}
	return ""
}

func (x *HierarchyPath) GetDistance() int32 {
	if x != nil {
		return x.xxx_hidden_Distance
	}
	return 0
}

func (x *HierarchyPath) GetPathNodes() []string {
	if x != nil {
		return x.xxx_hidden_PathNodes
	}
	return nil
}

func (x *HierarchyPath) SetDescendantId(v string) {
	x.xxx_hidden_DescendantId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *HierarchyPath) SetAncestorId(v string) {
	x.xxx_hidden_AncestorId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *HierarchyPath) SetDistance(v int32) {
	x.xxx_hidden_Distance = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *HierarchyPath) SetPathNodes(v []string) {
	x.xxx_hidden_PathNodes = v
}

func (x *HierarchyPath) HasDescendantId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *HierarchyPath) HasAncestorId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *HierarchyPath) HasDistance() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *HierarchyPath) ClearDescendantId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_DescendantId = nil
}

func (x *HierarchyPath) ClearAncestorId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_AncestorId = nil
}

func (x *HierarchyPath) ClearDistance() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Distance = 0
}

type HierarchyPath_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Descendant node ID
	DescendantId *string
	// Ancestor node ID
	AncestorId *string
	// Distance between ancestor and descendant (1 = direct parent-child)
	Distance *int32
	// Complete path from ancestor to descendant
	PathNodes []string
}

func (b0 HierarchyPath_builder) Build() *HierarchyPath {
	m0 := &HierarchyPath{}
	b, x := &b0, m0
	_, _ = b, x
	if b.DescendantId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_DescendantId = b.DescendantId
	}
	if b.AncestorId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_AncestorId = b.AncestorId
	}
	if b.Distance != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Distance = *b.Distance
	}
	x.xxx_hidden_PathNodes = b.PathNodes
	return m0
}

var File_pkg_organization_proto_messages_organization_hierarchy_proto protoreflect.FileDescriptor

const file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc = "" +
	"\n" +
	"<pkg/organization/proto/messages/organization_hierarchy.proto\x12\x17gcommon.v1.organization\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a1pkg/organization/proto/enums/hierarchy_type.proto\x1a&pkg/common/proto/types/key_value.proto\"\xab\x04\n" +
	"\x15OrganizationHierarchy\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0forganization_id\x18\x02 \x01(\tR\x0eorganizationId\x12M\n" +
	"\x0ehierarchy_type\x18\x03 \x01(\x0e2&.gcommon.v1.organization.HierarchyTypeR\rhierarchyType\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12C\n" +
	"\troot_node\x18\x06 \x01(\v2&.gcommon.v1.organization.HierarchyNodeR\brootNode\x12\x16\n" +
	"\x06active\x18\a \x01(\bR\x06active\x12;\n" +
	"\bmetadata\x18\b \x03(\v2\x1b.gcommon.v1.common.KeyValueB\x02(\x01R\bmetadata\x12=\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tcreatedAt\x12=\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\v \x01(\tR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"updated_by\x18\f \x01(\tR\tupdatedBy\"\xe1\x02\n" +
	"\rHierarchyNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tnode_type\x18\x03 \x01(\tR\bnodeType\x12\x1b\n" +
	"\tentity_id\x18\x04 \x01(\tR\bentityId\x12\x1b\n" +
	"\tparent_id\x18\x05 \x01(\tR\bparentId\x12\x1b\n" +
	"\tchild_ids\x18\x06 \x03(\tR\bchildIds\x12\x14\n" +
	"\x05level\x18\a \x01(\x05R\x05level\x12\x1a\n" +
	"\bposition\x18\b \x01(\x05R\bposition\x12\x12\n" +
	"\x04path\x18\t \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"manager_id\x18\n" +
	" \x01(\tR\tmanagerId\x12;\n" +
	"\bmetadata\x18\v \x03(\v2\x1b.gcommon.v1.common.KeyValueB\x02(\x01R\bmetadata\x12\x16\n" +
	"\x06active\x18\f \x01(\bR\x06active\"\x90\x01\n" +
	"\rHierarchyPath\x12#\n" +
	"\rdescendant_id\x18\x01 \x01(\tR\fdescendantId\x12\x1f\n" +
	"\vancestor_id\x18\x02 \x01(\tR\n" +
	"ancestorId\x12\x1a\n" +
	"\bdistance\x18\x03 \x01(\x05R\bdistance\x12\x1d\n" +
	"\n" +
	"path_nodes\x18\x04 \x03(\tR\tpathNodesB\xef\x01\n" +
	"\x1bcom.gcommon.v1.organizationB\x1aOrganizationHierarchyProtoP\x01Z.../../../../pkg/organization/pb;organizationpb\xa2\x02\x03GVO\xaa\x02\x17Gcommon.V1.Organization\xca\x02\x17Gcommon\\V1\\Organization\xe2\x02#Gcommon\\V1\\Organization\\GPBMetadata\xea\x02\x19Gcommon::V1::Organization\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes = []any{
	(*OrganizationHierarchy)(nil), // 0: gcommon.v1.organization.OrganizationHierarchy
	(*HierarchyNode)(nil),         // 1: gcommon.v1.organization.HierarchyNode
	(*HierarchyPath)(nil),         // 2: gcommon.v1.organization.HierarchyPath
	(HierarchyType)(0),            // 3: gcommon.v1.organization.HierarchyType
	(*pb.KeyValue)(nil),           // 4: gcommon.v1.common.KeyValue
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs = []int32{
	3, // 0: gcommon.v1.organization.OrganizationHierarchy.hierarchy_type:type_name -> gcommon.v1.organization.HierarchyType
	1, // 1: gcommon.v1.organization.OrganizationHierarchy.root_node:type_name -> gcommon.v1.organization.HierarchyNode
	4, // 2: gcommon.v1.organization.OrganizationHierarchy.metadata:type_name -> gcommon.v1.common.KeyValue
	5, // 3: gcommon.v1.organization.OrganizationHierarchy.created_at:type_name -> google.protobuf.Timestamp
	5, // 4: gcommon.v1.organization.OrganizationHierarchy.updated_at:type_name -> google.protobuf.Timestamp
	4, // 5: gcommon.v1.organization.HierarchyNode.metadata:type_name -> gcommon.v1.common.KeyValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_organization_proto_messages_organization_hierarchy_proto_init() }
func file_pkg_organization_proto_messages_organization_hierarchy_proto_init() {
	if File_pkg_organization_proto_messages_organization_hierarchy_proto != nil {
		return
	}
	file_pkg_organization_proto_enums_hierarchy_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc), len(file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes,
		DependencyIndexes: file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs,
		MessageInfos:      file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes,
	}.Build()
	File_pkg_organization_proto_messages_organization_hierarchy_proto = out.File
	file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes = nil
	file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs = nil
}
