// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/organization/proto/messages/organization_hierarchy.proto

//go:build !protoopaque

package organizationpb

import (
	pb "../../../../pkg/common/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// OrganizationHierarchy message representing the hierarchical structure of an organization.
// Defines parent-child relationships between organizational units and supports
// multiple hierarchy types (department, team, project, geographic, etc.).
type OrganizationHierarchy struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique hierarchy identifier
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Organization identifier
	OrganizationId *string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// Type of hierarchy structure
	HierarchyType *HierarchyType `protobuf:"varint,3,opt,name=hierarchy_type,json=hierarchyType,enum=gcommon.v1.organization.HierarchyType" json:"hierarchy_type,omitempty"`
	// Name of this hierarchy configuration
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Description of this hierarchy structure
	Description *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// Root node of the hierarchy (typically the organization itself)
	RootNode *HierarchyNode `protobuf:"bytes,6,opt,name=root_node,json=rootNode" json:"root_node,omitempty"`
	// Whether this hierarchy is currently active/primary
	Active *bool `protobuf:"varint,7,opt,name=active" json:"active,omitempty"`
	// Hierarchy metadata and configuration
	Metadata []*pb.KeyValue `protobuf:"bytes,8,rep,name=metadata" json:"metadata,omitempty"`
	// Hierarchy creation timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// User ID who created this hierarchy
	CreatedBy *string `protobuf:"bytes,11,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	// User ID who last updated this hierarchy
	UpdatedBy     *string `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrganizationHierarchy) Reset() {
	*x = OrganizationHierarchy{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrganizationHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationHierarchy) ProtoMessage() {}

func (x *OrganizationHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *OrganizationHierarchy) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *OrganizationHierarchy) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *OrganizationHierarchy) GetHierarchyType() HierarchyType {
	if x != nil && x.HierarchyType != nil {
		return *x.HierarchyType
	}
	return HierarchyType_HIERARCHY_TYPE_UNSPECIFIED
}

func (x *OrganizationHierarchy) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrganizationHierarchy) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OrganizationHierarchy) GetRootNode() *HierarchyNode {
	if x != nil {
		return x.RootNode
	}
	return nil
}

func (x *OrganizationHierarchy) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *OrganizationHierarchy) GetMetadata() []*pb.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OrganizationHierarchy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrganizationHierarchy) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrganizationHierarchy) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *OrganizationHierarchy) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *OrganizationHierarchy) SetId(v string) {
	x.Id = &v
}

func (x *OrganizationHierarchy) SetOrganizationId(v string) {
	x.OrganizationId = &v
}

func (x *OrganizationHierarchy) SetHierarchyType(v HierarchyType) {
	x.HierarchyType = &v
}

func (x *OrganizationHierarchy) SetName(v string) {
	x.Name = &v
}

func (x *OrganizationHierarchy) SetDescription(v string) {
	x.Description = &v
}

func (x *OrganizationHierarchy) SetRootNode(v *HierarchyNode) {
	x.RootNode = v
}

func (x *OrganizationHierarchy) SetActive(v bool) {
	x.Active = &v
}

func (x *OrganizationHierarchy) SetMetadata(v []*pb.KeyValue) {
	x.Metadata = v
}

func (x *OrganizationHierarchy) SetCreatedAt(v *timestamppb.Timestamp) {
	x.CreatedAt = v
}

func (x *OrganizationHierarchy) SetUpdatedAt(v *timestamppb.Timestamp) {
	x.UpdatedAt = v
}

func (x *OrganizationHierarchy) SetCreatedBy(v string) {
	x.CreatedBy = &v
}

func (x *OrganizationHierarchy) SetUpdatedBy(v string) {
	x.UpdatedBy = &v
}

func (x *OrganizationHierarchy) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *OrganizationHierarchy) HasOrganizationId() bool {
	if x == nil {
		return false
	}
	return x.OrganizationId != nil
}

func (x *OrganizationHierarchy) HasHierarchyType() bool {
	if x == nil {
		return false
	}
	return x.HierarchyType != nil
}

func (x *OrganizationHierarchy) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *OrganizationHierarchy) HasDescription() bool {
	if x == nil {
		return false
	}
	return x.Description != nil
}

func (x *OrganizationHierarchy) HasRootNode() bool {
	if x == nil {
		return false
	}
	return x.RootNode != nil
}

func (x *OrganizationHierarchy) HasActive() bool {
	if x == nil {
		return false
	}
	return x.Active != nil
}

func (x *OrganizationHierarchy) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.CreatedAt != nil
}

func (x *OrganizationHierarchy) HasUpdatedAt() bool {
	if x == nil {
		return false
	}
	return x.UpdatedAt != nil
}

func (x *OrganizationHierarchy) HasCreatedBy() bool {
	if x == nil {
		return false
	}
	return x.CreatedBy != nil
}

func (x *OrganizationHierarchy) HasUpdatedBy() bool {
	if x == nil {
		return false
	}
	return x.UpdatedBy != nil
}

func (x *OrganizationHierarchy) ClearId() {
	x.Id = nil
}

func (x *OrganizationHierarchy) ClearOrganizationId() {
	x.OrganizationId = nil
}

func (x *OrganizationHierarchy) ClearHierarchyType() {
	x.HierarchyType = nil
}

func (x *OrganizationHierarchy) ClearName() {
	x.Name = nil
}

func (x *OrganizationHierarchy) ClearDescription() {
	x.Description = nil
}

func (x *OrganizationHierarchy) ClearRootNode() {
	x.RootNode = nil
}

func (x *OrganizationHierarchy) ClearActive() {
	x.Active = nil
}

func (x *OrganizationHierarchy) ClearCreatedAt() {
	x.CreatedAt = nil
}

func (x *OrganizationHierarchy) ClearUpdatedAt() {
	x.UpdatedAt = nil
}

func (x *OrganizationHierarchy) ClearCreatedBy() {
	x.CreatedBy = nil
}

func (x *OrganizationHierarchy) ClearUpdatedBy() {
	x.UpdatedBy = nil
}

type OrganizationHierarchy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique hierarchy identifier
	Id *string
	// Organization identifier
	OrganizationId *string
	// Type of hierarchy structure
	HierarchyType *HierarchyType
	// Name of this hierarchy configuration
	Name *string
	// Description of this hierarchy structure
	Description *string
	// Root node of the hierarchy (typically the organization itself)
	RootNode *HierarchyNode
	// Whether this hierarchy is currently active/primary
	Active *bool
	// Hierarchy metadata and configuration
	Metadata []*pb.KeyValue
	// Hierarchy creation timestamp
	CreatedAt *timestamppb.Timestamp
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp
	// User ID who created this hierarchy
	CreatedBy *string
	// User ID who last updated this hierarchy
	UpdatedBy *string
}

func (b0 OrganizationHierarchy_builder) Build() *OrganizationHierarchy {
	m0 := &OrganizationHierarchy{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.OrganizationId = b.OrganizationId
	x.HierarchyType = b.HierarchyType
	x.Name = b.Name
	x.Description = b.Description
	x.RootNode = b.RootNode
	x.Active = b.Active
	x.Metadata = b.Metadata
	x.CreatedAt = b.CreatedAt
	x.UpdatedAt = b.UpdatedAt
	x.CreatedBy = b.CreatedBy
	x.UpdatedBy = b.UpdatedBy
	return m0
}

// *
// HierarchyNode message representing a single node in the organizational hierarchy.
// Can represent departments, teams, projects, or any other organizational unit.
type HierarchyNode struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique node identifier
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Node name
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Type of organizational unit (department, team, project, etc.)
	NodeType *string `protobuf:"bytes,3,opt,name=node_type,json=nodeType" json:"node_type,omitempty"`
	// Reference ID to the actual entity (department_id, team_id, etc.)
	EntityId *string `protobuf:"bytes,4,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	// Parent node ID (null for root node)
	ParentId *string `protobuf:"bytes,5,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// List of direct child node IDs
	ChildIds []string `protobuf:"bytes,6,rep,name=child_ids,json=childIds" json:"child_ids,omitempty"`
	// Node level in the hierarchy (0 for root)
	Level *int32 `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	// Node position among siblings (for ordering)
	Position *int32 `protobuf:"varint,8,opt,name=position" json:"position,omitempty"`
	// Node path from root (e.g., "/org/dept1/team1")
	Path *string `protobuf:"bytes,9,opt,name=path" json:"path,omitempty"`
	// Manager or responsible person for this node
	ManagerId *string `protobuf:"bytes,10,opt,name=manager_id,json=managerId" json:"manager_id,omitempty"`
	// Node metadata and custom attributes
	Metadata []*pb.KeyValue `protobuf:"bytes,11,rep,name=metadata" json:"metadata,omitempty"`
	// Whether this node is currently active
	Active        *bool `protobuf:"varint,12,opt,name=active" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HierarchyNode) Reset() {
	*x = HierarchyNode{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyNode) ProtoMessage() {}

func (x *HierarchyNode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HierarchyNode) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *HierarchyNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *HierarchyNode) GetNodeType() string {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return ""
}

func (x *HierarchyNode) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *HierarchyNode) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *HierarchyNode) GetChildIds() []string {
	if x != nil {
		return x.ChildIds
	}
	return nil
}

func (x *HierarchyNode) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *HierarchyNode) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *HierarchyNode) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *HierarchyNode) GetManagerId() string {
	if x != nil && x.ManagerId != nil {
		return *x.ManagerId
	}
	return ""
}

func (x *HierarchyNode) GetMetadata() []*pb.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HierarchyNode) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *HierarchyNode) SetId(v string) {
	x.Id = &v
}

func (x *HierarchyNode) SetName(v string) {
	x.Name = &v
}

func (x *HierarchyNode) SetNodeType(v string) {
	x.NodeType = &v
}

func (x *HierarchyNode) SetEntityId(v string) {
	x.EntityId = &v
}

func (x *HierarchyNode) SetParentId(v string) {
	x.ParentId = &v
}

func (x *HierarchyNode) SetChildIds(v []string) {
	x.ChildIds = v
}

func (x *HierarchyNode) SetLevel(v int32) {
	x.Level = &v
}

func (x *HierarchyNode) SetPosition(v int32) {
	x.Position = &v
}

func (x *HierarchyNode) SetPath(v string) {
	x.Path = &v
}

func (x *HierarchyNode) SetManagerId(v string) {
	x.ManagerId = &v
}

func (x *HierarchyNode) SetMetadata(v []*pb.KeyValue) {
	x.Metadata = v
}

func (x *HierarchyNode) SetActive(v bool) {
	x.Active = &v
}

func (x *HierarchyNode) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *HierarchyNode) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *HierarchyNode) HasNodeType() bool {
	if x == nil {
		return false
	}
	return x.NodeType != nil
}

func (x *HierarchyNode) HasEntityId() bool {
	if x == nil {
		return false
	}
	return x.EntityId != nil
}

func (x *HierarchyNode) HasParentId() bool {
	if x == nil {
		return false
	}
	return x.ParentId != nil
}

func (x *HierarchyNode) HasLevel() bool {
	if x == nil {
		return false
	}
	return x.Level != nil
}

func (x *HierarchyNode) HasPosition() bool {
	if x == nil {
		return false
	}
	return x.Position != nil
}

func (x *HierarchyNode) HasPath() bool {
	if x == nil {
		return false
	}
	return x.Path != nil
}

func (x *HierarchyNode) HasManagerId() bool {
	if x == nil {
		return false
	}
	return x.ManagerId != nil
}

func (x *HierarchyNode) HasActive() bool {
	if x == nil {
		return false
	}
	return x.Active != nil
}

func (x *HierarchyNode) ClearId() {
	x.Id = nil
}

func (x *HierarchyNode) ClearName() {
	x.Name = nil
}

func (x *HierarchyNode) ClearNodeType() {
	x.NodeType = nil
}

func (x *HierarchyNode) ClearEntityId() {
	x.EntityId = nil
}

func (x *HierarchyNode) ClearParentId() {
	x.ParentId = nil
}

func (x *HierarchyNode) ClearLevel() {
	x.Level = nil
}

func (x *HierarchyNode) ClearPosition() {
	x.Position = nil
}

func (x *HierarchyNode) ClearPath() {
	x.Path = nil
}

func (x *HierarchyNode) ClearManagerId() {
	x.ManagerId = nil
}

func (x *HierarchyNode) ClearActive() {
	x.Active = nil
}

type HierarchyNode_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique node identifier
	Id *string
	// Node name
	Name *string
	// Type of organizational unit (department, team, project, etc.)
	NodeType *string
	// Reference ID to the actual entity (department_id, team_id, etc.)
	EntityId *string
	// Parent node ID (null for root node)
	ParentId *string
	// List of direct child node IDs
	ChildIds []string
	// Node level in the hierarchy (0 for root)
	Level *int32
	// Node position among siblings (for ordering)
	Position *int32
	// Node path from root (e.g., "/org/dept1/team1")
	Path *string
	// Manager or responsible person for this node
	ManagerId *string
	// Node metadata and custom attributes
	Metadata []*pb.KeyValue
	// Whether this node is currently active
	Active *bool
}

func (b0 HierarchyNode_builder) Build() *HierarchyNode {
	m0 := &HierarchyNode{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.Name = b.Name
	x.NodeType = b.NodeType
	x.EntityId = b.EntityId
	x.ParentId = b.ParentId
	x.ChildIds = b.ChildIds
	x.Level = b.Level
	x.Position = b.Position
	x.Path = b.Path
	x.ManagerId = b.ManagerId
	x.Metadata = b.Metadata
	x.Active = b.Active
	return m0
}

// *
// HierarchyPath message representing a complete path in the organizational hierarchy.
// Used for efficient hierarchy traversal and relationship queries.
type HierarchyPath struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Descendant node ID
	DescendantId *string `protobuf:"bytes,1,opt,name=descendant_id,json=descendantId" json:"descendant_id,omitempty"`
	// Ancestor node ID
	AncestorId *string `protobuf:"bytes,2,opt,name=ancestor_id,json=ancestorId" json:"ancestor_id,omitempty"`
	// Distance between ancestor and descendant (1 = direct parent-child)
	Distance *int32 `protobuf:"varint,3,opt,name=distance" json:"distance,omitempty"`
	// Complete path from ancestor to descendant
	PathNodes     []string `protobuf:"bytes,4,rep,name=path_nodes,json=pathNodes" json:"path_nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HierarchyPath) Reset() {
	*x = HierarchyPath{}
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HierarchyPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchyPath) ProtoMessage() {}

func (x *HierarchyPath) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HierarchyPath) GetDescendantId() string {
	if x != nil && x.DescendantId != nil {
		return *x.DescendantId
	}
	return ""
}

func (x *HierarchyPath) GetAncestorId() string {
	if x != nil && x.AncestorId != nil {
		return *x.AncestorId
	}
	return ""
}

func (x *HierarchyPath) GetDistance() int32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *HierarchyPath) GetPathNodes() []string {
	if x != nil {
		return x.PathNodes
	}
	return nil
}

func (x *HierarchyPath) SetDescendantId(v string) {
	x.DescendantId = &v
}

func (x *HierarchyPath) SetAncestorId(v string) {
	x.AncestorId = &v
}

func (x *HierarchyPath) SetDistance(v int32) {
	x.Distance = &v
}

func (x *HierarchyPath) SetPathNodes(v []string) {
	x.PathNodes = v
}

func (x *HierarchyPath) HasDescendantId() bool {
	if x == nil {
		return false
	}
	return x.DescendantId != nil
}

func (x *HierarchyPath) HasAncestorId() bool {
	if x == nil {
		return false
	}
	return x.AncestorId != nil
}

func (x *HierarchyPath) HasDistance() bool {
	if x == nil {
		return false
	}
	return x.Distance != nil
}

func (x *HierarchyPath) ClearDescendantId() {
	x.DescendantId = nil
}

func (x *HierarchyPath) ClearAncestorId() {
	x.AncestorId = nil
}

func (x *HierarchyPath) ClearDistance() {
	x.Distance = nil
}

type HierarchyPath_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Descendant node ID
	DescendantId *string
	// Ancestor node ID
	AncestorId *string
	// Distance between ancestor and descendant (1 = direct parent-child)
	Distance *int32
	// Complete path from ancestor to descendant
	PathNodes []string
}

func (b0 HierarchyPath_builder) Build() *HierarchyPath {
	m0 := &HierarchyPath{}
	b, x := &b0, m0
	_, _ = b, x
	x.DescendantId = b.DescendantId
	x.AncestorId = b.AncestorId
	x.Distance = b.Distance
	x.PathNodes = b.PathNodes
	return m0
}

var File_pkg_organization_proto_messages_organization_hierarchy_proto protoreflect.FileDescriptor

const file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc = "" +
	"\n" +
	"<pkg/organization/proto/messages/organization_hierarchy.proto\x12\x17gcommon.v1.organization\x1a!google/protobuf/go_features.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a1pkg/organization/proto/enums/hierarchy_type.proto\x1a&pkg/common/proto/types/key_value.proto\"\xab\x04\n" +
	"\x15OrganizationHierarchy\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0forganization_id\x18\x02 \x01(\tR\x0eorganizationId\x12M\n" +
	"\x0ehierarchy_type\x18\x03 \x01(\x0e2&.gcommon.v1.organization.HierarchyTypeR\rhierarchyType\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12C\n" +
	"\troot_node\x18\x06 \x01(\v2&.gcommon.v1.organization.HierarchyNodeR\brootNode\x12\x16\n" +
	"\x06active\x18\a \x01(\bR\x06active\x12;\n" +
	"\bmetadata\x18\b \x03(\v2\x1b.gcommon.v1.common.KeyValueB\x02(\x01R\bmetadata\x12=\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tcreatedAt\x12=\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\v \x01(\tR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"updated_by\x18\f \x01(\tR\tupdatedBy\"\xe1\x02\n" +
	"\rHierarchyNode\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tnode_type\x18\x03 \x01(\tR\bnodeType\x12\x1b\n" +
	"\tentity_id\x18\x04 \x01(\tR\bentityId\x12\x1b\n" +
	"\tparent_id\x18\x05 \x01(\tR\bparentId\x12\x1b\n" +
	"\tchild_ids\x18\x06 \x03(\tR\bchildIds\x12\x14\n" +
	"\x05level\x18\a \x01(\x05R\x05level\x12\x1a\n" +
	"\bposition\x18\b \x01(\x05R\bposition\x12\x12\n" +
	"\x04path\x18\t \x01(\tR\x04path\x12\x1d\n" +
	"\n" +
	"manager_id\x18\n" +
	" \x01(\tR\tmanagerId\x12;\n" +
	"\bmetadata\x18\v \x03(\v2\x1b.gcommon.v1.common.KeyValueB\x02(\x01R\bmetadata\x12\x16\n" +
	"\x06active\x18\f \x01(\bR\x06active\"\x90\x01\n" +
	"\rHierarchyPath\x12#\n" +
	"\rdescendant_id\x18\x01 \x01(\tR\fdescendantId\x12\x1f\n" +
	"\vancestor_id\x18\x02 \x01(\tR\n" +
	"ancestorId\x12\x1a\n" +
	"\bdistance\x18\x03 \x01(\x05R\bdistance\x12\x1d\n" +
	"\n" +
	"path_nodes\x18\x04 \x03(\tR\tpathNodesB\xef\x01\n" +
	"\x1bcom.gcommon.v1.organizationB\x1aOrganizationHierarchyProtoP\x01Z.../../../../pkg/organization/pb;organizationpb\xa2\x02\x03GVO\xaa\x02\x17Gcommon.V1.Organization\xca\x02\x17Gcommon\\V1\\Organization\xe2\x02#Gcommon\\V1\\Organization\\GPBMetadata\xea\x02\x19Gcommon::V1::Organization\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes = []any{
	(*OrganizationHierarchy)(nil), // 0: gcommon.v1.organization.OrganizationHierarchy
	(*HierarchyNode)(nil),         // 1: gcommon.v1.organization.HierarchyNode
	(*HierarchyPath)(nil),         // 2: gcommon.v1.organization.HierarchyPath
	(HierarchyType)(0),            // 3: gcommon.v1.organization.HierarchyType
	(*pb.KeyValue)(nil),           // 4: gcommon.v1.common.KeyValue
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs = []int32{
	3, // 0: gcommon.v1.organization.OrganizationHierarchy.hierarchy_type:type_name -> gcommon.v1.organization.HierarchyType
	1, // 1: gcommon.v1.organization.OrganizationHierarchy.root_node:type_name -> gcommon.v1.organization.HierarchyNode
	4, // 2: gcommon.v1.organization.OrganizationHierarchy.metadata:type_name -> gcommon.v1.common.KeyValue
	5, // 3: gcommon.v1.organization.OrganizationHierarchy.created_at:type_name -> google.protobuf.Timestamp
	5, // 4: gcommon.v1.organization.OrganizationHierarchy.updated_at:type_name -> google.protobuf.Timestamp
	4, // 5: gcommon.v1.organization.HierarchyNode.metadata:type_name -> gcommon.v1.common.KeyValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_organization_proto_messages_organization_hierarchy_proto_init() }
func file_pkg_organization_proto_messages_organization_hierarchy_proto_init() {
	if File_pkg_organization_proto_messages_organization_hierarchy_proto != nil {
		return
	}
	file_pkg_organization_proto_enums_hierarchy_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc), len(file_pkg_organization_proto_messages_organization_hierarchy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes,
		DependencyIndexes: file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs,
		MessageInfos:      file_pkg_organization_proto_messages_organization_hierarchy_proto_msgTypes,
	}.Build()
	File_pkg_organization_proto_messages_organization_hierarchy_proto = out.File
	file_pkg_organization_proto_messages_organization_hierarchy_proto_goTypes = nil
	file_pkg_organization_proto_messages_organization_hierarchy_proto_depIdxs = nil
}
