// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/organization/proto/services/hierarchy_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/organization/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/organization/proto/responses"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HierarchyService_CreateDepartment_FullMethodName = "/gcommon.v1.organization.HierarchyService/CreateDepartment"
	HierarchyService_GetDepartment_FullMethodName    = "/gcommon.v1.organization.HierarchyService/GetDepartment"
	HierarchyService_UpdateDepartment_FullMethodName = "/gcommon.v1.organization.HierarchyService/UpdateDepartment"
	HierarchyService_DeleteDepartment_FullMethodName = "/gcommon.v1.organization.HierarchyService/DeleteDepartment"
	HierarchyService_ListDepartments_FullMethodName  = "/gcommon.v1.organization.HierarchyService/ListDepartments"
	HierarchyService_CreateTeam_FullMethodName       = "/gcommon.v1.organization.HierarchyService/CreateTeam"
	HierarchyService_GetTeam_FullMethodName          = "/gcommon.v1.organization.HierarchyService/GetTeam"
	HierarchyService_UpdateTeam_FullMethodName       = "/gcommon.v1.organization.HierarchyService/UpdateTeam"
	HierarchyService_DeleteTeam_FullMethodName       = "/gcommon.v1.organization.HierarchyService/DeleteTeam"
	HierarchyService_ListTeams_FullMethodName        = "/gcommon.v1.organization.HierarchyService/ListTeams"
	HierarchyService_GetHierarchy_FullMethodName     = "/gcommon.v1.organization.HierarchyService/GetHierarchy"
	HierarchyService_UpdateHierarchy_FullMethodName  = "/gcommon.v1.organization.HierarchyService/UpdateHierarchy"
)

// HierarchyServiceClient is the client API for HierarchyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// HierarchyService provides comprehensive organizational hierarchy management.
// Handles department and team operations, hierarchical relationships,
// and organizational structure administration.
type HierarchyServiceClient interface {
	// Create a new department
	CreateDepartment(ctx context.Context, in *requests.CreateDepartmentRequest, opts ...grpc.CallOption) (*responses.CreateDepartmentResponse, error)
	// Get a department by ID
	GetDepartment(ctx context.Context, in *requests.GetDepartmentRequest, opts ...grpc.CallOption) (*responses.GetDepartmentResponse, error)
	// Update an existing department
	UpdateDepartment(ctx context.Context, in *requests.UpdateDepartmentRequest, opts ...grpc.CallOption) (*responses.UpdateDepartmentResponse, error)
	// Delete a department (soft delete)
	DeleteDepartment(ctx context.Context, in *requests.DeleteDepartmentRequest, opts ...grpc.CallOption) (*responses.DeleteDepartmentResponse, error)
	// List departments within an organization (with pagination and filtering)
	ListDepartments(ctx context.Context, in *requests.ListDepartmentsRequest, opts ...grpc.CallOption) (*responses.ListDepartmentsResponse, error)
	// Create a new team
	CreateTeam(ctx context.Context, in *requests.CreateTeamRequest, opts ...grpc.CallOption) (*responses.CreateTeamResponse, error)
	// Get a team by ID
	GetTeam(ctx context.Context, in *requests.GetTeamRequest, opts ...grpc.CallOption) (*responses.GetTeamResponse, error)
	// Update an existing team
	UpdateTeam(ctx context.Context, in *requests.UpdateTeamRequest, opts ...grpc.CallOption) (*responses.UpdateTeamResponse, error)
	// Delete a team (soft delete)
	DeleteTeam(ctx context.Context, in *requests.DeleteTeamRequest, opts ...grpc.CallOption) (*responses.DeleteTeamResponse, error)
	// List teams within an organization or department (with pagination and filtering)
	ListTeams(ctx context.Context, in *requests.ListTeamsRequest, opts ...grpc.CallOption) (*responses.ListTeamsResponse, error)
	// Get organizational hierarchy structure
	GetHierarchy(ctx context.Context, in *requests.GetHierarchyRequest, opts ...grpc.CallOption) (*responses.GetHierarchyResponse, error)
	// Update organizational hierarchy structure
	UpdateHierarchy(ctx context.Context, in *requests.UpdateHierarchyRequest, opts ...grpc.CallOption) (*responses.UpdateHierarchyResponse, error)
}

type hierarchyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHierarchyServiceClient(cc grpc.ClientConnInterface) HierarchyServiceClient {
	return &hierarchyServiceClient{cc}
}

func (c *hierarchyServiceClient) CreateDepartment(ctx context.Context, in *requests.CreateDepartmentRequest, opts ...grpc.CallOption) (*responses.CreateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, HierarchyService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) GetDepartment(ctx context.Context, in *requests.GetDepartmentRequest, opts ...grpc.CallOption) (*responses.GetDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetDepartmentResponse)
	err := c.cc.Invoke(ctx, HierarchyService_GetDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) UpdateDepartment(ctx context.Context, in *requests.UpdateDepartmentRequest, opts ...grpc.CallOption) (*responses.UpdateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.UpdateDepartmentResponse)
	err := c.cc.Invoke(ctx, HierarchyService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) DeleteDepartment(ctx context.Context, in *requests.DeleteDepartmentRequest, opts ...grpc.CallOption) (*responses.DeleteDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.DeleteDepartmentResponse)
	err := c.cc.Invoke(ctx, HierarchyService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) ListDepartments(ctx context.Context, in *requests.ListDepartmentsRequest, opts ...grpc.CallOption) (*responses.ListDepartmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, HierarchyService_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) CreateTeam(ctx context.Context, in *requests.CreateTeamRequest, opts ...grpc.CallOption) (*responses.CreateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CreateTeamResponse)
	err := c.cc.Invoke(ctx, HierarchyService_CreateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) GetTeam(ctx context.Context, in *requests.GetTeamRequest, opts ...grpc.CallOption) (*responses.GetTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetTeamResponse)
	err := c.cc.Invoke(ctx, HierarchyService_GetTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) UpdateTeam(ctx context.Context, in *requests.UpdateTeamRequest, opts ...grpc.CallOption) (*responses.UpdateTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.UpdateTeamResponse)
	err := c.cc.Invoke(ctx, HierarchyService_UpdateTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) DeleteTeam(ctx context.Context, in *requests.DeleteTeamRequest, opts ...grpc.CallOption) (*responses.DeleteTeamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.DeleteTeamResponse)
	err := c.cc.Invoke(ctx, HierarchyService_DeleteTeam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) ListTeams(ctx context.Context, in *requests.ListTeamsRequest, opts ...grpc.CallOption) (*responses.ListTeamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListTeamsResponse)
	err := c.cc.Invoke(ctx, HierarchyService_ListTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) GetHierarchy(ctx context.Context, in *requests.GetHierarchyRequest, opts ...grpc.CallOption) (*responses.GetHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetHierarchyResponse)
	err := c.cc.Invoke(ctx, HierarchyService_GetHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyServiceClient) UpdateHierarchy(ctx context.Context, in *requests.UpdateHierarchyRequest, opts ...grpc.CallOption) (*responses.UpdateHierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.UpdateHierarchyResponse)
	err := c.cc.Invoke(ctx, HierarchyService_UpdateHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HierarchyServiceServer is the server API for HierarchyService service.
// All implementations should embed UnimplementedHierarchyServiceServer
// for forward compatibility.
//
// *
// HierarchyService provides comprehensive organizational hierarchy management.
// Handles department and team operations, hierarchical relationships,
// and organizational structure administration.
type HierarchyServiceServer interface {
	// Create a new department
	CreateDepartment(context.Context, *requests.CreateDepartmentRequest) (*responses.CreateDepartmentResponse, error)
	// Get a department by ID
	GetDepartment(context.Context, *requests.GetDepartmentRequest) (*responses.GetDepartmentResponse, error)
	// Update an existing department
	UpdateDepartment(context.Context, *requests.UpdateDepartmentRequest) (*responses.UpdateDepartmentResponse, error)
	// Delete a department (soft delete)
	DeleteDepartment(context.Context, *requests.DeleteDepartmentRequest) (*responses.DeleteDepartmentResponse, error)
	// List departments within an organization (with pagination and filtering)
	ListDepartments(context.Context, *requests.ListDepartmentsRequest) (*responses.ListDepartmentsResponse, error)
	// Create a new team
	CreateTeam(context.Context, *requests.CreateTeamRequest) (*responses.CreateTeamResponse, error)
	// Get a team by ID
	GetTeam(context.Context, *requests.GetTeamRequest) (*responses.GetTeamResponse, error)
	// Update an existing team
	UpdateTeam(context.Context, *requests.UpdateTeamRequest) (*responses.UpdateTeamResponse, error)
	// Delete a team (soft delete)
	DeleteTeam(context.Context, *requests.DeleteTeamRequest) (*responses.DeleteTeamResponse, error)
	// List teams within an organization or department (with pagination and filtering)
	ListTeams(context.Context, *requests.ListTeamsRequest) (*responses.ListTeamsResponse, error)
	// Get organizational hierarchy structure
	GetHierarchy(context.Context, *requests.GetHierarchyRequest) (*responses.GetHierarchyResponse, error)
	// Update organizational hierarchy structure
	UpdateHierarchy(context.Context, *requests.UpdateHierarchyRequest) (*responses.UpdateHierarchyResponse, error)
}

// UnimplementedHierarchyServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHierarchyServiceServer struct{}

func (UnimplementedHierarchyServiceServer) CreateDepartment(context.Context, *requests.CreateDepartmentRequest) (*responses.CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedHierarchyServiceServer) GetDepartment(context.Context, *requests.GetDepartmentRequest) (*responses.GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedHierarchyServiceServer) UpdateDepartment(context.Context, *requests.UpdateDepartmentRequest) (*responses.UpdateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedHierarchyServiceServer) DeleteDepartment(context.Context, *requests.DeleteDepartmentRequest) (*responses.DeleteDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedHierarchyServiceServer) ListDepartments(context.Context, *requests.ListDepartmentsRequest) (*responses.ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedHierarchyServiceServer) CreateTeam(context.Context, *requests.CreateTeamRequest) (*responses.CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedHierarchyServiceServer) GetTeam(context.Context, *requests.GetTeamRequest) (*responses.GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedHierarchyServiceServer) UpdateTeam(context.Context, *requests.UpdateTeamRequest) (*responses.UpdateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedHierarchyServiceServer) DeleteTeam(context.Context, *requests.DeleteTeamRequest) (*responses.DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedHierarchyServiceServer) ListTeams(context.Context, *requests.ListTeamsRequest) (*responses.ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedHierarchyServiceServer) GetHierarchy(context.Context, *requests.GetHierarchyRequest) (*responses.GetHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchy not implemented")
}
func (UnimplementedHierarchyServiceServer) UpdateHierarchy(context.Context, *requests.UpdateHierarchyRequest) (*responses.UpdateHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHierarchy not implemented")
}
func (UnimplementedHierarchyServiceServer) testEmbeddedByValue() {}

// UnsafeHierarchyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HierarchyServiceServer will
// result in compilation errors.
type UnsafeHierarchyServiceServer interface {
	mustEmbedUnimplementedHierarchyServiceServer()
}

func RegisterHierarchyServiceServer(s grpc.ServiceRegistrar, srv HierarchyServiceServer) {
	// If the following call pancis, it indicates UnimplementedHierarchyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HierarchyService_ServiceDesc, srv)
}

func _HierarchyService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).CreateDepartment(ctx, req.(*requests.CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).GetDepartment(ctx, req.(*requests.GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).UpdateDepartment(ctx, req.(*requests.UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).DeleteDepartment(ctx, req.(*requests.DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).ListDepartments(ctx, req.(*requests.ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).CreateTeam(ctx, req.(*requests.CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).GetTeam(ctx, req.(*requests.GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_UpdateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).UpdateTeam(ctx, req.(*requests.UpdateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_DeleteTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).DeleteTeam(ctx, req.(*requests.DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).ListTeams(ctx, req.(*requests.ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_GetHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).GetHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_GetHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).GetHierarchy(ctx, req.(*requests.GetHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HierarchyService_UpdateHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServiceServer).UpdateHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HierarchyService_UpdateHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServiceServer).UpdateHierarchy(ctx, req.(*requests.UpdateHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HierarchyService_ServiceDesc is the grpc.ServiceDesc for HierarchyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HierarchyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.organization.HierarchyService",
	HandlerType: (*HierarchyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _HierarchyService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _HierarchyService_GetDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _HierarchyService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _HierarchyService_DeleteDepartment_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _HierarchyService_ListDepartments_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _HierarchyService_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _HierarchyService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _HierarchyService_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _HierarchyService_DeleteTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _HierarchyService_ListTeams_Handler,
		},
		{
			MethodName: "GetHierarchy",
			Handler:    _HierarchyService_GetHierarchy_Handler,
		},
		{
			MethodName: "UpdateHierarchy",
			Handler:    _HierarchyService_UpdateHierarchy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/organization/proto/services/hierarchy_service.proto",
}
