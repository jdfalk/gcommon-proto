// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/organization/proto/services/tenant_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/organization/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/organization/proto/responses"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenantService_CreateTenant_FullMethodName             = "/gcommon.v1.organization.TenantService/CreateTenant"
	TenantService_GetTenant_FullMethodName                = "/gcommon.v1.organization.TenantService/GetTenant"
	TenantService_UpdateTenant_FullMethodName             = "/gcommon.v1.organization.TenantService/UpdateTenant"
	TenantService_DeleteTenant_FullMethodName             = "/gcommon.v1.organization.TenantService/DeleteTenant"
	TenantService_ListTenants_FullMethodName              = "/gcommon.v1.organization.TenantService/ListTenants"
	TenantService_ConfigureTenantIsolation_FullMethodName = "/gcommon.v1.organization.TenantService/ConfigureTenantIsolation"
	TenantService_GetTenantIsolation_FullMethodName       = "/gcommon.v1.organization.TenantService/GetTenantIsolation"
	TenantService_UpdateTenantQuota_FullMethodName        = "/gcommon.v1.organization.TenantService/UpdateTenantQuota"
	TenantService_GetTenantUsage_FullMethodName           = "/gcommon.v1.organization.TenantService/GetTenantUsage"
)

// TenantServiceClient is the client API for TenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// TenantService provides comprehensive tenant management capabilities.
// Handles tenant CRUD operations, isolation configuration, quota management,
// and multi-tenant resource administration.
type TenantServiceClient interface {
	// Create a new tenant within an organization
	CreateTenant(ctx context.Context, in *requests.CreateTenantRequest, opts ...grpc.CallOption) (*responses.CreateTenantResponse, error)
	// Get a tenant by ID
	GetTenant(ctx context.Context, in *requests.GetTenantRequest, opts ...grpc.CallOption) (*responses.GetTenantResponse, error)
	// Update an existing tenant
	UpdateTenant(ctx context.Context, in *requests.UpdateTenantRequest, opts ...grpc.CallOption) (*responses.UpdateTenantResponse, error)
	// Delete a tenant (soft delete)
	DeleteTenant(ctx context.Context, in *requests.DeleteTenantRequest, opts ...grpc.CallOption) (*responses.DeleteTenantResponse, error)
	// List tenants within an organization (with pagination and filtering)
	ListTenants(ctx context.Context, in *requests.ListTenantsRequest, opts ...grpc.CallOption) (*responses.ListTenantsResponse, error)
	// Configure tenant isolation settings
	ConfigureTenantIsolation(ctx context.Context, in *requests.ConfigureTenantIsolationRequest, opts ...grpc.CallOption) (*responses.ConfigureTenantIsolationResponse, error)
	// Get tenant isolation configuration
	GetTenantIsolation(ctx context.Context, in *requests.GetTenantIsolationRequest, opts ...grpc.CallOption) (*responses.GetTenantIsolationResponse, error)
	// Update tenant resource quotas
	UpdateTenantQuota(ctx context.Context, in *requests.UpdateTenantQuotaRequest, opts ...grpc.CallOption) (*responses.UpdateTenantQuotaResponse, error)
	// Get tenant resource usage statistics
	GetTenantUsage(ctx context.Context, in *requests.GetTenantUsageRequest, opts ...grpc.CallOption) (*responses.GetTenantUsageResponse, error)
}

type tenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantServiceClient(cc grpc.ClientConnInterface) TenantServiceClient {
	return &tenantServiceClient{cc}
}

func (c *tenantServiceClient) CreateTenant(ctx context.Context, in *requests.CreateTenantRequest, opts ...grpc.CallOption) (*responses.CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CreateTenantResponse)
	err := c.cc.Invoke(ctx, TenantService_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetTenant(ctx context.Context, in *requests.GetTenantRequest, opts ...grpc.CallOption) (*responses.GetTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetTenantResponse)
	err := c.cc.Invoke(ctx, TenantService_GetTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateTenant(ctx context.Context, in *requests.UpdateTenantRequest, opts ...grpc.CallOption) (*responses.UpdateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.UpdateTenantResponse)
	err := c.cc.Invoke(ctx, TenantService_UpdateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) DeleteTenant(ctx context.Context, in *requests.DeleteTenantRequest, opts ...grpc.CallOption) (*responses.DeleteTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.DeleteTenantResponse)
	err := c.cc.Invoke(ctx, TenantService_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) ListTenants(ctx context.Context, in *requests.ListTenantsRequest, opts ...grpc.CallOption) (*responses.ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListTenantsResponse)
	err := c.cc.Invoke(ctx, TenantService_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) ConfigureTenantIsolation(ctx context.Context, in *requests.ConfigureTenantIsolationRequest, opts ...grpc.CallOption) (*responses.ConfigureTenantIsolationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ConfigureTenantIsolationResponse)
	err := c.cc.Invoke(ctx, TenantService_ConfigureTenantIsolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetTenantIsolation(ctx context.Context, in *requests.GetTenantIsolationRequest, opts ...grpc.CallOption) (*responses.GetTenantIsolationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetTenantIsolationResponse)
	err := c.cc.Invoke(ctx, TenantService_GetTenantIsolation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) UpdateTenantQuota(ctx context.Context, in *requests.UpdateTenantQuotaRequest, opts ...grpc.CallOption) (*responses.UpdateTenantQuotaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.UpdateTenantQuotaResponse)
	err := c.cc.Invoke(ctx, TenantService_UpdateTenantQuota_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantServiceClient) GetTenantUsage(ctx context.Context, in *requests.GetTenantUsageRequest, opts ...grpc.CallOption) (*responses.GetTenantUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetTenantUsageResponse)
	err := c.cc.Invoke(ctx, TenantService_GetTenantUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServiceServer is the server API for TenantService service.
// All implementations should embed UnimplementedTenantServiceServer
// for forward compatibility.
//
// *
// TenantService provides comprehensive tenant management capabilities.
// Handles tenant CRUD operations, isolation configuration, quota management,
// and multi-tenant resource administration.
type TenantServiceServer interface {
	// Create a new tenant within an organization
	CreateTenant(context.Context, *requests.CreateTenantRequest) (*responses.CreateTenantResponse, error)
	// Get a tenant by ID
	GetTenant(context.Context, *requests.GetTenantRequest) (*responses.GetTenantResponse, error)
	// Update an existing tenant
	UpdateTenant(context.Context, *requests.UpdateTenantRequest) (*responses.UpdateTenantResponse, error)
	// Delete a tenant (soft delete)
	DeleteTenant(context.Context, *requests.DeleteTenantRequest) (*responses.DeleteTenantResponse, error)
	// List tenants within an organization (with pagination and filtering)
	ListTenants(context.Context, *requests.ListTenantsRequest) (*responses.ListTenantsResponse, error)
	// Configure tenant isolation settings
	ConfigureTenantIsolation(context.Context, *requests.ConfigureTenantIsolationRequest) (*responses.ConfigureTenantIsolationResponse, error)
	// Get tenant isolation configuration
	GetTenantIsolation(context.Context, *requests.GetTenantIsolationRequest) (*responses.GetTenantIsolationResponse, error)
	// Update tenant resource quotas
	UpdateTenantQuota(context.Context, *requests.UpdateTenantQuotaRequest) (*responses.UpdateTenantQuotaResponse, error)
	// Get tenant resource usage statistics
	GetTenantUsage(context.Context, *requests.GetTenantUsageRequest) (*responses.GetTenantUsageResponse, error)
}

// UnimplementedTenantServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenantServiceServer struct{}

func (UnimplementedTenantServiceServer) CreateTenant(context.Context, *requests.CreateTenantRequest) (*responses.CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedTenantServiceServer) GetTenant(context.Context, *requests.GetTenantRequest) (*responses.GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedTenantServiceServer) UpdateTenant(context.Context, *requests.UpdateTenantRequest) (*responses.UpdateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedTenantServiceServer) DeleteTenant(context.Context, *requests.DeleteTenantRequest) (*responses.DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedTenantServiceServer) ListTenants(context.Context, *requests.ListTenantsRequest) (*responses.ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenantServiceServer) ConfigureTenantIsolation(context.Context, *requests.ConfigureTenantIsolationRequest) (*responses.ConfigureTenantIsolationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTenantIsolation not implemented")
}
func (UnimplementedTenantServiceServer) GetTenantIsolation(context.Context, *requests.GetTenantIsolationRequest) (*responses.GetTenantIsolationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantIsolation not implemented")
}
func (UnimplementedTenantServiceServer) UpdateTenantQuota(context.Context, *requests.UpdateTenantQuotaRequest) (*responses.UpdateTenantQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantQuota not implemented")
}
func (UnimplementedTenantServiceServer) GetTenantUsage(context.Context, *requests.GetTenantUsageRequest) (*responses.GetTenantUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantUsage not implemented")
}
func (UnimplementedTenantServiceServer) testEmbeddedByValue() {}

// UnsafeTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServiceServer will
// result in compilation errors.
type UnsafeTenantServiceServer interface {
	mustEmbedUnimplementedTenantServiceServer()
}

func RegisterTenantServiceServer(s grpc.ServiceRegistrar, srv TenantServiceServer) {
	// If the following call pancis, it indicates UnimplementedTenantServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenantService_ServiceDesc, srv)
}

func _TenantService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).CreateTenant(ctx, req.(*requests.CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetTenant(ctx, req.(*requests.GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateTenant(ctx, req.(*requests.UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).DeleteTenant(ctx, req.(*requests.DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).ListTenants(ctx, req.(*requests.ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_ConfigureTenantIsolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ConfigureTenantIsolationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).ConfigureTenantIsolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_ConfigureTenantIsolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).ConfigureTenantIsolation(ctx, req.(*requests.ConfigureTenantIsolationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetTenantIsolation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetTenantIsolationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetTenantIsolation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_GetTenantIsolation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetTenantIsolation(ctx, req.(*requests.GetTenantIsolationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_UpdateTenantQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.UpdateTenantQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).UpdateTenantQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_UpdateTenantQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).UpdateTenantQuota(ctx, req.(*requests.UpdateTenantQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantService_GetTenantUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetTenantUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServiceServer).GetTenantUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantService_GetTenantUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServiceServer).GetTenantUsage(ctx, req.(*requests.GetTenantUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantService_ServiceDesc is the grpc.ServiceDesc for TenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.organization.TenantService",
	HandlerType: (*TenantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenant",
			Handler:    _TenantService_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _TenantService_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _TenantService_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _TenantService_DeleteTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _TenantService_ListTenants_Handler,
		},
		{
			MethodName: "ConfigureTenantIsolation",
			Handler:    _TenantService_ConfigureTenantIsolation_Handler,
		},
		{
			MethodName: "GetTenantIsolation",
			Handler:    _TenantService_GetTenantIsolation_Handler,
		},
		{
			MethodName: "UpdateTenantQuota",
			Handler:    _TenantService_UpdateTenantQuota_Handler,
		},
		{
			MethodName: "GetTenantUsage",
			Handler:    _TenantService_GetTenantUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/organization/proto/services/tenant_service.proto",
}
