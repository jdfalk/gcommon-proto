// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/organization/proto/team.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Team message representing a team within an organization or department.
// Teams are smaller organizational units focused on specific projects,
// functions, or objectives.
type Team struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique team identifier
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Organization identifier
	OrganizationId *string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// Department identifier (teams can belong to departments)
	DepartmentId *string `protobuf:"bytes,3,opt,name=department_id,json=departmentId" json:"department_id,omitempty"`
	// Team name
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// URL-friendly slug for the team
	Slug *string `protobuf:"bytes,5,opt,name=slug" json:"slug,omitempty"`
	// Team description or purpose
	Description *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// Team lead/manager user ID
	LeadId *string `protobuf:"bytes,7,opt,name=lead_id,json=leadId" json:"lead_id,omitempty"`
	// Team type or category (e.g., "engineering", "marketing", "sales")
	TeamType *string `protobuf:"bytes,8,opt,name=team_type,json=teamType" json:"team_type,omitempty"`
	// Team's primary focus area or mission
	FocusArea *string `protobuf:"bytes,9,opt,name=focus_area,json=focusArea" json:"focus_area,omitempty"`
	// Team metadata and custom attributes
	Metadata []*proto.KeyValue `protobuf:"bytes,10,rep,name=metadata" json:"metadata,omitempty"`
	// Team creation timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// User ID who created this team
	CreatedBy *string `protobuf:"bytes,13,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	// User ID who last updated this team
	UpdatedBy *string `protobuf:"bytes,14,opt,name=updated_by,json=updatedBy" json:"updated_by,omitempty"`
	// Whether this team is currently active
	Active *bool `protobuf:"varint,15,opt,name=active" json:"active,omitempty"`
	// Team's email address for external communications
	ContactEmail *string `protobuf:"bytes,16,opt,name=contact_email,json=contactEmail" json:"contact_email,omitempty"`
	// Team's communication channel (e.g., Slack channel, Discord server)
	CommunicationChannel *string `protobuf:"bytes,17,opt,name=communication_channel,json=communicationChannel" json:"communication_channel,omitempty"`
	// Maximum number of members in this team
	MaxMembers *int32 `protobuf:"varint,18,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	// Team's budget allocation (in organization's currency)
	BudgetAllocation *float64 `protobuf:"fixed64,19,opt,name=budget_allocation,json=budgetAllocation" json:"budget_allocation,omitempty"`
	// Team's timezone (inherits from department/organization if not set)
	Timezone *string `protobuf:"bytes,20,opt,name=timezone" json:"timezone,omitempty"`
	// List of member user IDs in this team
	MemberIds []string `protobuf:"bytes,21,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	// List of project IDs this team is responsible for
	ProjectIds []string `protobuf:"bytes,22,rep,name=project_ids,json=projectIds" json:"project_ids,omitempty"`
	// Team's goals or objectives for the current period
	Objectives []string `protobuf:"bytes,23,rep,name=objectives" json:"objectives,omitempty"`
	// Team's key performance indicators or metrics
	Kpis []string `protobuf:"bytes,24,rep,name=kpis" json:"kpis,omitempty"`
	// Whether this team is cross-functional (spans multiple departments)
	CrossFunctional *bool `protobuf:"varint,25,opt,name=cross_functional,json=crossFunctional" json:"cross_functional,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_pkg_organization_proto_team_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_organization_proto_team_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_pkg_organization_proto_team_proto_rawDescGZIP(), []int{0}
}

func (x *Team) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Team) GetOrganizationId() string {
	if x != nil && x.OrganizationId != nil {
		return *x.OrganizationId
	}
	return ""
}

func (x *Team) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Team) GetSlug() string {
	if x != nil && x.Slug != nil {
		return *x.Slug
	}
	return ""
}

func (x *Team) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Team) GetLeadId() string {
	if x != nil && x.LeadId != nil {
		return *x.LeadId
	}
	return ""
}

func (x *Team) GetTeamType() string {
	if x != nil && x.TeamType != nil {
		return *x.TeamType
	}
	return ""
}

func (x *Team) GetFocusArea() string {
	if x != nil && x.FocusArea != nil {
		return *x.FocusArea
	}
	return ""
}

func (x *Team) GetMetadata() []*proto.KeyValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Team) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Team) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Team) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *Team) GetUpdatedBy() string {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return ""
}

func (x *Team) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *Team) GetContactEmail() string {
	if x != nil && x.ContactEmail != nil {
		return *x.ContactEmail
	}
	return ""
}

func (x *Team) GetCommunicationChannel() string {
	if x != nil && x.CommunicationChannel != nil {
		return *x.CommunicationChannel
	}
	return ""
}

func (x *Team) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *Team) GetBudgetAllocation() float64 {
	if x != nil && x.BudgetAllocation != nil {
		return *x.BudgetAllocation
	}
	return 0
}

func (x *Team) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *Team) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *Team) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

func (x *Team) GetObjectives() []string {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *Team) GetKpis() []string {
	if x != nil {
		return x.Kpis
	}
	return nil
}

func (x *Team) GetCrossFunctional() bool {
	if x != nil && x.CrossFunctional != nil {
		return *x.CrossFunctional
	}
	return false
}

var File_pkg_organization_proto_team_proto protoreflect.FileDescriptor

const file_pkg_organization_proto_team_proto_rawDesc = "" +
	"\n" +
	"!pkg/organization/proto/team.proto\x12\x17gcommon.v1.organization\x1a pkg/common/proto/key_value.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xf7\x06\n" +
	"\x04Team\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0forganization_id\x18\x02 \x01(\tR\x0eorganizationId\x12#\n" +
	"\rdepartment_id\x18\x03 \x01(\tR\fdepartmentId\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04slug\x18\x05 \x01(\tR\x04slug\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x17\n" +
	"\alead_id\x18\a \x01(\tR\x06leadId\x12\x1b\n" +
	"\tteam_type\x18\b \x01(\tR\bteamType\x12\x1d\n" +
	"\n" +
	"focus_area\x18\t \x01(\tR\tfocusArea\x12;\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2\x1b.gcommon.v1.common.KeyValueB\x02(\x01R\bmetadata\x12=\n" +
	"\n" +
	"created_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tcreatedAt\x12=\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\r \x01(\tR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"updated_by\x18\x0e \x01(\tR\tupdatedBy\x12\x16\n" +
	"\x06active\x18\x0f \x01(\bR\x06active\x12#\n" +
	"\rcontact_email\x18\x10 \x01(\tR\fcontactEmail\x123\n" +
	"\x15communication_channel\x18\x11 \x01(\tR\x14communicationChannel\x12\x1f\n" +
	"\vmax_members\x18\x12 \x01(\x05R\n" +
	"maxMembers\x12+\n" +
	"\x11budget_allocation\x18\x13 \x01(\x01R\x10budgetAllocation\x12\x1a\n" +
	"\btimezone\x18\x14 \x01(\tR\btimezone\x12\x1d\n" +
	"\n" +
	"member_ids\x18\x15 \x03(\tR\tmemberIds\x12\x1f\n" +
	"\vproject_ids\x18\x16 \x03(\tR\n" +
	"projectIds\x12\x1e\n" +
	"\n" +
	"objectives\x18\x17 \x03(\tR\n" +
	"objectives\x12\x12\n" +
	"\x04kpis\x18\x18 \x03(\tR\x04kpis\x12)\n" +
	"\x10cross_functional\x18\x19 \x01(\bR\x0fcrossFunctionalB\xd8\x01\n" +
	"\x1bcom.gcommon.v1.organizationB\tTeamProtoP\x01Z0github.com/jdfalk/gcommon/pkg/organization/proto\xa2\x02\x03GVO\xaa\x02\x17Gcommon.V1.Organization\xca\x02\x17Gcommon\\V1\\Organization\xe2\x02#Gcommon\\V1\\Organization\\GPBMetadata\xea\x02\x19Gcommon::V1::Organizationb\beditionsp\xe8\a"

var (
	file_pkg_organization_proto_team_proto_rawDescOnce sync.Once
	file_pkg_organization_proto_team_proto_rawDescData []byte
)

func file_pkg_organization_proto_team_proto_rawDescGZIP() []byte {
	file_pkg_organization_proto_team_proto_rawDescOnce.Do(func() {
		file_pkg_organization_proto_team_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_organization_proto_team_proto_rawDesc), len(file_pkg_organization_proto_team_proto_rawDesc)))
	})
	return file_pkg_organization_proto_team_proto_rawDescData
}

var file_pkg_organization_proto_team_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_organization_proto_team_proto_goTypes = []any{
	(*Team)(nil),                  // 0: gcommon.v1.organization.Team
	(*proto.KeyValue)(nil),        // 1: gcommon.v1.common.KeyValue
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_pkg_organization_proto_team_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.organization.Team.metadata:type_name -> gcommon.v1.common.KeyValue
	2, // 1: gcommon.v1.organization.Team.created_at:type_name -> google.protobuf.Timestamp
	2, // 2: gcommon.v1.organization.Team.updated_at:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_organization_proto_team_proto_init() }
func file_pkg_organization_proto_team_proto_init() {
	if File_pkg_organization_proto_team_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_organization_proto_team_proto_rawDesc), len(file_pkg_organization_proto_team_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_organization_proto_team_proto_goTypes,
		DependencyIndexes: file_pkg_organization_proto_team_proto_depIdxs,
		MessageInfos:      file_pkg_organization_proto_team_proto_msgTypes,
	}.Build()
	File_pkg_organization_proto_team_proto = out.File
	file_pkg_organization_proto_team_proto_goTypes = nil
	file_pkg_organization_proto_team_proto_depIdxs = nil
}
