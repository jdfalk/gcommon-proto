// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHierarchyServiceServer creates a new instance of MockHierarchyServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHierarchyServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHierarchyServiceServer {
	mock := &MockHierarchyServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHierarchyServiceServer is an autogenerated mock type for the HierarchyServiceServer type
type MockHierarchyServiceServer struct {
	mock.Mock
}

type MockHierarchyServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHierarchyServiceServer) EXPECT() *MockHierarchyServiceServer_Expecter {
	return &MockHierarchyServiceServer_Expecter{mock: &_m.Mock}
}

// CreateDepartment provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) CreateDepartment(context1 context.Context, createDepartmentRequest *proto.CreateDepartmentRequest) (*proto.CreateDepartmentResponse, error) {
	ret := _mock.Called(context1, createDepartmentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDepartment")
	}

	var r0 *proto.CreateDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDepartmentRequest) (*proto.CreateDepartmentResponse, error)); ok {
		return returnFunc(context1, createDepartmentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDepartmentRequest) *proto.CreateDepartmentResponse); ok {
		r0 = returnFunc(context1, createDepartmentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateDepartmentRequest) error); ok {
		r1 = returnFunc(context1, createDepartmentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_CreateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDepartment'
type MockHierarchyServiceServer_CreateDepartment_Call struct {
	*mock.Call
}

// CreateDepartment is a helper method to define mock.On call
//   - context1 context.Context
//   - createDepartmentRequest *proto.CreateDepartmentRequest
func (_e *MockHierarchyServiceServer_Expecter) CreateDepartment(context1 interface{}, createDepartmentRequest interface{}) *MockHierarchyServiceServer_CreateDepartment_Call {
	return &MockHierarchyServiceServer_CreateDepartment_Call{Call: _e.mock.On("CreateDepartment", context1, createDepartmentRequest)}
}

func (_c *MockHierarchyServiceServer_CreateDepartment_Call) Run(run func(context1 context.Context, createDepartmentRequest *proto.CreateDepartmentRequest)) *MockHierarchyServiceServer_CreateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateDepartmentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_CreateDepartment_Call) Return(createDepartmentResponse *proto.CreateDepartmentResponse, err error) *MockHierarchyServiceServer_CreateDepartment_Call {
	_c.Call.Return(createDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_CreateDepartment_Call) RunAndReturn(run func(context1 context.Context, createDepartmentRequest *proto.CreateDepartmentRequest) (*proto.CreateDepartmentResponse, error)) *MockHierarchyServiceServer_CreateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) CreateTeam(context1 context.Context, createTeamRequest *proto.CreateTeamRequest) (*proto.CreateTeamResponse, error) {
	ret := _mock.Called(context1, createTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *proto.CreateTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTeamRequest) (*proto.CreateTeamResponse, error)); ok {
		return returnFunc(context1, createTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTeamRequest) *proto.CreateTeamResponse); ok {
		r0 = returnFunc(context1, createTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateTeamRequest) error); ok {
		r1 = returnFunc(context1, createTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockHierarchyServiceServer_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - createTeamRequest *proto.CreateTeamRequest
func (_e *MockHierarchyServiceServer_Expecter) CreateTeam(context1 interface{}, createTeamRequest interface{}) *MockHierarchyServiceServer_CreateTeam_Call {
	return &MockHierarchyServiceServer_CreateTeam_Call{Call: _e.mock.On("CreateTeam", context1, createTeamRequest)}
}

func (_c *MockHierarchyServiceServer_CreateTeam_Call) Run(run func(context1 context.Context, createTeamRequest *proto.CreateTeamRequest)) *MockHierarchyServiceServer_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_CreateTeam_Call) Return(createTeamResponse *proto.CreateTeamResponse, err error) *MockHierarchyServiceServer_CreateTeam_Call {
	_c.Call.Return(createTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_CreateTeam_Call) RunAndReturn(run func(context1 context.Context, createTeamRequest *proto.CreateTeamRequest) (*proto.CreateTeamResponse, error)) *MockHierarchyServiceServer_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDepartment provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) DeleteDepartment(context1 context.Context, deleteDepartmentRequest *proto.DeleteDepartmentRequest) (*proto.DeleteDepartmentResponse, error) {
	ret := _mock.Called(context1, deleteDepartmentRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDepartment")
	}

	var r0 *proto.DeleteDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteDepartmentRequest) (*proto.DeleteDepartmentResponse, error)); ok {
		return returnFunc(context1, deleteDepartmentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteDepartmentRequest) *proto.DeleteDepartmentResponse); ok {
		r0 = returnFunc(context1, deleteDepartmentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteDepartmentRequest) error); ok {
		r1 = returnFunc(context1, deleteDepartmentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_DeleteDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDepartment'
type MockHierarchyServiceServer_DeleteDepartment_Call struct {
	*mock.Call
}

// DeleteDepartment is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteDepartmentRequest *proto.DeleteDepartmentRequest
func (_e *MockHierarchyServiceServer_Expecter) DeleteDepartment(context1 interface{}, deleteDepartmentRequest interface{}) *MockHierarchyServiceServer_DeleteDepartment_Call {
	return &MockHierarchyServiceServer_DeleteDepartment_Call{Call: _e.mock.On("DeleteDepartment", context1, deleteDepartmentRequest)}
}

func (_c *MockHierarchyServiceServer_DeleteDepartment_Call) Run(run func(context1 context.Context, deleteDepartmentRequest *proto.DeleteDepartmentRequest)) *MockHierarchyServiceServer_DeleteDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteDepartmentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_DeleteDepartment_Call) Return(deleteDepartmentResponse *proto.DeleteDepartmentResponse, err error) *MockHierarchyServiceServer_DeleteDepartment_Call {
	_c.Call.Return(deleteDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_DeleteDepartment_Call) RunAndReturn(run func(context1 context.Context, deleteDepartmentRequest *proto.DeleteDepartmentRequest) (*proto.DeleteDepartmentResponse, error)) *MockHierarchyServiceServer_DeleteDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) DeleteTeam(context1 context.Context, deleteTeamRequest *proto.DeleteTeamRequest) (*proto.DeleteTeamResponse, error) {
	ret := _mock.Called(context1, deleteTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 *proto.DeleteTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTeamRequest) (*proto.DeleteTeamResponse, error)); ok {
		return returnFunc(context1, deleteTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTeamRequest) *proto.DeleteTeamResponse); ok {
		r0 = returnFunc(context1, deleteTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTeamRequest) error); ok {
		r1 = returnFunc(context1, deleteTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockHierarchyServiceServer_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteTeamRequest *proto.DeleteTeamRequest
func (_e *MockHierarchyServiceServer_Expecter) DeleteTeam(context1 interface{}, deleteTeamRequest interface{}) *MockHierarchyServiceServer_DeleteTeam_Call {
	return &MockHierarchyServiceServer_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", context1, deleteTeamRequest)}
}

func (_c *MockHierarchyServiceServer_DeleteTeam_Call) Run(run func(context1 context.Context, deleteTeamRequest *proto.DeleteTeamRequest)) *MockHierarchyServiceServer_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_DeleteTeam_Call) Return(deleteTeamResponse *proto.DeleteTeamResponse, err error) *MockHierarchyServiceServer_DeleteTeam_Call {
	_c.Call.Return(deleteTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_DeleteTeam_Call) RunAndReturn(run func(context1 context.Context, deleteTeamRequest *proto.DeleteTeamRequest) (*proto.DeleteTeamResponse, error)) *MockHierarchyServiceServer_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepartment provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) GetDepartment(context1 context.Context, getDepartmentRequest *proto.GetDepartmentRequest) (*proto.GetDepartmentResponse, error) {
	ret := _mock.Called(context1, getDepartmentRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetDepartment")
	}

	var r0 *proto.GetDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDepartmentRequest) (*proto.GetDepartmentResponse, error)); ok {
		return returnFunc(context1, getDepartmentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDepartmentRequest) *proto.GetDepartmentResponse); ok {
		r0 = returnFunc(context1, getDepartmentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetDepartmentRequest) error); ok {
		r1 = returnFunc(context1, getDepartmentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_GetDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepartment'
type MockHierarchyServiceServer_GetDepartment_Call struct {
	*mock.Call
}

// GetDepartment is a helper method to define mock.On call
//   - context1 context.Context
//   - getDepartmentRequest *proto.GetDepartmentRequest
func (_e *MockHierarchyServiceServer_Expecter) GetDepartment(context1 interface{}, getDepartmentRequest interface{}) *MockHierarchyServiceServer_GetDepartment_Call {
	return &MockHierarchyServiceServer_GetDepartment_Call{Call: _e.mock.On("GetDepartment", context1, getDepartmentRequest)}
}

func (_c *MockHierarchyServiceServer_GetDepartment_Call) Run(run func(context1 context.Context, getDepartmentRequest *proto.GetDepartmentRequest)) *MockHierarchyServiceServer_GetDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetDepartmentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_GetDepartment_Call) Return(getDepartmentResponse *proto.GetDepartmentResponse, err error) *MockHierarchyServiceServer_GetDepartment_Call {
	_c.Call.Return(getDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_GetDepartment_Call) RunAndReturn(run func(context1 context.Context, getDepartmentRequest *proto.GetDepartmentRequest) (*proto.GetDepartmentResponse, error)) *MockHierarchyServiceServer_GetDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// GetHierarchy provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) GetHierarchy(context1 context.Context, getHierarchyRequest *proto.GetHierarchyRequest) (*proto.GetHierarchyResponse, error) {
	ret := _mock.Called(context1, getHierarchyRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetHierarchy")
	}

	var r0 *proto.GetHierarchyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHierarchyRequest) (*proto.GetHierarchyResponse, error)); ok {
		return returnFunc(context1, getHierarchyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHierarchyRequest) *proto.GetHierarchyResponse); ok {
		r0 = returnFunc(context1, getHierarchyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetHierarchyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetHierarchyRequest) error); ok {
		r1 = returnFunc(context1, getHierarchyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_GetHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHierarchy'
type MockHierarchyServiceServer_GetHierarchy_Call struct {
	*mock.Call
}

// GetHierarchy is a helper method to define mock.On call
//   - context1 context.Context
//   - getHierarchyRequest *proto.GetHierarchyRequest
func (_e *MockHierarchyServiceServer_Expecter) GetHierarchy(context1 interface{}, getHierarchyRequest interface{}) *MockHierarchyServiceServer_GetHierarchy_Call {
	return &MockHierarchyServiceServer_GetHierarchy_Call{Call: _e.mock.On("GetHierarchy", context1, getHierarchyRequest)}
}

func (_c *MockHierarchyServiceServer_GetHierarchy_Call) Run(run func(context1 context.Context, getHierarchyRequest *proto.GetHierarchyRequest)) *MockHierarchyServiceServer_GetHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetHierarchyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetHierarchyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_GetHierarchy_Call) Return(getHierarchyResponse *proto.GetHierarchyResponse, err error) *MockHierarchyServiceServer_GetHierarchy_Call {
	_c.Call.Return(getHierarchyResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_GetHierarchy_Call) RunAndReturn(run func(context1 context.Context, getHierarchyRequest *proto.GetHierarchyRequest) (*proto.GetHierarchyResponse, error)) *MockHierarchyServiceServer_GetHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) GetTeam(context1 context.Context, getTeamRequest *proto.GetTeamRequest) (*proto.GetTeamResponse, error) {
	ret := _mock.Called(context1, getTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *proto.GetTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTeamRequest) (*proto.GetTeamResponse, error)); ok {
		return returnFunc(context1, getTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTeamRequest) *proto.GetTeamResponse); ok {
		r0 = returnFunc(context1, getTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTeamRequest) error); ok {
		r1 = returnFunc(context1, getTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockHierarchyServiceServer_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - getTeamRequest *proto.GetTeamRequest
func (_e *MockHierarchyServiceServer_Expecter) GetTeam(context1 interface{}, getTeamRequest interface{}) *MockHierarchyServiceServer_GetTeam_Call {
	return &MockHierarchyServiceServer_GetTeam_Call{Call: _e.mock.On("GetTeam", context1, getTeamRequest)}
}

func (_c *MockHierarchyServiceServer_GetTeam_Call) Run(run func(context1 context.Context, getTeamRequest *proto.GetTeamRequest)) *MockHierarchyServiceServer_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_GetTeam_Call) Return(getTeamResponse *proto.GetTeamResponse, err error) *MockHierarchyServiceServer_GetTeam_Call {
	_c.Call.Return(getTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_GetTeam_Call) RunAndReturn(run func(context1 context.Context, getTeamRequest *proto.GetTeamRequest) (*proto.GetTeamResponse, error)) *MockHierarchyServiceServer_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ListDepartments provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) ListDepartments(context1 context.Context, listDepartmentsRequest *proto.ListDepartmentsRequest) (*proto.ListDepartmentsResponse, error) {
	ret := _mock.Called(context1, listDepartmentsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListDepartments")
	}

	var r0 *proto.ListDepartmentsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDepartmentsRequest) (*proto.ListDepartmentsResponse, error)); ok {
		return returnFunc(context1, listDepartmentsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDepartmentsRequest) *proto.ListDepartmentsResponse); ok {
		r0 = returnFunc(context1, listDepartmentsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDepartmentsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListDepartmentsRequest) error); ok {
		r1 = returnFunc(context1, listDepartmentsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_ListDepartments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDepartments'
type MockHierarchyServiceServer_ListDepartments_Call struct {
	*mock.Call
}

// ListDepartments is a helper method to define mock.On call
//   - context1 context.Context
//   - listDepartmentsRequest *proto.ListDepartmentsRequest
func (_e *MockHierarchyServiceServer_Expecter) ListDepartments(context1 interface{}, listDepartmentsRequest interface{}) *MockHierarchyServiceServer_ListDepartments_Call {
	return &MockHierarchyServiceServer_ListDepartments_Call{Call: _e.mock.On("ListDepartments", context1, listDepartmentsRequest)}
}

func (_c *MockHierarchyServiceServer_ListDepartments_Call) Run(run func(context1 context.Context, listDepartmentsRequest *proto.ListDepartmentsRequest)) *MockHierarchyServiceServer_ListDepartments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListDepartmentsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListDepartmentsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_ListDepartments_Call) Return(listDepartmentsResponse *proto.ListDepartmentsResponse, err error) *MockHierarchyServiceServer_ListDepartments_Call {
	_c.Call.Return(listDepartmentsResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_ListDepartments_Call) RunAndReturn(run func(context1 context.Context, listDepartmentsRequest *proto.ListDepartmentsRequest) (*proto.ListDepartmentsResponse, error)) *MockHierarchyServiceServer_ListDepartments_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeams provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) ListTeams(context1 context.Context, listTeamsRequest *proto.ListTeamsRequest) (*proto.ListTeamsResponse, error) {
	ret := _mock.Called(context1, listTeamsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 *proto.ListTeamsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTeamsRequest) (*proto.ListTeamsResponse, error)); ok {
		return returnFunc(context1, listTeamsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTeamsRequest) *proto.ListTeamsResponse); ok {
		r0 = returnFunc(context1, listTeamsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListTeamsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListTeamsRequest) error); ok {
		r1 = returnFunc(context1, listTeamsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type MockHierarchyServiceServer_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
//   - context1 context.Context
//   - listTeamsRequest *proto.ListTeamsRequest
func (_e *MockHierarchyServiceServer_Expecter) ListTeams(context1 interface{}, listTeamsRequest interface{}) *MockHierarchyServiceServer_ListTeams_Call {
	return &MockHierarchyServiceServer_ListTeams_Call{Call: _e.mock.On("ListTeams", context1, listTeamsRequest)}
}

func (_c *MockHierarchyServiceServer_ListTeams_Call) Run(run func(context1 context.Context, listTeamsRequest *proto.ListTeamsRequest)) *MockHierarchyServiceServer_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListTeamsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListTeamsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_ListTeams_Call) Return(listTeamsResponse *proto.ListTeamsResponse, err error) *MockHierarchyServiceServer_ListTeams_Call {
	_c.Call.Return(listTeamsResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_ListTeams_Call) RunAndReturn(run func(context1 context.Context, listTeamsRequest *proto.ListTeamsRequest) (*proto.ListTeamsResponse, error)) *MockHierarchyServiceServer_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDepartment provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) UpdateDepartment(context1 context.Context, updateDepartmentRequest *proto.UpdateDepartmentRequest) (*proto.UpdateDepartmentResponse, error) {
	ret := _mock.Called(context1, updateDepartmentRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDepartment")
	}

	var r0 *proto.UpdateDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateDepartmentRequest) (*proto.UpdateDepartmentResponse, error)); ok {
		return returnFunc(context1, updateDepartmentRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateDepartmentRequest) *proto.UpdateDepartmentResponse); ok {
		r0 = returnFunc(context1, updateDepartmentRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateDepartmentRequest) error); ok {
		r1 = returnFunc(context1, updateDepartmentRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_UpdateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDepartment'
type MockHierarchyServiceServer_UpdateDepartment_Call struct {
	*mock.Call
}

// UpdateDepartment is a helper method to define mock.On call
//   - context1 context.Context
//   - updateDepartmentRequest *proto.UpdateDepartmentRequest
func (_e *MockHierarchyServiceServer_Expecter) UpdateDepartment(context1 interface{}, updateDepartmentRequest interface{}) *MockHierarchyServiceServer_UpdateDepartment_Call {
	return &MockHierarchyServiceServer_UpdateDepartment_Call{Call: _e.mock.On("UpdateDepartment", context1, updateDepartmentRequest)}
}

func (_c *MockHierarchyServiceServer_UpdateDepartment_Call) Run(run func(context1 context.Context, updateDepartmentRequest *proto.UpdateDepartmentRequest)) *MockHierarchyServiceServer_UpdateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateDepartmentRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateDepartment_Call) Return(updateDepartmentResponse *proto.UpdateDepartmentResponse, err error) *MockHierarchyServiceServer_UpdateDepartment_Call {
	_c.Call.Return(updateDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateDepartment_Call) RunAndReturn(run func(context1 context.Context, updateDepartmentRequest *proto.UpdateDepartmentRequest) (*proto.UpdateDepartmentResponse, error)) *MockHierarchyServiceServer_UpdateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHierarchy provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) UpdateHierarchy(context1 context.Context, updateHierarchyRequest *proto.UpdateHierarchyRequest) (*proto.UpdateHierarchyResponse, error) {
	ret := _mock.Called(context1, updateHierarchyRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHierarchy")
	}

	var r0 *proto.UpdateHierarchyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateHierarchyRequest) (*proto.UpdateHierarchyResponse, error)); ok {
		return returnFunc(context1, updateHierarchyRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateHierarchyRequest) *proto.UpdateHierarchyResponse); ok {
		r0 = returnFunc(context1, updateHierarchyRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateHierarchyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateHierarchyRequest) error); ok {
		r1 = returnFunc(context1, updateHierarchyRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_UpdateHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHierarchy'
type MockHierarchyServiceServer_UpdateHierarchy_Call struct {
	*mock.Call
}

// UpdateHierarchy is a helper method to define mock.On call
//   - context1 context.Context
//   - updateHierarchyRequest *proto.UpdateHierarchyRequest
func (_e *MockHierarchyServiceServer_Expecter) UpdateHierarchy(context1 interface{}, updateHierarchyRequest interface{}) *MockHierarchyServiceServer_UpdateHierarchy_Call {
	return &MockHierarchyServiceServer_UpdateHierarchy_Call{Call: _e.mock.On("UpdateHierarchy", context1, updateHierarchyRequest)}
}

func (_c *MockHierarchyServiceServer_UpdateHierarchy_Call) Run(run func(context1 context.Context, updateHierarchyRequest *proto.UpdateHierarchyRequest)) *MockHierarchyServiceServer_UpdateHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateHierarchyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateHierarchyRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateHierarchy_Call) Return(updateHierarchyResponse *proto.UpdateHierarchyResponse, err error) *MockHierarchyServiceServer_UpdateHierarchy_Call {
	_c.Call.Return(updateHierarchyResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateHierarchy_Call) RunAndReturn(run func(context1 context.Context, updateHierarchyRequest *proto.UpdateHierarchyRequest) (*proto.UpdateHierarchyResponse, error)) *MockHierarchyServiceServer_UpdateHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function for the type MockHierarchyServiceServer
func (_mock *MockHierarchyServiceServer) UpdateTeam(context1 context.Context, updateTeamRequest *proto.UpdateTeamRequest) (*proto.UpdateTeamResponse, error) {
	ret := _mock.Called(context1, updateTeamRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *proto.UpdateTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTeamRequest) (*proto.UpdateTeamResponse, error)); ok {
		return returnFunc(context1, updateTeamRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTeamRequest) *proto.UpdateTeamResponse); ok {
		r0 = returnFunc(context1, updateTeamRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTeamRequest) error); ok {
		r1 = returnFunc(context1, updateTeamRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceServer_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockHierarchyServiceServer_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - context1 context.Context
//   - updateTeamRequest *proto.UpdateTeamRequest
func (_e *MockHierarchyServiceServer_Expecter) UpdateTeam(context1 interface{}, updateTeamRequest interface{}) *MockHierarchyServiceServer_UpdateTeam_Call {
	return &MockHierarchyServiceServer_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", context1, updateTeamRequest)}
}

func (_c *MockHierarchyServiceServer_UpdateTeam_Call) Run(run func(context1 context.Context, updateTeamRequest *proto.UpdateTeamRequest)) *MockHierarchyServiceServer_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTeamRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateTeam_Call) Return(updateTeamResponse *proto.UpdateTeamResponse, err error) *MockHierarchyServiceServer_UpdateTeam_Call {
	_c.Call.Return(updateTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceServer_UpdateTeam_Call) RunAndReturn(run func(context1 context.Context, updateTeamRequest *proto.UpdateTeamRequest) (*proto.UpdateTeamResponse, error)) *MockHierarchyServiceServer_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}
