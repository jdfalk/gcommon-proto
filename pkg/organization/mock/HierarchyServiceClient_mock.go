// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHierarchyServiceClient creates a new instance of MockHierarchyServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHierarchyServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHierarchyServiceClient {
	mock := &MockHierarchyServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHierarchyServiceClient is an autogenerated mock type for the HierarchyServiceClient type
type MockHierarchyServiceClient struct {
	mock.Mock
}

type MockHierarchyServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHierarchyServiceClient) EXPECT() *MockHierarchyServiceClient_Expecter {
	return &MockHierarchyServiceClient_Expecter{mock: &_m.Mock}
}

// CreateDepartment provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) CreateDepartment(ctx context.Context, in *proto.CreateDepartmentRequest, opts ...grpc.CallOption) (*proto.CreateDepartmentResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDepartment")
	}

	var r0 *proto.CreateDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDepartmentRequest, ...grpc.CallOption) (*proto.CreateDepartmentResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDepartmentRequest, ...grpc.CallOption) *proto.CreateDepartmentResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_CreateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDepartment'
type MockHierarchyServiceClient_CreateDepartment_Call struct {
	*mock.Call
}

// CreateDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateDepartmentRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) CreateDepartment(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_CreateDepartment_Call {
	return &MockHierarchyServiceClient_CreateDepartment_Call{Call: _e.mock.On("CreateDepartment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_CreateDepartment_Call) Run(run func(ctx context.Context, in *proto.CreateDepartmentRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_CreateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateDepartmentRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_CreateDepartment_Call) Return(createDepartmentResponse *proto.CreateDepartmentResponse, err error) *MockHierarchyServiceClient_CreateDepartment_Call {
	_c.Call.Return(createDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_CreateDepartment_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateDepartmentRequest, opts ...grpc.CallOption) (*proto.CreateDepartmentResponse, error)) *MockHierarchyServiceClient_CreateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) CreateTeam(ctx context.Context, in *proto.CreateTeamRequest, opts ...grpc.CallOption) (*proto.CreateTeamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *proto.CreateTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTeamRequest, ...grpc.CallOption) (*proto.CreateTeamResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTeamRequest, ...grpc.CallOption) *proto.CreateTeamResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateTeamRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockHierarchyServiceClient_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateTeamRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) CreateTeam(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_CreateTeam_Call {
	return &MockHierarchyServiceClient_CreateTeam_Call{Call: _e.mock.On("CreateTeam",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_CreateTeam_Call) Run(run func(ctx context.Context, in *proto.CreateTeamRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateTeamRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_CreateTeam_Call) Return(createTeamResponse *proto.CreateTeamResponse, err error) *MockHierarchyServiceClient_CreateTeam_Call {
	_c.Call.Return(createTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_CreateTeam_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateTeamRequest, opts ...grpc.CallOption) (*proto.CreateTeamResponse, error)) *MockHierarchyServiceClient_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDepartment provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) DeleteDepartment(ctx context.Context, in *proto.DeleteDepartmentRequest, opts ...grpc.CallOption) (*proto.DeleteDepartmentResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteDepartment")
	}

	var r0 *proto.DeleteDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteDepartmentRequest, ...grpc.CallOption) (*proto.DeleteDepartmentResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteDepartmentRequest, ...grpc.CallOption) *proto.DeleteDepartmentResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_DeleteDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDepartment'
type MockHierarchyServiceClient_DeleteDepartment_Call struct {
	*mock.Call
}

// DeleteDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteDepartmentRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) DeleteDepartment(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_DeleteDepartment_Call {
	return &MockHierarchyServiceClient_DeleteDepartment_Call{Call: _e.mock.On("DeleteDepartment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_DeleteDepartment_Call) Run(run func(ctx context.Context, in *proto.DeleteDepartmentRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_DeleteDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteDepartmentRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_DeleteDepartment_Call) Return(deleteDepartmentResponse *proto.DeleteDepartmentResponse, err error) *MockHierarchyServiceClient_DeleteDepartment_Call {
	_c.Call.Return(deleteDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_DeleteDepartment_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteDepartmentRequest, opts ...grpc.CallOption) (*proto.DeleteDepartmentResponse, error)) *MockHierarchyServiceClient_DeleteDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) DeleteTeam(ctx context.Context, in *proto.DeleteTeamRequest, opts ...grpc.CallOption) (*proto.DeleteTeamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 *proto.DeleteTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTeamRequest, ...grpc.CallOption) (*proto.DeleteTeamResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTeamRequest, ...grpc.CallOption) *proto.DeleteTeamResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTeamRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockHierarchyServiceClient_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteTeamRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) DeleteTeam(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_DeleteTeam_Call {
	return &MockHierarchyServiceClient_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_DeleteTeam_Call) Run(run func(ctx context.Context, in *proto.DeleteTeamRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTeamRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_DeleteTeam_Call) Return(deleteTeamResponse *proto.DeleteTeamResponse, err error) *MockHierarchyServiceClient_DeleteTeam_Call {
	_c.Call.Return(deleteTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_DeleteTeam_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteTeamRequest, opts ...grpc.CallOption) (*proto.DeleteTeamResponse, error)) *MockHierarchyServiceClient_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepartment provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) GetDepartment(ctx context.Context, in *proto.GetDepartmentRequest, opts ...grpc.CallOption) (*proto.GetDepartmentResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDepartment")
	}

	var r0 *proto.GetDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDepartmentRequest, ...grpc.CallOption) (*proto.GetDepartmentResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDepartmentRequest, ...grpc.CallOption) *proto.GetDepartmentResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_GetDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepartment'
type MockHierarchyServiceClient_GetDepartment_Call struct {
	*mock.Call
}

// GetDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetDepartmentRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) GetDepartment(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_GetDepartment_Call {
	return &MockHierarchyServiceClient_GetDepartment_Call{Call: _e.mock.On("GetDepartment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_GetDepartment_Call) Run(run func(ctx context.Context, in *proto.GetDepartmentRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_GetDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetDepartmentRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_GetDepartment_Call) Return(getDepartmentResponse *proto.GetDepartmentResponse, err error) *MockHierarchyServiceClient_GetDepartment_Call {
	_c.Call.Return(getDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_GetDepartment_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetDepartmentRequest, opts ...grpc.CallOption) (*proto.GetDepartmentResponse, error)) *MockHierarchyServiceClient_GetDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// GetHierarchy provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) GetHierarchy(ctx context.Context, in *proto.GetHierarchyRequest, opts ...grpc.CallOption) (*proto.GetHierarchyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHierarchy")
	}

	var r0 *proto.GetHierarchyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHierarchyRequest, ...grpc.CallOption) (*proto.GetHierarchyResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHierarchyRequest, ...grpc.CallOption) *proto.GetHierarchyResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetHierarchyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetHierarchyRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_GetHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHierarchy'
type MockHierarchyServiceClient_GetHierarchy_Call struct {
	*mock.Call
}

// GetHierarchy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetHierarchyRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) GetHierarchy(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_GetHierarchy_Call {
	return &MockHierarchyServiceClient_GetHierarchy_Call{Call: _e.mock.On("GetHierarchy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_GetHierarchy_Call) Run(run func(ctx context.Context, in *proto.GetHierarchyRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_GetHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetHierarchyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetHierarchyRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_GetHierarchy_Call) Return(getHierarchyResponse *proto.GetHierarchyResponse, err error) *MockHierarchyServiceClient_GetHierarchy_Call {
	_c.Call.Return(getHierarchyResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_GetHierarchy_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetHierarchyRequest, opts ...grpc.CallOption) (*proto.GetHierarchyResponse, error)) *MockHierarchyServiceClient_GetHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) GetTeam(ctx context.Context, in *proto.GetTeamRequest, opts ...grpc.CallOption) (*proto.GetTeamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *proto.GetTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTeamRequest, ...grpc.CallOption) (*proto.GetTeamResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTeamRequest, ...grpc.CallOption) *proto.GetTeamResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTeamRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockHierarchyServiceClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetTeamRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) GetTeam(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_GetTeam_Call {
	return &MockHierarchyServiceClient_GetTeam_Call{Call: _e.mock.On("GetTeam",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_GetTeam_Call) Run(run func(ctx context.Context, in *proto.GetTeamRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTeamRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_GetTeam_Call) Return(getTeamResponse *proto.GetTeamResponse, err error) *MockHierarchyServiceClient_GetTeam_Call {
	_c.Call.Return(getTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_GetTeam_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetTeamRequest, opts ...grpc.CallOption) (*proto.GetTeamResponse, error)) *MockHierarchyServiceClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ListDepartments provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) ListDepartments(ctx context.Context, in *proto.ListDepartmentsRequest, opts ...grpc.CallOption) (*proto.ListDepartmentsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListDepartments")
	}

	var r0 *proto.ListDepartmentsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDepartmentsRequest, ...grpc.CallOption) (*proto.ListDepartmentsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDepartmentsRequest, ...grpc.CallOption) *proto.ListDepartmentsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDepartmentsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListDepartmentsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_ListDepartments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDepartments'
type MockHierarchyServiceClient_ListDepartments_Call struct {
	*mock.Call
}

// ListDepartments is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListDepartmentsRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) ListDepartments(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_ListDepartments_Call {
	return &MockHierarchyServiceClient_ListDepartments_Call{Call: _e.mock.On("ListDepartments",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_ListDepartments_Call) Run(run func(ctx context.Context, in *proto.ListDepartmentsRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_ListDepartments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListDepartmentsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListDepartmentsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_ListDepartments_Call) Return(listDepartmentsResponse *proto.ListDepartmentsResponse, err error) *MockHierarchyServiceClient_ListDepartments_Call {
	_c.Call.Return(listDepartmentsResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_ListDepartments_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListDepartmentsRequest, opts ...grpc.CallOption) (*proto.ListDepartmentsResponse, error)) *MockHierarchyServiceClient_ListDepartments_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeams provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) ListTeams(ctx context.Context, in *proto.ListTeamsRequest, opts ...grpc.CallOption) (*proto.ListTeamsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 *proto.ListTeamsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTeamsRequest, ...grpc.CallOption) (*proto.ListTeamsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTeamsRequest, ...grpc.CallOption) *proto.ListTeamsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListTeamsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListTeamsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type MockHierarchyServiceClient_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListTeamsRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) ListTeams(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_ListTeams_Call {
	return &MockHierarchyServiceClient_ListTeams_Call{Call: _e.mock.On("ListTeams",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_ListTeams_Call) Run(run func(ctx context.Context, in *proto.ListTeamsRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListTeamsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListTeamsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_ListTeams_Call) Return(listTeamsResponse *proto.ListTeamsResponse, err error) *MockHierarchyServiceClient_ListTeams_Call {
	_c.Call.Return(listTeamsResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_ListTeams_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListTeamsRequest, opts ...grpc.CallOption) (*proto.ListTeamsResponse, error)) *MockHierarchyServiceClient_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDepartment provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) UpdateDepartment(ctx context.Context, in *proto.UpdateDepartmentRequest, opts ...grpc.CallOption) (*proto.UpdateDepartmentResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateDepartment")
	}

	var r0 *proto.UpdateDepartmentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateDepartmentRequest, ...grpc.CallOption) (*proto.UpdateDepartmentResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateDepartmentRequest, ...grpc.CallOption) *proto.UpdateDepartmentResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateDepartmentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateDepartmentRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_UpdateDepartment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDepartment'
type MockHierarchyServiceClient_UpdateDepartment_Call struct {
	*mock.Call
}

// UpdateDepartment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateDepartmentRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) UpdateDepartment(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_UpdateDepartment_Call {
	return &MockHierarchyServiceClient_UpdateDepartment_Call{Call: _e.mock.On("UpdateDepartment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_UpdateDepartment_Call) Run(run func(ctx context.Context, in *proto.UpdateDepartmentRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_UpdateDepartment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateDepartmentRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateDepartmentRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateDepartment_Call) Return(updateDepartmentResponse *proto.UpdateDepartmentResponse, err error) *MockHierarchyServiceClient_UpdateDepartment_Call {
	_c.Call.Return(updateDepartmentResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateDepartment_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateDepartmentRequest, opts ...grpc.CallOption) (*proto.UpdateDepartmentResponse, error)) *MockHierarchyServiceClient_UpdateDepartment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateHierarchy provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) UpdateHierarchy(ctx context.Context, in *proto.UpdateHierarchyRequest, opts ...grpc.CallOption) (*proto.UpdateHierarchyResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateHierarchy")
	}

	var r0 *proto.UpdateHierarchyResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateHierarchyRequest, ...grpc.CallOption) (*proto.UpdateHierarchyResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateHierarchyRequest, ...grpc.CallOption) *proto.UpdateHierarchyResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateHierarchyResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateHierarchyRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_UpdateHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateHierarchy'
type MockHierarchyServiceClient_UpdateHierarchy_Call struct {
	*mock.Call
}

// UpdateHierarchy is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateHierarchyRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) UpdateHierarchy(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_UpdateHierarchy_Call {
	return &MockHierarchyServiceClient_UpdateHierarchy_Call{Call: _e.mock.On("UpdateHierarchy",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_UpdateHierarchy_Call) Run(run func(ctx context.Context, in *proto.UpdateHierarchyRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_UpdateHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateHierarchyRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateHierarchyRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateHierarchy_Call) Return(updateHierarchyResponse *proto.UpdateHierarchyResponse, err error) *MockHierarchyServiceClient_UpdateHierarchy_Call {
	_c.Call.Return(updateHierarchyResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateHierarchy_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateHierarchyRequest, opts ...grpc.CallOption) (*proto.UpdateHierarchyResponse, error)) *MockHierarchyServiceClient_UpdateHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function for the type MockHierarchyServiceClient
func (_mock *MockHierarchyServiceClient) UpdateTeam(ctx context.Context, in *proto.UpdateTeamRequest, opts ...grpc.CallOption) (*proto.UpdateTeamResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 *proto.UpdateTeamResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTeamRequest, ...grpc.CallOption) (*proto.UpdateTeamResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTeamRequest, ...grpc.CallOption) *proto.UpdateTeamResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTeamResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTeamRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHierarchyServiceClient_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockHierarchyServiceClient_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateTeamRequest
//   - opts ...grpc.CallOption
func (_e *MockHierarchyServiceClient_Expecter) UpdateTeam(ctx interface{}, in interface{}, opts ...interface{}) *MockHierarchyServiceClient_UpdateTeam_Call {
	return &MockHierarchyServiceClient_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHierarchyServiceClient_UpdateTeam_Call) Run(run func(ctx context.Context, in *proto.UpdateTeamRequest, opts ...grpc.CallOption)) *MockHierarchyServiceClient_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTeamRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTeamRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateTeam_Call) Return(updateTeamResponse *proto.UpdateTeamResponse, err error) *MockHierarchyServiceClient_UpdateTeam_Call {
	_c.Call.Return(updateTeamResponse, err)
	return _c
}

func (_c *MockHierarchyServiceClient_UpdateTeam_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateTeamRequest, opts ...grpc.CallOption) (*proto.UpdateTeamResponse, error)) *MockHierarchyServiceClient_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}
