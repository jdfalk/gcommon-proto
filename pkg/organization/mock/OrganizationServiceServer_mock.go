// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrganizationServiceServer creates a new instance of MockOrganizationServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationServiceServer {
	mock := &MockOrganizationServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrganizationServiceServer is an autogenerated mock type for the OrganizationServiceServer type
type MockOrganizationServiceServer struct {
	mock.Mock
}

type MockOrganizationServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationServiceServer) EXPECT() *MockOrganizationServiceServer_Expecter {
	return &MockOrganizationServiceServer_Expecter{mock: &_m.Mock}
}

// AddMember provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) AddMember(context1 context.Context, addMemberRequest *proto.AddMemberRequest) (*proto.AddMemberResponse, error) {
	ret := _mock.Called(context1, addMemberRequest)

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 *proto.AddMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AddMemberRequest) (*proto.AddMemberResponse, error)); ok {
		return returnFunc(context1, addMemberRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AddMemberRequest) *proto.AddMemberResponse); ok {
		r0 = returnFunc(context1, addMemberRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AddMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AddMemberRequest) error); ok {
		r1 = returnFunc(context1, addMemberRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type MockOrganizationServiceServer_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//   - context1 context.Context
//   - addMemberRequest *proto.AddMemberRequest
func (_e *MockOrganizationServiceServer_Expecter) AddMember(context1 interface{}, addMemberRequest interface{}) *MockOrganizationServiceServer_AddMember_Call {
	return &MockOrganizationServiceServer_AddMember_Call{Call: _e.mock.On("AddMember", context1, addMemberRequest)}
}

func (_c *MockOrganizationServiceServer_AddMember_Call) Run(run func(context1 context.Context, addMemberRequest *proto.AddMemberRequest)) *MockOrganizationServiceServer_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AddMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AddMemberRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_AddMember_Call) Return(addMemberResponse *proto.AddMemberResponse, err error) *MockOrganizationServiceServer_AddMember_Call {
	_c.Call.Return(addMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_AddMember_Call) RunAndReturn(run func(context1 context.Context, addMemberRequest *proto.AddMemberRequest) (*proto.AddMemberResponse, error)) *MockOrganizationServiceServer_AddMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) CreateOrganization(context1 context.Context, createOrganizationRequest *proto.CreateOrganizationRequest) (*proto.CreateOrganizationResponse, error) {
	ret := _mock.Called(context1, createOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *proto.CreateOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateOrganizationRequest) (*proto.CreateOrganizationResponse, error)); ok {
		return returnFunc(context1, createOrganizationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateOrganizationRequest) *proto.CreateOrganizationResponse); ok {
		r0 = returnFunc(context1, createOrganizationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateOrganizationRequest) error); ok {
		r1 = returnFunc(context1, createOrganizationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockOrganizationServiceServer_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - context1 context.Context
//   - createOrganizationRequest *proto.CreateOrganizationRequest
func (_e *MockOrganizationServiceServer_Expecter) CreateOrganization(context1 interface{}, createOrganizationRequest interface{}) *MockOrganizationServiceServer_CreateOrganization_Call {
	return &MockOrganizationServiceServer_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", context1, createOrganizationRequest)}
}

func (_c *MockOrganizationServiceServer_CreateOrganization_Call) Run(run func(context1 context.Context, createOrganizationRequest *proto.CreateOrganizationRequest)) *MockOrganizationServiceServer_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateOrganizationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_CreateOrganization_Call) Return(createOrganizationResponse *proto.CreateOrganizationResponse, err error) *MockOrganizationServiceServer_CreateOrganization_Call {
	_c.Call.Return(createOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_CreateOrganization_Call) RunAndReturn(run func(context1 context.Context, createOrganizationRequest *proto.CreateOrganizationRequest) (*proto.CreateOrganizationResponse, error)) *MockOrganizationServiceServer_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) DeleteOrganization(context1 context.Context, deleteOrganizationRequest *proto.DeleteOrganizationRequest) (*proto.DeleteOrganizationResponse, error) {
	ret := _mock.Called(context1, deleteOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *proto.DeleteOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteOrganizationRequest) (*proto.DeleteOrganizationResponse, error)); ok {
		return returnFunc(context1, deleteOrganizationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteOrganizationRequest) *proto.DeleteOrganizationResponse); ok {
		r0 = returnFunc(context1, deleteOrganizationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteOrganizationRequest) error); ok {
		r1 = returnFunc(context1, deleteOrganizationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockOrganizationServiceServer_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteOrganizationRequest *proto.DeleteOrganizationRequest
func (_e *MockOrganizationServiceServer_Expecter) DeleteOrganization(context1 interface{}, deleteOrganizationRequest interface{}) *MockOrganizationServiceServer_DeleteOrganization_Call {
	return &MockOrganizationServiceServer_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", context1, deleteOrganizationRequest)}
}

func (_c *MockOrganizationServiceServer_DeleteOrganization_Call) Run(run func(context1 context.Context, deleteOrganizationRequest *proto.DeleteOrganizationRequest)) *MockOrganizationServiceServer_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteOrganizationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_DeleteOrganization_Call) Return(deleteOrganizationResponse *proto.DeleteOrganizationResponse, err error) *MockOrganizationServiceServer_DeleteOrganization_Call {
	_c.Call.Return(deleteOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_DeleteOrganization_Call) RunAndReturn(run func(context1 context.Context, deleteOrganizationRequest *proto.DeleteOrganizationRequest) (*proto.DeleteOrganizationResponse, error)) *MockOrganizationServiceServer_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganization provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) GetOrganization(context1 context.Context, getOrganizationRequest *proto.GetOrganizationRequest) (*proto.GetOrganizationResponse, error) {
	ret := _mock.Called(context1, getOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 *proto.GetOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationRequest) (*proto.GetOrganizationResponse, error)); ok {
		return returnFunc(context1, getOrganizationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationRequest) *proto.GetOrganizationResponse); ok {
		r0 = returnFunc(context1, getOrganizationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetOrganizationRequest) error); ok {
		r1 = returnFunc(context1, getOrganizationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_GetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganization'
type MockOrganizationServiceServer_GetOrganization_Call struct {
	*mock.Call
}

// GetOrganization is a helper method to define mock.On call
//   - context1 context.Context
//   - getOrganizationRequest *proto.GetOrganizationRequest
func (_e *MockOrganizationServiceServer_Expecter) GetOrganization(context1 interface{}, getOrganizationRequest interface{}) *MockOrganizationServiceServer_GetOrganization_Call {
	return &MockOrganizationServiceServer_GetOrganization_Call{Call: _e.mock.On("GetOrganization", context1, getOrganizationRequest)}
}

func (_c *MockOrganizationServiceServer_GetOrganization_Call) Run(run func(context1 context.Context, getOrganizationRequest *proto.GetOrganizationRequest)) *MockOrganizationServiceServer_GetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetOrganizationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_GetOrganization_Call) Return(getOrganizationResponse *proto.GetOrganizationResponse, err error) *MockOrganizationServiceServer_GetOrganization_Call {
	_c.Call.Return(getOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_GetOrganization_Call) RunAndReturn(run func(context1 context.Context, getOrganizationRequest *proto.GetOrganizationRequest) (*proto.GetOrganizationResponse, error)) *MockOrganizationServiceServer_GetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettings provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) GetOrganizationSettings(context1 context.Context, getOrganizationSettingsRequest *proto.GetOrganizationSettingsRequest) (*proto.GetOrganizationSettingsResponse, error) {
	ret := _mock.Called(context1, getOrganizationSettingsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettings")
	}

	var r0 *proto.GetOrganizationSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationSettingsRequest) (*proto.GetOrganizationSettingsResponse, error)); ok {
		return returnFunc(context1, getOrganizationSettingsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationSettingsRequest) *proto.GetOrganizationSettingsResponse); ok {
		r0 = returnFunc(context1, getOrganizationSettingsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetOrganizationSettingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetOrganizationSettingsRequest) error); ok {
		r1 = returnFunc(context1, getOrganizationSettingsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_GetOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettings'
type MockOrganizationServiceServer_GetOrganizationSettings_Call struct {
	*mock.Call
}

// GetOrganizationSettings is a helper method to define mock.On call
//   - context1 context.Context
//   - getOrganizationSettingsRequest *proto.GetOrganizationSettingsRequest
func (_e *MockOrganizationServiceServer_Expecter) GetOrganizationSettings(context1 interface{}, getOrganizationSettingsRequest interface{}) *MockOrganizationServiceServer_GetOrganizationSettings_Call {
	return &MockOrganizationServiceServer_GetOrganizationSettings_Call{Call: _e.mock.On("GetOrganizationSettings", context1, getOrganizationSettingsRequest)}
}

func (_c *MockOrganizationServiceServer_GetOrganizationSettings_Call) Run(run func(context1 context.Context, getOrganizationSettingsRequest *proto.GetOrganizationSettingsRequest)) *MockOrganizationServiceServer_GetOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetOrganizationSettingsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetOrganizationSettingsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_GetOrganizationSettings_Call) Return(getOrganizationSettingsResponse *proto.GetOrganizationSettingsResponse, err error) *MockOrganizationServiceServer_GetOrganizationSettings_Call {
	_c.Call.Return(getOrganizationSettingsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_GetOrganizationSettings_Call) RunAndReturn(run func(context1 context.Context, getOrganizationSettingsRequest *proto.GetOrganizationSettingsRequest) (*proto.GetOrganizationSettingsResponse, error)) *MockOrganizationServiceServer_GetOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListMembers provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) ListMembers(context1 context.Context, listMembersRequest *proto.ListMembersRequest) (*proto.ListMembersResponse, error) {
	ret := _mock.Called(context1, listMembersRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *proto.ListMembersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMembersRequest) (*proto.ListMembersResponse, error)); ok {
		return returnFunc(context1, listMembersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMembersRequest) *proto.ListMembersResponse); ok {
		r0 = returnFunc(context1, listMembersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMembersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListMembersRequest) error); ok {
		r1 = returnFunc(context1, listMembersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_ListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembers'
type MockOrganizationServiceServer_ListMembers_Call struct {
	*mock.Call
}

// ListMembers is a helper method to define mock.On call
//   - context1 context.Context
//   - listMembersRequest *proto.ListMembersRequest
func (_e *MockOrganizationServiceServer_Expecter) ListMembers(context1 interface{}, listMembersRequest interface{}) *MockOrganizationServiceServer_ListMembers_Call {
	return &MockOrganizationServiceServer_ListMembers_Call{Call: _e.mock.On("ListMembers", context1, listMembersRequest)}
}

func (_c *MockOrganizationServiceServer_ListMembers_Call) Run(run func(context1 context.Context, listMembersRequest *proto.ListMembersRequest)) *MockOrganizationServiceServer_ListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListMembersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListMembersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_ListMembers_Call) Return(listMembersResponse *proto.ListMembersResponse, err error) *MockOrganizationServiceServer_ListMembers_Call {
	_c.Call.Return(listMembersResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_ListMembers_Call) RunAndReturn(run func(context1 context.Context, listMembersRequest *proto.ListMembersRequest) (*proto.ListMembersResponse, error)) *MockOrganizationServiceServer_ListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) ListOrganizations(context1 context.Context, listOrganizationsRequest *proto.ListOrganizationsRequest) (*proto.ListOrganizationsResponse, error) {
	ret := _mock.Called(context1, listOrganizationsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 *proto.ListOrganizationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListOrganizationsRequest) (*proto.ListOrganizationsResponse, error)); ok {
		return returnFunc(context1, listOrganizationsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListOrganizationsRequest) *proto.ListOrganizationsResponse); ok {
		r0 = returnFunc(context1, listOrganizationsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListOrganizationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListOrganizationsRequest) error); ok {
		r1 = returnFunc(context1, listOrganizationsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type MockOrganizationServiceServer_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - context1 context.Context
//   - listOrganizationsRequest *proto.ListOrganizationsRequest
func (_e *MockOrganizationServiceServer_Expecter) ListOrganizations(context1 interface{}, listOrganizationsRequest interface{}) *MockOrganizationServiceServer_ListOrganizations_Call {
	return &MockOrganizationServiceServer_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations", context1, listOrganizationsRequest)}
}

func (_c *MockOrganizationServiceServer_ListOrganizations_Call) Run(run func(context1 context.Context, listOrganizationsRequest *proto.ListOrganizationsRequest)) *MockOrganizationServiceServer_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListOrganizationsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListOrganizationsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_ListOrganizations_Call) Return(listOrganizationsResponse *proto.ListOrganizationsResponse, err error) *MockOrganizationServiceServer_ListOrganizations_Call {
	_c.Call.Return(listOrganizationsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_ListOrganizations_Call) RunAndReturn(run func(context1 context.Context, listOrganizationsRequest *proto.ListOrganizationsRequest) (*proto.ListOrganizationsResponse, error)) *MockOrganizationServiceServer_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMember provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) RemoveMember(context1 context.Context, removeMemberRequest *proto.RemoveMemberRequest) (*proto.RemoveMemberResponse, error) {
	ret := _mock.Called(context1, removeMemberRequest)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 *proto.RemoveMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveMemberRequest) (*proto.RemoveMemberResponse, error)); ok {
		return returnFunc(context1, removeMemberRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveMemberRequest) *proto.RemoveMemberResponse); ok {
		r0 = returnFunc(context1, removeMemberRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RemoveMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RemoveMemberRequest) error); ok {
		r1 = returnFunc(context1, removeMemberRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type MockOrganizationServiceServer_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//   - context1 context.Context
//   - removeMemberRequest *proto.RemoveMemberRequest
func (_e *MockOrganizationServiceServer_Expecter) RemoveMember(context1 interface{}, removeMemberRequest interface{}) *MockOrganizationServiceServer_RemoveMember_Call {
	return &MockOrganizationServiceServer_RemoveMember_Call{Call: _e.mock.On("RemoveMember", context1, removeMemberRequest)}
}

func (_c *MockOrganizationServiceServer_RemoveMember_Call) Run(run func(context1 context.Context, removeMemberRequest *proto.RemoveMemberRequest)) *MockOrganizationServiceServer_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RemoveMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RemoveMemberRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_RemoveMember_Call) Return(removeMemberResponse *proto.RemoveMemberResponse, err error) *MockOrganizationServiceServer_RemoveMember_Call {
	_c.Call.Return(removeMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_RemoveMember_Call) RunAndReturn(run func(context1 context.Context, removeMemberRequest *proto.RemoveMemberRequest) (*proto.RemoveMemberResponse, error)) *MockOrganizationServiceServer_RemoveMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMember provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) UpdateMember(context1 context.Context, updateMemberRequest *proto.UpdateMemberRequest) (*proto.UpdateMemberResponse, error) {
	ret := _mock.Called(context1, updateMemberRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMember")
	}

	var r0 *proto.UpdateMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateMemberRequest) (*proto.UpdateMemberResponse, error)); ok {
		return returnFunc(context1, updateMemberRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateMemberRequest) *proto.UpdateMemberResponse); ok {
		r0 = returnFunc(context1, updateMemberRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateMemberRequest) error); ok {
		r1 = returnFunc(context1, updateMemberRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_UpdateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMember'
type MockOrganizationServiceServer_UpdateMember_Call struct {
	*mock.Call
}

// UpdateMember is a helper method to define mock.On call
//   - context1 context.Context
//   - updateMemberRequest *proto.UpdateMemberRequest
func (_e *MockOrganizationServiceServer_Expecter) UpdateMember(context1 interface{}, updateMemberRequest interface{}) *MockOrganizationServiceServer_UpdateMember_Call {
	return &MockOrganizationServiceServer_UpdateMember_Call{Call: _e.mock.On("UpdateMember", context1, updateMemberRequest)}
}

func (_c *MockOrganizationServiceServer_UpdateMember_Call) Run(run func(context1 context.Context, updateMemberRequest *proto.UpdateMemberRequest)) *MockOrganizationServiceServer_UpdateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateMemberRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateMember_Call) Return(updateMemberResponse *proto.UpdateMemberResponse, err error) *MockOrganizationServiceServer_UpdateMember_Call {
	_c.Call.Return(updateMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateMember_Call) RunAndReturn(run func(context1 context.Context, updateMemberRequest *proto.UpdateMemberRequest) (*proto.UpdateMemberResponse, error)) *MockOrganizationServiceServer_UpdateMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganization provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) UpdateOrganization(context1 context.Context, updateOrganizationRequest *proto.UpdateOrganizationRequest) (*proto.UpdateOrganizationResponse, error) {
	ret := _mock.Called(context1, updateOrganizationRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *proto.UpdateOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationRequest) (*proto.UpdateOrganizationResponse, error)); ok {
		return returnFunc(context1, updateOrganizationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationRequest) *proto.UpdateOrganizationResponse); ok {
		r0 = returnFunc(context1, updateOrganizationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateOrganizationRequest) error); ok {
		r1 = returnFunc(context1, updateOrganizationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_UpdateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganization'
type MockOrganizationServiceServer_UpdateOrganization_Call struct {
	*mock.Call
}

// UpdateOrganization is a helper method to define mock.On call
//   - context1 context.Context
//   - updateOrganizationRequest *proto.UpdateOrganizationRequest
func (_e *MockOrganizationServiceServer_Expecter) UpdateOrganization(context1 interface{}, updateOrganizationRequest interface{}) *MockOrganizationServiceServer_UpdateOrganization_Call {
	return &MockOrganizationServiceServer_UpdateOrganization_Call{Call: _e.mock.On("UpdateOrganization", context1, updateOrganizationRequest)}
}

func (_c *MockOrganizationServiceServer_UpdateOrganization_Call) Run(run func(context1 context.Context, updateOrganizationRequest *proto.UpdateOrganizationRequest)) *MockOrganizationServiceServer_UpdateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateOrganizationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateOrganization_Call) Return(updateOrganizationResponse *proto.UpdateOrganizationResponse, err error) *MockOrganizationServiceServer_UpdateOrganization_Call {
	_c.Call.Return(updateOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateOrganization_Call) RunAndReturn(run func(context1 context.Context, updateOrganizationRequest *proto.UpdateOrganizationRequest) (*proto.UpdateOrganizationResponse, error)) *MockOrganizationServiceServer_UpdateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSettings provides a mock function for the type MockOrganizationServiceServer
func (_mock *MockOrganizationServiceServer) UpdateOrganizationSettings(context1 context.Context, updateOrganizationSettingsRequest *proto.UpdateOrganizationSettingsRequest) (*proto.UpdateOrganizationSettingsResponse, error) {
	ret := _mock.Called(context1, updateOrganizationSettingsRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSettings")
	}

	var r0 *proto.UpdateOrganizationSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationSettingsRequest) (*proto.UpdateOrganizationSettingsResponse, error)); ok {
		return returnFunc(context1, updateOrganizationSettingsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationSettingsRequest) *proto.UpdateOrganizationSettingsResponse); ok {
		r0 = returnFunc(context1, updateOrganizationSettingsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateOrganizationSettingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateOrganizationSettingsRequest) error); ok {
		r1 = returnFunc(context1, updateOrganizationSettingsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceServer_UpdateOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSettings'
type MockOrganizationServiceServer_UpdateOrganizationSettings_Call struct {
	*mock.Call
}

// UpdateOrganizationSettings is a helper method to define mock.On call
//   - context1 context.Context
//   - updateOrganizationSettingsRequest *proto.UpdateOrganizationSettingsRequest
func (_e *MockOrganizationServiceServer_Expecter) UpdateOrganizationSettings(context1 interface{}, updateOrganizationSettingsRequest interface{}) *MockOrganizationServiceServer_UpdateOrganizationSettings_Call {
	return &MockOrganizationServiceServer_UpdateOrganizationSettings_Call{Call: _e.mock.On("UpdateOrganizationSettings", context1, updateOrganizationSettingsRequest)}
}

func (_c *MockOrganizationServiceServer_UpdateOrganizationSettings_Call) Run(run func(context1 context.Context, updateOrganizationSettingsRequest *proto.UpdateOrganizationSettingsRequest)) *MockOrganizationServiceServer_UpdateOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateOrganizationSettingsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateOrganizationSettingsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateOrganizationSettings_Call) Return(updateOrganizationSettingsResponse *proto.UpdateOrganizationSettingsResponse, err error) *MockOrganizationServiceServer_UpdateOrganizationSettings_Call {
	_c.Call.Return(updateOrganizationSettingsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceServer_UpdateOrganizationSettings_Call) RunAndReturn(run func(context1 context.Context, updateOrganizationSettingsRequest *proto.UpdateOrganizationSettingsRequest) (*proto.UpdateOrganizationSettingsResponse, error)) *MockOrganizationServiceServer_UpdateOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}
