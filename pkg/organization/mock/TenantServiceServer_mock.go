// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTenantServiceServer creates a new instance of MockTenantServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceServer {
	mock := &MockTenantServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantServiceServer is an autogenerated mock type for the TenantServiceServer type
type MockTenantServiceServer struct {
	mock.Mock
}

type MockTenantServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceServer) EXPECT() *MockTenantServiceServer_Expecter {
	return &MockTenantServiceServer_Expecter{mock: &_m.Mock}
}

// ConfigureTenantIsolation provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) ConfigureTenantIsolation(context1 context.Context, configureTenantIsolationRequest *proto.ConfigureTenantIsolationRequest) (*proto.ConfigureTenantIsolationResponse, error) {
	ret := _mock.Called(context1, configureTenantIsolationRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureTenantIsolation")
	}

	var r0 *proto.ConfigureTenantIsolationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureTenantIsolationRequest) (*proto.ConfigureTenantIsolationResponse, error)); ok {
		return returnFunc(context1, configureTenantIsolationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureTenantIsolationRequest) *proto.ConfigureTenantIsolationResponse); ok {
		r0 = returnFunc(context1, configureTenantIsolationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigureTenantIsolationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigureTenantIsolationRequest) error); ok {
		r1 = returnFunc(context1, configureTenantIsolationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_ConfigureTenantIsolation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureTenantIsolation'
type MockTenantServiceServer_ConfigureTenantIsolation_Call struct {
	*mock.Call
}

// ConfigureTenantIsolation is a helper method to define mock.On call
//   - context1 context.Context
//   - configureTenantIsolationRequest *proto.ConfigureTenantIsolationRequest
func (_e *MockTenantServiceServer_Expecter) ConfigureTenantIsolation(context1 interface{}, configureTenantIsolationRequest interface{}) *MockTenantServiceServer_ConfigureTenantIsolation_Call {
	return &MockTenantServiceServer_ConfigureTenantIsolation_Call{Call: _e.mock.On("ConfigureTenantIsolation", context1, configureTenantIsolationRequest)}
}

func (_c *MockTenantServiceServer_ConfigureTenantIsolation_Call) Run(run func(context1 context.Context, configureTenantIsolationRequest *proto.ConfigureTenantIsolationRequest)) *MockTenantServiceServer_ConfigureTenantIsolation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigureTenantIsolationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigureTenantIsolationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_ConfigureTenantIsolation_Call) Return(configureTenantIsolationResponse *proto.ConfigureTenantIsolationResponse, err error) *MockTenantServiceServer_ConfigureTenantIsolation_Call {
	_c.Call.Return(configureTenantIsolationResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_ConfigureTenantIsolation_Call) RunAndReturn(run func(context1 context.Context, configureTenantIsolationRequest *proto.ConfigureTenantIsolationRequest) (*proto.ConfigureTenantIsolationResponse, error)) *MockTenantServiceServer_ConfigureTenantIsolation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTenant provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) CreateTenant(context1 context.Context, createTenantRequest *proto.CreateTenantRequest) (*proto.CreateTenantResponse, error) {
	ret := _mock.Called(context1, createTenantRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenant")
	}

	var r0 *proto.CreateTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTenantRequest) (*proto.CreateTenantResponse, error)); ok {
		return returnFunc(context1, createTenantRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTenantRequest) *proto.CreateTenantResponse); ok {
		r0 = returnFunc(context1, createTenantRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateTenantRequest) error); ok {
		r1 = returnFunc(context1, createTenantRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_CreateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenant'
type MockTenantServiceServer_CreateTenant_Call struct {
	*mock.Call
}

// CreateTenant is a helper method to define mock.On call
//   - context1 context.Context
//   - createTenantRequest *proto.CreateTenantRequest
func (_e *MockTenantServiceServer_Expecter) CreateTenant(context1 interface{}, createTenantRequest interface{}) *MockTenantServiceServer_CreateTenant_Call {
	return &MockTenantServiceServer_CreateTenant_Call{Call: _e.mock.On("CreateTenant", context1, createTenantRequest)}
}

func (_c *MockTenantServiceServer_CreateTenant_Call) Run(run func(context1 context.Context, createTenantRequest *proto.CreateTenantRequest)) *MockTenantServiceServer_CreateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateTenantRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_CreateTenant_Call) Return(createTenantResponse *proto.CreateTenantResponse, err error) *MockTenantServiceServer_CreateTenant_Call {
	_c.Call.Return(createTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_CreateTenant_Call) RunAndReturn(run func(context1 context.Context, createTenantRequest *proto.CreateTenantRequest) (*proto.CreateTenantResponse, error)) *MockTenantServiceServer_CreateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTenant provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) DeleteTenant(context1 context.Context, deleteTenantRequest *proto.DeleteTenantRequest) (*proto.DeleteTenantResponse, error) {
	ret := _mock.Called(context1, deleteTenantRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenant")
	}

	var r0 *proto.DeleteTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTenantRequest) (*proto.DeleteTenantResponse, error)); ok {
		return returnFunc(context1, deleteTenantRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTenantRequest) *proto.DeleteTenantResponse); ok {
		r0 = returnFunc(context1, deleteTenantRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTenantRequest) error); ok {
		r1 = returnFunc(context1, deleteTenantRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantServiceServer_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteTenantRequest *proto.DeleteTenantRequest
func (_e *MockTenantServiceServer_Expecter) DeleteTenant(context1 interface{}, deleteTenantRequest interface{}) *MockTenantServiceServer_DeleteTenant_Call {
	return &MockTenantServiceServer_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant", context1, deleteTenantRequest)}
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) Run(run func(context1 context.Context, deleteTenantRequest *proto.DeleteTenantRequest)) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTenantRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) Return(deleteTenantResponse *proto.DeleteTenantResponse, err error) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Return(deleteTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_DeleteTenant_Call) RunAndReturn(run func(context1 context.Context, deleteTenantRequest *proto.DeleteTenantRequest) (*proto.DeleteTenantResponse, error)) *MockTenantServiceServer_DeleteTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) GetTenant(context1 context.Context, getTenantRequest *proto.GetTenantRequest) (*proto.GetTenantResponse, error) {
	ret := _mock.Called(context1, getTenantRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *proto.GetTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantRequest) (*proto.GetTenantResponse, error)); ok {
		return returnFunc(context1, getTenantRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantRequest) *proto.GetTenantResponse); ok {
		r0 = returnFunc(context1, getTenantRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantRequest) error); ok {
		r1 = returnFunc(context1, getTenantRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantServiceServer_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - context1 context.Context
//   - getTenantRequest *proto.GetTenantRequest
func (_e *MockTenantServiceServer_Expecter) GetTenant(context1 interface{}, getTenantRequest interface{}) *MockTenantServiceServer_GetTenant_Call {
	return &MockTenantServiceServer_GetTenant_Call{Call: _e.mock.On("GetTenant", context1, getTenantRequest)}
}

func (_c *MockTenantServiceServer_GetTenant_Call) Run(run func(context1 context.Context, getTenantRequest *proto.GetTenantRequest)) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_GetTenant_Call) Return(getTenantResponse *proto.GetTenantResponse, err error) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Return(getTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_GetTenant_Call) RunAndReturn(run func(context1 context.Context, getTenantRequest *proto.GetTenantRequest) (*proto.GetTenantResponse, error)) *MockTenantServiceServer_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantIsolation provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) GetTenantIsolation(context1 context.Context, getTenantIsolationRequest *proto.GetTenantIsolationRequest) (*proto.GetTenantIsolationResponse, error) {
	ret := _mock.Called(context1, getTenantIsolationRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantIsolation")
	}

	var r0 *proto.GetTenantIsolationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantIsolationRequest) (*proto.GetTenantIsolationResponse, error)); ok {
		return returnFunc(context1, getTenantIsolationRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantIsolationRequest) *proto.GetTenantIsolationResponse); ok {
		r0 = returnFunc(context1, getTenantIsolationRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantIsolationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantIsolationRequest) error); ok {
		r1 = returnFunc(context1, getTenantIsolationRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_GetTenantIsolation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantIsolation'
type MockTenantServiceServer_GetTenantIsolation_Call struct {
	*mock.Call
}

// GetTenantIsolation is a helper method to define mock.On call
//   - context1 context.Context
//   - getTenantIsolationRequest *proto.GetTenantIsolationRequest
func (_e *MockTenantServiceServer_Expecter) GetTenantIsolation(context1 interface{}, getTenantIsolationRequest interface{}) *MockTenantServiceServer_GetTenantIsolation_Call {
	return &MockTenantServiceServer_GetTenantIsolation_Call{Call: _e.mock.On("GetTenantIsolation", context1, getTenantIsolationRequest)}
}

func (_c *MockTenantServiceServer_GetTenantIsolation_Call) Run(run func(context1 context.Context, getTenantIsolationRequest *proto.GetTenantIsolationRequest)) *MockTenantServiceServer_GetTenantIsolation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantIsolationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantIsolationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_GetTenantIsolation_Call) Return(getTenantIsolationResponse *proto.GetTenantIsolationResponse, err error) *MockTenantServiceServer_GetTenantIsolation_Call {
	_c.Call.Return(getTenantIsolationResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_GetTenantIsolation_Call) RunAndReturn(run func(context1 context.Context, getTenantIsolationRequest *proto.GetTenantIsolationRequest) (*proto.GetTenantIsolationResponse, error)) *MockTenantServiceServer_GetTenantIsolation_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantUsage provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) GetTenantUsage(context1 context.Context, getTenantUsageRequest *proto.GetTenantUsageRequest) (*proto.GetTenantUsageResponse, error) {
	ret := _mock.Called(context1, getTenantUsageRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantUsage")
	}

	var r0 *proto.GetTenantUsageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantUsageRequest) (*proto.GetTenantUsageResponse, error)); ok {
		return returnFunc(context1, getTenantUsageRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantUsageRequest) *proto.GetTenantUsageResponse); ok {
		r0 = returnFunc(context1, getTenantUsageRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantUsageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantUsageRequest) error); ok {
		r1 = returnFunc(context1, getTenantUsageRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_GetTenantUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantUsage'
type MockTenantServiceServer_GetTenantUsage_Call struct {
	*mock.Call
}

// GetTenantUsage is a helper method to define mock.On call
//   - context1 context.Context
//   - getTenantUsageRequest *proto.GetTenantUsageRequest
func (_e *MockTenantServiceServer_Expecter) GetTenantUsage(context1 interface{}, getTenantUsageRequest interface{}) *MockTenantServiceServer_GetTenantUsage_Call {
	return &MockTenantServiceServer_GetTenantUsage_Call{Call: _e.mock.On("GetTenantUsage", context1, getTenantUsageRequest)}
}

func (_c *MockTenantServiceServer_GetTenantUsage_Call) Run(run func(context1 context.Context, getTenantUsageRequest *proto.GetTenantUsageRequest)) *MockTenantServiceServer_GetTenantUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantUsageRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantUsageRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_GetTenantUsage_Call) Return(getTenantUsageResponse *proto.GetTenantUsageResponse, err error) *MockTenantServiceServer_GetTenantUsage_Call {
	_c.Call.Return(getTenantUsageResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_GetTenantUsage_Call) RunAndReturn(run func(context1 context.Context, getTenantUsageRequest *proto.GetTenantUsageRequest) (*proto.GetTenantUsageResponse, error)) *MockTenantServiceServer_GetTenantUsage_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenants provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) ListTenants(context1 context.Context, listTenantsRequest *proto.ListTenantsRequest) (*proto.ListTenantsResponse, error) {
	ret := _mock.Called(context1, listTenantsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListTenants")
	}

	var r0 *proto.ListTenantsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTenantsRequest) (*proto.ListTenantsResponse, error)); ok {
		return returnFunc(context1, listTenantsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTenantsRequest) *proto.ListTenantsResponse); ok {
		r0 = returnFunc(context1, listTenantsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListTenantsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListTenantsRequest) error); ok {
		r1 = returnFunc(context1, listTenantsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockTenantServiceServer_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//   - context1 context.Context
//   - listTenantsRequest *proto.ListTenantsRequest
func (_e *MockTenantServiceServer_Expecter) ListTenants(context1 interface{}, listTenantsRequest interface{}) *MockTenantServiceServer_ListTenants_Call {
	return &MockTenantServiceServer_ListTenants_Call{Call: _e.mock.On("ListTenants", context1, listTenantsRequest)}
}

func (_c *MockTenantServiceServer_ListTenants_Call) Run(run func(context1 context.Context, listTenantsRequest *proto.ListTenantsRequest)) *MockTenantServiceServer_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListTenantsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListTenantsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_ListTenants_Call) Return(listTenantsResponse *proto.ListTenantsResponse, err error) *MockTenantServiceServer_ListTenants_Call {
	_c.Call.Return(listTenantsResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_ListTenants_Call) RunAndReturn(run func(context1 context.Context, listTenantsRequest *proto.ListTenantsRequest) (*proto.ListTenantsResponse, error)) *MockTenantServiceServer_ListTenants_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenant provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) UpdateTenant(context1 context.Context, updateTenantRequest *proto.UpdateTenantRequest) (*proto.UpdateTenantResponse, error) {
	ret := _mock.Called(context1, updateTenantRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenant")
	}

	var r0 *proto.UpdateTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantRequest) (*proto.UpdateTenantResponse, error)); ok {
		return returnFunc(context1, updateTenantRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantRequest) *proto.UpdateTenantResponse); ok {
		r0 = returnFunc(context1, updateTenantRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTenantRequest) error); ok {
		r1 = returnFunc(context1, updateTenantRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_UpdateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenant'
type MockTenantServiceServer_UpdateTenant_Call struct {
	*mock.Call
}

// UpdateTenant is a helper method to define mock.On call
//   - context1 context.Context
//   - updateTenantRequest *proto.UpdateTenantRequest
func (_e *MockTenantServiceServer_Expecter) UpdateTenant(context1 interface{}, updateTenantRequest interface{}) *MockTenantServiceServer_UpdateTenant_Call {
	return &MockTenantServiceServer_UpdateTenant_Call{Call: _e.mock.On("UpdateTenant", context1, updateTenantRequest)}
}

func (_c *MockTenantServiceServer_UpdateTenant_Call) Run(run func(context1 context.Context, updateTenantRequest *proto.UpdateTenantRequest)) *MockTenantServiceServer_UpdateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTenantRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_UpdateTenant_Call) Return(updateTenantResponse *proto.UpdateTenantResponse, err error) *MockTenantServiceServer_UpdateTenant_Call {
	_c.Call.Return(updateTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_UpdateTenant_Call) RunAndReturn(run func(context1 context.Context, updateTenantRequest *proto.UpdateTenantRequest) (*proto.UpdateTenantResponse, error)) *MockTenantServiceServer_UpdateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenantQuota provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) UpdateTenantQuota(context1 context.Context, updateTenantQuotaRequest *proto.UpdateTenantQuotaRequest) (*proto.UpdateTenantQuotaResponse, error) {
	ret := _mock.Called(context1, updateTenantQuotaRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenantQuota")
	}

	var r0 *proto.UpdateTenantQuotaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantQuotaRequest) (*proto.UpdateTenantQuotaResponse, error)); ok {
		return returnFunc(context1, updateTenantQuotaRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantQuotaRequest) *proto.UpdateTenantQuotaResponse); ok {
		r0 = returnFunc(context1, updateTenantQuotaRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTenantQuotaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTenantQuotaRequest) error); ok {
		r1 = returnFunc(context1, updateTenantQuotaRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_UpdateTenantQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenantQuota'
type MockTenantServiceServer_UpdateTenantQuota_Call struct {
	*mock.Call
}

// UpdateTenantQuota is a helper method to define mock.On call
//   - context1 context.Context
//   - updateTenantQuotaRequest *proto.UpdateTenantQuotaRequest
func (_e *MockTenantServiceServer_Expecter) UpdateTenantQuota(context1 interface{}, updateTenantQuotaRequest interface{}) *MockTenantServiceServer_UpdateTenantQuota_Call {
	return &MockTenantServiceServer_UpdateTenantQuota_Call{Call: _e.mock.On("UpdateTenantQuota", context1, updateTenantQuotaRequest)}
}

func (_c *MockTenantServiceServer_UpdateTenantQuota_Call) Run(run func(context1 context.Context, updateTenantQuotaRequest *proto.UpdateTenantQuotaRequest)) *MockTenantServiceServer_UpdateTenantQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTenantQuotaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTenantQuotaRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_UpdateTenantQuota_Call) Return(updateTenantQuotaResponse *proto.UpdateTenantQuotaResponse, err error) *MockTenantServiceServer_UpdateTenantQuota_Call {
	_c.Call.Return(updateTenantQuotaResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_UpdateTenantQuota_Call) RunAndReturn(run func(context1 context.Context, updateTenantQuotaRequest *proto.UpdateTenantQuotaRequest) (*proto.UpdateTenantQuotaResponse, error)) *MockTenantServiceServer_UpdateTenantQuota_Call {
	_c.Call.Return(run)
	return _c
}
