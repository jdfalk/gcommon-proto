// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockTenantServiceClient creates a new instance of MockTenantServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceClient {
	mock := &MockTenantServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type MockTenantServiceClient struct {
	mock.Mock
}

type MockTenantServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceClient) EXPECT() *MockTenantServiceClient_Expecter {
	return &MockTenantServiceClient_Expecter{mock: &_m.Mock}
}

// ConfigureTenantIsolation provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) ConfigureTenantIsolation(ctx context.Context, in *proto.ConfigureTenantIsolationRequest, opts ...grpc.CallOption) (*proto.ConfigureTenantIsolationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ConfigureTenantIsolation")
	}

	var r0 *proto.ConfigureTenantIsolationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureTenantIsolationRequest, ...grpc.CallOption) (*proto.ConfigureTenantIsolationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureTenantIsolationRequest, ...grpc.CallOption) *proto.ConfigureTenantIsolationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigureTenantIsolationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigureTenantIsolationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_ConfigureTenantIsolation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureTenantIsolation'
type MockTenantServiceClient_ConfigureTenantIsolation_Call struct {
	*mock.Call
}

// ConfigureTenantIsolation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ConfigureTenantIsolationRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) ConfigureTenantIsolation(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_ConfigureTenantIsolation_Call {
	return &MockTenantServiceClient_ConfigureTenantIsolation_Call{Call: _e.mock.On("ConfigureTenantIsolation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_ConfigureTenantIsolation_Call) Run(run func(ctx context.Context, in *proto.ConfigureTenantIsolationRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_ConfigureTenantIsolation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigureTenantIsolationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigureTenantIsolationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_ConfigureTenantIsolation_Call) Return(configureTenantIsolationResponse *proto.ConfigureTenantIsolationResponse, err error) *MockTenantServiceClient_ConfigureTenantIsolation_Call {
	_c.Call.Return(configureTenantIsolationResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_ConfigureTenantIsolation_Call) RunAndReturn(run func(ctx context.Context, in *proto.ConfigureTenantIsolationRequest, opts ...grpc.CallOption) (*proto.ConfigureTenantIsolationResponse, error)) *MockTenantServiceClient_ConfigureTenantIsolation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTenant provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) CreateTenant(ctx context.Context, in *proto.CreateTenantRequest, opts ...grpc.CallOption) (*proto.CreateTenantResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateTenant")
	}

	var r0 *proto.CreateTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTenantRequest, ...grpc.CallOption) (*proto.CreateTenantResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateTenantRequest, ...grpc.CallOption) *proto.CreateTenantResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateTenantRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_CreateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenant'
type MockTenantServiceClient_CreateTenant_Call struct {
	*mock.Call
}

// CreateTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) CreateTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_CreateTenant_Call {
	return &MockTenantServiceClient_CreateTenant_Call{Call: _e.mock.On("CreateTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_CreateTenant_Call) Run(run func(ctx context.Context, in *proto.CreateTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_CreateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateTenantRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_CreateTenant_Call) Return(createTenantResponse *proto.CreateTenantResponse, err error) *MockTenantServiceClient_CreateTenant_Call {
	_c.Call.Return(createTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_CreateTenant_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateTenantRequest, opts ...grpc.CallOption) (*proto.CreateTenantResponse, error)) *MockTenantServiceClient_CreateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTenant provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) DeleteTenant(ctx context.Context, in *proto.DeleteTenantRequest, opts ...grpc.CallOption) (*proto.DeleteTenantResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenant")
	}

	var r0 *proto.DeleteTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTenantRequest, ...grpc.CallOption) (*proto.DeleteTenantResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTenantRequest, ...grpc.CallOption) *proto.DeleteTenantResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTenantRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_DeleteTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenant'
type MockTenantServiceClient_DeleteTenant_Call struct {
	*mock.Call
}

// DeleteTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) DeleteTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_DeleteTenant_Call {
	return &MockTenantServiceClient_DeleteTenant_Call{Call: _e.mock.On("DeleteTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) Run(run func(ctx context.Context, in *proto.DeleteTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTenantRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) Return(deleteTenantResponse *proto.DeleteTenantResponse, err error) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Return(deleteTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_DeleteTenant_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteTenantRequest, opts ...grpc.CallOption) (*proto.DeleteTenantResponse, error)) *MockTenantServiceClient_DeleteTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) GetTenant(ctx context.Context, in *proto.GetTenantRequest, opts ...grpc.CallOption) (*proto.GetTenantResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *proto.GetTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantRequest, ...grpc.CallOption) (*proto.GetTenantResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantRequest, ...grpc.CallOption) *proto.GetTenantResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type MockTenantServiceClient_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) GetTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_GetTenant_Call {
	return &MockTenantServiceClient_GetTenant_Call{Call: _e.mock.On("GetTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_GetTenant_Call) Run(run func(ctx context.Context, in *proto.GetTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_GetTenant_Call) Return(getTenantResponse *proto.GetTenantResponse, err error) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Return(getTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_GetTenant_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetTenantRequest, opts ...grpc.CallOption) (*proto.GetTenantResponse, error)) *MockTenantServiceClient_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantIsolation provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) GetTenantIsolation(ctx context.Context, in *proto.GetTenantIsolationRequest, opts ...grpc.CallOption) (*proto.GetTenantIsolationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTenantIsolation")
	}

	var r0 *proto.GetTenantIsolationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantIsolationRequest, ...grpc.CallOption) (*proto.GetTenantIsolationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantIsolationRequest, ...grpc.CallOption) *proto.GetTenantIsolationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantIsolationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantIsolationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_GetTenantIsolation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantIsolation'
type MockTenantServiceClient_GetTenantIsolation_Call struct {
	*mock.Call
}

// GetTenantIsolation is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetTenantIsolationRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) GetTenantIsolation(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_GetTenantIsolation_Call {
	return &MockTenantServiceClient_GetTenantIsolation_Call{Call: _e.mock.On("GetTenantIsolation",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_GetTenantIsolation_Call) Run(run func(ctx context.Context, in *proto.GetTenantIsolationRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_GetTenantIsolation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantIsolationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantIsolationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_GetTenantIsolation_Call) Return(getTenantIsolationResponse *proto.GetTenantIsolationResponse, err error) *MockTenantServiceClient_GetTenantIsolation_Call {
	_c.Call.Return(getTenantIsolationResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_GetTenantIsolation_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetTenantIsolationRequest, opts ...grpc.CallOption) (*proto.GetTenantIsolationResponse, error)) *MockTenantServiceClient_GetTenantIsolation_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenantUsage provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) GetTenantUsage(ctx context.Context, in *proto.GetTenantUsageRequest, opts ...grpc.CallOption) (*proto.GetTenantUsageResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetTenantUsage")
	}

	var r0 *proto.GetTenantUsageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantUsageRequest, ...grpc.CallOption) (*proto.GetTenantUsageResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetTenantUsageRequest, ...grpc.CallOption) *proto.GetTenantUsageResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetTenantUsageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetTenantUsageRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_GetTenantUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenantUsage'
type MockTenantServiceClient_GetTenantUsage_Call struct {
	*mock.Call
}

// GetTenantUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetTenantUsageRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) GetTenantUsage(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_GetTenantUsage_Call {
	return &MockTenantServiceClient_GetTenantUsage_Call{Call: _e.mock.On("GetTenantUsage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_GetTenantUsage_Call) Run(run func(ctx context.Context, in *proto.GetTenantUsageRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_GetTenantUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetTenantUsageRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetTenantUsageRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_GetTenantUsage_Call) Return(getTenantUsageResponse *proto.GetTenantUsageResponse, err error) *MockTenantServiceClient_GetTenantUsage_Call {
	_c.Call.Return(getTenantUsageResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_GetTenantUsage_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetTenantUsageRequest, opts ...grpc.CallOption) (*proto.GetTenantUsageResponse, error)) *MockTenantServiceClient_GetTenantUsage_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenants provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) ListTenants(ctx context.Context, in *proto.ListTenantsRequest, opts ...grpc.CallOption) (*proto.ListTenantsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListTenants")
	}

	var r0 *proto.ListTenantsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTenantsRequest, ...grpc.CallOption) (*proto.ListTenantsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListTenantsRequest, ...grpc.CallOption) *proto.ListTenantsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListTenantsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListTenantsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_ListTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenants'
type MockTenantServiceClient_ListTenants_Call struct {
	*mock.Call
}

// ListTenants is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListTenantsRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) ListTenants(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_ListTenants_Call {
	return &MockTenantServiceClient_ListTenants_Call{Call: _e.mock.On("ListTenants",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_ListTenants_Call) Run(run func(ctx context.Context, in *proto.ListTenantsRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_ListTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListTenantsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListTenantsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_ListTenants_Call) Return(listTenantsResponse *proto.ListTenantsResponse, err error) *MockTenantServiceClient_ListTenants_Call {
	_c.Call.Return(listTenantsResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_ListTenants_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListTenantsRequest, opts ...grpc.CallOption) (*proto.ListTenantsResponse, error)) *MockTenantServiceClient_ListTenants_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenant provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) UpdateTenant(ctx context.Context, in *proto.UpdateTenantRequest, opts ...grpc.CallOption) (*proto.UpdateTenantResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenant")
	}

	var r0 *proto.UpdateTenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantRequest, ...grpc.CallOption) (*proto.UpdateTenantResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantRequest, ...grpc.CallOption) *proto.UpdateTenantResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTenantRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_UpdateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenant'
type MockTenantServiceClient_UpdateTenant_Call struct {
	*mock.Call
}

// UpdateTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateTenantRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) UpdateTenant(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_UpdateTenant_Call {
	return &MockTenantServiceClient_UpdateTenant_Call{Call: _e.mock.On("UpdateTenant",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_UpdateTenant_Call) Run(run func(ctx context.Context, in *proto.UpdateTenantRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_UpdateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTenantRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTenantRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_UpdateTenant_Call) Return(updateTenantResponse *proto.UpdateTenantResponse, err error) *MockTenantServiceClient_UpdateTenant_Call {
	_c.Call.Return(updateTenantResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_UpdateTenant_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateTenantRequest, opts ...grpc.CallOption) (*proto.UpdateTenantResponse, error)) *MockTenantServiceClient_UpdateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenantQuota provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) UpdateTenantQuota(ctx context.Context, in *proto.UpdateTenantQuotaRequest, opts ...grpc.CallOption) (*proto.UpdateTenantQuotaResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenantQuota")
	}

	var r0 *proto.UpdateTenantQuotaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantQuotaRequest, ...grpc.CallOption) (*proto.UpdateTenantQuotaResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateTenantQuotaRequest, ...grpc.CallOption) *proto.UpdateTenantQuotaResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateTenantQuotaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateTenantQuotaRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_UpdateTenantQuota_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenantQuota'
type MockTenantServiceClient_UpdateTenantQuota_Call struct {
	*mock.Call
}

// UpdateTenantQuota is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateTenantQuotaRequest
//   - opts ...grpc.CallOption
func (_e *MockTenantServiceClient_Expecter) UpdateTenantQuota(ctx interface{}, in interface{}, opts ...interface{}) *MockTenantServiceClient_UpdateTenantQuota_Call {
	return &MockTenantServiceClient_UpdateTenantQuota_Call{Call: _e.mock.On("UpdateTenantQuota",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockTenantServiceClient_UpdateTenantQuota_Call) Run(run func(ctx context.Context, in *proto.UpdateTenantQuotaRequest, opts ...grpc.CallOption)) *MockTenantServiceClient_UpdateTenantQuota_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateTenantQuotaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateTenantQuotaRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_UpdateTenantQuota_Call) Return(updateTenantQuotaResponse *proto.UpdateTenantQuotaResponse, err error) *MockTenantServiceClient_UpdateTenantQuota_Call {
	_c.Call.Return(updateTenantQuotaResponse, err)
	return _c
}

func (_c *MockTenantServiceClient_UpdateTenantQuota_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateTenantQuotaRequest, opts ...grpc.CallOption) (*proto.UpdateTenantQuotaResponse, error)) *MockTenantServiceClient_UpdateTenantQuota_Call {
	_c.Call.Return(run)
	return _c
}
