// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/organization/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockOrganizationServiceClient creates a new instance of MockOrganizationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationServiceClient {
	mock := &MockOrganizationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrganizationServiceClient is an autogenerated mock type for the OrganizationServiceClient type
type MockOrganizationServiceClient struct {
	mock.Mock
}

type MockOrganizationServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationServiceClient) EXPECT() *MockOrganizationServiceClient_Expecter {
	return &MockOrganizationServiceClient_Expecter{mock: &_m.Mock}
}

// AddMember provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) AddMember(ctx context.Context, in *proto.AddMemberRequest, opts ...grpc.CallOption) (*proto.AddMemberResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AddMember")
	}

	var r0 *proto.AddMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AddMemberRequest, ...grpc.CallOption) (*proto.AddMemberResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AddMemberRequest, ...grpc.CallOption) *proto.AddMemberResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AddMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AddMemberRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_AddMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMember'
type MockOrganizationServiceClient_AddMember_Call struct {
	*mock.Call
}

// AddMember is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.AddMemberRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) AddMember(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_AddMember_Call {
	return &MockOrganizationServiceClient_AddMember_Call{Call: _e.mock.On("AddMember",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_AddMember_Call) Run(run func(ctx context.Context, in *proto.AddMemberRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_AddMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.AddMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.AddMemberRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_AddMember_Call) Return(addMemberResponse *proto.AddMemberResponse, err error) *MockOrganizationServiceClient_AddMember_Call {
	_c.Call.Return(addMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_AddMember_Call) RunAndReturn(run func(ctx context.Context, in *proto.AddMemberRequest, opts ...grpc.CallOption) (*proto.AddMemberResponse, error)) *MockOrganizationServiceClient_AddMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) CreateOrganization(ctx context.Context, in *proto.CreateOrganizationRequest, opts ...grpc.CallOption) (*proto.CreateOrganizationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *proto.CreateOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateOrganizationRequest, ...grpc.CallOption) (*proto.CreateOrganizationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateOrganizationRequest, ...grpc.CallOption) *proto.CreateOrganizationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockOrganizationServiceClient_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateOrganizationRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) CreateOrganization(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_CreateOrganization_Call {
	return &MockOrganizationServiceClient_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_CreateOrganization_Call) Run(run func(ctx context.Context, in *proto.CreateOrganizationRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateOrganizationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_CreateOrganization_Call) Return(createOrganizationResponse *proto.CreateOrganizationResponse, err error) *MockOrganizationServiceClient_CreateOrganization_Call {
	_c.Call.Return(createOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_CreateOrganization_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateOrganizationRequest, opts ...grpc.CallOption) (*proto.CreateOrganizationResponse, error)) *MockOrganizationServiceClient_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) DeleteOrganization(ctx context.Context, in *proto.DeleteOrganizationRequest, opts ...grpc.CallOption) (*proto.DeleteOrganizationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *proto.DeleteOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteOrganizationRequest, ...grpc.CallOption) (*proto.DeleteOrganizationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteOrganizationRequest, ...grpc.CallOption) *proto.DeleteOrganizationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockOrganizationServiceClient_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteOrganizationRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) DeleteOrganization(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_DeleteOrganization_Call {
	return &MockOrganizationServiceClient_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_DeleteOrganization_Call) Run(run func(ctx context.Context, in *proto.DeleteOrganizationRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteOrganizationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_DeleteOrganization_Call) Return(deleteOrganizationResponse *proto.DeleteOrganizationResponse, err error) *MockOrganizationServiceClient_DeleteOrganization_Call {
	_c.Call.Return(deleteOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_DeleteOrganization_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteOrganizationRequest, opts ...grpc.CallOption) (*proto.DeleteOrganizationResponse, error)) *MockOrganizationServiceClient_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganization provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) GetOrganization(ctx context.Context, in *proto.GetOrganizationRequest, opts ...grpc.CallOption) (*proto.GetOrganizationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 *proto.GetOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationRequest, ...grpc.CallOption) (*proto.GetOrganizationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationRequest, ...grpc.CallOption) *proto.GetOrganizationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_GetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganization'
type MockOrganizationServiceClient_GetOrganization_Call struct {
	*mock.Call
}

// GetOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetOrganizationRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) GetOrganization(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_GetOrganization_Call {
	return &MockOrganizationServiceClient_GetOrganization_Call{Call: _e.mock.On("GetOrganization",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_GetOrganization_Call) Run(run func(ctx context.Context, in *proto.GetOrganizationRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_GetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetOrganizationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_GetOrganization_Call) Return(getOrganizationResponse *proto.GetOrganizationResponse, err error) *MockOrganizationServiceClient_GetOrganization_Call {
	_c.Call.Return(getOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_GetOrganization_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetOrganizationRequest, opts ...grpc.CallOption) (*proto.GetOrganizationResponse, error)) *MockOrganizationServiceClient_GetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationSettings provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) GetOrganizationSettings(ctx context.Context, in *proto.GetOrganizationSettingsRequest, opts ...grpc.CallOption) (*proto.GetOrganizationSettingsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationSettings")
	}

	var r0 *proto.GetOrganizationSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationSettingsRequest, ...grpc.CallOption) (*proto.GetOrganizationSettingsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetOrganizationSettingsRequest, ...grpc.CallOption) *proto.GetOrganizationSettingsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetOrganizationSettingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetOrganizationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_GetOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationSettings'
type MockOrganizationServiceClient_GetOrganizationSettings_Call struct {
	*mock.Call
}

// GetOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetOrganizationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) GetOrganizationSettings(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_GetOrganizationSettings_Call {
	return &MockOrganizationServiceClient_GetOrganizationSettings_Call{Call: _e.mock.On("GetOrganizationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_GetOrganizationSettings_Call) Run(run func(ctx context.Context, in *proto.GetOrganizationSettingsRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_GetOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetOrganizationSettingsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetOrganizationSettingsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_GetOrganizationSettings_Call) Return(getOrganizationSettingsResponse *proto.GetOrganizationSettingsResponse, err error) *MockOrganizationServiceClient_GetOrganizationSettings_Call {
	_c.Call.Return(getOrganizationSettingsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_GetOrganizationSettings_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetOrganizationSettingsRequest, opts ...grpc.CallOption) (*proto.GetOrganizationSettingsResponse, error)) *MockOrganizationServiceClient_GetOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListMembers provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) ListMembers(ctx context.Context, in *proto.ListMembersRequest, opts ...grpc.CallOption) (*proto.ListMembersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *proto.ListMembersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMembersRequest, ...grpc.CallOption) (*proto.ListMembersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListMembersRequest, ...grpc.CallOption) *proto.ListMembersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListMembersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListMembersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_ListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembers'
type MockOrganizationServiceClient_ListMembers_Call struct {
	*mock.Call
}

// ListMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListMembersRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) ListMembers(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_ListMembers_Call {
	return &MockOrganizationServiceClient_ListMembers_Call{Call: _e.mock.On("ListMembers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_ListMembers_Call) Run(run func(ctx context.Context, in *proto.ListMembersRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_ListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListMembersRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListMembersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_ListMembers_Call) Return(listMembersResponse *proto.ListMembersResponse, err error) *MockOrganizationServiceClient_ListMembers_Call {
	_c.Call.Return(listMembersResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_ListMembers_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListMembersRequest, opts ...grpc.CallOption) (*proto.ListMembersResponse, error)) *MockOrganizationServiceClient_ListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) ListOrganizations(ctx context.Context, in *proto.ListOrganizationsRequest, opts ...grpc.CallOption) (*proto.ListOrganizationsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 *proto.ListOrganizationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListOrganizationsRequest, ...grpc.CallOption) (*proto.ListOrganizationsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListOrganizationsRequest, ...grpc.CallOption) *proto.ListOrganizationsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListOrganizationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListOrganizationsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type MockOrganizationServiceClient_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListOrganizationsRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) ListOrganizations(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_ListOrganizations_Call {
	return &MockOrganizationServiceClient_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_ListOrganizations_Call) Run(run func(ctx context.Context, in *proto.ListOrganizationsRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListOrganizationsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListOrganizationsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_ListOrganizations_Call) Return(listOrganizationsResponse *proto.ListOrganizationsResponse, err error) *MockOrganizationServiceClient_ListOrganizations_Call {
	_c.Call.Return(listOrganizationsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_ListOrganizations_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListOrganizationsRequest, opts ...grpc.CallOption) (*proto.ListOrganizationsResponse, error)) *MockOrganizationServiceClient_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMember provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) RemoveMember(ctx context.Context, in *proto.RemoveMemberRequest, opts ...grpc.CallOption) (*proto.RemoveMemberResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveMember")
	}

	var r0 *proto.RemoveMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveMemberRequest, ...grpc.CallOption) (*proto.RemoveMemberResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RemoveMemberRequest, ...grpc.CallOption) *proto.RemoveMemberResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RemoveMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RemoveMemberRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_RemoveMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMember'
type MockOrganizationServiceClient_RemoveMember_Call struct {
	*mock.Call
}

// RemoveMember is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RemoveMemberRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) RemoveMember(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_RemoveMember_Call {
	return &MockOrganizationServiceClient_RemoveMember_Call{Call: _e.mock.On("RemoveMember",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_RemoveMember_Call) Run(run func(ctx context.Context, in *proto.RemoveMemberRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_RemoveMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RemoveMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RemoveMemberRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_RemoveMember_Call) Return(removeMemberResponse *proto.RemoveMemberResponse, err error) *MockOrganizationServiceClient_RemoveMember_Call {
	_c.Call.Return(removeMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_RemoveMember_Call) RunAndReturn(run func(ctx context.Context, in *proto.RemoveMemberRequest, opts ...grpc.CallOption) (*proto.RemoveMemberResponse, error)) *MockOrganizationServiceClient_RemoveMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMember provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) UpdateMember(ctx context.Context, in *proto.UpdateMemberRequest, opts ...grpc.CallOption) (*proto.UpdateMemberResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMember")
	}

	var r0 *proto.UpdateMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateMemberRequest, ...grpc.CallOption) (*proto.UpdateMemberResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateMemberRequest, ...grpc.CallOption) *proto.UpdateMemberResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateMemberRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_UpdateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMember'
type MockOrganizationServiceClient_UpdateMember_Call struct {
	*mock.Call
}

// UpdateMember is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateMemberRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) UpdateMember(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_UpdateMember_Call {
	return &MockOrganizationServiceClient_UpdateMember_Call{Call: _e.mock.On("UpdateMember",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_UpdateMember_Call) Run(run func(ctx context.Context, in *proto.UpdateMemberRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_UpdateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateMemberRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateMemberRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateMember_Call) Return(updateMemberResponse *proto.UpdateMemberResponse, err error) *MockOrganizationServiceClient_UpdateMember_Call {
	_c.Call.Return(updateMemberResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateMember_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateMemberRequest, opts ...grpc.CallOption) (*proto.UpdateMemberResponse, error)) *MockOrganizationServiceClient_UpdateMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganization provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) UpdateOrganization(ctx context.Context, in *proto.UpdateOrganizationRequest, opts ...grpc.CallOption) (*proto.UpdateOrganizationResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *proto.UpdateOrganizationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationRequest, ...grpc.CallOption) (*proto.UpdateOrganizationResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationRequest, ...grpc.CallOption) *proto.UpdateOrganizationResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateOrganizationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateOrganizationRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_UpdateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganization'
type MockOrganizationServiceClient_UpdateOrganization_Call struct {
	*mock.Call
}

// UpdateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateOrganizationRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) UpdateOrganization(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_UpdateOrganization_Call {
	return &MockOrganizationServiceClient_UpdateOrganization_Call{Call: _e.mock.On("UpdateOrganization",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_UpdateOrganization_Call) Run(run func(ctx context.Context, in *proto.UpdateOrganizationRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_UpdateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateOrganizationRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateOrganizationRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateOrganization_Call) Return(updateOrganizationResponse *proto.UpdateOrganizationResponse, err error) *MockOrganizationServiceClient_UpdateOrganization_Call {
	_c.Call.Return(updateOrganizationResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateOrganization_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateOrganizationRequest, opts ...grpc.CallOption) (*proto.UpdateOrganizationResponse, error)) *MockOrganizationServiceClient_UpdateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationSettings provides a mock function for the type MockOrganizationServiceClient
func (_mock *MockOrganizationServiceClient) UpdateOrganizationSettings(ctx context.Context, in *proto.UpdateOrganizationSettingsRequest, opts ...grpc.CallOption) (*proto.UpdateOrganizationSettingsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationSettings")
	}

	var r0 *proto.UpdateOrganizationSettingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationSettingsRequest, ...grpc.CallOption) (*proto.UpdateOrganizationSettingsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UpdateOrganizationSettingsRequest, ...grpc.CallOption) *proto.UpdateOrganizationSettingsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UpdateOrganizationSettingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UpdateOrganizationSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrganizationServiceClient_UpdateOrganizationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationSettings'
type MockOrganizationServiceClient_UpdateOrganizationSettings_Call struct {
	*mock.Call
}

// UpdateOrganizationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UpdateOrganizationSettingsRequest
//   - opts ...grpc.CallOption
func (_e *MockOrganizationServiceClient_Expecter) UpdateOrganizationSettings(ctx interface{}, in interface{}, opts ...interface{}) *MockOrganizationServiceClient_UpdateOrganizationSettings_Call {
	return &MockOrganizationServiceClient_UpdateOrganizationSettings_Call{Call: _e.mock.On("UpdateOrganizationSettings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOrganizationServiceClient_UpdateOrganizationSettings_Call) Run(run func(ctx context.Context, in *proto.UpdateOrganizationSettingsRequest, opts ...grpc.CallOption)) *MockOrganizationServiceClient_UpdateOrganizationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UpdateOrganizationSettingsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UpdateOrganizationSettingsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateOrganizationSettings_Call) Return(updateOrganizationSettingsResponse *proto.UpdateOrganizationSettingsResponse, err error) *MockOrganizationServiceClient_UpdateOrganizationSettings_Call {
	_c.Call.Return(updateOrganizationSettingsResponse, err)
	return _c
}

func (_c *MockOrganizationServiceClient_UpdateOrganizationSettings_Call) RunAndReturn(run func(ctx context.Context, in *proto.UpdateOrganizationSettingsRequest, opts ...grpc.CallOption) (*proto.UpdateOrganizationSettingsResponse, error)) *MockOrganizationServiceClient_UpdateOrganizationSettings_Call {
	_c.Call.Return(run)
	return _c
}
