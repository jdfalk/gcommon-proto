// filepath: pkg/queue/proto/messages/schema_config.proto
// file: queue/proto/messages/schema_config.proto
// version: 1.0.0
// guid: 7d8e9f0a-1b2c-3d4e-5f6a-7b8c9d0e1f2a
//
// Message definitions for queue module
//
edition = "2023";

package gcommon.v1.queue;

import "google/protobuf/go_features.proto";
import "pkg/queue/proto/serialization_format.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto;queuepb";

/**
 * Schema configuration for message validation and evolution.
 */
message SchemaConfig {
  // Schema name/identifier
  string schema_name = 1;

  // Schema version
  string schema_version = 2;

  // Schema definition (JSON Schema, Avro, etc.)
  string schema_definition = 3;

  // Schema format type
  SchemaFormat format = 4;

  // Serialization format for messages
  gcommon.v1.queue.SerializationFormat serialization_format = 5;

  // Whether schema validation is enforced
  bool enforce_validation = 6;

  // Schema evolution strategy
  SchemaEvolutionStrategy evolution_strategy = 7;

  // Compatibility mode for schema evolution
  SchemaCompatibilityMode compatibility_mode = 8;

  // Registry URL for external schema registry
  string registry_url = 9;

  // Authentication credentials for schema registry
  map<string, string> registry_auth = 10;
}

/**
 * Schema format types.
 */
enum SchemaFormat {
  // Default unspecified format
  SCHEMA_FORMAT_UNSPECIFIED = 0;

  // JSON Schema format
  SCHEMA_FORMAT_JSON_SCHEMA = 1;

  // Apache Avro schema
  SCHEMA_FORMAT_AVRO = 2;

  // Protocol Buffers schema
  SCHEMA_FORMAT_PROTOBUF = 3;

  // XML Schema (XSD)
  SCHEMA_FORMAT_XML_SCHEMA = 4;

  // Custom schema format
  SCHEMA_FORMAT_CUSTOM = 5;
}

/**
 * Schema evolution strategies.
 */
enum SchemaEvolutionStrategy {
  // Default unspecified strategy
  SCHEMA_EVOLUTION_STRATEGY_UNSPECIFIED = 0;

  // No evolution allowed
  SCHEMA_EVOLUTION_STRATEGY_NONE = 1;

  // Forward compatibility (new schema can read old data)
  SCHEMA_EVOLUTION_STRATEGY_FORWARD = 2;

  // Backward compatibility (old schema can read new data)
  SCHEMA_EVOLUTION_STRATEGY_BACKWARD = 3;

  // Full compatibility (bidirectional)
  SCHEMA_EVOLUTION_STRATEGY_FULL = 4;

  // No compatibility checks
  SCHEMA_EVOLUTION_STRATEGY_NONE_CHECK = 5;
}

/**
 * Schema compatibility modes.
 */
enum SchemaCompatibilityMode {
  // Default unspecified mode
  SCHEMA_COMPATIBILITY_MODE_UNSPECIFIED = 0;

  // Strict compatibility checking
  SCHEMA_COMPATIBILITY_MODE_STRICT = 1;

  // Lenient compatibility checking
  SCHEMA_COMPATIBILITY_MODE_LENIENT = 2;

  // No compatibility checking
  SCHEMA_COMPATIBILITY_MODE_NONE = 3;
}
