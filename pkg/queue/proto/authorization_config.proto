// file: pkg/queue/proto/authorization_config.proto
// version: 1.1.0
// Authorization configuration for queue access control

edition = "2023";

package gcommon.v1.queue;

import "pkg/queue/proto/retry_config.proto";


// AuthorizationConfig configures access control and permissions for queue operations
message AuthorizationConfig {
  // Enable authorization checking
  bool enabled = 1;

  // Default permission policy (allow/deny)
  string default_policy = 2;

  // Permission rules for different operations
  repeated PermissionRule rules = 3;

  // Role-based access control settings
  RoleBasedAccessControl rbac = 4;

  // API key authentication settings
  ApiKeyAuth api_key_auth = 5;

  // JWT token authentication settings
  JwtAuth jwt_auth = 6;

  // External authorization service settings
  ExternalAuthService external_auth = 7;
}

// Permission rule for specific operations
message PermissionRule {
  // Resource pattern (queue name, topic name, etc.)
  string resource_pattern = 1;

  // Operation (read, write, admin, etc.)
  string operation = 2;

  // Required roles or permissions
  repeated string required_roles = 3;

  // Allow or deny rule
  bool allow = 4;

  // Priority of this rule (higher number = higher priority)
  int32 priority = 5;
}

// Role-based access control configuration
message RoleBasedAccessControl {
  // Enable RBAC
  bool enabled = 1;

  // Default roles for new users
  repeated string default_roles = 2;

  // Role inheritance rules
  map<string, RoleInheritance> role_inheritance = 3;

  // External role provider settings
  ExternalRoleProvider external_provider = 4;
}

// Role inheritance configuration
message RoleInheritance {
  // Parent roles that this role inherits from
  repeated string inherits_from = 1;

  // Additional permissions for this role
  repeated string additional_permissions = 2;
}

// External role provider configuration
message ExternalRoleProvider {
  // Provider type (ldap, oauth, etc.)
  string provider_type = 1;

  // Provider endpoint URL
  string endpoint = 2;

  // Authentication credentials for provider
  map<string, string> credentials = 3;

  // Cache TTL for role lookups (seconds)
  int32 cache_ttl_seconds = 4;
}

// API key authentication configuration
message ApiKeyAuth {
  // Enable API key authentication
  bool enabled = 1;

  // Header name for API key
  string header_name = 2;

  // Query parameter name for API key (alternative to header)
  string query_param_name = 3;

  // Key validation service
  KeyValidationService validation_service = 4;
}

// Key validation service configuration
message KeyValidationService {
  // Service type (local, external, etc.)
  string service_type = 1;

  // Service endpoint (for external validation)
  string endpoint = 2;

  // Timeout for validation requests (milliseconds)
  int32 timeout_ms = 3;

  // Cache TTL for validation results (seconds)
  int32 cache_ttl_seconds = 4;
}

// JWT authentication configuration
message JwtAuth {
  // Enable JWT authentication
  bool enabled = 1;

  // JWT signing algorithm
  string algorithm = 2;

  // Public key or secret for verification
  string verification_key = 3;

  // Expected issuer
  string expected_issuer = 4;

  // Expected audience
  repeated string expected_audience = 5;

  // Clock skew tolerance (seconds)
  int32 clock_skew_seconds = 6;

  // Required claims
  map<string, string> required_claims = 7;
}

// External authorization service configuration
message ExternalAuthService {
  // Enable external authorization
  bool enabled = 1;

  // Authorization service endpoint
  string endpoint = 2;

  // Request timeout (milliseconds)
  int32 timeout_ms = 3;

  // Retry configuration - references existing RetryConfig
  RetryConfig retry_config = 4;

  // Cache configuration
  AuthCacheConfig cache_config = 5;

  // Headers to include in authorization requests
  map<string, string> request_headers = 6;
}

// Cache configuration for authorization results
message AuthCacheConfig {
  // Enable caching
  bool enabled = 1;

  // Cache TTL (seconds)
  int32 ttl_seconds = 2;

  // Maximum cache size
  int32 max_size = 3;

  // Cache cleanup interval (seconds)
  int32 cleanup_interval_seconds = 4;
}
