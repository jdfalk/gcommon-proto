// file: pkg/queue/proto/subscribe_request.proto
// version: 1.1.0
// Request to create a subscription to a queue or topic

edition = "2023";

package gcommon.v1.queue;

import "pkg/queue/proto/ack_level.proto";
import "pkg/queue/proto/delivery_mode.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto";

// SubscribeRequest creates a new subscription to a queue or topic
message SubscribeRequest {
  // Topic or queue to subscribe to
  string topic = 1;

  // Subscription name/identifier
  string subscription_name = 2;

  // Consumer group ID for coordinated consumption
  string consumer_group_id = 3;

  // Individual consumer ID
  string consumer_id = 4;

  // Subscription configuration
  SubscriptionConfiguration config = 5;

  // Message filtering criteria
  MessageFilterConfig filter_config = 6;

  // Delivery configuration
  DeliveryConfiguration delivery_config = 7;

  // Error handling configuration
  ErrorHandlingConfig error_handling = 8;

  // Subscription metadata
  map<string, string> metadata = 9;
}

// Configuration for the subscription
message SubscriptionConfiguration {
  // Acknowledgment level required
  AckLevel ack_level = 1;

  // Delivery mode for messages
  DeliveryMode delivery_mode = 2;

  // Maximum number of unacknowledged messages
  int32 max_unacked_messages = 3;

  // Acknowledgment timeout (milliseconds)
  int32 ack_timeout_ms = 4;

  // Message priority filter (minimum priority)
  int32 min_priority = 5;

  // Enable message ordering
  bool ordered_delivery = 6;

  // Auto-acknowledge messages after delivery
  bool auto_acknowledge = 7;

  // Subscription expiration time (seconds, 0 = no expiration)
  int64 expiration_seconds = 8;

  // Enable duplicate message detection
  bool duplicate_detection = 9;

  // Maximum message age to accept (seconds)
  int64 max_message_age_seconds = 10;
}

// Message filtering configuration
message MessageFilterConfig {
  // Header-based filters
  map<string, string> header_filters = 1;

  // Content-based filters
  repeated ContentFilter content_filters = 2;

  // Routing key patterns
  repeated string routing_key_patterns = 3;

  // Message type filters
  repeated string message_types = 4;

  // Custom filter expressions
  repeated string filter_expressions = 5;

  // Exclude messages matching these criteria
  bool exclude_matching = 6;
}

// Content-based message filter
message ContentFilter {
  // JSON path or field name
  string field_path = 1;

  // Filter operator (equals, contains, regex, gt, lt, etc.)
  string operator = 2;

  // Filter value
  string value = 3;

  // Case sensitive matching
  bool case_sensitive = 4;
}

// Delivery configuration for the subscription
message DeliveryConfiguration {
  // Delivery endpoint (for push subscriptions)
  string push_endpoint = 1;

  // Delivery timeout (milliseconds)
  int32 delivery_timeout_ms = 2;

  // Retry configuration for failed deliveries
  DeliveryRetryConfig retry_config = 3;

  // Batch delivery settings
  BatchDeliveryConfig batch_config = 4;

  // Flow control settings
  FlowControlSettings flow_control = 5;

  // Enable compression for delivery
  bool enable_compression = 6;

  // Authentication for push endpoints
  map<string, string> auth_headers = 7;
}

// Retry configuration for delivery failures
message DeliveryRetryConfig {
  // Enable retry on delivery failures
  bool enabled = 1;

  // Maximum retry attempts
  int32 max_retries = 2;

  // Initial retry delay (milliseconds)
  int32 initial_delay_ms = 3;

  // Maximum retry delay (milliseconds)
  int32 max_delay_ms = 4;

  // Backoff multiplier
  double backoff_multiplier = 5;

  // Retry only for specific error codes
  repeated string retry_error_codes = 6;
}

// Batch delivery configuration
message BatchDeliveryConfig {
  // Enable batch delivery
  bool enabled = 1;

  // Maximum messages per batch
  int32 max_batch_size = 2;

  // Maximum batch size in bytes
  int64 max_batch_bytes = 3;

  // Maximum time to wait for batch completion (milliseconds)
  int32 batch_timeout_ms = 4;
}

// Flow control settings
message FlowControlSettings {
  // Maximum outstanding messages
  int32 max_outstanding_messages = 1;

  // Maximum outstanding bytes
  int64 max_outstanding_bytes = 2;

  // Flow control algorithm
  string algorithm = 3;
}

// Error handling configuration
message ErrorHandlingConfig {
  // Dead letter queue configuration
  DeadLetterQueueConfig dlq_config = 1;

  // Maximum delivery attempts before DLQ
  int32 max_delivery_attempts = 2;

  // Actions to take on specific errors
  repeated ErrorActionConfig error_actions = 3;

  // Enable error logging
  bool enable_error_logging = 4;

  // Error notification settings
  ErrorNotificationConfig notification_config = 5;
}

// Dead letter queue configuration
message DeadLetterQueueConfig {
  // Enable dead letter queue
  bool enabled = 1;

  // Dead letter queue topic
  string dlq_topic = 2;

  // Maximum message age in DLQ (seconds)
  int64 dlq_max_age_seconds = 3;

  // Include original error information
  bool include_error_info = 4;
}

// Error action configuration
message ErrorActionConfig {
  // Error code or pattern
  string error_pattern = 1;

  // Action to take (retry, dlq, drop, pause)
  string action = 2;

  // Action parameters
  map<string, string> action_params = 3;
}

// Error notification configuration
message ErrorNotificationConfig {
  // Enable error notifications
  bool enabled = 1;

  // Notification channels
  repeated string notification_channels = 2;

  // Error threshold for notifications
  int32 error_threshold = 3;

  // Notification frequency (seconds)
  int32 notification_frequency_seconds = 4;
}
