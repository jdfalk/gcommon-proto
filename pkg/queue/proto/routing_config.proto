// filepath: pkg/queue/proto/messages/routing_config.proto
// file: queue/proto/messages/routing_config.proto
// version: 1.0.0
// guid: 3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d
//
// Message definitions for queue module
//
edition = "2023";

package gcommon.v1.queue;

import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto;queuepb";

/**
 * Configuration for message routing within the queue system.
 */
message RoutingConfig {
  // Routing strategy
  RoutingStrategy strategy = 1;

  // Routing rules for message distribution
  repeated RoutingRule rules = 2;

  // Default destination when no rules match
  string default_destination = 3;

  // Whether to enable content-based routing
  bool content_based_routing = 4;

  // Header-based routing configuration
  HeaderRoutingConfig header_routing = 5;

  // Topic-based routing configuration
  TopicRoutingConfig topic_routing = 6;

  // Whether to preserve message order during routing
  bool preserve_order = 7;
}

/**
 * Routing strategies.
 */
enum RoutingStrategy {
  // Default unspecified strategy
  ROUTING_STRATEGY_UNSPECIFIED = 0;

  // Direct routing based on destination name
  ROUTING_STRATEGY_DIRECT = 1;

  // Topic-based routing using routing key
  ROUTING_STRATEGY_TOPIC = 2;

  // Fanout routing to all bound queues
  ROUTING_STRATEGY_FANOUT = 3;

  // Header-based routing using message headers
  ROUTING_STRATEGY_HEADER = 4;

  // Content-based routing using message content
  ROUTING_STRATEGY_CONTENT = 5;

  // Hash-based routing for load distribution
  ROUTING_STRATEGY_HASH = 6;
}

/**
 * Individual routing rule.
 */
message RoutingRule {
  // Unique name for the rule
  string name = 1;

  // Priority of the rule (higher numbers = higher priority)
  int32 priority = 2;

  // Condition for applying the rule
  RoutingCondition condition = 3;

  // Target destination for matching messages
  string destination = 4;

  // Whether the rule is enabled
  bool enabled = 5;

  // Additional metadata for the rule
  map<string, string> metadata = 6;
}

/**
 * Condition for routing rules.
 */
message RoutingCondition {
  // Header-based conditions
  map<string, string> header_matches = 1;

  // Content pattern matching
  string content_pattern = 2;

  // Routing key pattern
  string routing_key_pattern = 3;

  // Message type filter
  string message_type = 4;

  // Priority range filter
  PriorityRange priority_range = 5;

  // Size range filter
  SizeRange size_range = 6;
}

/**
 * Priority range for filtering.
 */
message PriorityRange {
  // Minimum priority (inclusive)
  int32 min_priority = 1;

  // Maximum priority (inclusive)
  int32 max_priority = 2;
}

/**
 * Size range for filtering.
 */
message SizeRange {
  // Minimum size in bytes (inclusive)
  int64 min_size = 1;

  // Maximum size in bytes (inclusive)
  int64 max_size = 2;
}

/**
 * Header-based routing configuration.
 */
message HeaderRoutingConfig {
  // Header key to use for routing
  string routing_header = 1;

  // Whether to use exact match or pattern matching
  bool exact_match = 2;

  // Case sensitivity for header matching
  bool case_sensitive = 3;
}

/**
 * Topic-based routing configuration.
 */
message TopicRoutingConfig {
  // Topic exchange name
  string exchange_name = 1;

  // Default routing key
  string default_routing_key = 2;

  // Whether to use wildcard matching
  bool wildcard_matching = 3;
}
