// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/queue/proto/commit_offset_response.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CommitOffsetResponse returns the result of committing consumer offsets
type CommitOffsetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Overall success status
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Error message if commit failed
	ErrorMessage *string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Error code for programmatic handling
	ErrorCode *string `protobuf:"bytes,3,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Results for each partition commit
	PartitionResults []*PartitionCommitResult `protobuf:"bytes,4,rep,name=partition_results,json=partitionResults" json:"partition_results,omitempty"`
	// Total number of offsets committed
	CommittedCount *int32 `protobuf:"varint,5,opt,name=committed_count,json=committedCount" json:"committed_count,omitempty"`
	// Total number of failed commits
	FailedCount *int32 `protobuf:"varint,6,opt,name=failed_count,json=failedCount" json:"failed_count,omitempty"`
	// Commit timestamp
	CommitTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=commit_timestamp,json=commitTimestamp" json:"commit_timestamp,omitempty"`
	// Consumer group generation at time of commit
	ConsumerGeneration *int64 `protobuf:"varint,8,opt,name=consumer_generation,json=consumerGeneration" json:"consumer_generation,omitempty"`
	// Additional metadata about the commit operation
	Metadata      map[string]string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOffsetResponse) Reset() {
	*x = CommitOffsetResponse{}
	mi := &file_pkg_queue_proto_commit_offset_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffsetResponse) ProtoMessage() {}

func (x *CommitOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_commit_offset_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffsetResponse.ProtoReflect.Descriptor instead.
func (*CommitOffsetResponse) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_commit_offset_response_proto_rawDescGZIP(), []int{0}
}

func (x *CommitOffsetResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CommitOffsetResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *CommitOffsetResponse) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *CommitOffsetResponse) GetPartitionResults() []*PartitionCommitResult {
	if x != nil {
		return x.PartitionResults
	}
	return nil
}

func (x *CommitOffsetResponse) GetCommittedCount() int32 {
	if x != nil && x.CommittedCount != nil {
		return *x.CommittedCount
	}
	return 0
}

func (x *CommitOffsetResponse) GetFailedCount() int32 {
	if x != nil && x.FailedCount != nil {
		return *x.FailedCount
	}
	return 0
}

func (x *CommitOffsetResponse) GetCommitTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitTimestamp
	}
	return nil
}

func (x *CommitOffsetResponse) GetConsumerGeneration() int64 {
	if x != nil && x.ConsumerGeneration != nil {
		return *x.ConsumerGeneration
	}
	return 0
}

func (x *CommitOffsetResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Result of committing offset for a specific partition
type PartitionCommitResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition ID
	PartitionId *int32 `protobuf:"varint,1,opt,name=partition_id,json=partitionId" json:"partition_id,omitempty"`
	// Success status for this partition
	Success *bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// Committed offset value
	CommittedOffset *int64 `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset" json:"committed_offset,omitempty"`
	// Previous offset before commit
	PreviousOffset *int64 `protobuf:"varint,4,opt,name=previous_offset,json=previousOffset" json:"previous_offset,omitempty"`
	// Error message if commit failed for this partition
	ErrorMessage *string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Error code for this partition
	ErrorCode *string `protobuf:"bytes,6,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Timestamp when this offset was committed
	CommitTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=commit_timestamp,json=commitTimestamp" json:"commit_timestamp,omitempty"`
	// Metadata for this partition commit
	PartitionMetadata map[string]string `protobuf:"bytes,8,rep,name=partition_metadata,json=partitionMetadata" json:"partition_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PartitionCommitResult) Reset() {
	*x = PartitionCommitResult{}
	mi := &file_pkg_queue_proto_commit_offset_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionCommitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionCommitResult) ProtoMessage() {}

func (x *PartitionCommitResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_commit_offset_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionCommitResult.ProtoReflect.Descriptor instead.
func (*PartitionCommitResult) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_commit_offset_response_proto_rawDescGZIP(), []int{1}
}

func (x *PartitionCommitResult) GetPartitionId() int32 {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return 0
}

func (x *PartitionCommitResult) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *PartitionCommitResult) GetCommittedOffset() int64 {
	if x != nil && x.CommittedOffset != nil {
		return *x.CommittedOffset
	}
	return 0
}

func (x *PartitionCommitResult) GetPreviousOffset() int64 {
	if x != nil && x.PreviousOffset != nil {
		return *x.PreviousOffset
	}
	return 0
}

func (x *PartitionCommitResult) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *PartitionCommitResult) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *PartitionCommitResult) GetCommitTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitTimestamp
	}
	return nil
}

func (x *PartitionCommitResult) GetPartitionMetadata() map[string]string {
	if x != nil {
		return x.PartitionMetadata
	}
	return nil
}

var File_pkg_queue_proto_commit_offset_response_proto protoreflect.FileDescriptor

const file_pkg_queue_proto_commit_offset_response_proto_rawDesc = "" +
	"\n" +
	",pkg/queue/proto/commit_offset_response.proto\x12\x10gcommon.v1.queue\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9d\x04\n" +
	"\x14CommitOffsetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCode\x12T\n" +
	"\x11partition_results\x18\x04 \x03(\v2'.gcommon.v1.queue.PartitionCommitResultR\x10partitionResults\x12'\n" +
	"\x0fcommitted_count\x18\x05 \x01(\x05R\x0ecommittedCount\x12!\n" +
	"\ffailed_count\x18\x06 \x01(\x05R\vfailedCount\x12E\n" +
	"\x10commit_timestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0fcommitTimestamp\x12/\n" +
	"\x13consumer_generation\x18\b \x01(\x03R\x12consumerGeneration\x12P\n" +
	"\bmetadata\x18\t \x03(\v24.gcommon.v1.queue.CommitOffsetResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe8\x03\n" +
	"\x15PartitionCommitResult\x12!\n" +
	"\fpartition_id\x18\x01 \x01(\x05R\vpartitionId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12)\n" +
	"\x10committed_offset\x18\x03 \x01(\x03R\x0fcommittedOffset\x12'\n" +
	"\x0fprevious_offset\x18\x04 \x01(\x03R\x0epreviousOffset\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"error_code\x18\x06 \x01(\tR\terrorCode\x12E\n" +
	"\x10commit_timestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\x0fcommitTimestamp\x12m\n" +
	"\x12partition_metadata\x18\b \x03(\v2>.gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntryR\x11partitionMetadata\x1aD\n" +
	"\x16PartitionMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xbe\x01\n" +
	"\x14com.gcommon.v1.queueB\x19CommitOffsetResponseProtoP\x01Z)github.com/jdfalk/gcommon/pkg/queue/proto\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queueb\beditionsp\xe8\a"

var (
	file_pkg_queue_proto_commit_offset_response_proto_rawDescOnce sync.Once
	file_pkg_queue_proto_commit_offset_response_proto_rawDescData []byte
)

func file_pkg_queue_proto_commit_offset_response_proto_rawDescGZIP() []byte {
	file_pkg_queue_proto_commit_offset_response_proto_rawDescOnce.Do(func() {
		file_pkg_queue_proto_commit_offset_response_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_commit_offset_response_proto_rawDesc), len(file_pkg_queue_proto_commit_offset_response_proto_rawDesc)))
	})
	return file_pkg_queue_proto_commit_offset_response_proto_rawDescData
}

var file_pkg_queue_proto_commit_offset_response_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_queue_proto_commit_offset_response_proto_goTypes = []any{
	(*CommitOffsetResponse)(nil),  // 0: gcommon.v1.queue.CommitOffsetResponse
	(*PartitionCommitResult)(nil), // 1: gcommon.v1.queue.PartitionCommitResult
	nil,                           // 2: gcommon.v1.queue.CommitOffsetResponse.MetadataEntry
	nil,                           // 3: gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntry
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_pkg_queue_proto_commit_offset_response_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.CommitOffsetResponse.partition_results:type_name -> gcommon.v1.queue.PartitionCommitResult
	4, // 1: gcommon.v1.queue.CommitOffsetResponse.commit_timestamp:type_name -> google.protobuf.Timestamp
	2, // 2: gcommon.v1.queue.CommitOffsetResponse.metadata:type_name -> gcommon.v1.queue.CommitOffsetResponse.MetadataEntry
	4, // 3: gcommon.v1.queue.PartitionCommitResult.commit_timestamp:type_name -> google.protobuf.Timestamp
	3, // 4: gcommon.v1.queue.PartitionCommitResult.partition_metadata:type_name -> gcommon.v1.queue.PartitionCommitResult.PartitionMetadataEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_queue_proto_commit_offset_response_proto_init() }
func file_pkg_queue_proto_commit_offset_response_proto_init() {
	if File_pkg_queue_proto_commit_offset_response_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_commit_offset_response_proto_rawDesc), len(file_pkg_queue_proto_commit_offset_response_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_queue_proto_commit_offset_response_proto_goTypes,
		DependencyIndexes: file_pkg_queue_proto_commit_offset_response_proto_depIdxs,
		MessageInfos:      file_pkg_queue_proto_commit_offset_response_proto_msgTypes,
	}.Build()
	File_pkg_queue_proto_commit_offset_response_proto = out.File
	file_pkg_queue_proto_commit_offset_response_proto_goTypes = nil
	file_pkg_queue_proto_commit_offset_response_proto_depIdxs = nil
}
