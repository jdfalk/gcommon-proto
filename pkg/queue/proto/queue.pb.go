// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: queue.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message represents a queue message
type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the message ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Body is the message body
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Headers are message headers
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PublishedAt is when the message was published
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// DeliveryCount is the number of delivery attempts
	DeliveryCount int32 `protobuf:"varint,5,opt,name=delivery_count,json=deliveryCount,proto3" json:"delivery_count,omitempty"`
	// Queue is the queue name
	Queue string `protobuf:"bytes,6,opt,name=queue,proto3" json:"queue,omitempty"`
	// ContentType is the message content type
	ContentType string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// ContentEncoding is the message content encoding
	ContentEncoding string `protobuf:"bytes,8,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	// Priority is the message priority
	Priority int32 `protobuf:"varint,9,opt,name=priority,proto3" json:"priority,omitempty"`
	// CorrelationID is the correlation ID
	CorrelationId string `protobuf:"bytes,10,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// ReplyTo is the reply-to address
	ReplyTo string `protobuf:"bytes,11,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// Expiration is the message expiration time
	Expiration *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// MessageID is the application-specified message ID
	MessageId string `protobuf:"bytes,13,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Timestamp is the message timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Type is the message type
	Type string `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	// UserId is the user ID
	UserId string `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// AppId is the application ID
	AppId         string `protobuf:"bytes,17,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_queue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Message) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Message) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *Message) GetDeliveryCount() int32 {
	if x != nil {
		return x.DeliveryCount
	}
	return 0
}

func (x *Message) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *Message) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Message) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *Message) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Message) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *Message) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *Message) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Message) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

// PublishRequest contains a request to publish a message
type PublishRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the queue name
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Body is the message body
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Headers are message headers
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ContentType is the message content type
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// ContentEncoding is the message content encoding
	ContentEncoding string `protobuf:"bytes,5,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	// Priority is the message priority
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// CorrelationID is the correlation ID
	CorrelationId string `protobuf:"bytes,7,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// ReplyTo is the reply-to address
	ReplyTo string `protobuf:"bytes,8,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// Expiration is the message expiration time
	Expiration *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// MessageID is the application-specified message ID
	MessageId string `protobuf:"bytes,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Type is the message type
	Type          string `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_queue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{1}
}

func (x *PublishRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *PublishRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PublishRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PublishRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PublishRequest) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *PublishRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PublishRequest) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *PublishRequest) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *PublishRequest) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *PublishRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PublishRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// PublishResponse contains the result of publishing a message
type PublishResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageID is the published message ID
	MessageId     string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_queue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{2}
}

func (x *PublishResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

// PublishBatchRequest contains a request to publish multiple messages
type PublishBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the queue name
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Messages are the messages to publish
	Messages      []*BatchMessage `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishBatchRequest) Reset() {
	*x = PublishBatchRequest{}
	mi := &file_queue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishBatchRequest) ProtoMessage() {}

func (x *PublishBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishBatchRequest.ProtoReflect.Descriptor instead.
func (*PublishBatchRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{3}
}

func (x *PublishBatchRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *PublishBatchRequest) GetMessages() []*BatchMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// BatchMessage represents a message in a batch
type BatchMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Body is the message body
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Headers are message headers
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ContentType is the message content type
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// ContentEncoding is the message content encoding
	ContentEncoding string `protobuf:"bytes,4,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	// Priority is the message priority
	Priority int32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// CorrelationID is the correlation ID
	CorrelationId string `protobuf:"bytes,6,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// ReplyTo is the reply-to address
	ReplyTo string `protobuf:"bytes,7,opt,name=reply_to,json=replyTo,proto3" json:"reply_to,omitempty"`
	// Expiration is the message expiration time
	Expiration *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// MessageID is the application-specified message ID
	MessageId string `protobuf:"bytes,9,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Type is the message type
	Type          string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchMessage) Reset() {
	*x = BatchMessage{}
	mi := &file_queue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMessage) ProtoMessage() {}

func (x *BatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMessage.ProtoReflect.Descriptor instead.
func (*BatchMessage) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{4}
}

func (x *BatchMessage) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *BatchMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *BatchMessage) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *BatchMessage) GetContentEncoding() string {
	if x != nil {
		return x.ContentEncoding
	}
	return ""
}

func (x *BatchMessage) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *BatchMessage) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BatchMessage) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *BatchMessage) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *BatchMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *BatchMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// PublishBatchResponse contains the result of publishing multiple messages
type PublishBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageIDs are the published message IDs
	MessageIds []string `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	// FailedMessages contains indices of messages that failed to publish
	FailedMessages []int32 `protobuf:"varint,2,rep,packed,name=failed_messages,json=failedMessages,proto3" json:"failed_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishBatchResponse) Reset() {
	*x = PublishBatchResponse{}
	mi := &file_queue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishBatchResponse) ProtoMessage() {}

func (x *PublishBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishBatchResponse.ProtoReflect.Descriptor instead.
func (*PublishBatchResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{5}
}

func (x *PublishBatchResponse) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *PublishBatchResponse) GetFailedMessages() []int32 {
	if x != nil {
		return x.FailedMessages
	}
	return nil
}

// SubscribeRequest contains a request to subscribe to a queue
type SubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the queue name
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Consumer is the consumer name
	Consumer string `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// AutoAck indicates whether to automatically acknowledge messages
	AutoAck bool `protobuf:"varint,3,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
	// PrefetchCount is the number of messages to prefetch
	PrefetchCount int32 `protobuf:"varint,4,opt,name=prefetch_count,json=prefetchCount,proto3" json:"prefetch_count,omitempty"`
	// Exclusive indicates whether this is an exclusive consumer
	Exclusive bool `protobuf:"varint,5,opt,name=exclusive,proto3" json:"exclusive,omitempty"`
	// NoLocal indicates whether to receive messages published by this connection
	NoLocal bool `protobuf:"varint,6,opt,name=no_local,json=noLocal,proto3" json:"no_local,omitempty"`
	// NoWait indicates whether to wait for server confirmation
	NoWait bool `protobuf:"varint,7,opt,name=no_wait,json=noWait,proto3" json:"no_wait,omitempty"`
	// Arguments are additional arguments
	Arguments     map[string]string `protobuf:"bytes,8,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_queue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeRequest) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SubscribeRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *SubscribeRequest) GetAutoAck() bool {
	if x != nil {
		return x.AutoAck
	}
	return false
}

func (x *SubscribeRequest) GetPrefetchCount() int32 {
	if x != nil {
		return x.PrefetchCount
	}
	return 0
}

func (x *SubscribeRequest) GetExclusive() bool {
	if x != nil {
		return x.Exclusive
	}
	return false
}

func (x *SubscribeRequest) GetNoLocal() bool {
	if x != nil {
		return x.NoLocal
	}
	return false
}

func (x *SubscribeRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *SubscribeRequest) GetArguments() map[string]string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// AcknowledgeRequest contains a request to acknowledge a message
type AcknowledgeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageID is the message ID to acknowledge
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Multiple indicates whether to acknowledge all messages up to this one
	Multiple      bool `protobuf:"varint,2,opt,name=multiple,proto3" json:"multiple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcknowledgeRequest) Reset() {
	*x = AcknowledgeRequest{}
	mi := &file_queue_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRequest) ProtoMessage() {}

func (x *AcknowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{7}
}

func (x *AcknowledgeRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *AcknowledgeRequest) GetMultiple() bool {
	if x != nil {
		return x.Multiple
	}
	return false
}

// AcknowledgeResponse contains the result of acknowledging a message
type AcknowledgeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success indicates if the operation succeeded
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcknowledgeResponse) Reset() {
	*x = AcknowledgeResponse{}
	mi := &file_queue_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeResponse) ProtoMessage() {}

func (x *AcknowledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{8}
}

func (x *AcknowledgeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// RejectMessageRequest contains a request to reject a message
type RejectMessageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageID is the message ID to reject
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Requeue indicates whether to requeue the message
	Requeue       bool `protobuf:"varint,2,opt,name=requeue,proto3" json:"requeue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectMessageRequest) Reset() {
	*x = RejectMessageRequest{}
	mi := &file_queue_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectMessageRequest) ProtoMessage() {}

func (x *RejectMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectMessageRequest.ProtoReflect.Descriptor instead.
func (*RejectMessageRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{9}
}

func (x *RejectMessageRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *RejectMessageRequest) GetRequeue() bool {
	if x != nil {
		return x.Requeue
	}
	return false
}

// RejectMessageResponse contains the result of rejecting a message
type RejectMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success indicates if the operation succeeded
	Success       bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejectMessageResponse) Reset() {
	*x = RejectMessageResponse{}
	mi := &file_queue_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectMessageResponse) ProtoMessage() {}

func (x *RejectMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectMessageResponse.ProtoReflect.Descriptor instead.
func (*RejectMessageResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{10}
}

func (x *RejectMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// GetQueueInfoRequest contains a request to get queue information
type GetQueueInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueueInfoRequest) Reset() {
	*x = GetQueueInfoRequest{}
	mi := &file_queue_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueInfoRequest) ProtoMessage() {}

func (x *GetQueueInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueInfoRequest.ProtoReflect.Descriptor instead.
func (*GetQueueInfoRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{11}
}

func (x *GetQueueInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetQueueInfoResponse contains queue information
type GetQueueInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MessageCount is the number of messages in the queue
	MessageCount int64 `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	// ConsumerCount is the number of consumers
	ConsumerCount int32 `protobuf:"varint,3,opt,name=consumer_count,json=consumerCount,proto3" json:"consumer_count,omitempty"`
	// Properties are queue properties
	Properties    map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQueueInfoResponse) Reset() {
	*x = GetQueueInfoResponse{}
	mi := &file_queue_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQueueInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueueInfoResponse) ProtoMessage() {}

func (x *GetQueueInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueueInfoResponse.ProtoReflect.Descriptor instead.
func (*GetQueueInfoResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{12}
}

func (x *GetQueueInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetQueueInfoResponse) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *GetQueueInfoResponse) GetConsumerCount() int32 {
	if x != nil {
		return x.ConsumerCount
	}
	return 0
}

func (x *GetQueueInfoResponse) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// CreateQueueRequest contains a request to create a queue
type CreateQueueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Durable indicates whether the queue is durable
	Durable bool `protobuf:"varint,2,opt,name=durable,proto3" json:"durable,omitempty"`
	// AutoDelete indicates whether the queue is automatically deleted
	AutoDelete bool `protobuf:"varint,3,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`
	// Exclusive indicates whether the queue is exclusive
	Exclusive bool `protobuf:"varint,4,opt,name=exclusive,proto3" json:"exclusive,omitempty"`
	// NoWait indicates whether to wait for server confirmation
	NoWait bool `protobuf:"varint,5,opt,name=no_wait,json=noWait,proto3" json:"no_wait,omitempty"`
	// Arguments are additional arguments
	Arguments     map[string]string `protobuf:"bytes,6,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQueueRequest) Reset() {
	*x = CreateQueueRequest{}
	mi := &file_queue_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueueRequest) ProtoMessage() {}

func (x *CreateQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueueRequest.ProtoReflect.Descriptor instead.
func (*CreateQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{13}
}

func (x *CreateQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQueueRequest) GetDurable() bool {
	if x != nil {
		return x.Durable
	}
	return false
}

func (x *CreateQueueRequest) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *CreateQueueRequest) GetExclusive() bool {
	if x != nil {
		return x.Exclusive
	}
	return false
}

func (x *CreateQueueRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

func (x *CreateQueueRequest) GetArguments() map[string]string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// CreateQueueResponse contains the result of creating a queue
type CreateQueueResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MessageCount is the number of messages in the queue
	MessageCount int64 `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	// ConsumerCount is the number of consumers
	ConsumerCount int32 `protobuf:"varint,3,opt,name=consumer_count,json=consumerCount,proto3" json:"consumer_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQueueResponse) Reset() {
	*x = CreateQueueResponse{}
	mi := &file_queue_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueueResponse) ProtoMessage() {}

func (x *CreateQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueueResponse.ProtoReflect.Descriptor instead.
func (*CreateQueueResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{14}
}

func (x *CreateQueueResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQueueResponse) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *CreateQueueResponse) GetConsumerCount() int32 {
	if x != nil {
		return x.ConsumerCount
	}
	return 0
}

// DeleteQueueRequest contains a request to delete a queue
type DeleteQueueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IfUnused indicates whether to delete only if unused
	IfUnused bool `protobuf:"varint,2,opt,name=if_unused,json=ifUnused,proto3" json:"if_unused,omitempty"`
	// IfEmpty indicates whether to delete only if empty
	IfEmpty bool `protobuf:"varint,3,opt,name=if_empty,json=ifEmpty,proto3" json:"if_empty,omitempty"`
	// NoWait indicates whether to wait for server confirmation
	NoWait        bool `protobuf:"varint,4,opt,name=no_wait,json=noWait,proto3" json:"no_wait,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQueueRequest) Reset() {
	*x = DeleteQueueRequest{}
	mi := &file_queue_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueueRequest) ProtoMessage() {}

func (x *DeleteQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueueRequest.ProtoReflect.Descriptor instead.
func (*DeleteQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteQueueRequest) GetIfUnused() bool {
	if x != nil {
		return x.IfUnused
	}
	return false
}

func (x *DeleteQueueRequest) GetIfEmpty() bool {
	if x != nil {
		return x.IfEmpty
	}
	return false
}

func (x *DeleteQueueRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

// DeleteQueueResponse contains the result of deleting a queue
type DeleteQueueResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageCount is the number of messages purged
	MessageCount  int64 `protobuf:"varint,1,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQueueResponse) Reset() {
	*x = DeleteQueueResponse{}
	mi := &file_queue_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueueResponse) ProtoMessage() {}

func (x *DeleteQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueueResponse.ProtoReflect.Descriptor instead.
func (*DeleteQueueResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteQueueResponse) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

// ListQueuesRequest contains a request to list queues
type ListQueuesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NamePattern is an optional name pattern filter
	NamePattern   string `protobuf:"bytes,1,opt,name=name_pattern,json=namePattern,proto3" json:"name_pattern,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQueuesRequest) Reset() {
	*x = ListQueuesRequest{}
	mi := &file_queue_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQueuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuesRequest) ProtoMessage() {}

func (x *ListQueuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuesRequest.ProtoReflect.Descriptor instead.
func (*ListQueuesRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{17}
}

func (x *ListQueuesRequest) GetNamePattern() string {
	if x != nil {
		return x.NamePattern
	}
	return ""
}

// ListQueuesResponse contains a list of queues
type ListQueuesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queues are the available queues
	Queues        []*QueueInfo `protobuf:"bytes,1,rep,name=queues,proto3" json:"queues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQueuesResponse) Reset() {
	*x = ListQueuesResponse{}
	mi := &file_queue_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQueuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuesResponse) ProtoMessage() {}

func (x *ListQueuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuesResponse.ProtoReflect.Descriptor instead.
func (*ListQueuesResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{18}
}

func (x *ListQueuesResponse) GetQueues() []*QueueInfo {
	if x != nil {
		return x.Queues
	}
	return nil
}

// QueueInfo contains queue information
type QueueInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MessageCount is the number of messages in the queue
	MessageCount int64 `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	// ConsumerCount is the number of consumers
	ConsumerCount int32 `protobuf:"varint,3,opt,name=consumer_count,json=consumerCount,proto3" json:"consumer_count,omitempty"`
	// Properties are queue properties
	Properties    map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	mi := &file_queue_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{19}
}

func (x *QueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueueInfo) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *QueueInfo) GetConsumerCount() int32 {
	if x != nil {
		return x.ConsumerCount
	}
	return 0
}

func (x *QueueInfo) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// PurgeQueueRequest contains a request to purge a queue
type PurgeQueueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the queue name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// NoWait indicates whether to wait for server confirmation
	NoWait        bool `protobuf:"varint,2,opt,name=no_wait,json=noWait,proto3" json:"no_wait,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeQueueRequest) Reset() {
	*x = PurgeQueueRequest{}
	mi := &file_queue_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeQueueRequest) ProtoMessage() {}

func (x *PurgeQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeQueueRequest.ProtoReflect.Descriptor instead.
func (*PurgeQueueRequest) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{20}
}

func (x *PurgeQueueRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PurgeQueueRequest) GetNoWait() bool {
	if x != nil {
		return x.NoWait
	}
	return false
}

// PurgeQueueResponse contains the result of purging a queue
type PurgeQueueResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MessageCount is the number of messages purged
	MessageCount  int64 `protobuf:"varint,1,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeQueueResponse) Reset() {
	*x = PurgeQueueResponse{}
	mi := &file_queue_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeQueueResponse) ProtoMessage() {}

func (x *PurgeQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_queue_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeQueueResponse.ProtoReflect.Descriptor instead.
func (*PurgeQueueResponse) Descriptor() ([]byte, []int) {
	return file_queue_proto_rawDescGZIP(), []int{21}
}

func (x *PurgeQueueResponse) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

var File_queue_proto protoreflect.FileDescriptor

const file_queue_proto_rawDesc = "" +
	"\n" +
	"\vqueue.proto\x12\x05queue\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa1\x05\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04body\x18\x02 \x01(\fR\x04body\x125\n" +
	"\aheaders\x18\x03 \x03(\v2\x1b.queue.Message.HeadersEntryR\aheaders\x12=\n" +
	"\fpublished_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vpublishedAt\x12%\n" +
	"\x0edelivery_count\x18\x05 \x01(\x05R\rdeliveryCount\x12\x14\n" +
	"\x05queue\x18\x06 \x01(\tR\x05queue\x12!\n" +
	"\fcontent_type\x18\a \x01(\tR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\b \x01(\tR\x0fcontentEncoding\x12\x1a\n" +
	"\bpriority\x18\t \x01(\x05R\bpriority\x12%\n" +
	"\x0ecorrelation_id\x18\n" +
	" \x01(\tR\rcorrelationId\x12\x19\n" +
	"\breply_to\x18\v \x01(\tR\areplyTo\x12:\n" +
	"\n" +
	"expiration\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiration\x12\x1d\n" +
	"\n" +
	"message_id\x18\r \x01(\tR\tmessageId\x128\n" +
	"\ttimestamp\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x12\n" +
	"\x04type\x18\x0f \x01(\tR\x04type\x12\x17\n" +
	"\auser_id\x18\x10 \x01(\tR\x06userId\x12\x15\n" +
	"\x06app_id\x18\x11 \x01(\tR\x05appId\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x03\n" +
	"\x0ePublishRequest\x12\x14\n" +
	"\x05queue\x18\x01 \x01(\tR\x05queue\x12\x12\n" +
	"\x04body\x18\x02 \x01(\fR\x04body\x12<\n" +
	"\aheaders\x18\x03 \x03(\v2\".queue.PublishRequest.HeadersEntryR\aheaders\x12!\n" +
	"\fcontent_type\x18\x04 \x01(\tR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\x05 \x01(\tR\x0fcontentEncoding\x12\x1a\n" +
	"\bpriority\x18\x06 \x01(\x05R\bpriority\x12%\n" +
	"\x0ecorrelation_id\x18\a \x01(\tR\rcorrelationId\x12\x19\n" +
	"\breply_to\x18\b \x01(\tR\areplyTo\x12:\n" +
	"\n" +
	"expiration\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiration\x12\x1d\n" +
	"\n" +
	"message_id\x18\n" +
	" \x01(\tR\tmessageId\x12\x12\n" +
	"\x04type\x18\v \x01(\tR\x04type\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"0\n" +
	"\x0fPublishResponse\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\"\\\n" +
	"\x13PublishBatchRequest\x12\x14\n" +
	"\x05queue\x18\x01 \x01(\tR\x05queue\x12/\n" +
	"\bmessages\x18\x02 \x03(\v2\x13.queue.BatchMessageR\bmessages\"\xb5\x03\n" +
	"\fBatchMessage\x12\x12\n" +
	"\x04body\x18\x01 \x01(\fR\x04body\x12:\n" +
	"\aheaders\x18\x02 \x03(\v2 .queue.BatchMessage.HeadersEntryR\aheaders\x12!\n" +
	"\fcontent_type\x18\x03 \x01(\tR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\x04 \x01(\tR\x0fcontentEncoding\x12\x1a\n" +
	"\bpriority\x18\x05 \x01(\x05R\bpriority\x12%\n" +
	"\x0ecorrelation_id\x18\x06 \x01(\tR\rcorrelationId\x12\x19\n" +
	"\breply_to\x18\a \x01(\tR\areplyTo\x12:\n" +
	"\n" +
	"expiration\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"expiration\x12\x1d\n" +
	"\n" +
	"message_id\x18\t \x01(\tR\tmessageId\x12\x12\n" +
	"\x04type\x18\n" +
	" \x01(\tR\x04type\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"`\n" +
	"\x14PublishBatchResponse\x12\x1f\n" +
	"\vmessage_ids\x18\x01 \x03(\tR\n" +
	"messageIds\x12'\n" +
	"\x0ffailed_messages\x18\x02 \x03(\x05R\x0efailedMessages\"\xdc\x02\n" +
	"\x10SubscribeRequest\x12\x14\n" +
	"\x05queue\x18\x01 \x01(\tR\x05queue\x12\x1a\n" +
	"\bconsumer\x18\x02 \x01(\tR\bconsumer\x12\x19\n" +
	"\bauto_ack\x18\x03 \x01(\bR\aautoAck\x12%\n" +
	"\x0eprefetch_count\x18\x04 \x01(\x05R\rprefetchCount\x12\x1c\n" +
	"\texclusive\x18\x05 \x01(\bR\texclusive\x12\x19\n" +
	"\bno_local\x18\x06 \x01(\bR\anoLocal\x12\x17\n" +
	"\ano_wait\x18\a \x01(\bR\x06noWait\x12D\n" +
	"\targuments\x18\b \x03(\v2&.queue.SubscribeRequest.ArgumentsEntryR\targuments\x1a<\n" +
	"\x0eArgumentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"O\n" +
	"\x12AcknowledgeRequest\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x1a\n" +
	"\bmultiple\x18\x02 \x01(\bR\bmultiple\"/\n" +
	"\x13AcknowledgeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"O\n" +
	"\x14RejectMessageRequest\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x18\n" +
	"\arequeue\x18\x02 \x01(\bR\arequeue\"1\n" +
	"\x15RejectMessageResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\")\n" +
	"\x13GetQueueInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x82\x02\n" +
	"\x14GetQueueInfoResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rmessage_count\x18\x02 \x01(\x03R\fmessageCount\x12%\n" +
	"\x0econsumer_count\x18\x03 \x01(\x05R\rconsumerCount\x12K\n" +
	"\n" +
	"properties\x18\x04 \x03(\v2+.queue.GetQueueInfoResponse.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa0\x02\n" +
	"\x12CreateQueueRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\adurable\x18\x02 \x01(\bR\adurable\x12\x1f\n" +
	"\vauto_delete\x18\x03 \x01(\bR\n" +
	"autoDelete\x12\x1c\n" +
	"\texclusive\x18\x04 \x01(\bR\texclusive\x12\x17\n" +
	"\ano_wait\x18\x05 \x01(\bR\x06noWait\x12F\n" +
	"\targuments\x18\x06 \x03(\v2(.queue.CreateQueueRequest.ArgumentsEntryR\targuments\x1a<\n" +
	"\x0eArgumentsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"u\n" +
	"\x13CreateQueueResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rmessage_count\x18\x02 \x01(\x03R\fmessageCount\x12%\n" +
	"\x0econsumer_count\x18\x03 \x01(\x05R\rconsumerCount\"y\n" +
	"\x12DeleteQueueRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tif_unused\x18\x02 \x01(\bR\bifUnused\x12\x19\n" +
	"\bif_empty\x18\x03 \x01(\bR\aifEmpty\x12\x17\n" +
	"\ano_wait\x18\x04 \x01(\bR\x06noWait\":\n" +
	"\x13DeleteQueueResponse\x12#\n" +
	"\rmessage_count\x18\x01 \x01(\x03R\fmessageCount\"6\n" +
	"\x11ListQueuesRequest\x12!\n" +
	"\fname_pattern\x18\x01 \x01(\tR\vnamePattern\">\n" +
	"\x12ListQueuesResponse\x12(\n" +
	"\x06queues\x18\x01 \x03(\v2\x10.queue.QueueInfoR\x06queues\"\xec\x01\n" +
	"\tQueueInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rmessage_count\x18\x02 \x01(\x03R\fmessageCount\x12%\n" +
	"\x0econsumer_count\x18\x03 \x01(\x05R\rconsumerCount\x12@\n" +
	"\n" +
	"properties\x18\x04 \x03(\v2 .queue.QueueInfo.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\x11PurgeQueueRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x17\n" +
	"\ano_wait\x18\x02 \x01(\bR\x06noWait\"9\n" +
	"\x12PurgeQueueResponse\x12#\n" +
	"\rmessage_count\x18\x01 \x01(\x03R\fmessageCount2\xb6\x05\n" +
	"\fQueueService\x128\n" +
	"\aPublish\x12\x15.queue.PublishRequest\x1a\x16.queue.PublishResponse\x12G\n" +
	"\fPublishBatch\x12\x1a.queue.PublishBatchRequest\x1a\x1b.queue.PublishBatchResponse\x126\n" +
	"\tSubscribe\x12\x17.queue.SubscribeRequest\x1a\x0e.queue.Message0\x01\x12D\n" +
	"\vAcknowledge\x12\x19.queue.AcknowledgeRequest\x1a\x1a.queue.AcknowledgeResponse\x12J\n" +
	"\rRejectMessage\x12\x1b.queue.RejectMessageRequest\x1a\x1c.queue.RejectMessageResponse\x12G\n" +
	"\fGetQueueInfo\x12\x1a.queue.GetQueueInfoRequest\x1a\x1b.queue.GetQueueInfoResponse\x12D\n" +
	"\vCreateQueue\x12\x19.queue.CreateQueueRequest\x1a\x1a.queue.CreateQueueResponse\x12D\n" +
	"\vDeleteQueue\x12\x19.queue.DeleteQueueRequest\x1a\x1a.queue.DeleteQueueResponse\x12A\n" +
	"\n" +
	"ListQueues\x12\x18.queue.ListQueuesRequest\x1a\x19.queue.ListQueuesResponse\x12A\n" +
	"\n" +
	"PurgeQueue\x12\x18.queue.PurgeQueueRequest\x1a\x19.queue.PurgeQueueResponseB+Z)github.com/jdfalk/gcommon/pkg/queue/protob\x06proto3"

var (
	file_queue_proto_rawDescOnce sync.Once
	file_queue_proto_rawDescData []byte
)

func file_queue_proto_rawDescGZIP() []byte {
	file_queue_proto_rawDescOnce.Do(func() {
		file_queue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_queue_proto_rawDesc), len(file_queue_proto_rawDesc)))
	})
	return file_queue_proto_rawDescData
}

var file_queue_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_queue_proto_goTypes = []any{
	(*Message)(nil),               // 0: queue.Message
	(*PublishRequest)(nil),        // 1: queue.PublishRequest
	(*PublishResponse)(nil),       // 2: queue.PublishResponse
	(*PublishBatchRequest)(nil),   // 3: queue.PublishBatchRequest
	(*BatchMessage)(nil),          // 4: queue.BatchMessage
	(*PublishBatchResponse)(nil),  // 5: queue.PublishBatchResponse
	(*SubscribeRequest)(nil),      // 6: queue.SubscribeRequest
	(*AcknowledgeRequest)(nil),    // 7: queue.AcknowledgeRequest
	(*AcknowledgeResponse)(nil),   // 8: queue.AcknowledgeResponse
	(*RejectMessageRequest)(nil),  // 9: queue.RejectMessageRequest
	(*RejectMessageResponse)(nil), // 10: queue.RejectMessageResponse
	(*GetQueueInfoRequest)(nil),   // 11: queue.GetQueueInfoRequest
	(*GetQueueInfoResponse)(nil),  // 12: queue.GetQueueInfoResponse
	(*CreateQueueRequest)(nil),    // 13: queue.CreateQueueRequest
	(*CreateQueueResponse)(nil),   // 14: queue.CreateQueueResponse
	(*DeleteQueueRequest)(nil),    // 15: queue.DeleteQueueRequest
	(*DeleteQueueResponse)(nil),   // 16: queue.DeleteQueueResponse
	(*ListQueuesRequest)(nil),     // 17: queue.ListQueuesRequest
	(*ListQueuesResponse)(nil),    // 18: queue.ListQueuesResponse
	(*QueueInfo)(nil),             // 19: queue.QueueInfo
	(*PurgeQueueRequest)(nil),     // 20: queue.PurgeQueueRequest
	(*PurgeQueueResponse)(nil),    // 21: queue.PurgeQueueResponse
	nil,                           // 22: queue.Message.HeadersEntry
	nil,                           // 23: queue.PublishRequest.HeadersEntry
	nil,                           // 24: queue.BatchMessage.HeadersEntry
	nil,                           // 25: queue.SubscribeRequest.ArgumentsEntry
	nil,                           // 26: queue.GetQueueInfoResponse.PropertiesEntry
	nil,                           // 27: queue.CreateQueueRequest.ArgumentsEntry
	nil,                           // 28: queue.QueueInfo.PropertiesEntry
	(*timestamppb.Timestamp)(nil), // 29: google.protobuf.Timestamp
}
var file_queue_proto_depIdxs = []int32{
	22, // 0: queue.Message.headers:type_name -> queue.Message.HeadersEntry
	29, // 1: queue.Message.published_at:type_name -> google.protobuf.Timestamp
	29, // 2: queue.Message.expiration:type_name -> google.protobuf.Timestamp
	29, // 3: queue.Message.timestamp:type_name -> google.protobuf.Timestamp
	23, // 4: queue.PublishRequest.headers:type_name -> queue.PublishRequest.HeadersEntry
	29, // 5: queue.PublishRequest.expiration:type_name -> google.protobuf.Timestamp
	4,  // 6: queue.PublishBatchRequest.messages:type_name -> queue.BatchMessage
	24, // 7: queue.BatchMessage.headers:type_name -> queue.BatchMessage.HeadersEntry
	29, // 8: queue.BatchMessage.expiration:type_name -> google.protobuf.Timestamp
	25, // 9: queue.SubscribeRequest.arguments:type_name -> queue.SubscribeRequest.ArgumentsEntry
	26, // 10: queue.GetQueueInfoResponse.properties:type_name -> queue.GetQueueInfoResponse.PropertiesEntry
	27, // 11: queue.CreateQueueRequest.arguments:type_name -> queue.CreateQueueRequest.ArgumentsEntry
	19, // 12: queue.ListQueuesResponse.queues:type_name -> queue.QueueInfo
	28, // 13: queue.QueueInfo.properties:type_name -> queue.QueueInfo.PropertiesEntry
	1,  // 14: queue.QueueService.Publish:input_type -> queue.PublishRequest
	3,  // 15: queue.QueueService.PublishBatch:input_type -> queue.PublishBatchRequest
	6,  // 16: queue.QueueService.Subscribe:input_type -> queue.SubscribeRequest
	7,  // 17: queue.QueueService.Acknowledge:input_type -> queue.AcknowledgeRequest
	9,  // 18: queue.QueueService.RejectMessage:input_type -> queue.RejectMessageRequest
	11, // 19: queue.QueueService.GetQueueInfo:input_type -> queue.GetQueueInfoRequest
	13, // 20: queue.QueueService.CreateQueue:input_type -> queue.CreateQueueRequest
	15, // 21: queue.QueueService.DeleteQueue:input_type -> queue.DeleteQueueRequest
	17, // 22: queue.QueueService.ListQueues:input_type -> queue.ListQueuesRequest
	20, // 23: queue.QueueService.PurgeQueue:input_type -> queue.PurgeQueueRequest
	2,  // 24: queue.QueueService.Publish:output_type -> queue.PublishResponse
	5,  // 25: queue.QueueService.PublishBatch:output_type -> queue.PublishBatchResponse
	0,  // 26: queue.QueueService.Subscribe:output_type -> queue.Message
	8,  // 27: queue.QueueService.Acknowledge:output_type -> queue.AcknowledgeResponse
	10, // 28: queue.QueueService.RejectMessage:output_type -> queue.RejectMessageResponse
	12, // 29: queue.QueueService.GetQueueInfo:output_type -> queue.GetQueueInfoResponse
	14, // 30: queue.QueueService.CreateQueue:output_type -> queue.CreateQueueResponse
	16, // 31: queue.QueueService.DeleteQueue:output_type -> queue.DeleteQueueResponse
	18, // 32: queue.QueueService.ListQueues:output_type -> queue.ListQueuesResponse
	21, // 33: queue.QueueService.PurgeQueue:output_type -> queue.PurgeQueueResponse
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_queue_proto_init() }
func file_queue_proto_init() {
	if File_queue_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_queue_proto_rawDesc), len(file_queue_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_queue_proto_goTypes,
		DependencyIndexes: file_queue_proto_depIdxs,
		MessageInfos:      file_queue_proto_msgTypes,
	}.Build()
	File_queue_proto = out.File
	file_queue_proto_goTypes = nil
	file_queue_proto_depIdxs = nil
}
