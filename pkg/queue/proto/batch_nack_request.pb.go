// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/queue/proto/batch_nack_request.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BatchNackRequest negatively acknowledges multiple messages at once
type BatchNackRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consumer group ID performing the nack
	ConsumerGroupId *string `protobuf:"bytes,1,opt,name=consumer_group_id,json=consumerGroupId" json:"consumer_group_id,omitempty"`
	// Consumer ID within the group
	ConsumerId *string `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	// Messages to negative acknowledge
	MessageNacks []*MessageNack `protobuf:"bytes,3,rep,name=message_nacks,json=messageNacks" json:"message_nacks,omitempty"`
	// Requeue messages after nack
	RequeueMessages *bool `protobuf:"varint,4,opt,name=requeue_messages,json=requeueMessages" json:"requeue_messages,omitempty"`
	// Delay before requeuing (milliseconds)
	RequeueDelayMs *int64 `protobuf:"varint,5,opt,name=requeue_delay_ms,json=requeueDelayMs" json:"requeue_delay_ms,omitempty"`
	// Maximum number of requeue attempts
	MaxRequeueAttempts *int32 `protobuf:"varint,6,opt,name=max_requeue_attempts,json=maxRequeueAttempts" json:"max_requeue_attempts,omitempty"`
	// Send failed messages to dead letter queue
	SendToDlq *bool `protobuf:"varint,7,opt,name=send_to_dlq,json=sendToDlq" json:"send_to_dlq,omitempty"`
	// Reason for batch nack operation
	NackReason *string `protobuf:"bytes,8,opt,name=nack_reason,json=nackReason" json:"nack_reason,omitempty"`
	// Additional metadata for the nack operation
	Metadata      map[string]string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchNackRequest) Reset() {
	*x = BatchNackRequest{}
	mi := &file_pkg_queue_proto_batch_nack_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchNackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNackRequest) ProtoMessage() {}

func (x *BatchNackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_batch_nack_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNackRequest.ProtoReflect.Descriptor instead.
func (*BatchNackRequest) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_batch_nack_request_proto_rawDescGZIP(), []int{0}
}

func (x *BatchNackRequest) GetConsumerGroupId() string {
	if x != nil && x.ConsumerGroupId != nil {
		return *x.ConsumerGroupId
	}
	return ""
}

func (x *BatchNackRequest) GetConsumerId() string {
	if x != nil && x.ConsumerId != nil {
		return *x.ConsumerId
	}
	return ""
}

func (x *BatchNackRequest) GetMessageNacks() []*MessageNack {
	if x != nil {
		return x.MessageNacks
	}
	return nil
}

func (x *BatchNackRequest) GetRequeueMessages() bool {
	if x != nil && x.RequeueMessages != nil {
		return *x.RequeueMessages
	}
	return false
}

func (x *BatchNackRequest) GetRequeueDelayMs() int64 {
	if x != nil && x.RequeueDelayMs != nil {
		return *x.RequeueDelayMs
	}
	return 0
}

func (x *BatchNackRequest) GetMaxRequeueAttempts() int32 {
	if x != nil && x.MaxRequeueAttempts != nil {
		return *x.MaxRequeueAttempts
	}
	return 0
}

func (x *BatchNackRequest) GetSendToDlq() bool {
	if x != nil && x.SendToDlq != nil {
		return *x.SendToDlq
	}
	return false
}

func (x *BatchNackRequest) GetNackReason() string {
	if x != nil && x.NackReason != nil {
		return *x.NackReason
	}
	return ""
}

func (x *BatchNackRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Individual message negative acknowledgment
type MessageNack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message identifier
	MessageId *string `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	// Message delivery tag
	DeliveryTag *string `protobuf:"bytes,2,opt,name=delivery_tag,json=deliveryTag" json:"delivery_tag,omitempty"`
	// Partition ID containing the message
	PartitionId *int32 `protobuf:"varint,3,opt,name=partition_id,json=partitionId" json:"partition_id,omitempty"`
	// Message offset
	MessageOffset *int64 `protobuf:"varint,4,opt,name=message_offset,json=messageOffset" json:"message_offset,omitempty"`
	// Reason for negative acknowledgment
	NackReason *string `protobuf:"bytes,5,opt,name=nack_reason,json=nackReason" json:"nack_reason,omitempty"`
	// Error category for the nack
	ErrorCategory *NackErrorCategory `protobuf:"varint,6,opt,name=error_category,json=errorCategory,enum=gcommon.v1.queue.NackErrorCategory" json:"error_category,omitempty"`
	// Specific error code
	ErrorCode *string `protobuf:"bytes,7,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Retry this specific message
	RetryMessage *bool `protobuf:"varint,8,opt,name=retry_message,json=retryMessage" json:"retry_message,omitempty"`
	// Custom retry delay for this message (milliseconds)
	RetryDelayMs *int64 `protobuf:"varint,9,opt,name=retry_delay_ms,json=retryDelayMs" json:"retry_delay_ms,omitempty"`
	// Message-specific metadata
	MessageMetadata map[string]string `protobuf:"bytes,10,rep,name=message_metadata,json=messageMetadata" json:"message_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessageNack) Reset() {
	*x = MessageNack{}
	mi := &file_pkg_queue_proto_batch_nack_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageNack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNack) ProtoMessage() {}

func (x *MessageNack) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_batch_nack_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNack.ProtoReflect.Descriptor instead.
func (*MessageNack) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_batch_nack_request_proto_rawDescGZIP(), []int{1}
}

func (x *MessageNack) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *MessageNack) GetDeliveryTag() string {
	if x != nil && x.DeliveryTag != nil {
		return *x.DeliveryTag
	}
	return ""
}

func (x *MessageNack) GetPartitionId() int32 {
	if x != nil && x.PartitionId != nil {
		return *x.PartitionId
	}
	return 0
}

func (x *MessageNack) GetMessageOffset() int64 {
	if x != nil && x.MessageOffset != nil {
		return *x.MessageOffset
	}
	return 0
}

func (x *MessageNack) GetNackReason() string {
	if x != nil && x.NackReason != nil {
		return *x.NackReason
	}
	return ""
}

func (x *MessageNack) GetErrorCategory() NackErrorCategory {
	if x != nil && x.ErrorCategory != nil {
		return *x.ErrorCategory
	}
	return NackErrorCategory_NACK_ERROR_CATEGORY_UNSPECIFIED
}

func (x *MessageNack) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

func (x *MessageNack) GetRetryMessage() bool {
	if x != nil && x.RetryMessage != nil {
		return *x.RetryMessage
	}
	return false
}

func (x *MessageNack) GetRetryDelayMs() int64 {
	if x != nil && x.RetryDelayMs != nil {
		return *x.RetryDelayMs
	}
	return 0
}

func (x *MessageNack) GetMessageMetadata() map[string]string {
	if x != nil {
		return x.MessageMetadata
	}
	return nil
}

var File_pkg_queue_proto_batch_nack_request_proto protoreflect.FileDescriptor

const file_pkg_queue_proto_batch_nack_request_proto_rawDesc = "" +
	"\n" +
	"(pkg/queue/proto/batch_nack_request.proto\x12\x10gcommon.v1.queue\x1a)pkg/queue/proto/nack_error_category.proto\"\xf6\x03\n" +
	"\x10BatchNackRequest\x12*\n" +
	"\x11consumer_group_id\x18\x01 \x01(\tR\x0fconsumerGroupId\x12\x1f\n" +
	"\vconsumer_id\x18\x02 \x01(\tR\n" +
	"consumerId\x12B\n" +
	"\rmessage_nacks\x18\x03 \x03(\v2\x1d.gcommon.v1.queue.MessageNackR\fmessageNacks\x12)\n" +
	"\x10requeue_messages\x18\x04 \x01(\bR\x0frequeueMessages\x12(\n" +
	"\x10requeue_delay_ms\x18\x05 \x01(\x03R\x0erequeueDelayMs\x120\n" +
	"\x14max_requeue_attempts\x18\x06 \x01(\x05R\x12maxRequeueAttempts\x12\x1e\n" +
	"\vsend_to_dlq\x18\a \x01(\bR\tsendToDlq\x12\x1f\n" +
	"\vnack_reason\x18\b \x01(\tR\n" +
	"nackReason\x12L\n" +
	"\bmetadata\x18\t \x03(\v20.gcommon.v1.queue.BatchNackRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x04\n" +
	"\vMessageNack\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12!\n" +
	"\fdelivery_tag\x18\x02 \x01(\tR\vdeliveryTag\x12!\n" +
	"\fpartition_id\x18\x03 \x01(\x05R\vpartitionId\x12%\n" +
	"\x0emessage_offset\x18\x04 \x01(\x03R\rmessageOffset\x12\x1f\n" +
	"\vnack_reason\x18\x05 \x01(\tR\n" +
	"nackReason\x12J\n" +
	"\x0eerror_category\x18\x06 \x01(\x0e2#.gcommon.v1.queue.NackErrorCategoryR\rerrorCategory\x12\x1d\n" +
	"\n" +
	"error_code\x18\a \x01(\tR\terrorCode\x12#\n" +
	"\rretry_message\x18\b \x01(\bR\fretryMessage\x12$\n" +
	"\x0eretry_delay_ms\x18\t \x01(\x03R\fretryDelayMs\x12]\n" +
	"\x10message_metadata\x18\n" +
	" \x03(\v22.gcommon.v1.queue.MessageNack.MessageMetadataEntryR\x0fmessageMetadata\x1aB\n" +
	"\x14MessageMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xba\x01\n" +
	"\x14com.gcommon.v1.queueB\x15BatchNackRequestProtoP\x01Z)github.com/jdfalk/gcommon/pkg/queue/proto\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queueb\beditionsp\xe8\a"

var (
	file_pkg_queue_proto_batch_nack_request_proto_rawDescOnce sync.Once
	file_pkg_queue_proto_batch_nack_request_proto_rawDescData []byte
)

func file_pkg_queue_proto_batch_nack_request_proto_rawDescGZIP() []byte {
	file_pkg_queue_proto_batch_nack_request_proto_rawDescOnce.Do(func() {
		file_pkg_queue_proto_batch_nack_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_batch_nack_request_proto_rawDesc), len(file_pkg_queue_proto_batch_nack_request_proto_rawDesc)))
	})
	return file_pkg_queue_proto_batch_nack_request_proto_rawDescData
}

var file_pkg_queue_proto_batch_nack_request_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_pkg_queue_proto_batch_nack_request_proto_goTypes = []any{
	(*BatchNackRequest)(nil), // 0: gcommon.v1.queue.BatchNackRequest
	(*MessageNack)(nil),      // 1: gcommon.v1.queue.MessageNack
	nil,                      // 2: gcommon.v1.queue.BatchNackRequest.MetadataEntry
	nil,                      // 3: gcommon.v1.queue.MessageNack.MessageMetadataEntry
	(NackErrorCategory)(0),   // 4: gcommon.v1.queue.NackErrorCategory
}
var file_pkg_queue_proto_batch_nack_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.BatchNackRequest.message_nacks:type_name -> gcommon.v1.queue.MessageNack
	2, // 1: gcommon.v1.queue.BatchNackRequest.metadata:type_name -> gcommon.v1.queue.BatchNackRequest.MetadataEntry
	4, // 2: gcommon.v1.queue.MessageNack.error_category:type_name -> gcommon.v1.queue.NackErrorCategory
	3, // 3: gcommon.v1.queue.MessageNack.message_metadata:type_name -> gcommon.v1.queue.MessageNack.MessageMetadataEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkg_queue_proto_batch_nack_request_proto_init() }
func file_pkg_queue_proto_batch_nack_request_proto_init() {
	if File_pkg_queue_proto_batch_nack_request_proto != nil {
		return
	}
	file_pkg_queue_proto_nack_error_category_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_batch_nack_request_proto_rawDesc), len(file_pkg_queue_proto_batch_nack_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_queue_proto_batch_nack_request_proto_goTypes,
		DependencyIndexes: file_pkg_queue_proto_batch_nack_request_proto_depIdxs,
		MessageInfos:      file_pkg_queue_proto_batch_nack_request_proto_msgTypes,
	}.Build()
	File_pkg_queue_proto_batch_nack_request_proto = out.File
	file_pkg_queue_proto_batch_nack_request_proto_goTypes = nil
	file_pkg_queue_proto_batch_nack_request_proto_depIdxs = nil
}
