// file: pkg/queue/proto/queue.proto
edition = "2023";

package gcommon.v1.queue;

import "pkg/common/proto/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/go_features.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto;queuepb";
option features.(pb.go).api_level = API_HYBRID;

// QueueService provides message queuing and pub/sub functionality
service QueueService {
  // Send a message to a queue
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  // Send multiple messages in batch
  rpc SendMessages(SendMessagesRequest) returns (SendMessagesResponse);

  // Receive a message from a queue
  rpc ReceiveMessage(ReceiveMessageRequest) returns (ReceiveMessageResponse);

  // Receive multiple messages in batch
  rpc ReceiveMessages(ReceiveMessagesRequest) returns (ReceiveMessagesResponse);

  // Acknowledge message processing
  rpc AckMessage(AckMessageRequest) returns (AckMessageResponse);

  // Negative acknowledge message (requeue)
  rpc NackMessage(NackMessageRequest) returns (NackMessageResponse);

  // Publish a message to a topic
  rpc Publish(PublishRequest) returns (PublishResponse);

  // Subscribe to a topic
  rpc Subscribe(SubscribeRequest) returns (stream MessageEvent);

  // Unsubscribe from a topic
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);

  // Get message by ID
  rpc GetMessage(GetMessageRequest) returns (GetMessageResponse);

  // List messages in a queue
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);

  // Get queue statistics
  rpc GetQueueStats(GetQueueStatsRequest) returns (GetQueueStatsResponse);

  // Get subscription statistics
  rpc GetSubscriptionStats(GetSubscriptionStatsRequest) returns (GetSubscriptionStatsResponse);
}

// QueueAdminService provides queue administration and management
service QueueAdminService {
  // Create a queue
  rpc CreateQueue(CreateQueueRequest) returns (CreateQueueResponse);

  // Update a queue
  rpc UpdateQueue(UpdateQueueRequest) returns (UpdateQueueResponse);

  // Delete a queue
  rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse);

  // List queues
  rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse);

  // Create a topic
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);

  // Update a topic
  rpc UpdateTopic(UpdateTopicRequest) returns (UpdateTopicResponse);

  // Delete a topic
  rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse);

  // List topics
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse);

  // Create a subscription
  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);

  // Update a subscription
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse);

  // Delete a subscription
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (DeleteSubscriptionResponse);

  // List subscriptions
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);

  // Purge messages from a queue
  rpc PurgeQueue(PurgeQueueRequest) returns (PurgeQueueResponse);

  // Get dead letter queue messages
  rpc GetDeadLetterMessages(GetDeadLetterMessagesRequest) returns (GetDeadLetterMessagesResponse);

  // Requeue dead letter messages
  rpc RequeueDeadLetterMessages(RequeueDeadLetterMessagesRequest) returns (RequeueDeadLetterMessagesResponse);

  // Get system health
  rpc GetSystemHealth(GetSystemHealthRequest) returns (GetSystemHealthResponse);
}

// WorkflowService provides workflow orchestration functionality
service WorkflowService {
  // Start a workflow
  rpc StartWorkflow(StartWorkflowRequest) returns (StartWorkflowResponse);

  // Get workflow status
  rpc GetWorkflow(GetWorkflowRequest) returns (GetWorkflowResponse);

  // List workflows
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse);

  // Cancel a workflow
  rpc CancelWorkflow(CancelWorkflowRequest) returns (CancelWorkflowResponse);

  // Pause a workflow
  rpc PauseWorkflow(PauseWorkflowRequest) returns (PauseWorkflowResponse);

  // Resume a workflow
  rpc ResumeWorkflow(ResumeWorkflowRequest) returns (ResumeWorkflowResponse);

  // Complete a task
  rpc CompleteTask(CompleteTaskRequest) returns (CompleteTaskResponse);

  // Fail a task
  rpc FailTask(FailTaskRequest) returns (FailTaskResponse);

  // Get task status
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse);

  // List tasks
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
}

// Send message request
message SendMessageRequest {
  // Queue name
  string queue_name = 1;

  // Message to send
  QueueMessage message = 2;

  // Delivery options
  DeliveryOptions delivery_options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Queue message
message QueueMessage {
  // Message ID (auto-generated if not provided)
  string id = 1;

  // Message body
  google.protobuf.Any body = 2;

  // Message attributes
  map<string, string> attributes = 3;

  // Message headers
  map<string, string> headers = 4;

  // Message priority (0-255, higher is higher priority)
  int32 priority = 5;

  // Message expiration time
  google.protobuf.Timestamp expires_at = 6;

  // Correlation ID
  string correlation_id = 7;

  // Reply-to queue
  string reply_to = 8;

  // Content type
  string content_type = 9;

  // Content encoding
  string content_encoding = 10;

  // Timestamp when message was created
  google.protobuf.Timestamp created_at = 11;
}

// Delivery options
message DeliveryOptions {
  // Delay before delivery
  google.protobuf.Duration delay = 1;

  // Maximum retry attempts
  int32 max_retries = 2;

  // Retry delay
  google.protobuf.Duration retry_delay = 3;

  // Exponential backoff multiplier
  double backoff_multiplier = 4;

  // Maximum retry delay
  google.protobuf.Duration max_retry_delay = 5;

  // Dead letter queue name
  string dead_letter_queue = 6;

  // Require acknowledgment
  bool require_ack = 7;

  // Acknowledgment timeout
  google.protobuf.Duration ack_timeout = 8;
}

// Send message response
message SendMessageResponse {
  // Message ID
  string message_id = 1;

  // Success status
  bool success = 2;

  // Queue position (if applicable)
  int64 queue_position = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Send messages request (batch)
message SendMessagesRequest {
  // Queue name
  string queue_name = 1;

  // Messages to send
  repeated QueueMessage messages = 2;

  // Default delivery options
  DeliveryOptions delivery_options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Send messages response (batch)
message SendMessagesResponse {
  // Successfully sent message IDs
  repeated string message_ids = 1;

  // Failed messages with errors
  repeated MessageError failed_messages = 2;

  // Total sent count
  int32 sent_count = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Message error information
message MessageError {
  // Message ID or index
  string message_id = 1;

  // Error message
  string error_message = 2;

  // Error code
  string error_code = 3;
}

// Receive message request
message ReceiveMessageRequest {
  // Queue name
  string queue_name = 1;

  // Receive options
  ReceiveOptions receive_options = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Receive options
message ReceiveOptions {
  // Maximum messages to receive
  int32 max_messages = 1;

  // Visibility timeout
  google.protobuf.Duration visibility_timeout = 2;

  // Wait time for long polling
  google.protobuf.Duration wait_time = 3;

  // Message attributes to include
  repeated string attribute_names = 4;

  // Auto-acknowledge messages
  bool auto_ack = 5;
}

// Receive message response
message ReceiveMessageResponse {
  // Received message
  ReceivedMessage message = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Received message
message ReceivedMessage {
  // Original message
  QueueMessage message = 1;

  // Receipt handle for acknowledgment
  string receipt_handle = 2;

  // Delivery count
  int32 delivery_count = 3;

  // First delivery time
  google.protobuf.Timestamp first_delivered_at = 4;

  // Current delivery time
  google.protobuf.Timestamp delivered_at = 5;

  // Message visibility timeout
  google.protobuf.Timestamp visible_after = 6;
}

// Receive messages request (batch)
message ReceiveMessagesRequest {
  // Queue name
  string queue_name = 1;

  // Receive options
  ReceiveOptions receive_options = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Receive messages response (batch)
message ReceiveMessagesResponse {
  // Received messages
  repeated ReceivedMessage messages = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Acknowledge message request
message AckMessageRequest {
  // Queue name
  string queue_name = 1;

  // Receipt handle
  string receipt_handle = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Acknowledge message response
message AckMessageResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Negative acknowledge message request
message NackMessageRequest {
  // Queue name
  string queue_name = 1;

  // Receipt handle
  string receipt_handle = 2;

  // Requeue delay
  google.protobuf.Duration requeue_delay = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Negative acknowledge message response
message NackMessageResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Publish request
message PublishRequest {
  // Topic name
  string topic_name = 1;

  // Message to publish
  PubSubMessage message = 2;

  // Publish options
  PublishOptions publish_options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Pub/Sub message
message PubSubMessage {
  // Message ID (auto-generated if not provided)
  string id = 1;

  // Message data
  google.protobuf.Any data = 2;

  // Message attributes
  map<string, string> attributes = 3;

  // Ordering key for ordered delivery
  string ordering_key = 4;

  // Message timestamp
  google.protobuf.Timestamp published_at = 5;
}

// Publish options
message PublishOptions {
  // Ordering required
  bool ordering_required = 1;

  // Batch publish
  bool enable_batching = 2;

  // Batch size
  int32 batch_size = 3;

  // Batch timeout
  google.protobuf.Duration batch_timeout = 4;
}

// Publish response
message PublishResponse {
  // Message ID
  string message_id = 1;

  // Success status
  bool success = 2;

  // Publish timestamp
  google.protobuf.Timestamp published_at = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Subscribe request
message SubscribeRequest {
  // Subscription name
  string subscription_name = 1;

  // Subscribe options
  SubscribeOptions subscribe_options = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Subscribe options
message SubscribeOptions {
  // Maximum outstanding messages
  int32 max_outstanding_messages = 1;

  // Maximum outstanding bytes
  int64 max_outstanding_bytes = 2;

  // Flow control settings
  FlowControlSettings flow_control = 3;

  // Acknowledgment deadline
  google.protobuf.Duration ack_deadline = 4;

  // Auto-extend acknowledgment deadline
  bool auto_extend_ack_deadline = 5;
}

// Flow control settings
message FlowControlSettings {
  // Maximum outstanding messages per subscription
  int32 max_outstanding_messages = 1;

  // Maximum outstanding bytes per subscription
  int64 max_outstanding_bytes = 2;

  // Limit exceeded behavior
  FlowControlBehavior limit_exceeded_behavior = 3;
}

// Flow control behavior enumeration
enum FlowControlBehavior {
  FLOW_CONTROL_BEHAVIOR_UNSPECIFIED = 0;
  FLOW_CONTROL_BEHAVIOR_IGNORE = 1;
  FLOW_CONTROL_BEHAVIOR_BLOCK = 2;
  FLOW_CONTROL_BEHAVIOR_SIGNAL_ERROR = 3;
}

// Message event (streaming response)
message MessageEvent {
  // Event type
  MessageEventType event_type = 1;

  // Pub/Sub message (for MESSAGE event)
  ReceivedPubSubMessage message = 2;

  // Error information (for ERROR event)
  gcommon.v1.common.Error error = 3;

  // Status information (for STATUS event)
  SubscriptionStatus status = 4;
}

// Message event type enumeration
enum MessageEventType {
  MESSAGE_EVENT_TYPE_UNSPECIFIED = 0;
  MESSAGE_EVENT_TYPE_MESSAGE = 1;
  MESSAGE_EVENT_TYPE_ERROR = 2;
  MESSAGE_EVENT_TYPE_STATUS = 3;
  MESSAGE_EVENT_TYPE_HEARTBEAT = 4;
}

// Received pub/sub message
message ReceivedPubSubMessage {
  // Original message
  PubSubMessage message = 1;

  // Acknowledgment ID
  string ack_id = 2;

  // Delivery attempt
  int32 delivery_attempt = 3;

  // Delivery timestamp
  google.protobuf.Timestamp delivered_at = 4;

  // Acknowledgment deadline
  google.protobuf.Timestamp ack_deadline = 5;
}

// Subscription status
message SubscriptionStatus {
  // Subscription name
  string subscription_name = 1;

  // Connection status
  ConnectionStatus connection_status = 2;

  // Outstanding messages
  int32 outstanding_messages = 3;

  // Outstanding bytes
  int64 outstanding_bytes = 4;

  // Last activity timestamp
  google.protobuf.Timestamp last_activity = 5;
}

// Connection status enumeration
enum ConnectionStatus {
  CONNECTION_STATUS_UNSPECIFIED = 0;
  CONNECTION_STATUS_CONNECTING = 1;
  CONNECTION_STATUS_CONNECTED = 2;
  CONNECTION_STATUS_DISCONNECTED = 3;
  CONNECTION_STATUS_ERROR = 4;
}

// Unsubscribe request
message UnsubscribeRequest {
  // Subscription name
  string subscription_name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Unsubscribe response
message UnsubscribeResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Get message request
message GetMessageRequest {
  // Queue name
  string queue_name = 1;

  // Message ID
  string message_id = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Get message response
message GetMessageResponse {
  // Message
  QueueMessage message = 1;

  // Message status
  MessageStatus status = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Message status
message MessageStatus {
  // Current state
  MessageState state = 1;

  // Delivery count
  int32 delivery_count = 2;

  // Created timestamp
  google.protobuf.Timestamp created_at = 3;

  // Last delivery timestamp
  google.protobuf.Timestamp last_delivered_at = 4;

  // Visibility timeout
  google.protobuf.Timestamp visible_after = 5;

  // Retry information
  RetryInfo retry_info = 6;
}

// Message state enumeration
enum MessageState {
  MESSAGE_STATE_UNSPECIFIED = 0;
  MESSAGE_STATE_PENDING = 1;
  MESSAGE_STATE_DELIVERED = 2;
  MESSAGE_STATE_ACKNOWLEDGED = 3;
  MESSAGE_STATE_FAILED = 4;
  MESSAGE_STATE_DEAD_LETTER = 5;
  MESSAGE_STATE_EXPIRED = 6;
}

// Retry information
message RetryInfo {
  // Current retry attempt
  int32 current_attempt = 1;

  // Maximum retry attempts
  int32 max_attempts = 2;

  // Next retry time
  google.protobuf.Timestamp next_retry_at = 3;

  // Retry delay
  google.protobuf.Duration retry_delay = 4;

  // Last error message
  string last_error = 5;
}

// List messages request
message ListMessagesRequest {
  // Queue name
  string queue_name = 1;

  // Message state filter
  MessageState state = 2;

  // Time range filter
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 5;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 6;
}

// List messages response
message ListMessagesResponse {
  // Messages
  repeated QueueMessage messages = 1;

  // Message statuses
  repeated MessageStatus statuses = 2;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Get queue stats request
message GetQueueStatsRequest {
  // Queue name
  string queue_name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get queue stats response
message GetQueueStatsResponse {
  // Queue statistics
  QueueStats stats = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Queue statistics
message QueueStats {
  // Queue name
  string queue_name = 1;

  // Message counts by state
  map<string, int64> message_counts = 2;

  // Total messages
  int64 total_messages = 3;

  // Messages in flight
  int64 messages_in_flight = 4;

  // Average message size
  int64 avg_message_size_bytes = 5;

  // Total queue size
  int64 total_size_bytes = 6;

  // Oldest message age
  google.protobuf.Duration oldest_message_age = 7;

  // Throughput statistics
  ThroughputStats throughput = 8;

  // Error statistics
  ErrorStats errors = 9;
}

// Throughput statistics
message ThroughputStats {
  // Messages per second (current)
  double messages_per_second = 1;

  // Bytes per second (current)
  double bytes_per_second = 2;

  // Average processing time
  google.protobuf.Duration avg_processing_time = 3;

  // Peak messages per second (last hour)
  double peak_messages_per_second = 4;

  // Peak bytes per second (last hour)
  double peak_bytes_per_second = 5;
}

// Error statistics
message ErrorStats {
  // Total errors
  int64 total_errors = 1;

  // Error rate (errors per second)
  double error_rate = 2;

  // Common error types
  map<string, int64> error_types = 3;

  // Recent errors
  repeated RecentError recent_errors = 4;
}

// Recent error information
message RecentError {
  // Error message
  string message = 1;

  // Error type
  string type = 2;

  // Occurrence count
  int32 count = 3;

  // Last occurrence
  google.protobuf.Timestamp last_occurrence = 4;
}

// Get subscription stats request
message GetSubscriptionStatsRequest {
  // Subscription name
  string subscription_name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get subscription stats response
message GetSubscriptionStatsResponse {
  // Subscription statistics
  SubscriptionStats stats = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Subscription statistics
message SubscriptionStats {
  // Subscription name
  string subscription_name = 1;

  // Topic name
  string topic_name = 2;

  // Active subscribers
  int32 active_subscribers = 3;

  // Total messages delivered
  int64 total_messages_delivered = 4;

  // Messages pending acknowledgment
  int64 messages_pending_ack = 5;

  // Average acknowledgment time
  google.protobuf.Duration avg_ack_time = 6;

  // Delivery statistics
  DeliveryStats delivery = 7;

  // Backlog information
  BacklogInfo backlog = 8;
}

// Delivery statistics
message DeliveryStats {
  // Successful deliveries
  int64 successful_deliveries = 1;

  // Failed deliveries
  int64 failed_deliveries = 2;

  // Duplicate deliveries
  int64 duplicate_deliveries = 3;

  // Average delivery latency
  google.protobuf.Duration avg_delivery_latency = 4;

  // Delivery rate (messages per second)
  double delivery_rate = 5;
}

// Backlog information
message BacklogInfo {
  // Total backlog size
  int64 total_messages = 1;

  // Backlog size in bytes
  int64 total_size_bytes = 2;

  // Oldest undelivered message age
  google.protobuf.Duration oldest_undelivered_age = 3;

  // Estimated processing time
  google.protobuf.Duration estimated_processing_time = 4;
}

// Admin service messages
message CreateQueueRequest {
  // Queue configuration
  QueueConfig config = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Queue configuration
message QueueConfig {
  // Queue name
  string name = 1;

  // Queue type
  QueueType type = 2;

  // Maximum message size
  int64 max_message_size_bytes = 3;

  // Message retention period
  google.protobuf.Duration message_retention = 4;

  // Visibility timeout
  google.protobuf.Duration visibility_timeout = 5;

  // Dead letter queue configuration
  DeadLetterQueueConfig dead_letter_queue = 6;

  // Queue attributes
  map<string, string> attributes = 7;

  // Access policy
  AccessPolicy access_policy = 8;
}

// Queue type enumeration
enum QueueType {
  QUEUE_TYPE_UNSPECIFIED = 0;
  QUEUE_TYPE_STANDARD = 1;
  QUEUE_TYPE_FIFO = 2;
  QUEUE_TYPE_PRIORITY = 3;
  QUEUE_TYPE_DELAY = 4;
}

// Dead letter queue configuration
message DeadLetterQueueConfig {
  // Target queue name
  string target_queue = 1;

  // Maximum receive count before moving to DLQ
  int32 max_receive_count = 2;

  // Enable dead letter queue
  bool enabled = 3;
}

// Access policy
message AccessPolicy {
  // Allowed operations
  repeated QueueOperation allowed_operations = 1;

  // Principal identifiers
  repeated string principals = 2;

  // Conditions
  map<string, string> conditions = 3;
}

// Queue operation enumeration
enum QueueOperation {
  QUEUE_OPERATION_UNSPECIFIED = 0;
  QUEUE_OPERATION_SEND_MESSAGE = 1;
  QUEUE_OPERATION_RECEIVE_MESSAGE = 2;
  QUEUE_OPERATION_DELETE_MESSAGE = 3;
  QUEUE_OPERATION_GET_QUEUE_ATTRIBUTES = 4;
  QUEUE_OPERATION_SET_QUEUE_ATTRIBUTES = 5;
}

// Create queue response
message CreateQueueResponse {
  // Success status
  bool success = 1;

  // Created queue information
  QueueInfo queue = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Queue information
message QueueInfo {
  // Queue configuration
  QueueConfig config = 1;

  // Queue statistics
  QueueStats stats = 2;

  // Creation time
  google.protobuf.Timestamp created_at = 3;

  // Last updated time
  google.protobuf.Timestamp updated_at = 4;

  // Queue status
  QueueStatus status = 5;
}

// Queue status enumeration
enum QueueStatus {
  QUEUE_STATUS_UNSPECIFIED = 0;
  QUEUE_STATUS_ACTIVE = 1;
  QUEUE_STATUS_INACTIVE = 2;
  QUEUE_STATUS_DELETING = 3;
  QUEUE_STATUS_ERROR = 4;
}

// Update queue request
message UpdateQueueRequest {
  // Queue name
  string name = 1;

  // Updated configuration
  QueueConfig config = 2;

  // Field mask for partial updates
  google.protobuf.FieldMask update_mask = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Update queue response
message UpdateQueueResponse {
  // Success status
  bool success = 1;

  // Updated queue information
  QueueInfo queue = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete queue request
message DeleteQueueRequest {
  // Queue name
  string name = 1;

  // Force delete even if not empty
  bool force = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// List queues request
message ListQueuesRequest {
  // Name pattern filter
  string name_pattern = 1;

  // Queue type filter
  QueueType type = 2;

  // Status filter
  QueueStatus status = 3;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// List queues response
message ListQueuesResponse {
  // Queue information
  repeated QueueInfo queues = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Create topic request
message CreateTopicRequest {
  // Topic configuration
  TopicConfig config = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Topic configuration
message TopicConfig {
  // Topic name
  string name = 1;

  // Message retention period
  google.protobuf.Duration message_retention = 2;

  // Partition count
  int32 partition_count = 3;

  // Replication factor
  int32 replication_factor = 4;

  // Topic attributes
  map<string, string> attributes = 5;

  // Schema configuration
  SchemaConfig schema = 6;

  // Access policy
  AccessPolicy access_policy = 7;
}

// Schema configuration
message SchemaConfig {
  // Schema type
  SchemaType type = 1;

  // Schema definition
  string definition = 2;

  // Schema version
  string version = 3;

  // Backward compatibility
  bool backward_compatible = 4;
}

// Schema type enumeration
enum SchemaType {
  SCHEMA_TYPE_UNSPECIFIED = 0;
  SCHEMA_TYPE_AVRO = 1;
  SCHEMA_TYPE_JSON = 2;
  SCHEMA_TYPE_PROTOBUF = 3;
}

// Create topic response
message CreateTopicResponse {
  // Success status
  bool success = 1;

  // Created topic information
  TopicInfo topic = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Topic information
message TopicInfo {
  // Topic configuration
  TopicConfig config = 1;

  // Topic statistics
  TopicStats stats = 2;

  // Creation time
  google.protobuf.Timestamp created_at = 3;

  // Last updated time
  google.protobuf.Timestamp updated_at = 4;

  // Topic status
  TopicStatus status = 5;
}

// Topic statistics
message TopicStats {
  // Total messages
  int64 total_messages = 1;

  // Total size in bytes
  int64 total_size_bytes = 2;

  // Messages per second
  double messages_per_second = 3;

  // Active subscriptions
  int32 active_subscriptions = 4;

  // Partition statistics
  repeated PartitionStats partitions = 5;
}

// Partition statistics
message PartitionStats {
  // Partition ID
  int32 partition_id = 1;

  // Message count
  int64 message_count = 2;

  // Size in bytes
  int64 size_bytes = 3;

  // Leader replica
  string leader_replica = 4;

  // Lag information
  int64 lag = 5;
}

// Topic status enumeration
enum TopicStatus {
  TOPIC_STATUS_UNSPECIFIED = 0;
  TOPIC_STATUS_ACTIVE = 1;
  TOPIC_STATUS_INACTIVE = 2;
  TOPIC_STATUS_DELETING = 3;
  TOPIC_STATUS_ERROR = 4;
}

// Update topic request
message UpdateTopicRequest {
  // Topic name
  string name = 1;

  // Updated configuration
  TopicConfig config = 2;

  // Field mask for partial updates
  google.protobuf.FieldMask update_mask = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Update topic response
message UpdateTopicResponse {
  // Success status
  bool success = 1;

  // Updated topic information
  TopicInfo topic = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete topic request
message DeleteTopicRequest {
  // Topic name
  string name = 1;

  // Force delete even with active subscriptions
  bool force = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// List topics request
message ListTopicsRequest {
  // Name pattern filter
  string name_pattern = 1;

  // Status filter
  TopicStatus status = 2;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// List topics response
message ListTopicsResponse {
  // Topic information
  repeated TopicInfo topics = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Create subscription request
message CreateSubscriptionRequest {
  // Subscription configuration
  SubscriptionConfig config = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Subscription configuration
message SubscriptionConfig {
  // Subscription name
  string name = 1;

  // Topic name
  string topic_name = 2;

  // Acknowledgment deadline
  google.protobuf.Duration ack_deadline = 3;

  // Message retention duration
  google.protobuf.Duration message_retention = 4;

  // Retry policy
  RetryPolicy retry_policy = 5;

  // Dead letter policy
  DeadLetterPolicy dead_letter_policy = 6;

  // Filter expression
  string filter = 7;

  // Push configuration
  PushConfig push_config = 8;

  // Subscription attributes
  map<string, string> attributes = 9;
}

// Retry policy
message RetryPolicy {
  // Minimum delay between retries
  google.protobuf.Duration minimum_backoff = 1;

  // Maximum delay between retries
  google.protobuf.Duration maximum_backoff = 2;

  // Maximum retry attempts
  int32 maximum_attempts = 3;

  // Backoff multiplier
  double backoff_multiplier = 4;
}

// Dead letter policy
message DeadLetterPolicy {
  // Dead letter topic
  string dead_letter_topic = 1;

  // Maximum delivery attempts
  int32 max_delivery_attempts = 2;
}

// Push configuration
message PushConfig {
  // Push endpoint URL
  string push_endpoint = 1;

  // Authentication configuration
  AuthConfig auth_config = 2;

  // Push attributes
  map<string, string> attributes = 3;
}

// Authentication configuration
message AuthConfig {
  // Authentication type
  AuthType auth_type = 1;

  // Token or credentials
  string token = 2;

  // Additional auth parameters
  map<string, string> parameters = 3;
}

// Authentication type enumeration
enum AuthType {
  AUTH_TYPE_UNSPECIFIED = 0;
  AUTH_TYPE_NONE = 1;
  AUTH_TYPE_BASIC = 2;
  AUTH_TYPE_BEARER = 3;
  AUTH_TYPE_OAUTH2 = 4;
}

// Create subscription response
message CreateSubscriptionResponse {
  // Success status
  bool success = 1;

  // Created subscription information
  SubscriptionInfo subscription = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Subscription information
message SubscriptionInfo {
  // Subscription configuration
  SubscriptionConfig config = 1;

  // Subscription statistics
  SubscriptionStats stats = 2;

  // Creation time
  google.protobuf.Timestamp created_at = 3;

  // Last updated time
  google.protobuf.Timestamp updated_at = 4;

  // Subscription status
  SubscriptionStatus status = 5;
}

// Update subscription request
message UpdateSubscriptionRequest {
  // Subscription name
  string name = 1;

  // Updated configuration
  SubscriptionConfig config = 2;

  // Field mask for partial updates
  google.protobuf.FieldMask update_mask = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Update subscription response
message UpdateSubscriptionResponse {
  // Success status
  bool success = 1;

  // Updated subscription information
  SubscriptionInfo subscription = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete subscription request
message DeleteSubscriptionRequest {
  // Subscription name
  string name = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// List subscriptions request
message ListSubscriptionsRequest {
  // Topic name filter
  string topic_name = 1;

  // Name pattern filter
  string name_pattern = 2;

  // Status filter
  SubscriptionStatus status = 3;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// List subscriptions response
message ListSubscriptionsResponse {
  // Subscription information
  repeated SubscriptionInfo subscriptions = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Purge queue request
message PurgeQueueRequest {
  // Queue name
  string queue_name = 1;

  // Purge criteria
  PurgeQueueCriteria criteria = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Purge queue criteria
message PurgeQueueCriteria {
  // Purge all messages
  bool purge_all = 1;

  // Purge messages older than
  google.protobuf.Duration older_than = 2;

  // Purge by message state
  repeated MessageState states = 3;

  // Purge by attributes
  map<string, string> attribute_filters = 4;
}

// Purge queue response
message PurgeQueueResponse {
  // Number of messages purged
  int64 messages_purged = 1;

  // Success status
  bool success = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Get dead letter messages request
message GetDeadLetterMessagesRequest {
  // Dead letter queue name
  string queue_name = 1;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Get dead letter messages response
message GetDeadLetterMessagesResponse {
  // Dead letter messages
  repeated DeadLetterMessage messages = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Dead letter message
message DeadLetterMessage {
  // Original message
  QueueMessage message = 1;

  // Source queue
  string source_queue = 2;

  // Failure reason
  string failure_reason = 3;

  // Number of delivery attempts
  int32 delivery_attempts = 4;

  // First failure time
  google.protobuf.Timestamp first_failed_at = 5;

  // Last failure time
  google.protobuf.Timestamp last_failed_at = 6;
}

// Requeue dead letter messages request
message RequeueDeadLetterMessagesRequest {
  // Dead letter queue name
  string queue_name = 1;

  // Target queue (optional, defaults to original source queue)
  string target_queue = 2;

  // Message IDs to requeue (optional, defaults to all)
  repeated string message_ids = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Requeue dead letter messages response
message RequeueDeadLetterMessagesResponse {
  // Number of messages requeued
  int64 messages_requeued = 1;

  // Number of messages failed to requeue
  int64 messages_failed = 2;

  // Success status
  bool success = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Get system health request
message GetSystemHealthRequest {
  // Health check types to include
  repeated HealthCheckType check_types = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Health check type enumeration
enum HealthCheckType {
  HEALTH_CHECK_TYPE_UNSPECIFIED = 0;
  HEALTH_CHECK_TYPE_STORAGE = 1;
  HEALTH_CHECK_TYPE_NETWORK = 2;
  HEALTH_CHECK_TYPE_MEMORY = 3;
  HEALTH_CHECK_TYPE_CPU = 4;
  HEALTH_CHECK_TYPE_DISK = 5;
}

// Get system health response
message GetSystemHealthResponse {
  // Overall health status
  HealthStatus overall_status = 1;

  // Individual health checks
  repeated HealthCheck health_checks = 2;

  // System metrics
  SystemMetrics metrics = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Health status enumeration
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_HEALTHY = 1;
  HEALTH_STATUS_DEGRADED = 2;
  HEALTH_STATUS_UNHEALTHY = 3;
}

// Health check
message HealthCheck {
  // Check type
  HealthCheckType type = 1;

  // Check status
  HealthStatus status = 2;

  // Check message
  string message = 3;

  // Check timestamp
  google.protobuf.Timestamp timestamp = 4;

  // Check duration
  google.protobuf.Duration duration = 5;
}

// System metrics
message SystemMetrics {
  // CPU usage percentage
  double cpu_usage_percent = 1;

  // Memory usage percentage
  double memory_usage_percent = 2;

  // Disk usage percentage
  double disk_usage_percent = 3;

  // Network I/O statistics
  NetworkIOStats network_io = 4;

  // Queue system metrics
  QueueSystemMetrics queue_metrics = 5;
}

// Network I/O statistics
message NetworkIOStats {
  // Bytes received per second
  double bytes_received_per_sec = 1;

  // Bytes sent per second
  double bytes_sent_per_sec = 2;

  // Packets received per second
  double packets_received_per_sec = 3;

  // Packets sent per second
  double packets_sent_per_sec = 4;
}

// Queue system metrics
message QueueSystemMetrics {
  // Total active queues
  int32 total_queues = 1;

  // Total active topics
  int32 total_topics = 2;

  // Total active subscriptions
  int32 total_subscriptions = 3;

  // Total messages in system
  int64 total_messages = 4;

  // Messages per second
  double messages_per_second = 5;

  // Storage usage in bytes
  int64 storage_usage_bytes = 6;
}

// Workflow service messages
message StartWorkflowRequest {
  // Workflow definition
  WorkflowDefinition workflow = 1;

  // Workflow input data
  google.protobuf.Any input_data = 2;

  // Workflow options
  WorkflowOptions options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Workflow definition
message WorkflowDefinition {
  // Workflow name
  string name = 1;

  // Workflow version
  string version = 2;

  // Workflow description
  string description = 3;

  // Workflow tasks
  repeated TaskDefinition tasks = 4;

  // Workflow configuration
  WorkflowConfig config = 5;
}

// Task definition
message TaskDefinition {
  // Task name
  string name = 1;

  // Task type
  TaskType type = 2;

  // Task configuration
  google.protobuf.Any config = 3;

  // Task dependencies
  repeated string dependencies = 4;

  // Task timeout
  google.protobuf.Duration timeout = 5;

  // Retry policy
  TaskRetryPolicy retry_policy = 6;
}

// Task type enumeration
enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0;
  TASK_TYPE_HTTP = 1;
  TASK_TYPE_QUEUE = 2;
  TASK_TYPE_FUNCTION = 3;
  TASK_TYPE_CONDITION = 4;
  TASK_TYPE_LOOP = 5;
  TASK_TYPE_PARALLEL = 6;
}

// Task retry policy
message TaskRetryPolicy {
  // Maximum retry attempts
  int32 max_attempts = 1;

  // Initial retry delay
  google.protobuf.Duration initial_delay = 2;

  // Backoff multiplier
  double backoff_multiplier = 3;

  // Maximum retry delay
  google.protobuf.Duration max_delay = 4;
}

// Workflow configuration
message WorkflowConfig {
  // Workflow timeout
  google.protobuf.Duration timeout = 1;

  // Execution mode
  ExecutionMode execution_mode = 2;

  // Error handling strategy
  ErrorHandlingStrategy error_strategy = 3;

  // Workflow attributes
  map<string, string> attributes = 4;
}

// Execution mode enumeration
enum ExecutionMode {
  EXECUTION_MODE_UNSPECIFIED = 0;
  EXECUTION_MODE_SEQUENTIAL = 1;
  EXECUTION_MODE_PARALLEL = 2;
  EXECUTION_MODE_CONDITIONAL = 3;
}

// Error handling strategy enumeration
enum ErrorHandlingStrategy {
  ERROR_HANDLING_STRATEGY_UNSPECIFIED = 0;
  ERROR_HANDLING_STRATEGY_FAIL_FAST = 1;
  ERROR_HANDLING_STRATEGY_CONTINUE = 2;
  ERROR_HANDLING_STRATEGY_COMPENSATE = 3;
}

// Workflow options
message WorkflowOptions {
  // Workflow ID (auto-generated if not provided)
  string workflow_id = 1;

  // Priority
  int32 priority = 2;

  // Start delay
  google.protobuf.Duration start_delay = 3;

  // Scheduled start time
  google.protobuf.Timestamp scheduled_start = 4;

  // Workflow tags
  map<string, string> tags = 5;
}

// Start workflow response
message StartWorkflowResponse {
  // Workflow ID
  string workflow_id = 1;

  // Workflow status
  WorkflowStatus status = 2;

  // Success status
  bool success = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Get workflow request
message GetWorkflowRequest {
  // Workflow ID
  string workflow_id = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get workflow response
message GetWorkflowResponse {
  // Workflow information
  WorkflowInfo workflow = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Workflow information
message WorkflowInfo {
  // Workflow ID
  string workflow_id = 1;

  // Workflow definition
  WorkflowDefinition definition = 2;

  // Workflow status
  WorkflowStatus status = 3;

  // Input data
  google.protobuf.Any input_data = 4;

  // Output data
  google.protobuf.Any output_data = 5;

  // Execution history
  repeated TaskExecution task_executions = 6;

  // Created timestamp
  google.protobuf.Timestamp created_at = 7;

  // Started timestamp
  google.protobuf.Timestamp started_at = 8;

  // Completed timestamp
  google.protobuf.Timestamp completed_at = 9;
}

// Workflow status enumeration
enum WorkflowStatus {
  WORKFLOW_STATUS_UNSPECIFIED = 0;
  WORKFLOW_STATUS_PENDING = 1;
  WORKFLOW_STATUS_RUNNING = 2;
  WORKFLOW_STATUS_PAUSED = 3;
  WORKFLOW_STATUS_COMPLETED = 4;
  WORKFLOW_STATUS_FAILED = 5;
  WORKFLOW_STATUS_CANCELLED = 6;
}

// Task execution information
message TaskExecution {
  // Task name
  string task_name = 1;

  // Execution status
  TaskStatus status = 2;

  // Input data
  google.protobuf.Any input_data = 3;

  // Output data
  google.protobuf.Any output_data = 4;

  // Error information
  string error_message = 5;

  // Attempt number
  int32 attempt = 6;

  // Started timestamp
  google.protobuf.Timestamp started_at = 7;

  // Completed timestamp
  google.protobuf.Timestamp completed_at = 8;

  // Execution duration
  google.protobuf.Duration duration = 9;
}

// Task status enumeration
enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;
  TASK_STATUS_RUNNING = 2;
  TASK_STATUS_COMPLETED = 3;
  TASK_STATUS_FAILED = 4;
  TASK_STATUS_SKIPPED = 5;
  TASK_STATUS_CANCELLED = 6;
}

// List workflows request
message ListWorkflowsRequest {
  // Status filter
  WorkflowStatus status = 1;

  // Name pattern filter
  string name_pattern = 2;

  // Tag filters
  map<string, string> tag_filters = 3;

  // Time range filter
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 6;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 7;
}

// List workflows response
message ListWorkflowsResponse {
  // Workflow information
  repeated WorkflowInfo workflows = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Cancel workflow request
message CancelWorkflowRequest {
  // Workflow ID
  string workflow_id = 1;

  // Reason for cancellation
  string reason = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Cancel workflow response
message CancelWorkflowResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Pause workflow request
message PauseWorkflowRequest {
  // Workflow ID
  string workflow_id = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Pause workflow response
message PauseWorkflowResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Resume workflow request
message ResumeWorkflowRequest {
  // Workflow ID
  string workflow_id = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Resume workflow response
message ResumeWorkflowResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Complete task request
message CompleteTaskRequest {
  // Workflow ID
  string workflow_id = 1;

  // Task name
  string task_name = 2;

  // Task output data
  google.protobuf.Any output_data = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Complete task response
message CompleteTaskResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Fail task request
message FailTaskRequest {
  // Workflow ID
  string workflow_id = 1;

  // Task name
  string task_name = 2;

  // Error message
  string error_message = 3;

  // Whether to retry the task
  bool retry = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;
}

// Fail task response
message FailTaskResponse {
  // Success status
  bool success = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// Get task request
message GetTaskRequest {
  // Workflow ID
  string workflow_id = 1;

  // Task name
  string task_name = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Get task response
message GetTaskResponse {
  // Task execution information
  TaskExecution task_execution = 1;

  // Error information
  gcommon.v1.common.Error error = 2;
}

// List tasks request
message ListTasksRequest {
  // Workflow ID
  string workflow_id = 1;

  // Status filter
  TaskStatus status = 2;

  // Pagination options
  gcommon.v1.common.Pagination pagination = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// List tasks response
message ListTasksResponse {
  // Task executions
  repeated TaskExecution task_executions = 1;

  // Pagination information
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}
