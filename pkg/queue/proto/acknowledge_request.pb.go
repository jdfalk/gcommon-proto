// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/queue/proto/acknowledge_request.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// AcknowledgeRequest confirms successful processing of one or more messages.
// Once acknowledged, messages are permanently removed from the queue
// and will not be redelivered.
//
// Follows 1-1-1 pattern: one message per file.
type AcknowledgeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name/identifier of the queue containing the messages.
	// Must match the queue from which messages were dequeued.
	QueueName *string `protobuf:"bytes,1,opt,name=queue_name,json=queueName" json:"queue_name,omitempty"`
	// *
	// Receipt handles of messages to acknowledge.
	// These handles were provided in the DequeueResponse.
	ReceiptHandles []string `protobuf:"bytes,2,rep,name=receipt_handles,json=receiptHandles" json:"receipt_handles,omitempty"`
	// *
	// Standard request metadata including authentication context,
	// tracing information, and client details.
	Metadata *proto.RequestMetadata `protobuf:"bytes,11,opt,name=metadata" json:"metadata,omitempty"`
	// *
	// Consumer ID that processed these messages.
	// Used for tracking and metrics.
	ConsumerId *string `protobuf:"bytes,12,opt,name=consumer_id,json=consumerId" json:"consumer_id,omitempty"`
	// *
	// Processing result for each message (same order as receipt_handles).
	// Valid values: "success", "failed", "retry", "skip".
	// If not provided, "success" is assumed for all messages.
	ProcessingResults []string `protobuf:"bytes,13,rep,name=processing_results,json=processingResults" json:"processing_results,omitempty"`
	// *
	// Optional processing notes or error details for each message.
	// Useful for debugging and audit trails.
	ProcessingNotes []string `protobuf:"bytes,14,rep,name=processing_notes,json=processingNotes" json:"processing_notes,omitempty"`
	// *
	// Processing time in milliseconds for each message.
	// Used for performance monitoring and SLA tracking.
	ProcessingTimesMs []int64 `protobuf:"varint,15,rep,packed,name=processing_times_ms,json=processingTimesMs" json:"processing_times_ms,omitempty"`
	// *
	// Whether to force acknowledgment even if visibility timeout expired.
	// Use with caution as it may cause duplicate processing. Default: false.
	ForceAcknowledge *bool `protobuf:"varint,16,opt,name=force_acknowledge,json=forceAcknowledge" json:"force_acknowledge,omitempty"`
	// *
	// Batch acknowledgment mode. If true, all messages succeed or fail together.
	// If false, each message is processed individually. Default: false.
	BatchMode     *bool `protobuf:"varint,17,opt,name=batch_mode,json=batchMode" json:"batch_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcknowledgeRequest) Reset() {
	*x = AcknowledgeRequest{}
	mi := &file_pkg_queue_proto_acknowledge_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeRequest) ProtoMessage() {}

func (x *AcknowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_acknowledge_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_acknowledge_request_proto_rawDescGZIP(), []int{0}
}

func (x *AcknowledgeRequest) GetQueueName() string {
	if x != nil && x.QueueName != nil {
		return *x.QueueName
	}
	return ""
}

func (x *AcknowledgeRequest) GetReceiptHandles() []string {
	if x != nil {
		return x.ReceiptHandles
	}
	return nil
}

func (x *AcknowledgeRequest) GetMetadata() *proto.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AcknowledgeRequest) GetConsumerId() string {
	if x != nil && x.ConsumerId != nil {
		return *x.ConsumerId
	}
	return ""
}

func (x *AcknowledgeRequest) GetProcessingResults() []string {
	if x != nil {
		return x.ProcessingResults
	}
	return nil
}

func (x *AcknowledgeRequest) GetProcessingNotes() []string {
	if x != nil {
		return x.ProcessingNotes
	}
	return nil
}

func (x *AcknowledgeRequest) GetProcessingTimesMs() []int64 {
	if x != nil {
		return x.ProcessingTimesMs
	}
	return nil
}

func (x *AcknowledgeRequest) GetForceAcknowledge() bool {
	if x != nil && x.ForceAcknowledge != nil {
		return *x.ForceAcknowledge
	}
	return false
}

func (x *AcknowledgeRequest) GetBatchMode() bool {
	if x != nil && x.BatchMode != nil {
		return *x.BatchMode
	}
	return false
}

var File_pkg_queue_proto_acknowledge_request_proto protoreflect.FileDescriptor

const file_pkg_queue_proto_acknowledge_request_proto_rawDesc = "" +
	"\n" +
	")pkg/queue/proto/acknowledge_request.proto\x12\x10gcommon.v1.queue\x1a'pkg/common/proto/request_metadata.proto\"\x93\x03\n" +
	"\x12AcknowledgeRequest\x12\x1d\n" +
	"\n" +
	"queue_name\x18\x01 \x01(\tR\tqueueName\x12'\n" +
	"\x0freceipt_handles\x18\x02 \x03(\tR\x0ereceiptHandles\x12>\n" +
	"\bmetadata\x18\v \x01(\v2\".gcommon.v1.common.RequestMetadataR\bmetadata\x12\x1f\n" +
	"\vconsumer_id\x18\f \x01(\tR\n" +
	"consumerId\x12-\n" +
	"\x12processing_results\x18\r \x03(\tR\x11processingResults\x12)\n" +
	"\x10processing_notes\x18\x0e \x03(\tR\x0fprocessingNotes\x12.\n" +
	"\x13processing_times_ms\x18\x0f \x03(\x03R\x11processingTimesMs\x12+\n" +
	"\x11force_acknowledge\x18\x10 \x01(\bR\x10forceAcknowledge\x12\x1d\n" +
	"\n" +
	"batch_mode\x18\x11 \x01(\bR\tbatchModeB\xbc\x01\n" +
	"\x14com.gcommon.v1.queueB\x17AcknowledgeRequestProtoP\x01Z)github.com/jdfalk/gcommon/pkg/queue/proto\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queueb\beditionsp\xe8\a"

var (
	file_pkg_queue_proto_acknowledge_request_proto_rawDescOnce sync.Once
	file_pkg_queue_proto_acknowledge_request_proto_rawDescData []byte
)

func file_pkg_queue_proto_acknowledge_request_proto_rawDescGZIP() []byte {
	file_pkg_queue_proto_acknowledge_request_proto_rawDescOnce.Do(func() {
		file_pkg_queue_proto_acknowledge_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_acknowledge_request_proto_rawDesc), len(file_pkg_queue_proto_acknowledge_request_proto_rawDesc)))
	})
	return file_pkg_queue_proto_acknowledge_request_proto_rawDescData
}

var file_pkg_queue_proto_acknowledge_request_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_queue_proto_acknowledge_request_proto_goTypes = []any{
	(*AcknowledgeRequest)(nil),    // 0: gcommon.v1.queue.AcknowledgeRequest
	(*proto.RequestMetadata)(nil), // 1: gcommon.v1.common.RequestMetadata
}
var file_pkg_queue_proto_acknowledge_request_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.AcknowledgeRequest.metadata:type_name -> gcommon.v1.common.RequestMetadata
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_queue_proto_acknowledge_request_proto_init() }
func file_pkg_queue_proto_acknowledge_request_proto_init() {
	if File_pkg_queue_proto_acknowledge_request_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_acknowledge_request_proto_rawDesc), len(file_pkg_queue_proto_acknowledge_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_queue_proto_acknowledge_request_proto_goTypes,
		DependencyIndexes: file_pkg_queue_proto_acknowledge_request_proto_depIdxs,
		MessageInfos:      file_pkg_queue_proto_acknowledge_request_proto_msgTypes,
	}.Build()
	File_pkg_queue_proto_acknowledge_request_proto = out.File
	file_pkg_queue_proto_acknowledge_request_proto_goTypes = nil
	file_pkg_queue_proto_acknowledge_request_proto_depIdxs = nil
}
