// file: pkg/queue/proto/services/queue_monitoring_service.proto
// file: queue/proto/services/queue_monitoring_service.proto
// version: 1.0.0
// guid: 4a5b6c7d-8e9f-0a1b-2c3d-4e5f6a7b8c9d
//
// Service definitions for queue module
//
edition = "2023";

package gcommon.v1.queue;

import "google/protobuf/go_features.proto";
import "google/protobuf/timestamp.proto";
import "pkg/common/proto/time_range.proto";
import "pkg/queue/proto/cluster_info.proto";
import "pkg/queue/proto/get_cluster_info_request.proto";
import "pkg/queue/proto/get_cluster_info_response.proto";
import "pkg/queue/proto/get_queue_stats_response.proto";
import "pkg/queue/proto/health_status.proto";
import "pkg/queue/proto/metric_type.proto";
import "pkg/queue/proto/stats_granularity.proto";
import "pkg/queue/proto/topic_info.proto";
option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto";


option features.(pb.go).api_level = API_OPAQUE;

/**
 * Service for monitoring queue health, performance, and statistics.
 * Provides read-only access to queue metrics and operational data.
 */
service QueueMonitoringService {
  // Get information about the queue cluster
  rpc GetClusterInfo(GetClusterInfoRequest) returns (gcommon.v1.queue.GetClusterInfoResponse);

  // Get health status of all queues
  rpc GetQueueHealth(GetQueueHealthRequest) returns (GetQueueHealthResponse);

  // Get detailed statistics for a specific queue
  rpc GetQueueStats(GetQueueStatsRequest) returns (QueueStatsResponse);

  // Get real-time metrics stream
  rpc StreamMetrics(StreamMetricsRequest) returns (stream MetricsEvent);
}

/**
 * Request to get queue health information.
 */
message GetQueueHealthRequest {
  // Specific queue names to check (empty = all queues)
  repeated string queue_names = 1;

  // Whether to include detailed health metrics
  bool include_details = 2;
}

/**
 * Response containing queue health information.
 */
message GetQueueHealthResponse {
  // Health status for each queue
  repeated QueueHealth queue_health = 1;

  // Overall cluster health
  ClusterHealth cluster_health = 2;
}

/**
 * Health status for a single queue.
 */
message QueueHealth {
  // Name of the queue
  string queue_name = 1;

  // Health status
  gcommon.v1.queue.HealthStatus status = 2;

  // Health score (0-100)
  int32 health_score = 3;

  // List of health issues
  repeated string issues = 4;

  // Last health check timestamp
  google.protobuf.Timestamp last_check = 5;
}

/**
 * Overall cluster health information.
 */
message ClusterHealth {
  // Overall health status
  gcommon.v1.queue.HealthStatus status = 1;

  // Number of healthy nodes
  int32 healthy_nodes = 2;

  // Total number of nodes
  int32 total_nodes = 3;

  // Health issues affecting the cluster
  repeated string issues = 4;
}

/**
 * Request to get queue statistics.
 */
message GetQueueStatsRequest {
  // Name of the queue
  string queue_name = 1;

  // Time range for statistics
  TimeRange time_range = 2;

  // Granularity of statistics (hourly, daily, etc.)
  StatsGranularity granularity = 3;
}

/**
 * Response containing queue statistics from monitoring service.
 */
message QueueStatsResponse {
  // Queue statistics
  QueueStats stats = 1;

  // Time series data
  repeated QueueStatsPoint time_series = 2;
}

/**
 * Point-in-time queue statistics.
 */
message QueueStatsPoint {
  // Timestamp for this data point
  google.protobuf.Timestamp timestamp = 1;

  // Statistics at this point in time
  QueueStats stats = 2;
}

/**
 * Request to stream real-time metrics.
 */
message StreamMetricsRequest {
  // Queue names to monitor (empty = all queues)
  repeated string queue_names = 1;

  // Types of metrics to include
  repeated MetricType metric_types = 2;

  // Streaming interval in seconds
  int32 interval_seconds = 3;
}

/**
 * Real-time metrics event.
 */
message MetricsEvent {
  // Timestamp of the event
  google.protobuf.Timestamp timestamp = 1;

  // Queue name
  string queue_name = 2;

  // Type of metric
  MetricType metric_type = 3;

  // Metric value
  double value = 4;

  // Additional metadata
  map<string, string> labels = 5;
}
