// filepath: pkg/queue/proto/messages/replication_config.proto
// file: queue/proto/messages/replication_config.proto
// version: 1.0.0
// guid: 6c7d8e9f-0a1b-2c3d-4e5f-6a7b8c9d0e1f
//
// Message definitions for queue module
//
edition = "2023";

package gcommon.v1.queue;

import "google/protobuf/go_features.proto";
import "google/protobuf/duration.proto";
import "pkg/queue/proto/replication_mode.proto";
import "pkg/queue/proto/consistency_level.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/pkg/queue/proto;queuepb";

/**
 * Configuration for data replication across multiple nodes.
 */
message ReplicationConfig {
  // Replication mode
  gcommon.v1.queue.ReplicationMode mode = 1;
  
  // Number of replicas to maintain
  int32 replica_count = 2;
  
  // Minimum number of replicas required for writes
  int32 min_replicas_for_write = 3;
  
  // Minimum number of replicas required for reads
  int32 min_replicas_for_read = 4;
  
  // Consistency level for read operations
  gcommon.v1.queue.ConsistencyLevel read_consistency = 5;
  
  // Consistency level for write operations
  gcommon.v1.queue.ConsistencyLevel write_consistency = 6;
  
  // Replication timeout
  google.protobuf.Duration replication_timeout = 7;
  
  // Whether to enable cross-datacenter replication
  bool cross_datacenter = 8;
  
  // Preferred replica locations
  repeated string preferred_locations = 9;
  
  // Anti-affinity rules for replica placement
  repeated AntiAffinityRule anti_affinity_rules = 10;
}

/**
 * Anti-affinity rule for replica placement.
 */
message AntiAffinityRule {
  // Label key to check for anti-affinity
  string label_key = 1;
  
  // Label values that should not be co-located
  repeated string label_values = 2;
  
  // Scope of the anti-affinity rule
  AntiAffinityScope scope = 3;
}

/**
 * Scope for anti-affinity rules.
 */
enum AntiAffinityScope {
  // Default unspecified scope
  ANTI_AFFINITY_SCOPE_UNSPECIFIED = 0;
  
  // Same node
  ANTI_AFFINITY_SCOPE_NODE = 1;
  
  // Same rack
  ANTI_AFFINITY_SCOPE_RACK = 2;
  
  // Same datacenter
  ANTI_AFFINITY_SCOPE_DATACENTER = 3;
  
  // Same region
  ANTI_AFFINITY_SCOPE_REGION = 4;
}
