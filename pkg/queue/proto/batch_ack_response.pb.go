// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/queue/proto/batch_ack_response.proto

package proto

import (
	proto "github.com/jdfalk/gcommon/pkg/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Response for batch acknowledgment operations.
// Contains results of acknowledging multiple messages.
type BatchAckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Overall success status
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Number of messages successfully acknowledged
	AcknowledgedCount *int32 `protobuf:"varint,2,opt,name=acknowledged_count,json=acknowledgedCount" json:"acknowledged_count,omitempty"`
	// Number of messages that failed to acknowledge
	FailedCount *int32 `protobuf:"varint,3,opt,name=failed_count,json=failedCount" json:"failed_count,omitempty"`
	// Failed message IDs and their error reasons
	FailedAcks []*FailedAck `protobuf:"bytes,4,rep,name=failed_acks,json=failedAcks" json:"failed_acks,omitempty"`
	// Response metadata
	Metadata *proto.ResponseMetadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	// Batch ID for tracking
	BatchId       *string `protobuf:"bytes,6,opt,name=batch_id,json=batchId" json:"batch_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAckResponse) Reset() {
	*x = BatchAckResponse{}
	mi := &file_pkg_queue_proto_batch_ack_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAckResponse) ProtoMessage() {}

func (x *BatchAckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_batch_ack_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAckResponse.ProtoReflect.Descriptor instead.
func (*BatchAckResponse) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_batch_ack_response_proto_rawDescGZIP(), []int{0}
}

func (x *BatchAckResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *BatchAckResponse) GetAcknowledgedCount() int32 {
	if x != nil && x.AcknowledgedCount != nil {
		return *x.AcknowledgedCount
	}
	return 0
}

func (x *BatchAckResponse) GetFailedCount() int32 {
	if x != nil && x.FailedCount != nil {
		return *x.FailedCount
	}
	return 0
}

func (x *BatchAckResponse) GetFailedAcks() []*FailedAck {
	if x != nil {
		return x.FailedAcks
	}
	return nil
}

func (x *BatchAckResponse) GetMetadata() *proto.ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BatchAckResponse) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

// *
// Information about a failed acknowledgment.
type FailedAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message ID that failed to acknowledge
	MessageId *string `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	// Reason for acknowledgment failure
	ErrorReason *string `protobuf:"bytes,2,opt,name=error_reason,json=errorReason" json:"error_reason,omitempty"`
	// Error code
	ErrorCode     *string `protobuf:"bytes,3,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailedAck) Reset() {
	*x = FailedAck{}
	mi := &file_pkg_queue_proto_batch_ack_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailedAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedAck) ProtoMessage() {}

func (x *FailedAck) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_queue_proto_batch_ack_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedAck.ProtoReflect.Descriptor instead.
func (*FailedAck) Descriptor() ([]byte, []int) {
	return file_pkg_queue_proto_batch_ack_response_proto_rawDescGZIP(), []int{1}
}

func (x *FailedAck) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *FailedAck) GetErrorReason() string {
	if x != nil && x.ErrorReason != nil {
		return *x.ErrorReason
	}
	return ""
}

func (x *FailedAck) GetErrorCode() string {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ""
}

var File_pkg_queue_proto_batch_ack_response_proto protoreflect.FileDescriptor

const file_pkg_queue_proto_batch_ack_response_proto_rawDesc = "" +
	"\n" +
	"(pkg/queue/proto/batch_ack_response.proto\x12\x10gcommon.v1.queue\x1a(pkg/common/proto/response_metadata.proto\"\x98\x02\n" +
	"\x10BatchAckResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12-\n" +
	"\x12acknowledged_count\x18\x02 \x01(\x05R\x11acknowledgedCount\x12!\n" +
	"\ffailed_count\x18\x03 \x01(\x05R\vfailedCount\x12<\n" +
	"\vfailed_acks\x18\x04 \x03(\v2\x1b.gcommon.v1.queue.FailedAckR\n" +
	"failedAcks\x12?\n" +
	"\bmetadata\x18\x05 \x01(\v2#.gcommon.v1.common.ResponseMetadataR\bmetadata\x12\x19\n" +
	"\bbatch_id\x18\x06 \x01(\tR\abatchId\"l\n" +
	"\tFailedAck\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12!\n" +
	"\ferror_reason\x18\x02 \x01(\tR\verrorReason\x12\x1d\n" +
	"\n" +
	"error_code\x18\x03 \x01(\tR\terrorCodeB\xba\x01\n" +
	"\x14com.gcommon.v1.queueB\x15BatchAckResponseProtoP\x01Z)github.com/jdfalk/gcommon/pkg/queue/proto\xa2\x02\x03GVQ\xaa\x02\x10Gcommon.V1.Queue\xca\x02\x10Gcommon\\V1\\Queue\xe2\x02\x1cGcommon\\V1\\Queue\\GPBMetadata\xea\x02\x12Gcommon::V1::Queueb\beditionsp\xe8\a"

var (
	file_pkg_queue_proto_batch_ack_response_proto_rawDescOnce sync.Once
	file_pkg_queue_proto_batch_ack_response_proto_rawDescData []byte
)

func file_pkg_queue_proto_batch_ack_response_proto_rawDescGZIP() []byte {
	file_pkg_queue_proto_batch_ack_response_proto_rawDescOnce.Do(func() {
		file_pkg_queue_proto_batch_ack_response_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_batch_ack_response_proto_rawDesc), len(file_pkg_queue_proto_batch_ack_response_proto_rawDesc)))
	})
	return file_pkg_queue_proto_batch_ack_response_proto_rawDescData
}

var file_pkg_queue_proto_batch_ack_response_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_queue_proto_batch_ack_response_proto_goTypes = []any{
	(*BatchAckResponse)(nil),       // 0: gcommon.v1.queue.BatchAckResponse
	(*FailedAck)(nil),              // 1: gcommon.v1.queue.FailedAck
	(*proto.ResponseMetadata)(nil), // 2: gcommon.v1.common.ResponseMetadata
}
var file_pkg_queue_proto_batch_ack_response_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.queue.BatchAckResponse.failed_acks:type_name -> gcommon.v1.queue.FailedAck
	2, // 1: gcommon.v1.queue.BatchAckResponse.metadata:type_name -> gcommon.v1.common.ResponseMetadata
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_queue_proto_batch_ack_response_proto_init() }
func file_pkg_queue_proto_batch_ack_response_proto_init() {
	if File_pkg_queue_proto_batch_ack_response_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_queue_proto_batch_ack_response_proto_rawDesc), len(file_pkg_queue_proto_batch_ack_response_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_queue_proto_batch_ack_response_proto_goTypes,
		DependencyIndexes: file_pkg_queue_proto_batch_ack_response_proto_depIdxs,
		MessageInfos:      file_pkg_queue_proto_batch_ack_response_proto_msgTypes,
	}.Build()
	File_pkg_queue_proto_batch_ack_response_proto = out.File
	file_pkg_queue_proto_batch_ack_response_proto_goTypes = nil
	file_pkg_queue_proto_batch_ack_response_proto_depIdxs = nil
}
