// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQueueAdminServiceServer creates a new instance of MockQueueAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueAdminServiceServer {
	mock := &MockQueueAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueAdminServiceServer is an autogenerated mock type for the QueueAdminServiceServer type
type MockQueueAdminServiceServer struct {
	mock.Mock
}

type MockQueueAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueAdminServiceServer) EXPECT() *MockQueueAdminServiceServer_Expecter {
	return &MockQueueAdminServiceServer_Expecter{mock: &_m.Mock}
}

// CreateQueue provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) CreateQueue(context1 context.Context, createQueueRequest *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error) {
	ret := _mock.Called(context1, createQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *proto.CreateQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error)); ok {
		return returnFunc(context1, createQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest) *proto.CreateQueueResponse); ok {
		r0 = returnFunc(context1, createQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateQueueRequest) error); ok {
		r1 = returnFunc(context1, createQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_CreateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueue'
type MockQueueAdminServiceServer_CreateQueue_Call struct {
	*mock.Call
}

// CreateQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - createQueueRequest *proto.CreateQueueRequest
func (_e *MockQueueAdminServiceServer_Expecter) CreateQueue(context1 interface{}, createQueueRequest interface{}) *MockQueueAdminServiceServer_CreateQueue_Call {
	return &MockQueueAdminServiceServer_CreateQueue_Call{Call: _e.mock.On("CreateQueue", context1, createQueueRequest)}
}

func (_c *MockQueueAdminServiceServer_CreateQueue_Call) Run(run func(context1 context.Context, createQueueRequest *proto.CreateQueueRequest)) *MockQueueAdminServiceServer_CreateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_CreateQueue_Call) Return(createQueueResponse *proto.CreateQueueResponse, err error) *MockQueueAdminServiceServer_CreateQueue_Call {
	_c.Call.Return(createQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_CreateQueue_Call) RunAndReturn(run func(context1 context.Context, createQueueRequest *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error)) *MockQueueAdminServiceServer_CreateQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) DeleteTopic(context1 context.Context, deleteTopicRequest *proto.DeleteTopicRequest) (*proto.DeleteTopicResponse, error) {
	ret := _mock.Called(context1, deleteTopicRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *proto.DeleteTopicResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTopicRequest) (*proto.DeleteTopicResponse, error)); ok {
		return returnFunc(context1, deleteTopicRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTopicRequest) *proto.DeleteTopicResponse); ok {
		r0 = returnFunc(context1, deleteTopicRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTopicResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTopicRequest) error); ok {
		r1 = returnFunc(context1, deleteTopicRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type MockQueueAdminServiceServer_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteTopicRequest *proto.DeleteTopicRequest
func (_e *MockQueueAdminServiceServer_Expecter) DeleteTopic(context1 interface{}, deleteTopicRequest interface{}) *MockQueueAdminServiceServer_DeleteTopic_Call {
	return &MockQueueAdminServiceServer_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic", context1, deleteTopicRequest)}
}

func (_c *MockQueueAdminServiceServer_DeleteTopic_Call) Run(run func(context1 context.Context, deleteTopicRequest *proto.DeleteTopicRequest)) *MockQueueAdminServiceServer_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTopicRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTopicRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_DeleteTopic_Call) Return(deleteTopicResponse *proto.DeleteTopicResponse, err error) *MockQueueAdminServiceServer_DeleteTopic_Call {
	_c.Call.Return(deleteTopicResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_DeleteTopic_Call) RunAndReturn(run func(context1 context.Context, deleteTopicRequest *proto.DeleteTopicRequest) (*proto.DeleteTopicResponse, error)) *MockQueueAdminServiceServer_DeleteTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) GetQueueInfo(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error) {
	ret := _mock.Called(context1, getQueueInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(context1, getQueueInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(context1, getQueueInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest) error); ok {
		r1 = returnFunc(context1, getQueueInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueAdminServiceServer_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getQueueInfoRequest *proto.GetQueueInfoRequest
func (_e *MockQueueAdminServiceServer_Expecter) GetQueueInfo(context1 interface{}, getQueueInfoRequest interface{}) *MockQueueAdminServiceServer_GetQueueInfo_Call {
	return &MockQueueAdminServiceServer_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo", context1, getQueueInfoRequest)}
}

func (_c *MockQueueAdminServiceServer_GetQueueInfo_Call) Run(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest)) *MockQueueAdminServiceServer_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueAdminServiceServer_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_GetQueueInfo_Call) RunAndReturn(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)) *MockQueueAdminServiceServer_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// PauseQueue provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) PauseQueue(context1 context.Context, pauseQueueRequest *proto.PauseQueueRequest) (*proto.PauseQueueResponse, error) {
	ret := _mock.Called(context1, pauseQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for PauseQueue")
	}

	var r0 *proto.PauseQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PauseQueueRequest) (*proto.PauseQueueResponse, error)); ok {
		return returnFunc(context1, pauseQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PauseQueueRequest) *proto.PauseQueueResponse); ok {
		r0 = returnFunc(context1, pauseQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PauseQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PauseQueueRequest) error); ok {
		r1 = returnFunc(context1, pauseQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_PauseQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseQueue'
type MockQueueAdminServiceServer_PauseQueue_Call struct {
	*mock.Call
}

// PauseQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - pauseQueueRequest *proto.PauseQueueRequest
func (_e *MockQueueAdminServiceServer_Expecter) PauseQueue(context1 interface{}, pauseQueueRequest interface{}) *MockQueueAdminServiceServer_PauseQueue_Call {
	return &MockQueueAdminServiceServer_PauseQueue_Call{Call: _e.mock.On("PauseQueue", context1, pauseQueueRequest)}
}

func (_c *MockQueueAdminServiceServer_PauseQueue_Call) Run(run func(context1 context.Context, pauseQueueRequest *proto.PauseQueueRequest)) *MockQueueAdminServiceServer_PauseQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PauseQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PauseQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_PauseQueue_Call) Return(pauseQueueResponse *proto.PauseQueueResponse, err error) *MockQueueAdminServiceServer_PauseQueue_Call {
	_c.Call.Return(pauseQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_PauseQueue_Call) RunAndReturn(run func(context1 context.Context, pauseQueueRequest *proto.PauseQueueRequest) (*proto.PauseQueueResponse, error)) *MockQueueAdminServiceServer_PauseQueue_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeQueue provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) PurgeQueue(context1 context.Context, purgeRequest *proto.PurgeRequest) (*proto.PurgeResponse, error) {
	ret := _mock.Called(context1, purgeRequest)

	if len(ret) == 0 {
		panic("no return value specified for PurgeQueue")
	}

	var r0 *proto.PurgeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeRequest) (*proto.PurgeResponse, error)); ok {
		return returnFunc(context1, purgeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeRequest) *proto.PurgeResponse); ok {
		r0 = returnFunc(context1, purgeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PurgeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PurgeRequest) error); ok {
		r1 = returnFunc(context1, purgeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_PurgeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeQueue'
type MockQueueAdminServiceServer_PurgeQueue_Call struct {
	*mock.Call
}

// PurgeQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - purgeRequest *proto.PurgeRequest
func (_e *MockQueueAdminServiceServer_Expecter) PurgeQueue(context1 interface{}, purgeRequest interface{}) *MockQueueAdminServiceServer_PurgeQueue_Call {
	return &MockQueueAdminServiceServer_PurgeQueue_Call{Call: _e.mock.On("PurgeQueue", context1, purgeRequest)}
}

func (_c *MockQueueAdminServiceServer_PurgeQueue_Call) Run(run func(context1 context.Context, purgeRequest *proto.PurgeRequest)) *MockQueueAdminServiceServer_PurgeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PurgeRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PurgeRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_PurgeQueue_Call) Return(purgeResponse *proto.PurgeResponse, err error) *MockQueueAdminServiceServer_PurgeQueue_Call {
	_c.Call.Return(purgeResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_PurgeQueue_Call) RunAndReturn(run func(context1 context.Context, purgeRequest *proto.PurgeRequest) (*proto.PurgeResponse, error)) *MockQueueAdminServiceServer_PurgeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ResetQueueStats provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) ResetQueueStats(context1 context.Context, resetQueueStatsRequest *proto.ResetQueueStatsRequest) (*proto.ResetQueueStatsResponse, error) {
	ret := _mock.Called(context1, resetQueueStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResetQueueStats")
	}

	var r0 *proto.ResetQueueStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetQueueStatsRequest) (*proto.ResetQueueStatsResponse, error)); ok {
		return returnFunc(context1, resetQueueStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetQueueStatsRequest) *proto.ResetQueueStatsResponse); ok {
		r0 = returnFunc(context1, resetQueueStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResetQueueStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResetQueueStatsRequest) error); ok {
		r1 = returnFunc(context1, resetQueueStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_ResetQueueStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetQueueStats'
type MockQueueAdminServiceServer_ResetQueueStats_Call struct {
	*mock.Call
}

// ResetQueueStats is a helper method to define mock.On call
//   - context1 context.Context
//   - resetQueueStatsRequest *proto.ResetQueueStatsRequest
func (_e *MockQueueAdminServiceServer_Expecter) ResetQueueStats(context1 interface{}, resetQueueStatsRequest interface{}) *MockQueueAdminServiceServer_ResetQueueStats_Call {
	return &MockQueueAdminServiceServer_ResetQueueStats_Call{Call: _e.mock.On("ResetQueueStats", context1, resetQueueStatsRequest)}
}

func (_c *MockQueueAdminServiceServer_ResetQueueStats_Call) Run(run func(context1 context.Context, resetQueueStatsRequest *proto.ResetQueueStatsRequest)) *MockQueueAdminServiceServer_ResetQueueStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResetQueueStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResetQueueStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_ResetQueueStats_Call) Return(resetQueueStatsResponse *proto.ResetQueueStatsResponse, err error) *MockQueueAdminServiceServer_ResetQueueStats_Call {
	_c.Call.Return(resetQueueStatsResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_ResetQueueStats_Call) RunAndReturn(run func(context1 context.Context, resetQueueStatsRequest *proto.ResetQueueStatsRequest) (*proto.ResetQueueStatsResponse, error)) *MockQueueAdminServiceServer_ResetQueueStats_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeQueue provides a mock function for the type MockQueueAdminServiceServer
func (_mock *MockQueueAdminServiceServer) ResumeQueue(context1 context.Context, resumeQueueRequest *proto.ResumeQueueRequest) (*proto.ResumeQueueResponse, error) {
	ret := _mock.Called(context1, resumeQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResumeQueue")
	}

	var r0 *proto.ResumeQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResumeQueueRequest) (*proto.ResumeQueueResponse, error)); ok {
		return returnFunc(context1, resumeQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResumeQueueRequest) *proto.ResumeQueueResponse); ok {
		r0 = returnFunc(context1, resumeQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResumeQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResumeQueueRequest) error); ok {
		r1 = returnFunc(context1, resumeQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceServer_ResumeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeQueue'
type MockQueueAdminServiceServer_ResumeQueue_Call struct {
	*mock.Call
}

// ResumeQueue is a helper method to define mock.On call
//   - context1 context.Context
//   - resumeQueueRequest *proto.ResumeQueueRequest
func (_e *MockQueueAdminServiceServer_Expecter) ResumeQueue(context1 interface{}, resumeQueueRequest interface{}) *MockQueueAdminServiceServer_ResumeQueue_Call {
	return &MockQueueAdminServiceServer_ResumeQueue_Call{Call: _e.mock.On("ResumeQueue", context1, resumeQueueRequest)}
}

func (_c *MockQueueAdminServiceServer_ResumeQueue_Call) Run(run func(context1 context.Context, resumeQueueRequest *proto.ResumeQueueRequest)) *MockQueueAdminServiceServer_ResumeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResumeQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResumeQueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceServer_ResumeQueue_Call) Return(resumeQueueResponse *proto.ResumeQueueResponse, err error) *MockQueueAdminServiceServer_ResumeQueue_Call {
	_c.Call.Return(resumeQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceServer_ResumeQueue_Call) RunAndReturn(run func(context1 context.Context, resumeQueueRequest *proto.ResumeQueueRequest) (*proto.ResumeQueueResponse, error)) *MockQueueAdminServiceServer_ResumeQueue_Call {
	_c.Call.Return(run)
	return _c
}
