// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueueAdminServiceClient creates a new instance of MockQueueAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueAdminServiceClient {
	mock := &MockQueueAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueAdminServiceClient is an autogenerated mock type for the QueueAdminServiceClient type
type MockQueueAdminServiceClient struct {
	mock.Mock
}

type MockQueueAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueAdminServiceClient) EXPECT() *MockQueueAdminServiceClient_Expecter {
	return &MockQueueAdminServiceClient_Expecter{mock: &_m.Mock}
}

// CreateQueue provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) CreateQueue(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption) (*proto.CreateQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *proto.CreateQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) (*proto.CreateQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) *proto.CreateQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_CreateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueue'
type MockQueueAdminServiceClient_CreateQueue_Call struct {
	*mock.Call
}

// CreateQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateQueueRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) CreateQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_CreateQueue_Call {
	return &MockQueueAdminServiceClient_CreateQueue_Call{Call: _e.mock.On("CreateQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_CreateQueue_Call) Run(run func(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_CreateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateQueueRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_CreateQueue_Call) Return(createQueueResponse *proto.CreateQueueResponse, err error) *MockQueueAdminServiceClient_CreateQueue_Call {
	_c.Call.Return(createQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_CreateQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption) (*proto.CreateQueueResponse, error)) *MockQueueAdminServiceClient_CreateQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTopic provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) DeleteTopic(ctx context.Context, in *proto.DeleteTopicRequest, opts ...grpc.CallOption) (*proto.DeleteTopicResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *proto.DeleteTopicResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTopicRequest, ...grpc.CallOption) (*proto.DeleteTopicResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteTopicRequest, ...grpc.CallOption) *proto.DeleteTopicResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteTopicResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteTopicRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_DeleteTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTopic'
type MockQueueAdminServiceClient_DeleteTopic_Call struct {
	*mock.Call
}

// DeleteTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DeleteTopicRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) DeleteTopic(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_DeleteTopic_Call {
	return &MockQueueAdminServiceClient_DeleteTopic_Call{Call: _e.mock.On("DeleteTopic",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_DeleteTopic_Call) Run(run func(ctx context.Context, in *proto.DeleteTopicRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_DeleteTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DeleteTopicRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DeleteTopicRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_DeleteTopic_Call) Return(deleteTopicResponse *proto.DeleteTopicResponse, err error) *MockQueueAdminServiceClient_DeleteTopic_Call {
	_c.Call.Return(deleteTopicResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_DeleteTopic_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteTopicRequest, opts ...grpc.CallOption) (*proto.DeleteTopicResponse, error)) *MockQueueAdminServiceClient_DeleteTopic_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) GetQueueInfo(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueAdminServiceClient_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetQueueInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) GetQueueInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_GetQueueInfo_Call {
	return &MockQueueAdminServiceClient_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_GetQueueInfo_Call) Run(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueInfoRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueAdminServiceClient_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_GetQueueInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)) *MockQueueAdminServiceClient_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// PauseQueue provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) PauseQueue(ctx context.Context, in *proto.PauseQueueRequest, opts ...grpc.CallOption) (*proto.PauseQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PauseQueue")
	}

	var r0 *proto.PauseQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PauseQueueRequest, ...grpc.CallOption) (*proto.PauseQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PauseQueueRequest, ...grpc.CallOption) *proto.PauseQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PauseQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PauseQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_PauseQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseQueue'
type MockQueueAdminServiceClient_PauseQueue_Call struct {
	*mock.Call
}

// PauseQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.PauseQueueRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) PauseQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_PauseQueue_Call {
	return &MockQueueAdminServiceClient_PauseQueue_Call{Call: _e.mock.On("PauseQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_PauseQueue_Call) Run(run func(ctx context.Context, in *proto.PauseQueueRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_PauseQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PauseQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PauseQueueRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_PauseQueue_Call) Return(pauseQueueResponse *proto.PauseQueueResponse, err error) *MockQueueAdminServiceClient_PauseQueue_Call {
	_c.Call.Return(pauseQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_PauseQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.PauseQueueRequest, opts ...grpc.CallOption) (*proto.PauseQueueResponse, error)) *MockQueueAdminServiceClient_PauseQueue_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeQueue provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) PurgeQueue(ctx context.Context, in *proto.PurgeRequest, opts ...grpc.CallOption) (*proto.PurgeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PurgeQueue")
	}

	var r0 *proto.PurgeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeRequest, ...grpc.CallOption) (*proto.PurgeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeRequest, ...grpc.CallOption) *proto.PurgeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PurgeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PurgeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_PurgeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeQueue'
type MockQueueAdminServiceClient_PurgeQueue_Call struct {
	*mock.Call
}

// PurgeQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.PurgeRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) PurgeQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_PurgeQueue_Call {
	return &MockQueueAdminServiceClient_PurgeQueue_Call{Call: _e.mock.On("PurgeQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_PurgeQueue_Call) Run(run func(ctx context.Context, in *proto.PurgeRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_PurgeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PurgeRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PurgeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_PurgeQueue_Call) Return(purgeResponse *proto.PurgeResponse, err error) *MockQueueAdminServiceClient_PurgeQueue_Call {
	_c.Call.Return(purgeResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_PurgeQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.PurgeRequest, opts ...grpc.CallOption) (*proto.PurgeResponse, error)) *MockQueueAdminServiceClient_PurgeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// ResetQueueStats provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) ResetQueueStats(ctx context.Context, in *proto.ResetQueueStatsRequest, opts ...grpc.CallOption) (*proto.ResetQueueStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ResetQueueStats")
	}

	var r0 *proto.ResetQueueStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetQueueStatsRequest, ...grpc.CallOption) (*proto.ResetQueueStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetQueueStatsRequest, ...grpc.CallOption) *proto.ResetQueueStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResetQueueStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResetQueueStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_ResetQueueStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetQueueStats'
type MockQueueAdminServiceClient_ResetQueueStats_Call struct {
	*mock.Call
}

// ResetQueueStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ResetQueueStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) ResetQueueStats(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_ResetQueueStats_Call {
	return &MockQueueAdminServiceClient_ResetQueueStats_Call{Call: _e.mock.On("ResetQueueStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_ResetQueueStats_Call) Run(run func(ctx context.Context, in *proto.ResetQueueStatsRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_ResetQueueStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResetQueueStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResetQueueStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_ResetQueueStats_Call) Return(resetQueueStatsResponse *proto.ResetQueueStatsResponse, err error) *MockQueueAdminServiceClient_ResetQueueStats_Call {
	_c.Call.Return(resetQueueStatsResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_ResetQueueStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.ResetQueueStatsRequest, opts ...grpc.CallOption) (*proto.ResetQueueStatsResponse, error)) *MockQueueAdminServiceClient_ResetQueueStats_Call {
	_c.Call.Return(run)
	return _c
}

// ResumeQueue provides a mock function for the type MockQueueAdminServiceClient
func (_mock *MockQueueAdminServiceClient) ResumeQueue(ctx context.Context, in *proto.ResumeQueueRequest, opts ...grpc.CallOption) (*proto.ResumeQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ResumeQueue")
	}

	var r0 *proto.ResumeQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResumeQueueRequest, ...grpc.CallOption) (*proto.ResumeQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResumeQueueRequest, ...grpc.CallOption) *proto.ResumeQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResumeQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResumeQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueAdminServiceClient_ResumeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResumeQueue'
type MockQueueAdminServiceClient_ResumeQueue_Call struct {
	*mock.Call
}

// ResumeQueue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ResumeQueueRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueAdminServiceClient_Expecter) ResumeQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueAdminServiceClient_ResumeQueue_Call {
	return &MockQueueAdminServiceClient_ResumeQueue_Call{Call: _e.mock.On("ResumeQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueAdminServiceClient_ResumeQueue_Call) Run(run func(ctx context.Context, in *proto.ResumeQueueRequest, opts ...grpc.CallOption)) *MockQueueAdminServiceClient_ResumeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResumeQueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResumeQueueRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueAdminServiceClient_ResumeQueue_Call) Return(resumeQueueResponse *proto.ResumeQueueResponse, err error) *MockQueueAdminServiceClient_ResumeQueue_Call {
	_c.Call.Return(resumeQueueResponse, err)
	return _c
}

func (_c *MockQueueAdminServiceClient_ResumeQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.ResumeQueueRequest, opts ...grpc.CallOption) (*proto.ResumeQueueResponse, error)) *MockQueueAdminServiceClient_ResumeQueue_Call {
	_c.Call.Return(run)
	return _c
}
