// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueueServiceClient creates a new instance of MockQueueServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueServiceClient {
	mock := &MockQueueServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueServiceClient is an autogenerated mock type for the QueueServiceClient type
type MockQueueServiceClient struct {
	mock.Mock
}

type MockQueueServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueServiceClient) EXPECT() *MockQueueServiceClient_Expecter {
	return &MockQueueServiceClient_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Dequeue(ctx context.Context, in *proto.DequeueRequest, opts ...grpc.CallOption) (*proto.DequeueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 *proto.DequeueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DequeueRequest, ...grpc.CallOption) (*proto.DequeueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DequeueRequest, ...grpc.CallOption) *proto.DequeueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DequeueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DequeueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueueServiceClient_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DequeueRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) Dequeue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Dequeue_Call {
	return &MockQueueServiceClient_Dequeue_Call{Call: _e.mock.On("Dequeue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Dequeue_Call) Run(run func(ctx context.Context, in *proto.DequeueRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DequeueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DequeueRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_Dequeue_Call) Return(dequeueResponse *proto.DequeueResponse, err error) *MockQueueServiceClient_Dequeue_Call {
	_c.Call.Return(dequeueResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Dequeue_Call) RunAndReturn(run func(ctx context.Context, in *proto.DequeueRequest, opts ...grpc.CallOption) (*proto.DequeueResponse, error)) *MockQueueServiceClient_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Enqueue(ctx context.Context, in *proto.EnqueueRequest, opts ...grpc.CallOption) (*proto.EnqueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *proto.EnqueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnqueueRequest, ...grpc.CallOption) (*proto.EnqueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnqueueRequest, ...grpc.CallOption) *proto.EnqueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EnqueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.EnqueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueueServiceClient_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.EnqueueRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) Enqueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Enqueue_Call {
	return &MockQueueServiceClient_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Enqueue_Call) Run(run func(ctx context.Context, in *proto.EnqueueRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.EnqueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.EnqueueRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_Enqueue_Call) Return(enqueueResponse *proto.EnqueueResponse, err error) *MockQueueServiceClient_Enqueue_Call {
	_c.Call.Return(enqueueResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Enqueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.EnqueueRequest, opts ...grpc.CallOption) (*proto.EnqueueResponse, error)) *MockQueueServiceClient_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) GetQueueInfo(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueServiceClient_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetQueueInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) GetQueueInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_GetQueueInfo_Call {
	return &MockQueueServiceClient_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) Run(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueInfoRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueStats provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) GetQueueStats(ctx context.Context, in *proto.GetQueueStatsRequest, opts ...grpc.CallOption) (*proto.GetQueueStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetQueueStats")
	}

	var r0 *proto.GetQueueStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueStatsRequest, ...grpc.CallOption) (*proto.GetQueueStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueStatsRequest, ...grpc.CallOption) *proto.GetQueueStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_GetQueueStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueStats'
type MockQueueServiceClient_GetQueueStats_Call struct {
	*mock.Call
}

// GetQueueStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetQueueStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) GetQueueStats(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_GetQueueStats_Call {
	return &MockQueueServiceClient_GetQueueStats_Call{Call: _e.mock.On("GetQueueStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_GetQueueStats_Call) Run(run func(ctx context.Context, in *proto.GetQueueStatsRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_GetQueueStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_GetQueueStats_Call) Return(getQueueStatsResponse *proto.GetQueueStatsResponse, err error) *MockQueueServiceClient_GetQueueStats_Call {
	_c.Call.Return(getQueueStatsResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_GetQueueStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetQueueStatsRequest, opts ...grpc.CallOption) (*proto.GetQueueStatsResponse, error)) *MockQueueServiceClient_GetQueueStats_Call {
	_c.Call.Return(run)
	return _c
}

// Peek provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Peek(ctx context.Context, in *proto.PeekRequest, opts ...grpc.CallOption) (*proto.PeekResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Peek")
	}

	var r0 *proto.PeekResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PeekRequest, ...grpc.CallOption) (*proto.PeekResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PeekRequest, ...grpc.CallOption) *proto.PeekResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PeekResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PeekRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Peek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peek'
type MockQueueServiceClient_Peek_Call struct {
	*mock.Call
}

// Peek is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.PeekRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) Peek(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Peek_Call {
	return &MockQueueServiceClient_Peek_Call{Call: _e.mock.On("Peek",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Peek_Call) Run(run func(ctx context.Context, in *proto.PeekRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Peek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PeekRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PeekRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_Peek_Call) Return(peekResponse *proto.PeekResponse, err error) *MockQueueServiceClient_Peek_Call {
	_c.Call.Return(peekResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Peek_Call) RunAndReturn(run func(ctx context.Context, in *proto.PeekRequest, opts ...grpc.CallOption) (*proto.PeekResponse, error)) *MockQueueServiceClient_Peek_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Publish(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption) (*proto.PublishResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *proto.PublishResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) (*proto.PublishResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) *proto.PublishResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockQueueServiceClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.PublishRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) Publish(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Publish_Call {
	return &MockQueueServiceClient_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Publish_Call) Run(run func(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PublishRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PublishRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_Publish_Call) Return(publishResponse *proto.PublishResponse, err error) *MockQueueServiceClient_Publish_Call {
	_c.Call.Return(publishResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Publish_Call) RunAndReturn(run func(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption) (*proto.PublishResponse, error)) *MockQueueServiceClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Subscribe(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.SubscribeResponse], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 grpc.ServerStreamingClient[proto.SubscribeResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.SubscribeResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.SubscribeResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.SubscribeResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockQueueServiceClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SubscribeRequest
//   - opts ...grpc.CallOption
func (_e *MockQueueServiceClient_Expecter) Subscribe(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Subscribe_Call {
	return &MockQueueServiceClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Subscribe_Call) Run(run func(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SubscribeRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SubscribeRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockQueueServiceClient_Subscribe_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.SubscribeResponse], err error) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockQueueServiceClient_Subscribe_Call) RunAndReturn(run func(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.SubscribeResponse], error)) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
