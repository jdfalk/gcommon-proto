// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueueServiceClient creates a new instance of MockQueueServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueServiceClient {
	mock := &MockQueueServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueServiceClient is an autogenerated mock type for the QueueServiceClient type
type MockQueueServiceClient struct {
	mock.Mock
}

type MockQueueServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueServiceClient) EXPECT() *MockQueueServiceClient_Expecter {
	return &MockQueueServiceClient_Expecter{mock: &_m.Mock}
}

// Acknowledge provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Acknowledge(ctx context.Context, in *proto.AcknowledgeRequest, opts ...grpc.CallOption) (*proto.AcknowledgeResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Acknowledge")
	}

	var r0 *proto.AcknowledgeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AcknowledgeRequest, ...grpc.CallOption) (*proto.AcknowledgeResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AcknowledgeRequest, ...grpc.CallOption) *proto.AcknowledgeResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AcknowledgeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AcknowledgeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Acknowledge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acknowledge'
type MockQueueServiceClient_Acknowledge_Call struct {
	*mock.Call
}

// Acknowledge is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) Acknowledge(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Acknowledge_Call {
	return &MockQueueServiceClient_Acknowledge_Call{Call: _e.mock.On("Acknowledge",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Acknowledge_Call) Run(run func(ctx context.Context, in *proto.AcknowledgeRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Acknowledge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.AcknowledgeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_Acknowledge_Call) Return(acknowledgeResponse *proto.AcknowledgeResponse, err error) *MockQueueServiceClient_Acknowledge_Call {
	_c.Call.Return(acknowledgeResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Acknowledge_Call) RunAndReturn(run func(ctx context.Context, in *proto.AcknowledgeRequest, opts ...grpc.CallOption) (*proto.AcknowledgeResponse, error)) *MockQueueServiceClient_Acknowledge_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQueue provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) CreateQueue(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption) (*proto.CreateQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *proto.CreateQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) (*proto.CreateQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) *proto.CreateQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_CreateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueue'
type MockQueueServiceClient_CreateQueue_Call struct {
	*mock.Call
}

// CreateQueue is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) CreateQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_CreateQueue_Call {
	return &MockQueueServiceClient_CreateQueue_Call{Call: _e.mock.On("CreateQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_CreateQueue_Call) Run(run func(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_CreateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.CreateQueueRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_CreateQueue_Call) Return(createQueueResponse *proto.CreateQueueResponse, err error) *MockQueueServiceClient_CreateQueue_Call {
	_c.Call.Return(createQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_CreateQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateQueueRequest, opts ...grpc.CallOption) (*proto.CreateQueueResponse, error)) *MockQueueServiceClient_CreateQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueue provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) DeleteQueue(ctx context.Context, in *proto.DeleteQueueRequest, opts ...grpc.CallOption) (*proto.DeleteQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *proto.DeleteQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteQueueRequest, ...grpc.CallOption) (*proto.DeleteQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteQueueRequest, ...grpc.CallOption) *proto.DeleteQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_DeleteQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueue'
type MockQueueServiceClient_DeleteQueue_Call struct {
	*mock.Call
}

// DeleteQueue is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) DeleteQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_DeleteQueue_Call {
	return &MockQueueServiceClient_DeleteQueue_Call{Call: _e.mock.On("DeleteQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_DeleteQueue_Call) Run(run func(ctx context.Context, in *proto.DeleteQueueRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_DeleteQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.DeleteQueueRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_DeleteQueue_Call) Return(deleteQueueResponse *proto.DeleteQueueResponse, err error) *MockQueueServiceClient_DeleteQueue_Call {
	_c.Call.Return(deleteQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_DeleteQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.DeleteQueueRequest, opts ...grpc.CallOption) (*proto.DeleteQueueResponse, error)) *MockQueueServiceClient_DeleteQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) GetQueueInfo(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueServiceClient_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) GetQueueInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_GetQueueInfo_Call {
	return &MockQueueServiceClient_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) Run(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GetQueueInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_GetQueueInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetQueueInfoRequest, opts ...grpc.CallOption) (*proto.GetQueueInfoResponse, error)) *MockQueueServiceClient_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListQueues provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) ListQueues(ctx context.Context, in *proto.ListQueuesRequest, opts ...grpc.CallOption) (*proto.ListQueuesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *proto.ListQueuesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListQueuesRequest, ...grpc.CallOption) (*proto.ListQueuesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListQueuesRequest, ...grpc.CallOption) *proto.ListQueuesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListQueuesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListQueuesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_ListQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQueues'
type MockQueueServiceClient_ListQueues_Call struct {
	*mock.Call
}

// ListQueues is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) ListQueues(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_ListQueues_Call {
	return &MockQueueServiceClient_ListQueues_Call{Call: _e.mock.On("ListQueues",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_ListQueues_Call) Run(run func(ctx context.Context, in *proto.ListQueuesRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_ListQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ListQueuesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_ListQueues_Call) Return(listQueuesResponse *proto.ListQueuesResponse, err error) *MockQueueServiceClient_ListQueues_Call {
	_c.Call.Return(listQueuesResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_ListQueues_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListQueuesRequest, opts ...grpc.CallOption) (*proto.ListQueuesResponse, error)) *MockQueueServiceClient_ListQueues_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Publish(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption) (*proto.PublishResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *proto.PublishResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) (*proto.PublishResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) *proto.PublishResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockQueueServiceClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) Publish(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Publish_Call {
	return &MockQueueServiceClient_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Publish_Call) Run(run func(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.PublishRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_Publish_Call) Return(publishResponse *proto.PublishResponse, err error) *MockQueueServiceClient_Publish_Call {
	_c.Call.Return(publishResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_Publish_Call) RunAndReturn(run func(ctx context.Context, in *proto.PublishRequest, opts ...grpc.CallOption) (*proto.PublishResponse, error)) *MockQueueServiceClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBatch provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) PublishBatch(ctx context.Context, in *proto.PublishBatchRequest, opts ...grpc.CallOption) (*proto.PublishBatchResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 *proto.PublishBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishBatchRequest, ...grpc.CallOption) (*proto.PublishBatchResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishBatchRequest, ...grpc.CallOption) *proto.PublishBatchResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishBatchRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_PublishBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBatch'
type MockQueueServiceClient_PublishBatch_Call struct {
	*mock.Call
}

// PublishBatch is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) PublishBatch(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_PublishBatch_Call {
	return &MockQueueServiceClient_PublishBatch_Call{Call: _e.mock.On("PublishBatch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_PublishBatch_Call) Run(run func(ctx context.Context, in *proto.PublishBatchRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_PublishBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.PublishBatchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_PublishBatch_Call) Return(publishBatchResponse *proto.PublishBatchResponse, err error) *MockQueueServiceClient_PublishBatch_Call {
	_c.Call.Return(publishBatchResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_PublishBatch_Call) RunAndReturn(run func(ctx context.Context, in *proto.PublishBatchRequest, opts ...grpc.CallOption) (*proto.PublishBatchResponse, error)) *MockQueueServiceClient_PublishBatch_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeQueue provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) PurgeQueue(ctx context.Context, in *proto.PurgeQueueRequest, opts ...grpc.CallOption) (*proto.PurgeQueueResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PurgeQueue")
	}

	var r0 *proto.PurgeQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeQueueRequest, ...grpc.CallOption) (*proto.PurgeQueueResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeQueueRequest, ...grpc.CallOption) *proto.PurgeQueueResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PurgeQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PurgeQueueRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_PurgeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeQueue'
type MockQueueServiceClient_PurgeQueue_Call struct {
	*mock.Call
}

// PurgeQueue is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) PurgeQueue(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_PurgeQueue_Call {
	return &MockQueueServiceClient_PurgeQueue_Call{Call: _e.mock.On("PurgeQueue",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_PurgeQueue_Call) Run(run func(ctx context.Context, in *proto.PurgeQueueRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_PurgeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.PurgeQueueRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_PurgeQueue_Call) Return(purgeQueueResponse *proto.PurgeQueueResponse, err error) *MockQueueServiceClient_PurgeQueue_Call {
	_c.Call.Return(purgeQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_PurgeQueue_Call) RunAndReturn(run func(ctx context.Context, in *proto.PurgeQueueRequest, opts ...grpc.CallOption) (*proto.PurgeQueueResponse, error)) *MockQueueServiceClient_PurgeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RejectMessage provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) RejectMessage(ctx context.Context, in *proto.RejectMessageRequest, opts ...grpc.CallOption) (*proto.RejectMessageResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RejectMessage")
	}

	var r0 *proto.RejectMessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RejectMessageRequest, ...grpc.CallOption) (*proto.RejectMessageResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RejectMessageRequest, ...grpc.CallOption) *proto.RejectMessageResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RejectMessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RejectMessageRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_RejectMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectMessage'
type MockQueueServiceClient_RejectMessage_Call struct {
	*mock.Call
}

// RejectMessage is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) RejectMessage(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_RejectMessage_Call {
	return &MockQueueServiceClient_RejectMessage_Call{Call: _e.mock.On("RejectMessage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_RejectMessage_Call) Run(run func(ctx context.Context, in *proto.RejectMessageRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_RejectMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.RejectMessageRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_RejectMessage_Call) Return(rejectMessageResponse *proto.RejectMessageResponse, err error) *MockQueueServiceClient_RejectMessage_Call {
	_c.Call.Return(rejectMessageResponse, err)
	return _c
}

func (_c *MockQueueServiceClient_RejectMessage_Call) RunAndReturn(run func(ctx context.Context, in *proto.RejectMessageRequest, opts ...grpc.CallOption) (*proto.RejectMessageResponse, error)) *MockQueueServiceClient_RejectMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockQueueServiceClient
func (_mock *MockQueueServiceClient) Subscribe(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.Message], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 grpc.ServerStreamingClient[proto.Message]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.Message], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.Message]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.Message])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SubscribeRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockQueueServiceClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockQueueServiceClient_Expecter) Subscribe(ctx interface{}, in interface{}, opts ...interface{}) *MockQueueServiceClient_Subscribe_Call {
	return &MockQueueServiceClient_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockQueueServiceClient_Subscribe_Call) Run(run func(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption)) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.SubscribeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockQueueServiceClient_Subscribe_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.Message], err error) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockQueueServiceClient_Subscribe_Call) RunAndReturn(run func(ctx context.Context, in *proto.SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.Message], error)) *MockQueueServiceClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
