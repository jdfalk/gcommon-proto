// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueueServiceServer creates a new instance of MockQueueServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueServiceServer {
	mock := &MockQueueServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueServiceServer is an autogenerated mock type for the QueueServiceServer type
type MockQueueServiceServer struct {
	mock.Mock
}

type MockQueueServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueServiceServer) EXPECT() *MockQueueServiceServer_Expecter {
	return &MockQueueServiceServer_Expecter{mock: &_m.Mock}
}

// Acknowledge provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Acknowledge(context1 context.Context, acknowledgeRequest *proto.AcknowledgeRequest) (*proto.AcknowledgeResponse, error) {
	ret := _mock.Called(context1, acknowledgeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Acknowledge")
	}

	var r0 *proto.AcknowledgeResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AcknowledgeRequest) (*proto.AcknowledgeResponse, error)); ok {
		return returnFunc(context1, acknowledgeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.AcknowledgeRequest) *proto.AcknowledgeResponse); ok {
		r0 = returnFunc(context1, acknowledgeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AcknowledgeResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.AcknowledgeRequest) error); ok {
		r1 = returnFunc(context1, acknowledgeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Acknowledge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Acknowledge'
type MockQueueServiceServer_Acknowledge_Call struct {
	*mock.Call
}

// Acknowledge is a helper method to define mock.On call
//   - context1
//   - acknowledgeRequest
func (_e *MockQueueServiceServer_Expecter) Acknowledge(context1 interface{}, acknowledgeRequest interface{}) *MockQueueServiceServer_Acknowledge_Call {
	return &MockQueueServiceServer_Acknowledge_Call{Call: _e.mock.On("Acknowledge", context1, acknowledgeRequest)}
}

func (_c *MockQueueServiceServer_Acknowledge_Call) Run(run func(context1 context.Context, acknowledgeRequest *proto.AcknowledgeRequest)) *MockQueueServiceServer_Acknowledge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AcknowledgeRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_Acknowledge_Call) Return(acknowledgeResponse *proto.AcknowledgeResponse, err error) *MockQueueServiceServer_Acknowledge_Call {
	_c.Call.Return(acknowledgeResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Acknowledge_Call) RunAndReturn(run func(context1 context.Context, acknowledgeRequest *proto.AcknowledgeRequest) (*proto.AcknowledgeResponse, error)) *MockQueueServiceServer_Acknowledge_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQueue provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) CreateQueue(context1 context.Context, createQueueRequest *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error) {
	ret := _mock.Called(context1, createQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *proto.CreateQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error)); ok {
		return returnFunc(context1, createQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateQueueRequest) *proto.CreateQueueResponse); ok {
		r0 = returnFunc(context1, createQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateQueueRequest) error); ok {
		r1 = returnFunc(context1, createQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_CreateQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQueue'
type MockQueueServiceServer_CreateQueue_Call struct {
	*mock.Call
}

// CreateQueue is a helper method to define mock.On call
//   - context1
//   - createQueueRequest
func (_e *MockQueueServiceServer_Expecter) CreateQueue(context1 interface{}, createQueueRequest interface{}) *MockQueueServiceServer_CreateQueue_Call {
	return &MockQueueServiceServer_CreateQueue_Call{Call: _e.mock.On("CreateQueue", context1, createQueueRequest)}
}

func (_c *MockQueueServiceServer_CreateQueue_Call) Run(run func(context1 context.Context, createQueueRequest *proto.CreateQueueRequest)) *MockQueueServiceServer_CreateQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CreateQueueRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_CreateQueue_Call) Return(createQueueResponse *proto.CreateQueueResponse, err error) *MockQueueServiceServer_CreateQueue_Call {
	_c.Call.Return(createQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_CreateQueue_Call) RunAndReturn(run func(context1 context.Context, createQueueRequest *proto.CreateQueueRequest) (*proto.CreateQueueResponse, error)) *MockQueueServiceServer_CreateQueue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueue provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) DeleteQueue(context1 context.Context, deleteQueueRequest *proto.DeleteQueueRequest) (*proto.DeleteQueueResponse, error) {
	ret := _mock.Called(context1, deleteQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *proto.DeleteQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteQueueRequest) (*proto.DeleteQueueResponse, error)); ok {
		return returnFunc(context1, deleteQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DeleteQueueRequest) *proto.DeleteQueueResponse); ok {
		r0 = returnFunc(context1, deleteQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DeleteQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DeleteQueueRequest) error); ok {
		r1 = returnFunc(context1, deleteQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_DeleteQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueue'
type MockQueueServiceServer_DeleteQueue_Call struct {
	*mock.Call
}

// DeleteQueue is a helper method to define mock.On call
//   - context1
//   - deleteQueueRequest
func (_e *MockQueueServiceServer_Expecter) DeleteQueue(context1 interface{}, deleteQueueRequest interface{}) *MockQueueServiceServer_DeleteQueue_Call {
	return &MockQueueServiceServer_DeleteQueue_Call{Call: _e.mock.On("DeleteQueue", context1, deleteQueueRequest)}
}

func (_c *MockQueueServiceServer_DeleteQueue_Call) Run(run func(context1 context.Context, deleteQueueRequest *proto.DeleteQueueRequest)) *MockQueueServiceServer_DeleteQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.DeleteQueueRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_DeleteQueue_Call) Return(deleteQueueResponse *proto.DeleteQueueResponse, err error) *MockQueueServiceServer_DeleteQueue_Call {
	_c.Call.Return(deleteQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_DeleteQueue_Call) RunAndReturn(run func(context1 context.Context, deleteQueueRequest *proto.DeleteQueueRequest) (*proto.DeleteQueueResponse, error)) *MockQueueServiceServer_DeleteQueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) GetQueueInfo(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error) {
	ret := _mock.Called(context1, getQueueInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(context1, getQueueInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(context1, getQueueInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest) error); ok {
		r1 = returnFunc(context1, getQueueInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueServiceServer_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - context1
//   - getQueueInfoRequest
func (_e *MockQueueServiceServer_Expecter) GetQueueInfo(context1 interface{}, getQueueInfoRequest interface{}) *MockQueueServiceServer_GetQueueInfo_Call {
	return &MockQueueServiceServer_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo", context1, getQueueInfoRequest)}
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) Run(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest)) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetQueueInfoRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) RunAndReturn(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListQueues provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) ListQueues(context1 context.Context, listQueuesRequest *proto.ListQueuesRequest) (*proto.ListQueuesResponse, error) {
	ret := _mock.Called(context1, listQueuesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *proto.ListQueuesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListQueuesRequest) (*proto.ListQueuesResponse, error)); ok {
		return returnFunc(context1, listQueuesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListQueuesRequest) *proto.ListQueuesResponse); ok {
		r0 = returnFunc(context1, listQueuesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListQueuesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListQueuesRequest) error); ok {
		r1 = returnFunc(context1, listQueuesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_ListQueues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQueues'
type MockQueueServiceServer_ListQueues_Call struct {
	*mock.Call
}

// ListQueues is a helper method to define mock.On call
//   - context1
//   - listQueuesRequest
func (_e *MockQueueServiceServer_Expecter) ListQueues(context1 interface{}, listQueuesRequest interface{}) *MockQueueServiceServer_ListQueues_Call {
	return &MockQueueServiceServer_ListQueues_Call{Call: _e.mock.On("ListQueues", context1, listQueuesRequest)}
}

func (_c *MockQueueServiceServer_ListQueues_Call) Run(run func(context1 context.Context, listQueuesRequest *proto.ListQueuesRequest)) *MockQueueServiceServer_ListQueues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ListQueuesRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_ListQueues_Call) Return(listQueuesResponse *proto.ListQueuesResponse, err error) *MockQueueServiceServer_ListQueues_Call {
	_c.Call.Return(listQueuesResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_ListQueues_Call) RunAndReturn(run func(context1 context.Context, listQueuesRequest *proto.ListQueuesRequest) (*proto.ListQueuesResponse, error)) *MockQueueServiceServer_ListQueues_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Publish(context1 context.Context, publishRequest *proto.PublishRequest) (*proto.PublishResponse, error) {
	ret := _mock.Called(context1, publishRequest)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *proto.PublishResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest) (*proto.PublishResponse, error)); ok {
		return returnFunc(context1, publishRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest) *proto.PublishResponse); ok {
		r0 = returnFunc(context1, publishRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishRequest) error); ok {
		r1 = returnFunc(context1, publishRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockQueueServiceServer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - context1
//   - publishRequest
func (_e *MockQueueServiceServer_Expecter) Publish(context1 interface{}, publishRequest interface{}) *MockQueueServiceServer_Publish_Call {
	return &MockQueueServiceServer_Publish_Call{Call: _e.mock.On("Publish", context1, publishRequest)}
}

func (_c *MockQueueServiceServer_Publish_Call) Run(run func(context1 context.Context, publishRequest *proto.PublishRequest)) *MockQueueServiceServer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.PublishRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_Publish_Call) Return(publishResponse *proto.PublishResponse, err error) *MockQueueServiceServer_Publish_Call {
	_c.Call.Return(publishResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Publish_Call) RunAndReturn(run func(context1 context.Context, publishRequest *proto.PublishRequest) (*proto.PublishResponse, error)) *MockQueueServiceServer_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBatch provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) PublishBatch(context1 context.Context, publishBatchRequest *proto.PublishBatchRequest) (*proto.PublishBatchResponse, error) {
	ret := _mock.Called(context1, publishBatchRequest)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 *proto.PublishBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishBatchRequest) (*proto.PublishBatchResponse, error)); ok {
		return returnFunc(context1, publishBatchRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishBatchRequest) *proto.PublishBatchResponse); ok {
		r0 = returnFunc(context1, publishBatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishBatchRequest) error); ok {
		r1 = returnFunc(context1, publishBatchRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_PublishBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBatch'
type MockQueueServiceServer_PublishBatch_Call struct {
	*mock.Call
}

// PublishBatch is a helper method to define mock.On call
//   - context1
//   - publishBatchRequest
func (_e *MockQueueServiceServer_Expecter) PublishBatch(context1 interface{}, publishBatchRequest interface{}) *MockQueueServiceServer_PublishBatch_Call {
	return &MockQueueServiceServer_PublishBatch_Call{Call: _e.mock.On("PublishBatch", context1, publishBatchRequest)}
}

func (_c *MockQueueServiceServer_PublishBatch_Call) Run(run func(context1 context.Context, publishBatchRequest *proto.PublishBatchRequest)) *MockQueueServiceServer_PublishBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.PublishBatchRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_PublishBatch_Call) Return(publishBatchResponse *proto.PublishBatchResponse, err error) *MockQueueServiceServer_PublishBatch_Call {
	_c.Call.Return(publishBatchResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_PublishBatch_Call) RunAndReturn(run func(context1 context.Context, publishBatchRequest *proto.PublishBatchRequest) (*proto.PublishBatchResponse, error)) *MockQueueServiceServer_PublishBatch_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeQueue provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) PurgeQueue(context1 context.Context, purgeQueueRequest *proto.PurgeQueueRequest) (*proto.PurgeQueueResponse, error) {
	ret := _mock.Called(context1, purgeQueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for PurgeQueue")
	}

	var r0 *proto.PurgeQueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeQueueRequest) (*proto.PurgeQueueResponse, error)); ok {
		return returnFunc(context1, purgeQueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PurgeQueueRequest) *proto.PurgeQueueResponse); ok {
		r0 = returnFunc(context1, purgeQueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PurgeQueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PurgeQueueRequest) error); ok {
		r1 = returnFunc(context1, purgeQueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_PurgeQueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeQueue'
type MockQueueServiceServer_PurgeQueue_Call struct {
	*mock.Call
}

// PurgeQueue is a helper method to define mock.On call
//   - context1
//   - purgeQueueRequest
func (_e *MockQueueServiceServer_Expecter) PurgeQueue(context1 interface{}, purgeQueueRequest interface{}) *MockQueueServiceServer_PurgeQueue_Call {
	return &MockQueueServiceServer_PurgeQueue_Call{Call: _e.mock.On("PurgeQueue", context1, purgeQueueRequest)}
}

func (_c *MockQueueServiceServer_PurgeQueue_Call) Run(run func(context1 context.Context, purgeQueueRequest *proto.PurgeQueueRequest)) *MockQueueServiceServer_PurgeQueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.PurgeQueueRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_PurgeQueue_Call) Return(purgeQueueResponse *proto.PurgeQueueResponse, err error) *MockQueueServiceServer_PurgeQueue_Call {
	_c.Call.Return(purgeQueueResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_PurgeQueue_Call) RunAndReturn(run func(context1 context.Context, purgeQueueRequest *proto.PurgeQueueRequest) (*proto.PurgeQueueResponse, error)) *MockQueueServiceServer_PurgeQueue_Call {
	_c.Call.Return(run)
	return _c
}

// RejectMessage provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) RejectMessage(context1 context.Context, rejectMessageRequest *proto.RejectMessageRequest) (*proto.RejectMessageResponse, error) {
	ret := _mock.Called(context1, rejectMessageRequest)

	if len(ret) == 0 {
		panic("no return value specified for RejectMessage")
	}

	var r0 *proto.RejectMessageResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RejectMessageRequest) (*proto.RejectMessageResponse, error)); ok {
		return returnFunc(context1, rejectMessageRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RejectMessageRequest) *proto.RejectMessageResponse); ok {
		r0 = returnFunc(context1, rejectMessageRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RejectMessageResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RejectMessageRequest) error); ok {
		r1 = returnFunc(context1, rejectMessageRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_RejectMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RejectMessage'
type MockQueueServiceServer_RejectMessage_Call struct {
	*mock.Call
}

// RejectMessage is a helper method to define mock.On call
//   - context1
//   - rejectMessageRequest
func (_e *MockQueueServiceServer_Expecter) RejectMessage(context1 interface{}, rejectMessageRequest interface{}) *MockQueueServiceServer_RejectMessage_Call {
	return &MockQueueServiceServer_RejectMessage_Call{Call: _e.mock.On("RejectMessage", context1, rejectMessageRequest)}
}

func (_c *MockQueueServiceServer_RejectMessage_Call) Run(run func(context1 context.Context, rejectMessageRequest *proto.RejectMessageRequest)) *MockQueueServiceServer_RejectMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.RejectMessageRequest))
	})
	return _c
}

func (_c *MockQueueServiceServer_RejectMessage_Call) Return(rejectMessageResponse *proto.RejectMessageResponse, err error) *MockQueueServiceServer_RejectMessage_Call {
	_c.Call.Return(rejectMessageResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_RejectMessage_Call) RunAndReturn(run func(context1 context.Context, rejectMessageRequest *proto.RejectMessageRequest) (*proto.RejectMessageResponse, error)) *MockQueueServiceServer_RejectMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Subscribe(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.Message]) error {
	ret := _mock.Called(subscribeRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.SubscribeRequest, grpc.ServerStreamingServer[proto.Message]) error); ok {
		r0 = returnFunc(subscribeRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueueServiceServer_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockQueueServiceServer_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subscribeRequest
//   - serverStreamingServer
func (_e *MockQueueServiceServer_Expecter) Subscribe(subscribeRequest interface{}, serverStreamingServer interface{}) *MockQueueServiceServer_Subscribe_Call {
	return &MockQueueServiceServer_Subscribe_Call{Call: _e.mock.On("Subscribe", subscribeRequest, serverStreamingServer)}
}

func (_c *MockQueueServiceServer_Subscribe_Call) Run(run func(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.Message])) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.SubscribeRequest), args[1].(grpc.ServerStreamingServer[proto.Message]))
	})
	return _c
}

func (_c *MockQueueServiceServer_Subscribe_Call) Return(err error) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueueServiceServer_Subscribe_Call) RunAndReturn(run func(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.Message]) error) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedQueueServiceServer provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) mustEmbedUnimplementedQueueServiceServer() {
	_mock.Called()
	return
}

// MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedQueueServiceServer'
type MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedQueueServiceServer is a helper method to define mock.On call
func (_e *MockQueueServiceServer_Expecter) mustEmbedUnimplementedQueueServiceServer() *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call {
	return &MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedQueueServiceServer")}
}

func (_c *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call) Run(run func()) *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call) Return() *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call) RunAndReturn(run func()) *MockQueueServiceServer_mustEmbedUnimplementedQueueServiceServer_Call {
	_c.Run(run)
	return _c
}
