// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockQueueServiceServer creates a new instance of MockQueueServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueueServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueueServiceServer {
	mock := &MockQueueServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQueueServiceServer is an autogenerated mock type for the QueueServiceServer type
type MockQueueServiceServer struct {
	mock.Mock
}

type MockQueueServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueueServiceServer) EXPECT() *MockQueueServiceServer_Expecter {
	return &MockQueueServiceServer_Expecter{mock: &_m.Mock}
}

// Dequeue provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Dequeue(context1 context.Context, dequeueRequest *proto.DequeueRequest) (*proto.DequeueResponse, error) {
	ret := _mock.Called(context1, dequeueRequest)

	if len(ret) == 0 {
		panic("no return value specified for Dequeue")
	}

	var r0 *proto.DequeueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DequeueRequest) (*proto.DequeueResponse, error)); ok {
		return returnFunc(context1, dequeueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DequeueRequest) *proto.DequeueResponse); ok {
		r0 = returnFunc(context1, dequeueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DequeueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DequeueRequest) error); ok {
		r1 = returnFunc(context1, dequeueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Dequeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dequeue'
type MockQueueServiceServer_Dequeue_Call struct {
	*mock.Call
}

// Dequeue is a helper method to define mock.On call
//   - context1 context.Context
//   - dequeueRequest *proto.DequeueRequest
func (_e *MockQueueServiceServer_Expecter) Dequeue(context1 interface{}, dequeueRequest interface{}) *MockQueueServiceServer_Dequeue_Call {
	return &MockQueueServiceServer_Dequeue_Call{Call: _e.mock.On("Dequeue", context1, dequeueRequest)}
}

func (_c *MockQueueServiceServer_Dequeue_Call) Run(run func(context1 context.Context, dequeueRequest *proto.DequeueRequest)) *MockQueueServiceServer_Dequeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DequeueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DequeueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_Dequeue_Call) Return(dequeueResponse *proto.DequeueResponse, err error) *MockQueueServiceServer_Dequeue_Call {
	_c.Call.Return(dequeueResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Dequeue_Call) RunAndReturn(run func(context1 context.Context, dequeueRequest *proto.DequeueRequest) (*proto.DequeueResponse, error)) *MockQueueServiceServer_Dequeue_Call {
	_c.Call.Return(run)
	return _c
}

// Enqueue provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Enqueue(context1 context.Context, enqueueRequest *proto.EnqueueRequest) (*proto.EnqueueResponse, error) {
	ret := _mock.Called(context1, enqueueRequest)

	if len(ret) == 0 {
		panic("no return value specified for Enqueue")
	}

	var r0 *proto.EnqueueResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnqueueRequest) (*proto.EnqueueResponse, error)); ok {
		return returnFunc(context1, enqueueRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnqueueRequest) *proto.EnqueueResponse); ok {
		r0 = returnFunc(context1, enqueueRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EnqueueResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.EnqueueRequest) error); ok {
		r1 = returnFunc(context1, enqueueRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockQueueServiceServer_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - context1 context.Context
//   - enqueueRequest *proto.EnqueueRequest
func (_e *MockQueueServiceServer_Expecter) Enqueue(context1 interface{}, enqueueRequest interface{}) *MockQueueServiceServer_Enqueue_Call {
	return &MockQueueServiceServer_Enqueue_Call{Call: _e.mock.On("Enqueue", context1, enqueueRequest)}
}

func (_c *MockQueueServiceServer_Enqueue_Call) Run(run func(context1 context.Context, enqueueRequest *proto.EnqueueRequest)) *MockQueueServiceServer_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.EnqueueRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.EnqueueRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_Enqueue_Call) Return(enqueueResponse *proto.EnqueueResponse, err error) *MockQueueServiceServer_Enqueue_Call {
	_c.Call.Return(enqueueResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Enqueue_Call) RunAndReturn(run func(context1 context.Context, enqueueRequest *proto.EnqueueRequest) (*proto.EnqueueResponse, error)) *MockQueueServiceServer_Enqueue_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueInfo provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) GetQueueInfo(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error) {
	ret := _mock.Called(context1, getQueueInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueInfo")
	}

	var r0 *proto.GetQueueInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)); ok {
		return returnFunc(context1, getQueueInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueInfoRequest) *proto.GetQueueInfoResponse); ok {
		r0 = returnFunc(context1, getQueueInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueInfoRequest) error); ok {
		r1 = returnFunc(context1, getQueueInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_GetQueueInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueInfo'
type MockQueueServiceServer_GetQueueInfo_Call struct {
	*mock.Call
}

// GetQueueInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getQueueInfoRequest *proto.GetQueueInfoRequest
func (_e *MockQueueServiceServer_Expecter) GetQueueInfo(context1 interface{}, getQueueInfoRequest interface{}) *MockQueueServiceServer_GetQueueInfo_Call {
	return &MockQueueServiceServer_GetQueueInfo_Call{Call: _e.mock.On("GetQueueInfo", context1, getQueueInfoRequest)}
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) Run(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest)) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) Return(getQueueInfoResponse *proto.GetQueueInfoResponse, err error) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Return(getQueueInfoResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_GetQueueInfo_Call) RunAndReturn(run func(context1 context.Context, getQueueInfoRequest *proto.GetQueueInfoRequest) (*proto.GetQueueInfoResponse, error)) *MockQueueServiceServer_GetQueueInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueStats provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) GetQueueStats(context1 context.Context, getQueueStatsRequest *proto.GetQueueStatsRequest) (*proto.GetQueueStatsResponse, error) {
	ret := _mock.Called(context1, getQueueStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueStats")
	}

	var r0 *proto.GetQueueStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueStatsRequest) (*proto.GetQueueStatsResponse, error)); ok {
		return returnFunc(context1, getQueueStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetQueueStatsRequest) *proto.GetQueueStatsResponse); ok {
		r0 = returnFunc(context1, getQueueStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetQueueStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetQueueStatsRequest) error); ok {
		r1 = returnFunc(context1, getQueueStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_GetQueueStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueStats'
type MockQueueServiceServer_GetQueueStats_Call struct {
	*mock.Call
}

// GetQueueStats is a helper method to define mock.On call
//   - context1 context.Context
//   - getQueueStatsRequest *proto.GetQueueStatsRequest
func (_e *MockQueueServiceServer_Expecter) GetQueueStats(context1 interface{}, getQueueStatsRequest interface{}) *MockQueueServiceServer_GetQueueStats_Call {
	return &MockQueueServiceServer_GetQueueStats_Call{Call: _e.mock.On("GetQueueStats", context1, getQueueStatsRequest)}
}

func (_c *MockQueueServiceServer_GetQueueStats_Call) Run(run func(context1 context.Context, getQueueStatsRequest *proto.GetQueueStatsRequest)) *MockQueueServiceServer_GetQueueStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetQueueStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetQueueStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_GetQueueStats_Call) Return(getQueueStatsResponse *proto.GetQueueStatsResponse, err error) *MockQueueServiceServer_GetQueueStats_Call {
	_c.Call.Return(getQueueStatsResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_GetQueueStats_Call) RunAndReturn(run func(context1 context.Context, getQueueStatsRequest *proto.GetQueueStatsRequest) (*proto.GetQueueStatsResponse, error)) *MockQueueServiceServer_GetQueueStats_Call {
	_c.Call.Return(run)
	return _c
}

// Peek provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Peek(context1 context.Context, peekRequest *proto.PeekRequest) (*proto.PeekResponse, error) {
	ret := _mock.Called(context1, peekRequest)

	if len(ret) == 0 {
		panic("no return value specified for Peek")
	}

	var r0 *proto.PeekResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PeekRequest) (*proto.PeekResponse, error)); ok {
		return returnFunc(context1, peekRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PeekRequest) *proto.PeekResponse); ok {
		r0 = returnFunc(context1, peekRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PeekResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PeekRequest) error); ok {
		r1 = returnFunc(context1, peekRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Peek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Peek'
type MockQueueServiceServer_Peek_Call struct {
	*mock.Call
}

// Peek is a helper method to define mock.On call
//   - context1 context.Context
//   - peekRequest *proto.PeekRequest
func (_e *MockQueueServiceServer_Expecter) Peek(context1 interface{}, peekRequest interface{}) *MockQueueServiceServer_Peek_Call {
	return &MockQueueServiceServer_Peek_Call{Call: _e.mock.On("Peek", context1, peekRequest)}
}

func (_c *MockQueueServiceServer_Peek_Call) Run(run func(context1 context.Context, peekRequest *proto.PeekRequest)) *MockQueueServiceServer_Peek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PeekRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PeekRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_Peek_Call) Return(peekResponse *proto.PeekResponse, err error) *MockQueueServiceServer_Peek_Call {
	_c.Call.Return(peekResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Peek_Call) RunAndReturn(run func(context1 context.Context, peekRequest *proto.PeekRequest) (*proto.PeekResponse, error)) *MockQueueServiceServer_Peek_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Publish(context1 context.Context, publishRequest *proto.PublishRequest) (*proto.PublishResponse, error) {
	ret := _mock.Called(context1, publishRequest)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *proto.PublishResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest) (*proto.PublishResponse, error)); ok {
		return returnFunc(context1, publishRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PublishRequest) *proto.PublishResponse); ok {
		r0 = returnFunc(context1, publishRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PublishResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PublishRequest) error); ok {
		r1 = returnFunc(context1, publishRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQueueServiceServer_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockQueueServiceServer_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - context1 context.Context
//   - publishRequest *proto.PublishRequest
func (_e *MockQueueServiceServer_Expecter) Publish(context1 interface{}, publishRequest interface{}) *MockQueueServiceServer_Publish_Call {
	return &MockQueueServiceServer_Publish_Call{Call: _e.mock.On("Publish", context1, publishRequest)}
}

func (_c *MockQueueServiceServer_Publish_Call) Run(run func(context1 context.Context, publishRequest *proto.PublishRequest)) *MockQueueServiceServer_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.PublishRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.PublishRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_Publish_Call) Return(publishResponse *proto.PublishResponse, err error) *MockQueueServiceServer_Publish_Call {
	_c.Call.Return(publishResponse, err)
	return _c
}

func (_c *MockQueueServiceServer_Publish_Call) RunAndReturn(run func(context1 context.Context, publishRequest *proto.PublishRequest) (*proto.PublishResponse, error)) *MockQueueServiceServer_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockQueueServiceServer
func (_mock *MockQueueServiceServer) Subscribe(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.SubscribeResponse]) error {
	ret := _mock.Called(subscribeRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.SubscribeRequest, grpc.ServerStreamingServer[proto.SubscribeResponse]) error); ok {
		r0 = returnFunc(subscribeRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQueueServiceServer_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockQueueServiceServer_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - subscribeRequest *proto.SubscribeRequest
//   - serverStreamingServer grpc.ServerStreamingServer[proto.SubscribeResponse]
func (_e *MockQueueServiceServer_Expecter) Subscribe(subscribeRequest interface{}, serverStreamingServer interface{}) *MockQueueServiceServer_Subscribe_Call {
	return &MockQueueServiceServer_Subscribe_Call{Call: _e.mock.On("Subscribe", subscribeRequest, serverStreamingServer)}
}

func (_c *MockQueueServiceServer_Subscribe_Call) Run(run func(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.SubscribeResponse])) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *proto.SubscribeRequest
		if args[0] != nil {
			arg0 = args[0].(*proto.SubscribeRequest)
		}
		var arg1 grpc.ServerStreamingServer[proto.SubscribeResponse]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[proto.SubscribeResponse])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQueueServiceServer_Subscribe_Call) Return(err error) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQueueServiceServer_Subscribe_Call) RunAndReturn(run func(subscribeRequest *proto.SubscribeRequest, serverStreamingServer grpc.ServerStreamingServer[proto.SubscribeResponse]) error) *MockQueueServiceServer_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
