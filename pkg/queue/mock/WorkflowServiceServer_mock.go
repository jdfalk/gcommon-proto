// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/queue/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWorkflowServiceServer creates a new instance of MockWorkflowServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflowServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflowServiceServer {
	mock := &MockWorkflowServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkflowServiceServer is an autogenerated mock type for the WorkflowServiceServer type
type MockWorkflowServiceServer struct {
	mock.Mock
}

type MockWorkflowServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflowServiceServer) EXPECT() *MockWorkflowServiceServer_Expecter {
	return &MockWorkflowServiceServer_Expecter{mock: &_m.Mock}
}

// StartWorkflow provides a mock function for the type MockWorkflowServiceServer
func (_mock *MockWorkflowServiceServer) StartWorkflow(context1 context.Context, startWorkflowRequest *proto.StartWorkflowRequest) (*proto.StartWorkflowResponse, error) {
	ret := _mock.Called(context1, startWorkflowRequest)

	if len(ret) == 0 {
		panic("no return value specified for StartWorkflow")
	}

	var r0 *proto.StartWorkflowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StartWorkflowRequest) (*proto.StartWorkflowResponse, error)); ok {
		return returnFunc(context1, startWorkflowRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StartWorkflowRequest) *proto.StartWorkflowResponse); ok {
		r0 = returnFunc(context1, startWorkflowRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StartWorkflowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StartWorkflowRequest) error); ok {
		r1 = returnFunc(context1, startWorkflowRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkflowServiceServer_StartWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartWorkflow'
type MockWorkflowServiceServer_StartWorkflow_Call struct {
	*mock.Call
}

// StartWorkflow is a helper method to define mock.On call
//   - context1 context.Context
//   - startWorkflowRequest *proto.StartWorkflowRequest
func (_e *MockWorkflowServiceServer_Expecter) StartWorkflow(context1 interface{}, startWorkflowRequest interface{}) *MockWorkflowServiceServer_StartWorkflow_Call {
	return &MockWorkflowServiceServer_StartWorkflow_Call{Call: _e.mock.On("StartWorkflow", context1, startWorkflowRequest)}
}

func (_c *MockWorkflowServiceServer_StartWorkflow_Call) Run(run func(context1 context.Context, startWorkflowRequest *proto.StartWorkflowRequest)) *MockWorkflowServiceServer_StartWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.StartWorkflowRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.StartWorkflowRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorkflowServiceServer_StartWorkflow_Call) Return(startWorkflowResponse *proto.StartWorkflowResponse, err error) *MockWorkflowServiceServer_StartWorkflow_Call {
	_c.Call.Return(startWorkflowResponse, err)
	return _c
}

func (_c *MockWorkflowServiceServer_StartWorkflow_Call) RunAndReturn(run func(context1 context.Context, startWorkflowRequest *proto.StartWorkflowRequest) (*proto.StartWorkflowResponse, error)) *MockWorkflowServiceServer_StartWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// StopWorkflow provides a mock function for the type MockWorkflowServiceServer
func (_mock *MockWorkflowServiceServer) StopWorkflow(context1 context.Context, stopWorkflowRequest *proto.StopWorkflowRequest) (*proto.StopWorkflowResponse, error) {
	ret := _mock.Called(context1, stopWorkflowRequest)

	if len(ret) == 0 {
		panic("no return value specified for StopWorkflow")
	}

	var r0 *proto.StopWorkflowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StopWorkflowRequest) (*proto.StopWorkflowResponse, error)); ok {
		return returnFunc(context1, stopWorkflowRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StopWorkflowRequest) *proto.StopWorkflowResponse); ok {
		r0 = returnFunc(context1, stopWorkflowRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StopWorkflowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StopWorkflowRequest) error); ok {
		r1 = returnFunc(context1, stopWorkflowRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkflowServiceServer_StopWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopWorkflow'
type MockWorkflowServiceServer_StopWorkflow_Call struct {
	*mock.Call
}

// StopWorkflow is a helper method to define mock.On call
//   - context1 context.Context
//   - stopWorkflowRequest *proto.StopWorkflowRequest
func (_e *MockWorkflowServiceServer_Expecter) StopWorkflow(context1 interface{}, stopWorkflowRequest interface{}) *MockWorkflowServiceServer_StopWorkflow_Call {
	return &MockWorkflowServiceServer_StopWorkflow_Call{Call: _e.mock.On("StopWorkflow", context1, stopWorkflowRequest)}
}

func (_c *MockWorkflowServiceServer_StopWorkflow_Call) Run(run func(context1 context.Context, stopWorkflowRequest *proto.StopWorkflowRequest)) *MockWorkflowServiceServer_StopWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.StopWorkflowRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.StopWorkflowRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorkflowServiceServer_StopWorkflow_Call) Return(stopWorkflowResponse *proto.StopWorkflowResponse, err error) *MockWorkflowServiceServer_StopWorkflow_Call {
	_c.Call.Return(stopWorkflowResponse, err)
	return _c
}

func (_c *MockWorkflowServiceServer_StopWorkflow_Call) RunAndReturn(run func(context1 context.Context, stopWorkflowRequest *proto.StopWorkflowRequest) (*proto.StopWorkflowResponse, error)) *MockWorkflowServiceServer_StopWorkflow_Call {
	_c.Call.Return(run)
	return _c
}
