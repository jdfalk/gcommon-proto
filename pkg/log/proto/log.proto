// file: pkg/log/proto/log.proto
edition = "2023";

package gcommon.v1.log;

import "pkg/common/proto/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";

import "google/protobuf/go_features.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/log/proto;logpb";
option features.(pb.go).api_level = API_HYBRID;

// LogService provides comprehensive logging capabilities
service LogService {
  // Log writes a log entry
  rpc Log(LogRequest) returns (LogResponse);

  // LogBatch writes multiple log entries
  rpc LogBatch(LogBatchRequest) returns (LogBatchResponse);

  // Query searches and retrieves log entries
  rpc Query(QueryLogRequest) returns (QueryLogResponse);

  // Stream returns a real-time stream of log entries
  rpc Stream(StreamLogRequest) returns (stream LogEntry);

  // GetLogLevel returns the current log level
  rpc GetLogLevel(GetLogLevelRequest) returns (GetLogLevelResponse);

  // SetLogLevel changes the log level
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse);

  // GetLogStats returns logging statistics
  rpc GetLogStats(GetLogStatsRequest) returns (GetLogStatsResponse);
}

// LogAdminService provides administrative logging operations
service LogAdminService {
  // CreateLogger creates a new logger instance
  rpc CreateLogger(CreateLoggerRequest) returns (CreateLoggerResponse);

  // UpdateLogger updates logger configuration
  rpc UpdateLogger(UpdateLoggerRequest) returns (UpdateLoggerResponse);

  // DeleteLogger removes a logger instance
  rpc DeleteLogger(DeleteLoggerRequest) returns (google.protobuf.Empty);

  // ListLoggers returns all available loggers
  rpc ListLoggers(ListLoggersRequest) returns (ListLoggersResponse);

  // ConfigureAppender configures log output destinations
  rpc ConfigureAppender(ConfigureAppenderRequest) returns (ConfigureAppenderResponse);

  // RotateLogs forces log rotation
  rpc RotateLogs(RotateLogsRequest) returns (RotateLogsResponse);

  // ArchiveLogs archives old log files
  rpc ArchiveLogs(ArchiveLogsRequest) returns (ArchiveLogsResponse);
}

// Log level enumeration
enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_TRACE = 1;
  LOG_LEVEL_DEBUG = 2;
  LOG_LEVEL_INFO = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_FATAL = 6;
}

// Log request for writing a single entry
message LogRequest {
  // Log entry to write
  LogEntry entry = 1;

  // Logger name (optional)
  string logger = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Log response
message LogResponse {
  // Success status
  bool success = 1;

  // Entry ID (if supported)
  string entry_id = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Batch log request
message LogBatchRequest {
  // Log entries to write
  repeated LogEntry entries = 1;

  // Logger name (optional)
  string logger = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;

  // Batch options
  BatchLogOptions options = 4;
}

// Batch log options
message BatchLogOptions {
  // Whether to fail fast on first error
  bool fail_fast = 1;

  // Maximum batch size
  int32 max_batch_size = 2;

  // Batch timeout
  google.protobuf.Duration timeout = 3;
}

// Batch log response
message LogBatchResponse {
  // Number of successfully written entries
  int32 success_count = 1;

  // Number of failed entries
  int32 failure_count = 2;

  // Entry IDs (if supported)
  repeated string entry_ids = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Log entry representation
message LogEntry {
  // Log level
  LogLevel level = 1;

  // Log message
  string message = 2;

  // Timestamp
  google.protobuf.Timestamp timestamp = 3;

  // Logger name
  string logger = 4;

  // Thread/goroutine information
  string thread = 5;

  // Source file information
  SourceLocation source = 6;

  // Structured fields
  map<string, google.protobuf.Any> fields = 7;

  // Tags for categorization
  repeated string tags = 8;

  // Trace ID for distributed tracing
  string trace_id = 9;

  // Span ID for distributed tracing
  string span_id = 10;

  // User ID associated with the log
  string user_id = 11;

  // Request ID
  string request_id = 12;

  // Error information (if log level is ERROR or FATAL)
  ErrorInfo error_info = 13;
}

// Source location information
message SourceLocation {
  // File name
  string file = 1;

  // Line number
  int32 line = 2;

  // Function name
  string function = 3;

  // Package/module name
  string package = 4;
}

// Error information for error/fatal logs
message ErrorInfo {
  // Error message
  string message = 1;

  // Error type/class
  string type = 2;

  // Stack trace
  string stack_trace = 3;

  // Error code
  string code = 4;

  // Additional error context
  map<string, string> context = 5;

  // Cause chain for error propagation
  repeated ErrorInfo causes = 6;
}

// Query log request
message QueryLogRequest {
  // Query filters
  LogFilter filter = 1;

  // Pagination
  gcommon.v1.common.Pagination pagination = 2;

  // Sorting options
  LogSort sort = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Log filter options
message LogFilter {
  // Log level filter
  repeated LogLevel levels = 1;

  // Logger name filter
  repeated string loggers = 2;

  // Message search (supports regex)
  string message_pattern = 3;

  // Time range filter
  TimeRange time_range = 4;

  // Tag filters
  repeated string tags = 5;

  // Trace ID filter
  string trace_id = 6;

  // User ID filter
  string user_id = 7;

  // Request ID filter
  string request_id = 8;

  // Field filters
  map<string, string> field_filters = 9;
}

// Time range for filtering
message TimeRange {
  // Start time (inclusive)
  google.protobuf.Timestamp start = 1;

  // End time (exclusive)
  google.protobuf.Timestamp end = 2;
}

// Log sorting options
message LogSort {
  // Sort field
  LogSortField field = 1;

  // Sort direction
  gcommon.v1.common.SortDirection direction = 2;
}

// Log sort fields
enum LogSortField {
  LOG_SORT_FIELD_UNSPECIFIED = 0;
  LOG_SORT_FIELD_TIMESTAMP = 1;
  LOG_SORT_FIELD_LEVEL = 2;
  LOG_SORT_FIELD_LOGGER = 3;
  LOG_SORT_FIELD_MESSAGE = 4;
}

// Query log response
message QueryLogResponse {
  // Found log entries
  repeated LogEntry entries = 1;

  // Pagination info
  gcommon.v1.common.Pagination pagination = 2;

  // Total count (if requested)
  int64 total_count = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Stream log request
message StreamLogRequest {
  // Stream filters
  LogFilter filter = 1;

  // Follow mode (tail -f style)
  bool follow = 2;

  // Buffer size
  int32 buffer_size = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Get log level request
message GetLogLevelRequest {
  // Logger name (optional, defaults to root)
  string logger = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Get log level response
message GetLogLevelResponse {
  // Current log level
  LogLevel level = 1;

  // Logger name
  string logger = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Set log level request
message SetLogLevelRequest {
  // New log level
  LogLevel level = 1;

  // Logger name (optional, defaults to root)
  string logger = 2;

  // Whether to persist the change
  bool persist = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Set log level response
message SetLogLevelResponse {
  // Previous log level
  LogLevel previous_level = 1;

  // New log level
  LogLevel new_level = 2;

  // Logger name
  string logger = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Get log stats request
message GetLogStatsRequest {
  // Time range for statistics
  TimeRange time_range = 1;

  // Logger filter
  repeated string loggers = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Get log stats response
message GetLogStatsResponse {
  // Overall statistics
  LogStatistics stats = 1;

  // Per-level statistics
  map<string, int64> level_counts = 2;

  // Per-logger statistics
  map<string, LogStatistics> logger_stats = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Log statistics
message LogStatistics {
  // Total log entries
  int64 total_entries = 1;

  // Entries per second (rate)
  double entries_per_second = 2;

  // Average entry size
  int64 average_size = 3;

  // Total size
  int64 total_size = 4;

  // Error count
  int64 error_count = 5;

  // Warning count
  int64 warning_count = 6;
}

// Admin service messages

// Create logger request
message CreateLoggerRequest {
  // Logger name
  string name = 1;

  // Logger configuration
  LoggerConfig config = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Logger configuration
message LoggerConfig {
  // Log level
  LogLevel level = 1;

  // Output appenders
  repeated AppenderConfig appenders = 2;

  // Whether to inherit from parent
  bool inherit_appenders = 3;

  // Whether to propagate to parent logger
  bool propagate = 4;

  // Additional properties
  map<string, string> properties = 5;
}

// Appender configuration
message AppenderConfig {
  // Appender name
  string name = 1;

  // Appender type
  AppenderType type = 2;

  // Output configuration
  OutputConfig output = 3;

  // Formatter configuration
  FormatterConfig formatter = 4;

  // Filter configuration
  FilterConfig filter = 5;
}

// Appender types
enum AppenderType {
  APPENDER_TYPE_UNSPECIFIED = 0;
  APPENDER_TYPE_CONSOLE = 1;
  APPENDER_TYPE_FILE = 2;
  APPENDER_TYPE_ROLLING_FILE = 3;
  APPENDER_TYPE_SYSLOG = 4;
  APPENDER_TYPE_NETWORK = 5;
  APPENDER_TYPE_DATABASE = 6;
}

// Output configuration
message OutputConfig {
  // Output target (file path, network address, etc.)
  string target = 1;

  // Additional output options
  map<string, string> options = 2;
}

// Formatter configuration
message FormatterConfig {
  // Formatter type
  FormatterType type = 1;

  // Format pattern
  string pattern = 2;

  // Timestamp format
  string timestamp_format = 3;

  // Additional formatter options
  map<string, string> options = 4;
}

// Formatter type enumeration
enum FormatterType {
  FORMATTER_TYPE_UNSPECIFIED = 0;
  FORMATTER_TYPE_TEXT = 1;
  FORMATTER_TYPE_JSON = 2;
  FORMATTER_TYPE_XML = 3;
  FORMATTER_TYPE_CUSTOM = 4;
}

// Filter configuration
message FilterConfig {
  // Filter type
  FilterType type = 1;

  // Filter criteria
  map<string, string> criteria = 2;
}

// Filter type enumeration
enum FilterType {
  FILTER_TYPE_UNSPECIFIED = 0;
  FILTER_TYPE_LEVEL = 1;
  FILTER_TYPE_LOGGER = 2;
  FILTER_TYPE_MESSAGE = 3;
  FILTER_TYPE_FIELD = 4;
}

// Create logger response
message CreateLoggerResponse {
  // Created logger name
  string name = 1;

  // Success status
  bool success = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Update logger request
message UpdateLoggerRequest {
  // Logger name
  string name = 1;

  // Updated configuration
  LoggerConfig config = 2;

  // Update mask
  google.protobuf.FieldMask update_mask = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Update logger response
message UpdateLoggerResponse {
  // Updated logger name
  string name = 1;

  // Success status
  bool success = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Delete logger request
message DeleteLoggerRequest {
  // Logger name
  string name = 1;

  // Force deletion
  bool force = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// List loggers request
message ListLoggersRequest {
  // Name pattern filter
  string name_pattern = 1;

  // Level filter
  repeated LogLevel levels = 2;

  // Pagination
  gcommon.v1.common.Pagination pagination = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// List loggers response
message ListLoggersResponse {
  // Logger information
  repeated LoggerInfo loggers = 1;

  // Pagination info
  gcommon.v1.common.Pagination pagination = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Logger information
message LoggerInfo {
  // Logger name
  string name = 1;

  // Current configuration
  LoggerConfig config = 2;

  // Parent logger
  string parent = 3;

  // Child loggers
  repeated string children = 4;

  // Statistics
  LogStatistics stats = 5;

  // Creation time
  google.protobuf.Timestamp created_at = 6;

  // Last modified time
  google.protobuf.Timestamp modified_at = 7;

  // Status
  LoggerStatus status = 8;
}

// Logger status enumeration
enum LoggerStatus {
  LOGGER_STATUS_UNSPECIFIED = 0;
  LOGGER_STATUS_ACTIVE = 1;
  LOGGER_STATUS_INACTIVE = 2;
  LOGGER_STATUS_ERROR = 3;
}

// Configure appender request
message ConfigureAppenderRequest {
  // Appender configuration
  AppenderConfig config = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Configure appender response
message ConfigureAppenderResponse {
  // Appender name
  string name = 1;

  // Success status
  bool success = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Rotate logs request
message RotateLogsRequest {
  // Logger pattern
  string logger_pattern = 1;

  // Force rotation
  bool force = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

// Rotate logs response
message RotateLogsResponse {
  // Number of rotated files
  int32 rotated_count = 1;

  // Rotated file paths
  repeated string rotated_files = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Archive logs request
message ArchiveLogsRequest {
  // Archive criteria
  ArchiveCriteria criteria = 1;

  // Archive destination
  string destination = 2;

  // Compression type
  CompressionType compression = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;
}

// Archive criteria
message ArchiveCriteria {
  // Older than duration
  google.protobuf.Duration older_than = 1;

  // Size threshold
  int64 size_threshold_bytes = 2;

  // Logger pattern
  string logger_pattern = 3;

  // Date range
  google.protobuf.Timestamp start_time = 4;
  google.protobuf.Timestamp end_time = 5;
}

// Compression type enumeration
enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  COMPRESSION_TYPE_NONE = 1;
  COMPRESSION_TYPE_GZIP = 2;
  COMPRESSION_TYPE_ZIP = 3;
  COMPRESSION_TYPE_BZIP2 = 4;
  COMPRESSION_TYPE_TAR_GZ = 5;
}

// Archive logs response
message ArchiveLogsResponse {
  // Number of archived files
  int32 archived_count = 1;

  // Archive file path
  string archive_path = 2;

  // Archive size
  int64 archive_size = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}
