// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/log/proto/messages/appender_config.proto

//go:build !protoopaque

package logpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AppenderConfig describes how logs are output
type AppenderConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique appender name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Appender backend type
	Type *AppenderType `protobuf:"varint,2,opt,name=type,enum=gcommon.v1.log.AppenderType" json:"type,omitempty"`
	// Output destination details
	Output *AppenderConfig_OutputConfig `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	// Formatting configuration
	Formatter *AppenderConfig_FormatterConfig `protobuf:"bytes,4,opt,name=formatter" json:"formatter,omitempty"`
	// Arbitrary appender properties
	Properties    map[string]string `protobuf:"bytes,5,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppenderConfig) Reset() {
	*x = AppenderConfig{}
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderConfig) ProtoMessage() {}

func (x *AppenderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AppenderConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AppenderConfig) GetType() AppenderType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AppenderType_APPENDER_TYPE_UNSPECIFIED
}

func (x *AppenderConfig) GetOutput() *AppenderConfig_OutputConfig {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *AppenderConfig) GetFormatter() *AppenderConfig_FormatterConfig {
	if x != nil {
		return x.Formatter
	}
	return nil
}

func (x *AppenderConfig) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AppenderConfig) SetName(v string) {
	x.Name = &v
}

func (x *AppenderConfig) SetType(v AppenderType) {
	x.Type = &v
}

func (x *AppenderConfig) SetOutput(v *AppenderConfig_OutputConfig) {
	x.Output = v
}

func (x *AppenderConfig) SetFormatter(v *AppenderConfig_FormatterConfig) {
	x.Formatter = v
}

func (x *AppenderConfig) SetProperties(v map[string]string) {
	x.Properties = v
}

func (x *AppenderConfig) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *AppenderConfig) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *AppenderConfig) HasOutput() bool {
	if x == nil {
		return false
	}
	return x.Output != nil
}

func (x *AppenderConfig) HasFormatter() bool {
	if x == nil {
		return false
	}
	return x.Formatter != nil
}

func (x *AppenderConfig) ClearName() {
	x.Name = nil
}

func (x *AppenderConfig) ClearType() {
	x.Type = nil
}

func (x *AppenderConfig) ClearOutput() {
	x.Output = nil
}

func (x *AppenderConfig) ClearFormatter() {
	x.Formatter = nil
}

type AppenderConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique appender name
	Name *string
	// Appender backend type
	Type *AppenderType
	// Output destination details
	Output *AppenderConfig_OutputConfig
	// Formatting configuration
	Formatter *AppenderConfig_FormatterConfig
	// Arbitrary appender properties
	Properties map[string]string
}

func (b0 AppenderConfig_builder) Build() *AppenderConfig {
	m0 := &AppenderConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Type = b.Type
	x.Output = b.Output
	x.Formatter = b.Formatter
	x.Properties = b.Properties
	return m0
}

// OutputConfig defines the destination for log entries
type AppenderConfig_OutputConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Output target (file path, network address, etc.)
	Target *string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	// Additional output options
	Options       map[string]string `protobuf:"bytes,2,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppenderConfig_OutputConfig) Reset() {
	*x = AppenderConfig_OutputConfig{}
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderConfig_OutputConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderConfig_OutputConfig) ProtoMessage() {}

func (x *AppenderConfig_OutputConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AppenderConfig_OutputConfig) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *AppenderConfig_OutputConfig) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AppenderConfig_OutputConfig) SetTarget(v string) {
	x.Target = &v
}

func (x *AppenderConfig_OutputConfig) SetOptions(v map[string]string) {
	x.Options = v
}

func (x *AppenderConfig_OutputConfig) HasTarget() bool {
	if x == nil {
		return false
	}
	return x.Target != nil
}

func (x *AppenderConfig_OutputConfig) ClearTarget() {
	x.Target = nil
}

type AppenderConfig_OutputConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Output target (file path, network address, etc.)
	Target *string
	// Additional output options
	Options map[string]string
}

func (b0 AppenderConfig_OutputConfig_builder) Build() *AppenderConfig_OutputConfig {
	m0 := &AppenderConfig_OutputConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Target = b.Target
	x.Options = b.Options
	return m0
}

// FormatterConfig defines how log entries are formatted
type AppenderConfig_FormatterConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Formatting strategy
	Type *FormatterType `protobuf:"varint,1,opt,name=type,enum=gcommon.v1.log.FormatterType" json:"type,omitempty"`
	// Optional format pattern
	Pattern       *string `protobuf:"bytes,2,opt,name=pattern" json:"pattern,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppenderConfig_FormatterConfig) Reset() {
	*x = AppenderConfig_FormatterConfig{}
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppenderConfig_FormatterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppenderConfig_FormatterConfig) ProtoMessage() {}

func (x *AppenderConfig_FormatterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_log_proto_messages_appender_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AppenderConfig_FormatterConfig) GetType() FormatterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FormatterType_FORMATTER_TYPE_UNSPECIFIED
}

func (x *AppenderConfig_FormatterConfig) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *AppenderConfig_FormatterConfig) SetType(v FormatterType) {
	x.Type = &v
}

func (x *AppenderConfig_FormatterConfig) SetPattern(v string) {
	x.Pattern = &v
}

func (x *AppenderConfig_FormatterConfig) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *AppenderConfig_FormatterConfig) HasPattern() bool {
	if x == nil {
		return false
	}
	return x.Pattern != nil
}

func (x *AppenderConfig_FormatterConfig) ClearType() {
	x.Type = nil
}

func (x *AppenderConfig_FormatterConfig) ClearPattern() {
	x.Pattern = nil
}

type AppenderConfig_FormatterConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Formatting strategy
	Type *FormatterType
	// Optional format pattern
	Pattern *string
}

func (b0 AppenderConfig_FormatterConfig_builder) Build() *AppenderConfig_FormatterConfig {
	m0 := &AppenderConfig_FormatterConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Pattern = b.Pattern
	return m0
}

var File_pkg_log_proto_messages_appender_config_proto protoreflect.FileDescriptor

const file_pkg_log_proto_messages_appender_config_proto_rawDesc = "" +
	"\n" +
	",pkg/log/proto/messages/appender_config.proto\x12\x0egcommon.v1.log\x1a!google/protobuf/go_features.proto\x1a'pkg/log/proto/enums/appender_type.proto\x1a(pkg/log/proto/enums/formatter_type.proto\"\x91\x05\n" +
	"\x0eAppenderConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1c.gcommon.v1.log.AppenderTypeR\x04type\x12C\n" +
	"\x06output\x18\x03 \x01(\v2+.gcommon.v1.log.AppenderConfig.OutputConfigR\x06output\x12L\n" +
	"\tformatter\x18\x04 \x01(\v2..gcommon.v1.log.AppenderConfig.FormatterConfigR\tformatter\x12N\n" +
	"\n" +
	"properties\x18\x05 \x03(\v2..gcommon.v1.log.AppenderConfig.PropertiesEntryR\n" +
	"properties\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xb6\x01\n" +
	"\fOutputConfig\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12R\n" +
	"\aoptions\x18\x02 \x03(\v28.gcommon.v1.log.AppenderConfig.OutputConfig.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a^\n" +
	"\x0fFormatterConfig\x121\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1d.gcommon.v1.log.FormatterTypeR\x04type\x12\x18\n" +
	"\apattern\x18\x02 \x01(\tR\apatternB\xa9\x01\n" +
	"\x12com.gcommon.v1.logB\x13AppenderConfigProtoP\x01Z\x1c../../../../pkg/log/pb;logpb\xa2\x02\x03GVL\xaa\x02\x0eGcommon.V1.Log\xca\x02\x0eGcommon\\V1\\Log\xe2\x02\x1aGcommon\\V1\\Log\\GPBMetadata\xea\x02\x10Gcommon::V1::Log\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_log_proto_messages_appender_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pkg_log_proto_messages_appender_config_proto_goTypes = []any{
	(*AppenderConfig)(nil),                 // 0: gcommon.v1.log.AppenderConfig
	nil,                                    // 1: gcommon.v1.log.AppenderConfig.PropertiesEntry
	(*AppenderConfig_OutputConfig)(nil),    // 2: gcommon.v1.log.AppenderConfig.OutputConfig
	(*AppenderConfig_FormatterConfig)(nil), // 3: gcommon.v1.log.AppenderConfig.FormatterConfig
	nil,                                    // 4: gcommon.v1.log.AppenderConfig.OutputConfig.OptionsEntry
	(AppenderType)(0),                      // 5: gcommon.v1.log.AppenderType
	(FormatterType)(0),                     // 6: gcommon.v1.log.FormatterType
}
var file_pkg_log_proto_messages_appender_config_proto_depIdxs = []int32{
	5, // 0: gcommon.v1.log.AppenderConfig.type:type_name -> gcommon.v1.log.AppenderType
	2, // 1: gcommon.v1.log.AppenderConfig.output:type_name -> gcommon.v1.log.AppenderConfig.OutputConfig
	3, // 2: gcommon.v1.log.AppenderConfig.formatter:type_name -> gcommon.v1.log.AppenderConfig.FormatterConfig
	1, // 3: gcommon.v1.log.AppenderConfig.properties:type_name -> gcommon.v1.log.AppenderConfig.PropertiesEntry
	4, // 4: gcommon.v1.log.AppenderConfig.OutputConfig.options:type_name -> gcommon.v1.log.AppenderConfig.OutputConfig.OptionsEntry
	6, // 5: gcommon.v1.log.AppenderConfig.FormatterConfig.type:type_name -> gcommon.v1.log.FormatterType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_log_proto_messages_appender_config_proto_init() }
func file_pkg_log_proto_messages_appender_config_proto_init() {
	if File_pkg_log_proto_messages_appender_config_proto != nil {
		return
	}
	file_pkg_log_proto_enums_appender_type_proto_init()
	file_pkg_log_proto_enums_formatter_type_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_log_proto_messages_appender_config_proto_rawDesc), len(file_pkg_log_proto_messages_appender_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_log_proto_messages_appender_config_proto_goTypes,
		DependencyIndexes: file_pkg_log_proto_messages_appender_config_proto_depIdxs,
		MessageInfos:      file_pkg_log_proto_messages_appender_config_proto_msgTypes,
	}.Build()
	File_pkg_log_proto_messages_appender_config_proto = out.File
	file_pkg_log_proto_messages_appender_config_proto_goTypes = nil
	file_pkg_log_proto_messages_appender_config_proto_depIdxs = nil
}
