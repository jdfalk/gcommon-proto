// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/log/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockLogServiceServer creates a new instance of MockLogServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogServiceServer {
	mock := &MockLogServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogServiceServer is an autogenerated mock type for the LogServiceServer type
type MockLogServiceServer struct {
	mock.Mock
}

type MockLogServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogServiceServer) EXPECT() *MockLogServiceServer_Expecter {
	return &MockLogServiceServer_Expecter{mock: &_m.Mock}
}

// ReadLogs provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) ReadLogs(context1 context.Context, readLogsRequest *proto.ReadLogsRequest) (*proto.ReadLogsResponse, error) {
	ret := _mock.Called(context1, readLogsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ReadLogs")
	}

	var r0 *proto.ReadLogsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReadLogsRequest) (*proto.ReadLogsResponse, error)); ok {
		return returnFunc(context1, readLogsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReadLogsRequest) *proto.ReadLogsResponse); ok {
		r0 = returnFunc(context1, readLogsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ReadLogsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ReadLogsRequest) error); ok {
		r1 = returnFunc(context1, readLogsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_ReadLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLogs'
type MockLogServiceServer_ReadLogs_Call struct {
	*mock.Call
}

// ReadLogs is a helper method to define mock.On call
//   - context1 context.Context
//   - readLogsRequest *proto.ReadLogsRequest
func (_e *MockLogServiceServer_Expecter) ReadLogs(context1 interface{}, readLogsRequest interface{}) *MockLogServiceServer_ReadLogs_Call {
	return &MockLogServiceServer_ReadLogs_Call{Call: _e.mock.On("ReadLogs", context1, readLogsRequest)}
}

func (_c *MockLogServiceServer_ReadLogs_Call) Run(run func(context1 context.Context, readLogsRequest *proto.ReadLogsRequest)) *MockLogServiceServer_ReadLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ReadLogsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ReadLogsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLogServiceServer_ReadLogs_Call) Return(readLogsResponse *proto.ReadLogsResponse, err error) *MockLogServiceServer_ReadLogs_Call {
	_c.Call.Return(readLogsResponse, err)
	return _c
}

func (_c *MockLogServiceServer_ReadLogs_Call) RunAndReturn(run func(context1 context.Context, readLogsRequest *proto.ReadLogsRequest) (*proto.ReadLogsResponse, error)) *MockLogServiceServer_ReadLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WriteLog provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) WriteLog(context1 context.Context, writeLogRequest *proto.WriteLogRequest) (*proto.WriteLogResponse, error) {
	ret := _mock.Called(context1, writeLogRequest)

	if len(ret) == 0 {
		panic("no return value specified for WriteLog")
	}

	var r0 *proto.WriteLogResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WriteLogRequest) (*proto.WriteLogResponse, error)); ok {
		return returnFunc(context1, writeLogRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WriteLogRequest) *proto.WriteLogResponse); ok {
		r0 = returnFunc(context1, writeLogRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WriteLogResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WriteLogRequest) error); ok {
		r1 = returnFunc(context1, writeLogRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_WriteLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteLog'
type MockLogServiceServer_WriteLog_Call struct {
	*mock.Call
}

// WriteLog is a helper method to define mock.On call
//   - context1 context.Context
//   - writeLogRequest *proto.WriteLogRequest
func (_e *MockLogServiceServer_Expecter) WriteLog(context1 interface{}, writeLogRequest interface{}) *MockLogServiceServer_WriteLog_Call {
	return &MockLogServiceServer_WriteLog_Call{Call: _e.mock.On("WriteLog", context1, writeLogRequest)}
}

func (_c *MockLogServiceServer_WriteLog_Call) Run(run func(context1 context.Context, writeLogRequest *proto.WriteLogRequest)) *MockLogServiceServer_WriteLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.WriteLogRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.WriteLogRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLogServiceServer_WriteLog_Call) Return(writeLogResponse *proto.WriteLogResponse, err error) *MockLogServiceServer_WriteLog_Call {
	_c.Call.Return(writeLogResponse, err)
	return _c
}

func (_c *MockLogServiceServer_WriteLog_Call) RunAndReturn(run func(context1 context.Context, writeLogRequest *proto.WriteLogRequest) (*proto.WriteLogResponse, error)) *MockLogServiceServer_WriteLog_Call {
	_c.Call.Return(run)
	return _c
}
