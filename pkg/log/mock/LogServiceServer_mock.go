// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/log/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockLogServiceServer creates a new instance of MockLogServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogServiceServer {
	mock := &MockLogServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogServiceServer is an autogenerated mock type for the LogServiceServer type
type MockLogServiceServer struct {
	mock.Mock
}

type MockLogServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogServiceServer) EXPECT() *MockLogServiceServer_Expecter {
	return &MockLogServiceServer_Expecter{mock: &_m.Mock}
}

// GetLevel provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) GetLevel(context1 context.Context, getLevelRequest *proto.GetLevelRequest) (*proto.GetLevelResponse, error) {
	ret := _mock.Called(context1, getLevelRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetLevel")
	}

	var r0 *proto.GetLevelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLevelRequest) (*proto.GetLevelResponse, error)); ok {
		return returnFunc(context1, getLevelRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLevelRequest) *proto.GetLevelResponse); ok {
		r0 = returnFunc(context1, getLevelRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetLevelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetLevelRequest) error); ok {
		r1 = returnFunc(context1, getLevelRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_GetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLevel'
type MockLogServiceServer_GetLevel_Call struct {
	*mock.Call
}

// GetLevel is a helper method to define mock.On call
//   - context1
//   - getLevelRequest
func (_e *MockLogServiceServer_Expecter) GetLevel(context1 interface{}, getLevelRequest interface{}) *MockLogServiceServer_GetLevel_Call {
	return &MockLogServiceServer_GetLevel_Call{Call: _e.mock.On("GetLevel", context1, getLevelRequest)}
}

func (_c *MockLogServiceServer_GetLevel_Call) Run(run func(context1 context.Context, getLevelRequest *proto.GetLevelRequest)) *MockLogServiceServer_GetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetLevelRequest))
	})
	return _c
}

func (_c *MockLogServiceServer_GetLevel_Call) Return(getLevelResponse *proto.GetLevelResponse, err error) *MockLogServiceServer_GetLevel_Call {
	_c.Call.Return(getLevelResponse, err)
	return _c
}

func (_c *MockLogServiceServer_GetLevel_Call) RunAndReturn(run func(context1 context.Context, getLevelRequest *proto.GetLevelRequest) (*proto.GetLevelResponse, error)) *MockLogServiceServer_GetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) GetLogs(getLogsRequest *proto.GetLogsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.LogEntry]) error {
	ret := _mock.Called(getLogsRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.GetLogsRequest, grpc.ServerStreamingServer[proto.LogEntry]) error); ok {
		r0 = returnFunc(getLogsRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLogServiceServer_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockLogServiceServer_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - getLogsRequest
//   - serverStreamingServer
func (_e *MockLogServiceServer_Expecter) GetLogs(getLogsRequest interface{}, serverStreamingServer interface{}) *MockLogServiceServer_GetLogs_Call {
	return &MockLogServiceServer_GetLogs_Call{Call: _e.mock.On("GetLogs", getLogsRequest, serverStreamingServer)}
}

func (_c *MockLogServiceServer_GetLogs_Call) Run(run func(getLogsRequest *proto.GetLogsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.LogEntry])) *MockLogServiceServer_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.GetLogsRequest), args[1].(grpc.ServerStreamingServer[proto.LogEntry]))
	})
	return _c
}

func (_c *MockLogServiceServer_GetLogs_Call) Return(err error) *MockLogServiceServer_GetLogs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLogServiceServer_GetLogs_Call) RunAndReturn(run func(getLogsRequest *proto.GetLogsRequest, serverStreamingServer grpc.ServerStreamingServer[proto.LogEntry]) error) *MockLogServiceServer_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) Log(context1 context.Context, logRequest *proto.LogRequest) (*proto.LogResponse, error) {
	ret := _mock.Called(context1, logRequest)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.LogResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) (*proto.LogResponse, error)); ok {
		return returnFunc(context1, logRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest) *proto.LogResponse); ok {
		r0 = returnFunc(context1, logRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.LogRequest) error); ok {
		r1 = returnFunc(context1, logRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogServiceServer_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - context1
//   - logRequest
func (_e *MockLogServiceServer_Expecter) Log(context1 interface{}, logRequest interface{}) *MockLogServiceServer_Log_Call {
	return &MockLogServiceServer_Log_Call{Call: _e.mock.On("Log", context1, logRequest)}
}

func (_c *MockLogServiceServer_Log_Call) Run(run func(context1 context.Context, logRequest *proto.LogRequest)) *MockLogServiceServer_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogRequest))
	})
	return _c
}

func (_c *MockLogServiceServer_Log_Call) Return(logResponse *proto.LogResponse, err error) *MockLogServiceServer_Log_Call {
	_c.Call.Return(logResponse, err)
	return _c
}

func (_c *MockLogServiceServer_Log_Call) RunAndReturn(run func(context1 context.Context, logRequest *proto.LogRequest) (*proto.LogResponse, error)) *MockLogServiceServer_Log_Call {
	_c.Call.Return(run)
	return _c
}

// LogBatch provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) LogBatch(context1 context.Context, logBatchRequest *proto.LogBatchRequest) (*proto.LogBatchResponse, error) {
	ret := _mock.Called(context1, logBatchRequest)

	if len(ret) == 0 {
		panic("no return value specified for LogBatch")
	}

	var r0 *proto.LogBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogBatchRequest) (*proto.LogBatchResponse, error)); ok {
		return returnFunc(context1, logBatchRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogBatchRequest) *proto.LogBatchResponse); ok {
		r0 = returnFunc(context1, logBatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.LogBatchRequest) error); ok {
		r1 = returnFunc(context1, logBatchRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_LogBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogBatch'
type MockLogServiceServer_LogBatch_Call struct {
	*mock.Call
}

// LogBatch is a helper method to define mock.On call
//   - context1
//   - logBatchRequest
func (_e *MockLogServiceServer_Expecter) LogBatch(context1 interface{}, logBatchRequest interface{}) *MockLogServiceServer_LogBatch_Call {
	return &MockLogServiceServer_LogBatch_Call{Call: _e.mock.On("LogBatch", context1, logBatchRequest)}
}

func (_c *MockLogServiceServer_LogBatch_Call) Run(run func(context1 context.Context, logBatchRequest *proto.LogBatchRequest)) *MockLogServiceServer_LogBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.LogBatchRequest))
	})
	return _c
}

func (_c *MockLogServiceServer_LogBatch_Call) Return(logBatchResponse *proto.LogBatchResponse, err error) *MockLogServiceServer_LogBatch_Call {
	_c.Call.Return(logBatchResponse, err)
	return _c
}

func (_c *MockLogServiceServer_LogBatch_Call) RunAndReturn(run func(context1 context.Context, logBatchRequest *proto.LogBatchRequest) (*proto.LogBatchResponse, error)) *MockLogServiceServer_LogBatch_Call {
	_c.Call.Return(run)
	return _c
}

// SetLevel provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) SetLevel(context1 context.Context, setLevelRequest *proto.SetLevelRequest) (*proto.SetLevelResponse, error) {
	ret := _mock.Called(context1, setLevelRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetLevel")
	}

	var r0 *proto.SetLevelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetLevelRequest) (*proto.SetLevelResponse, error)); ok {
		return returnFunc(context1, setLevelRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetLevelRequest) *proto.SetLevelResponse); ok {
		r0 = returnFunc(context1, setLevelRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetLevelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetLevelRequest) error); ok {
		r1 = returnFunc(context1, setLevelRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceServer_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockLogServiceServer_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - context1
//   - setLevelRequest
func (_e *MockLogServiceServer_Expecter) SetLevel(context1 interface{}, setLevelRequest interface{}) *MockLogServiceServer_SetLevel_Call {
	return &MockLogServiceServer_SetLevel_Call{Call: _e.mock.On("SetLevel", context1, setLevelRequest)}
}

func (_c *MockLogServiceServer_SetLevel_Call) Run(run func(context1 context.Context, setLevelRequest *proto.SetLevelRequest)) *MockLogServiceServer_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetLevelRequest))
	})
	return _c
}

func (_c *MockLogServiceServer_SetLevel_Call) Return(setLevelResponse *proto.SetLevelResponse, err error) *MockLogServiceServer_SetLevel_Call {
	_c.Call.Return(setLevelResponse, err)
	return _c
}

func (_c *MockLogServiceServer_SetLevel_Call) RunAndReturn(run func(context1 context.Context, setLevelRequest *proto.SetLevelRequest) (*proto.SetLevelResponse, error)) *MockLogServiceServer_SetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedLogServiceServer provides a mock function for the type MockLogServiceServer
func (_mock *MockLogServiceServer) mustEmbedUnimplementedLogServiceServer() {
	_mock.Called()
	return
}

// MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedLogServiceServer'
type MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedLogServiceServer is a helper method to define mock.On call
func (_e *MockLogServiceServer_Expecter) mustEmbedUnimplementedLogServiceServer() *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call {
	return &MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedLogServiceServer")}
}

func (_c *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call) Run(run func()) *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call) Return() *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call) RunAndReturn(run func()) *MockLogServiceServer_mustEmbedUnimplementedLogServiceServer_Call {
	_c.Run(run)
	return _c
}
