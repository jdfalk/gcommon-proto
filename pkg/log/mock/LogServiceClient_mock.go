// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/log/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockLogServiceClient creates a new instance of MockLogServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogServiceClient {
	mock := &MockLogServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogServiceClient is an autogenerated mock type for the LogServiceClient type
type MockLogServiceClient struct {
	mock.Mock
}

type MockLogServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogServiceClient) EXPECT() *MockLogServiceClient_Expecter {
	return &MockLogServiceClient_Expecter{mock: &_m.Mock}
}

// GetLevel provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) GetLevel(ctx context.Context, in *proto.GetLevelRequest, opts ...grpc.CallOption) (*proto.GetLevelResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetLevel")
	}

	var r0 *proto.GetLevelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLevelRequest, ...grpc.CallOption) (*proto.GetLevelResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLevelRequest, ...grpc.CallOption) *proto.GetLevelResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetLevelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetLevelRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_GetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLevel'
type MockLogServiceClient_GetLevel_Call struct {
	*mock.Call
}

// GetLevel is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockLogServiceClient_Expecter) GetLevel(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_GetLevel_Call {
	return &MockLogServiceClient_GetLevel_Call{Call: _e.mock.On("GetLevel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_GetLevel_Call) Run(run func(ctx context.Context, in *proto.GetLevelRequest, opts ...grpc.CallOption)) *MockLogServiceClient_GetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GetLevelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLogServiceClient_GetLevel_Call) Return(getLevelResponse *proto.GetLevelResponse, err error) *MockLogServiceClient_GetLevel_Call {
	_c.Call.Return(getLevelResponse, err)
	return _c
}

func (_c *MockLogServiceClient_GetLevel_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetLevelRequest, opts ...grpc.CallOption) (*proto.GetLevelResponse, error)) *MockLogServiceClient_GetLevel_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) GetLogs(ctx context.Context, in *proto.GetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.LogEntry], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 grpc.ServerStreamingClient[proto.LogEntry]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLogsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.LogEntry], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetLogsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.LogEntry]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.LogEntry])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetLogsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockLogServiceClient_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockLogServiceClient_Expecter) GetLogs(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_GetLogs_Call {
	return &MockLogServiceClient_GetLogs_Call{Call: _e.mock.On("GetLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_GetLogs_Call) Run(run func(ctx context.Context, in *proto.GetLogsRequest, opts ...grpc.CallOption)) *MockLogServiceClient_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.GetLogsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLogServiceClient_GetLogs_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.LogEntry], err error) *MockLogServiceClient_GetLogs_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockLogServiceClient_GetLogs_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.LogEntry], error)) *MockLogServiceClient_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) Log(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption) (*proto.LogResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 *proto.LogResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) (*proto.LogResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) *proto.LogResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.LogRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockLogServiceClient_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockLogServiceClient_Expecter) Log(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_Log_Call {
	return &MockLogServiceClient_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_Log_Call) Run(run func(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption)) *MockLogServiceClient_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.LogRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLogServiceClient_Log_Call) Return(logResponse *proto.LogResponse, err error) *MockLogServiceClient_Log_Call {
	_c.Call.Return(logResponse, err)
	return _c
}

func (_c *MockLogServiceClient_Log_Call) RunAndReturn(run func(ctx context.Context, in *proto.LogRequest, opts ...grpc.CallOption) (*proto.LogResponse, error)) *MockLogServiceClient_Log_Call {
	_c.Call.Return(run)
	return _c
}

// LogBatch provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) LogBatch(ctx context.Context, in *proto.LogBatchRequest, opts ...grpc.CallOption) (*proto.LogBatchResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for LogBatch")
	}

	var r0 *proto.LogBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogBatchRequest, ...grpc.CallOption) (*proto.LogBatchResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.LogBatchRequest, ...grpc.CallOption) *proto.LogBatchResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.LogBatchRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_LogBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogBatch'
type MockLogServiceClient_LogBatch_Call struct {
	*mock.Call
}

// LogBatch is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockLogServiceClient_Expecter) LogBatch(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_LogBatch_Call {
	return &MockLogServiceClient_LogBatch_Call{Call: _e.mock.On("LogBatch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_LogBatch_Call) Run(run func(ctx context.Context, in *proto.LogBatchRequest, opts ...grpc.CallOption)) *MockLogServiceClient_LogBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.LogBatchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLogServiceClient_LogBatch_Call) Return(logBatchResponse *proto.LogBatchResponse, err error) *MockLogServiceClient_LogBatch_Call {
	_c.Call.Return(logBatchResponse, err)
	return _c
}

func (_c *MockLogServiceClient_LogBatch_Call) RunAndReturn(run func(ctx context.Context, in *proto.LogBatchRequest, opts ...grpc.CallOption) (*proto.LogBatchResponse, error)) *MockLogServiceClient_LogBatch_Call {
	_c.Call.Return(run)
	return _c
}

// SetLevel provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) SetLevel(ctx context.Context, in *proto.SetLevelRequest, opts ...grpc.CallOption) (*proto.SetLevelResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetLevel")
	}

	var r0 *proto.SetLevelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetLevelRequest, ...grpc.CallOption) (*proto.SetLevelResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetLevelRequest, ...grpc.CallOption) *proto.SetLevelResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetLevelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetLevelRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_SetLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLevel'
type MockLogServiceClient_SetLevel_Call struct {
	*mock.Call
}

// SetLevel is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockLogServiceClient_Expecter) SetLevel(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_SetLevel_Call {
	return &MockLogServiceClient_SetLevel_Call{Call: _e.mock.On("SetLevel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_SetLevel_Call) Run(run func(ctx context.Context, in *proto.SetLevelRequest, opts ...grpc.CallOption)) *MockLogServiceClient_SetLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.SetLevelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockLogServiceClient_SetLevel_Call) Return(setLevelResponse *proto.SetLevelResponse, err error) *MockLogServiceClient_SetLevel_Call {
	_c.Call.Return(setLevelResponse, err)
	return _c
}

func (_c *MockLogServiceClient_SetLevel_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetLevelRequest, opts ...grpc.CallOption) (*proto.SetLevelResponse, error)) *MockLogServiceClient_SetLevel_Call {
	_c.Call.Return(run)
	return _c
}
