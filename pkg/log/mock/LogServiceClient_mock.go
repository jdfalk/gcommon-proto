// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/log/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockLogServiceClient creates a new instance of MockLogServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogServiceClient {
	mock := &MockLogServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogServiceClient is an autogenerated mock type for the LogServiceClient type
type MockLogServiceClient struct {
	mock.Mock
}

type MockLogServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogServiceClient) EXPECT() *MockLogServiceClient_Expecter {
	return &MockLogServiceClient_Expecter{mock: &_m.Mock}
}

// ReadLogs provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) ReadLogs(ctx context.Context, in *proto.ReadLogsRequest, opts ...grpc.CallOption) (*proto.ReadLogsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReadLogs")
	}

	var r0 *proto.ReadLogsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReadLogsRequest, ...grpc.CallOption) (*proto.ReadLogsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ReadLogsRequest, ...grpc.CallOption) *proto.ReadLogsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ReadLogsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ReadLogsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_ReadLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLogs'
type MockLogServiceClient_ReadLogs_Call struct {
	*mock.Call
}

// ReadLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ReadLogsRequest
//   - opts ...grpc.CallOption
func (_e *MockLogServiceClient_Expecter) ReadLogs(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_ReadLogs_Call {
	return &MockLogServiceClient_ReadLogs_Call{Call: _e.mock.On("ReadLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_ReadLogs_Call) Run(run func(ctx context.Context, in *proto.ReadLogsRequest, opts ...grpc.CallOption)) *MockLogServiceClient_ReadLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ReadLogsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ReadLogsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogServiceClient_ReadLogs_Call) Return(readLogsResponse *proto.ReadLogsResponse, err error) *MockLogServiceClient_ReadLogs_Call {
	_c.Call.Return(readLogsResponse, err)
	return _c
}

func (_c *MockLogServiceClient_ReadLogs_Call) RunAndReturn(run func(ctx context.Context, in *proto.ReadLogsRequest, opts ...grpc.CallOption) (*proto.ReadLogsResponse, error)) *MockLogServiceClient_ReadLogs_Call {
	_c.Call.Return(run)
	return _c
}

// WriteLog provides a mock function for the type MockLogServiceClient
func (_mock *MockLogServiceClient) WriteLog(ctx context.Context, in *proto.WriteLogRequest, opts ...grpc.CallOption) (*proto.WriteLogResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for WriteLog")
	}

	var r0 *proto.WriteLogResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WriteLogRequest, ...grpc.CallOption) (*proto.WriteLogResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WriteLogRequest, ...grpc.CallOption) *proto.WriteLogResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WriteLogResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WriteLogRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogServiceClient_WriteLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteLog'
type MockLogServiceClient_WriteLog_Call struct {
	*mock.Call
}

// WriteLog is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.WriteLogRequest
//   - opts ...grpc.CallOption
func (_e *MockLogServiceClient_Expecter) WriteLog(ctx interface{}, in interface{}, opts ...interface{}) *MockLogServiceClient_WriteLog_Call {
	return &MockLogServiceClient_WriteLog_Call{Call: _e.mock.On("WriteLog",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockLogServiceClient_WriteLog_Call) Run(run func(ctx context.Context, in *proto.WriteLogRequest, opts ...grpc.CallOption)) *MockLogServiceClient_WriteLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.WriteLogRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.WriteLogRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogServiceClient_WriteLog_Call) Return(writeLogResponse *proto.WriteLogResponse, err error) *MockLogServiceClient_WriteLog_Call {
	_c.Call.Return(writeLogResponse, err)
	return _c
}

func (_c *MockLogServiceClient_WriteLog_Call) RunAndReturn(run func(ctx context.Context, in *proto.WriteLogRequest, opts ...grpc.CallOption) (*proto.WriteLogResponse, error)) *MockLogServiceClient_WriteLog_Call {
	_c.Call.Return(run)
	return _c
}
