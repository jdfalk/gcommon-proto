// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/common/proto/messages/subscription_options.proto

//go:build protoopaque

package commonpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Subscription options for configuring streaming behavior.
// Controls historical data inclusion, batching, acknowledgment,
// and keep-alive settings for optimal streaming performance.
type SubscriptionOptions struct {
	state                     protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_IncludeHistory bool                   `protobuf:"varint,1,opt,name=include_history,json=includeHistory"`
	xxx_hidden_MaxBatchSize   int32                  `protobuf:"varint,2,opt,name=max_batch_size,json=maxBatchSize"`
	xxx_hidden_AckMode        AckMode                `protobuf:"varint,3,opt,name=ack_mode,json=ackMode,enum=gcommon.v1.common.AckMode"`
	xxx_hidden_KeepAlive      *durationpb.Duration   `protobuf:"bytes,4,opt,name=keep_alive,json=keepAlive"`
	XXX_raceDetectHookData    protoimpl.RaceDetectHookData
	XXX_presence              [1]uint32
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SubscriptionOptions) Reset() {
	*x = SubscriptionOptions{}
	mi := &file_pkg_common_proto_messages_subscription_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionOptions) ProtoMessage() {}

func (x *SubscriptionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_messages_subscription_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscriptionOptions) GetIncludeHistory() bool {
	if x != nil {
		return x.xxx_hidden_IncludeHistory
	}
	return false
}

func (x *SubscriptionOptions) GetMaxBatchSize() int32 {
	if x != nil {
		return x.xxx_hidden_MaxBatchSize
	}
	return 0
}

func (x *SubscriptionOptions) GetAckMode() AckMode {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 2) {
			return x.xxx_hidden_AckMode
		}
	}
	return AckMode_ACK_MODE_UNSPECIFIED
}

func (x *SubscriptionOptions) GetKeepAlive() *durationpb.Duration {
	if x != nil {
		return x.xxx_hidden_KeepAlive
	}
	return nil
}

func (x *SubscriptionOptions) SetIncludeHistory(v bool) {
	x.xxx_hidden_IncludeHistory = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *SubscriptionOptions) SetMaxBatchSize(v int32) {
	x.xxx_hidden_MaxBatchSize = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *SubscriptionOptions) SetAckMode(v AckMode) {
	x.xxx_hidden_AckMode = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SubscriptionOptions) SetKeepAlive(v *durationpb.Duration) {
	x.xxx_hidden_KeepAlive = v
}

func (x *SubscriptionOptions) HasIncludeHistory() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SubscriptionOptions) HasMaxBatchSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SubscriptionOptions) HasAckMode() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SubscriptionOptions) HasKeepAlive() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_KeepAlive != nil
}

func (x *SubscriptionOptions) ClearIncludeHistory() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_IncludeHistory = false
}

func (x *SubscriptionOptions) ClearMaxBatchSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_MaxBatchSize = 0
}

func (x *SubscriptionOptions) ClearAckMode() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_AckMode = AckMode_ACK_MODE_UNSPECIFIED
}

func (x *SubscriptionOptions) ClearKeepAlive() {
	x.xxx_hidden_KeepAlive = nil
}

type SubscriptionOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to include historical data in the subscription
	IncludeHistory *bool
	// Maximum number of events to batch together
	MaxBatchSize *int32
	// Acknowledgment mode for message delivery
	AckMode *AckMode
	// Keep-alive interval to maintain connection
	KeepAlive *durationpb.Duration
}

func (b0 SubscriptionOptions_builder) Build() *SubscriptionOptions {
	m0 := &SubscriptionOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.IncludeHistory != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_IncludeHistory = *b.IncludeHistory
	}
	if b.MaxBatchSize != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_MaxBatchSize = *b.MaxBatchSize
	}
	if b.AckMode != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_AckMode = *b.AckMode
	}
	x.xxx_hidden_KeepAlive = b.KeepAlive
	return m0
}

var File_pkg_common_proto_messages_subscription_options_proto protoreflect.FileDescriptor

const file_pkg_common_proto_messages_subscription_options_proto_rawDesc = "" +
	"\n" +
	"4pkg/common/proto/messages/subscription_options.proto\x12\x11gcommon.v1.common\x1a!google/protobuf/go_features.proto\x1a\x1egoogle/protobuf/duration.proto\x1a%pkg/common/proto/enums/ack_mode.proto\"\xd5\x01\n" +
	"\x13SubscriptionOptions\x12'\n" +
	"\x0finclude_history\x18\x01 \x01(\bR\x0eincludeHistory\x12$\n" +
	"\x0emax_batch_size\x18\x02 \x01(\x05R\fmaxBatchSize\x125\n" +
	"\back_mode\x18\x03 \x01(\x0e2\x1a.gcommon.v1.common.AckModeR\aackMode\x128\n" +
	"\n" +
	"keep_alive\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\tkeepAliveB\xd4\x01\n" +
	"\x15com.gcommon.v1.commonB\x18SubscriptionOptionsProtoP\x01Z3github.com/jdfalk/gcommon/pkg/common/proto;commonpb\xa2\x02\x03GVC\xaa\x02\x11Gcommon.V1.Common\xca\x02\x11Gcommon\\V1\\Common\xe2\x02\x1dGcommon\\V1\\Common\\GPBMetadata\xea\x02\x13Gcommon::V1::Common\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_common_proto_messages_subscription_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_common_proto_messages_subscription_options_proto_goTypes = []any{
	(*SubscriptionOptions)(nil), // 0: gcommon.v1.common.SubscriptionOptions
	(AckMode)(0),                // 1: gcommon.v1.common.AckMode
	(*durationpb.Duration)(nil), // 2: google.protobuf.Duration
}
var file_pkg_common_proto_messages_subscription_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.SubscriptionOptions.ack_mode:type_name -> gcommon.v1.common.AckMode
	2, // 1: gcommon.v1.common.SubscriptionOptions.keep_alive:type_name -> google.protobuf.Duration
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_messages_subscription_options_proto_init() }
func file_pkg_common_proto_messages_subscription_options_proto_init() {
	if File_pkg_common_proto_messages_subscription_options_proto != nil {
		return
	}
	file_pkg_common_proto_enums_ack_mode_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_common_proto_messages_subscription_options_proto_rawDesc), len(file_pkg_common_proto_messages_subscription_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_common_proto_messages_subscription_options_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_messages_subscription_options_proto_depIdxs,
		MessageInfos:      file_pkg_common_proto_messages_subscription_options_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_messages_subscription_options_proto = out.File
	file_pkg_common_proto_messages_subscription_options_proto_goTypes = nil
	file_pkg_common_proto_messages_subscription_options_proto_depIdxs = nil
}
