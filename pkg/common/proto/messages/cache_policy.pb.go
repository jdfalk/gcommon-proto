// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/common/proto/messages/cache_policy.proto

//go:build !protoopaque

package messages

import (
	enums "github.com/jdfalk/gcommon/pkg/common/proto/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Cache policy configuration for cache behavior and performance tuning.
// Defines expiration, eviction, sizing, and operational policies
// for consistent cache management across GCommon modules.
type CachePolicy struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Cache expiration policy strategy
	Expiration *enums.ExpirationPolicy `protobuf:"varint,1,opt,name=expiration,enum=gcommon.v1.common.ExpirationPolicy" json:"expiration,omitempty"`
	// Eviction policy when cache reaches capacity
	Eviction *enums.EvictionPolicy `protobuf:"varint,2,opt,name=eviction,enum=gcommon.v1.common.EvictionPolicy" json:"eviction,omitempty"`
	// Maximum cache size in bytes (0 for unlimited)
	MaxSizeBytes *int64 `protobuf:"varint,3,opt,name=max_size_bytes,json=maxSizeBytes" json:"max_size_bytes,omitempty"`
	// Maximum number of cache entries (0 for unlimited)
	MaxEntries *int64 `protobuf:"varint,4,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	// Default time-to-live for cache entries
	DefaultTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=default_ttl,json=defaultTtl" json:"default_ttl,omitempty"`
	// Whether to refresh entries before they expire
	RefreshAhead *bool `protobuf:"varint,6,opt,name=refresh_ahead,json=refreshAhead" json:"refresh_ahead,omitempty"`
	// Whether to collect and expose cache statistics
	EnableStats   *bool `protobuf:"varint,7,opt,name=enable_stats,json=enableStats" json:"enable_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CachePolicy) Reset() {
	*x = CachePolicy{}
	mi := &file_pkg_common_proto_messages_cache_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CachePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePolicy) ProtoMessage() {}

func (x *CachePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_messages_cache_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CachePolicy) GetExpiration() enums.ExpirationPolicy {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return enums.ExpirationPolicy(0)
}

func (x *CachePolicy) GetEviction() enums.EvictionPolicy {
	if x != nil && x.Eviction != nil {
		return *x.Eviction
	}
	return enums.EvictionPolicy(0)
}

func (x *CachePolicy) GetMaxSizeBytes() int64 {
	if x != nil && x.MaxSizeBytes != nil {
		return *x.MaxSizeBytes
	}
	return 0
}

func (x *CachePolicy) GetMaxEntries() int64 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *CachePolicy) GetDefaultTtl() *durationpb.Duration {
	if x != nil {
		return x.DefaultTtl
	}
	return nil
}

func (x *CachePolicy) GetRefreshAhead() bool {
	if x != nil && x.RefreshAhead != nil {
		return *x.RefreshAhead
	}
	return false
}

func (x *CachePolicy) GetEnableStats() bool {
	if x != nil && x.EnableStats != nil {
		return *x.EnableStats
	}
	return false
}

func (x *CachePolicy) SetExpiration(v enums.ExpirationPolicy) {
	x.Expiration = &v
}

func (x *CachePolicy) SetEviction(v enums.EvictionPolicy) {
	x.Eviction = &v
}

func (x *CachePolicy) SetMaxSizeBytes(v int64) {
	x.MaxSizeBytes = &v
}

func (x *CachePolicy) SetMaxEntries(v int64) {
	x.MaxEntries = &v
}

func (x *CachePolicy) SetDefaultTtl(v *durationpb.Duration) {
	x.DefaultTtl = v
}

func (x *CachePolicy) SetRefreshAhead(v bool) {
	x.RefreshAhead = &v
}

func (x *CachePolicy) SetEnableStats(v bool) {
	x.EnableStats = &v
}

func (x *CachePolicy) HasExpiration() bool {
	if x == nil {
		return false
	}
	return x.Expiration != nil
}

func (x *CachePolicy) HasEviction() bool {
	if x == nil {
		return false
	}
	return x.Eviction != nil
}

func (x *CachePolicy) HasMaxSizeBytes() bool {
	if x == nil {
		return false
	}
	return x.MaxSizeBytes != nil
}

func (x *CachePolicy) HasMaxEntries() bool {
	if x == nil {
		return false
	}
	return x.MaxEntries != nil
}

func (x *CachePolicy) HasDefaultTtl() bool {
	if x == nil {
		return false
	}
	return x.DefaultTtl != nil
}

func (x *CachePolicy) HasRefreshAhead() bool {
	if x == nil {
		return false
	}
	return x.RefreshAhead != nil
}

func (x *CachePolicy) HasEnableStats() bool {
	if x == nil {
		return false
	}
	return x.EnableStats != nil
}

func (x *CachePolicy) ClearExpiration() {
	x.Expiration = nil
}

func (x *CachePolicy) ClearEviction() {
	x.Eviction = nil
}

func (x *CachePolicy) ClearMaxSizeBytes() {
	x.MaxSizeBytes = nil
}

func (x *CachePolicy) ClearMaxEntries() {
	x.MaxEntries = nil
}

func (x *CachePolicy) ClearDefaultTtl() {
	x.DefaultTtl = nil
}

func (x *CachePolicy) ClearRefreshAhead() {
	x.RefreshAhead = nil
}

func (x *CachePolicy) ClearEnableStats() {
	x.EnableStats = nil
}

type CachePolicy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Cache expiration policy strategy
	Expiration *enums.ExpirationPolicy
	// Eviction policy when cache reaches capacity
	Eviction *enums.EvictionPolicy
	// Maximum cache size in bytes (0 for unlimited)
	MaxSizeBytes *int64
	// Maximum number of cache entries (0 for unlimited)
	MaxEntries *int64
	// Default time-to-live for cache entries
	DefaultTtl *durationpb.Duration
	// Whether to refresh entries before they expire
	RefreshAhead *bool
	// Whether to collect and expose cache statistics
	EnableStats *bool
}

func (b0 CachePolicy_builder) Build() *CachePolicy {
	m0 := &CachePolicy{}
	b, x := &b0, m0
	_, _ = b, x
	x.Expiration = b.Expiration
	x.Eviction = b.Eviction
	x.MaxSizeBytes = b.MaxSizeBytes
	x.MaxEntries = b.MaxEntries
	x.DefaultTtl = b.DefaultTtl
	x.RefreshAhead = b.RefreshAhead
	x.EnableStats = b.EnableStats
	return m0
}

var File_pkg_common_proto_messages_cache_policy_proto protoreflect.FileDescriptor

const file_pkg_common_proto_messages_cache_policy_proto_rawDesc = "" +
	"\n" +
	",pkg/common/proto/messages/cache_policy.proto\x12\x11gcommon.v1.common\x1a!google/protobuf/go_features.proto\x1a\x1egoogle/protobuf/duration.proto\x1a.pkg/common/proto/enums/expiration_policy.proto\x1a,pkg/common/proto/enums/eviction_policy.proto\"\xdc\x02\n" +
	"\vCachePolicy\x12C\n" +
	"\n" +
	"expiration\x18\x01 \x01(\x0e2#.gcommon.v1.common.ExpirationPolicyR\n" +
	"expiration\x12=\n" +
	"\beviction\x18\x02 \x01(\x0e2!.gcommon.v1.common.EvictionPolicyR\beviction\x12$\n" +
	"\x0emax_size_bytes\x18\x03 \x01(\x03R\fmaxSizeBytes\x12\x1f\n" +
	"\vmax_entries\x18\x04 \x01(\x03R\n" +
	"maxEntries\x12:\n" +
	"\vdefault_ttl\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"defaultTtl\x12#\n" +
	"\rrefresh_ahead\x18\x06 \x01(\bR\frefreshAhead\x12!\n" +
	"\fenable_stats\x18\a \x01(\bR\venableStatsB\xcc\x01\n" +
	"\x15com.gcommon.v1.commonB\x10CachePolicyProtoP\x01Z3github.com/jdfalk/gcommon/pkg/common/proto/messages\xa2\x02\x03GVC\xaa\x02\x11Gcommon.V1.Common\xca\x02\x11Gcommon\\V1\\Common\xe2\x02\x1dGcommon\\V1\\Common\\GPBMetadata\xea\x02\x13Gcommon::V1::Common\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_common_proto_messages_cache_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_common_proto_messages_cache_policy_proto_goTypes = []any{
	(*CachePolicy)(nil),         // 0: gcommon.v1.common.CachePolicy
	(enums.ExpirationPolicy)(0), // 1: gcommon.v1.common.ExpirationPolicy
	(enums.EvictionPolicy)(0),   // 2: gcommon.v1.common.EvictionPolicy
	(*durationpb.Duration)(nil), // 3: google.protobuf.Duration
}
var file_pkg_common_proto_messages_cache_policy_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.CachePolicy.expiration:type_name -> gcommon.v1.common.ExpirationPolicy
	2, // 1: gcommon.v1.common.CachePolicy.eviction:type_name -> gcommon.v1.common.EvictionPolicy
	3, // 2: gcommon.v1.common.CachePolicy.default_ttl:type_name -> google.protobuf.Duration
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_messages_cache_policy_proto_init() }
func file_pkg_common_proto_messages_cache_policy_proto_init() {
	if File_pkg_common_proto_messages_cache_policy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_common_proto_messages_cache_policy_proto_rawDesc), len(file_pkg_common_proto_messages_cache_policy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_common_proto_messages_cache_policy_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_messages_cache_policy_proto_depIdxs,
		MessageInfos:      file_pkg_common_proto_messages_cache_policy_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_messages_cache_policy_proto = out.File
	file_pkg_common_proto_messages_cache_policy_proto_goTypes = nil
	file_pkg_common_proto_messages_cache_policy_proto_depIdxs = nil
}
