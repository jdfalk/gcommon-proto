// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/common/proto/batch_options.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Batch processing options for configuring bulk operation behavior.
// Controls parallelism, error handling, timeout policies, and
// result handling for efficient batch processing.
type BatchOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of operations to process in parallel
	MaxParallel *int32 `protobuf:"varint,1,opt,name=max_parallel,json=maxParallel" json:"max_parallel,omitempty"`
	// Whether to stop processing on the first error encountered
	FailFast *bool `protobuf:"varint,2,opt,name=fail_fast,json=failFast" json:"fail_fast,omitempty"`
	// Total timeout for the entire batch operation
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
	// Whether to return partial results if timeout is reached
	ReturnPartial *bool `protobuf:"varint,4,opt,name=return_partial,json=returnPartial" json:"return_partial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOptions) Reset() {
	*x = BatchOptions{}
	mi := &file_pkg_common_proto_batch_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOptions) ProtoMessage() {}

func (x *BatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_batch_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOptions.ProtoReflect.Descriptor instead.
func (*BatchOptions) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_batch_options_proto_rawDescGZIP(), []int{0}
}

func (x *BatchOptions) GetMaxParallel() int32 {
	if x != nil && x.MaxParallel != nil {
		return *x.MaxParallel
	}
	return 0
}

func (x *BatchOptions) GetFailFast() bool {
	if x != nil && x.FailFast != nil {
		return *x.FailFast
	}
	return false
}

func (x *BatchOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *BatchOptions) GetReturnPartial() bool {
	if x != nil && x.ReturnPartial != nil {
		return *x.ReturnPartial
	}
	return false
}

var File_pkg_common_proto_batch_options_proto protoreflect.FileDescriptor

const file_pkg_common_proto_batch_options_proto_rawDesc = "" +
	"\n" +
	"$pkg/common/proto/batch_options.proto\x12\x11gcommon.v1.common\x1a\x1egoogle/protobuf/duration.proto\"\xaa\x01\n" +
	"\fBatchOptions\x12!\n" +
	"\fmax_parallel\x18\x01 \x01(\x05R\vmaxParallel\x12\x1b\n" +
	"\tfail_fast\x18\x02 \x01(\bR\bfailFast\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12%\n" +
	"\x0ereturn_partial\x18\x04 \x01(\bR\rreturnPartialB\xbc\x01\n" +
	"\x15com.gcommon.v1.commonB\x11BatchOptionsProtoP\x01Z*github.com/jdfalk/gcommon/pkg/common/proto\xa2\x02\x03GVC\xaa\x02\x11Gcommon.V1.Common\xca\x02\x11Gcommon\\V1\\Common\xe2\x02\x1dGcommon\\V1\\Common\\GPBMetadata\xea\x02\x13Gcommon::V1::Commonb\beditionsp\xe8\a"

var (
	file_pkg_common_proto_batch_options_proto_rawDescOnce sync.Once
	file_pkg_common_proto_batch_options_proto_rawDescData []byte
)

func file_pkg_common_proto_batch_options_proto_rawDescGZIP() []byte {
	file_pkg_common_proto_batch_options_proto_rawDescOnce.Do(func() {
		file_pkg_common_proto_batch_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_common_proto_batch_options_proto_rawDesc), len(file_pkg_common_proto_batch_options_proto_rawDesc)))
	})
	return file_pkg_common_proto_batch_options_proto_rawDescData
}

var file_pkg_common_proto_batch_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_common_proto_batch_options_proto_goTypes = []any{
	(*BatchOptions)(nil),        // 0: gcommon.v1.common.BatchOptions
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_pkg_common_proto_batch_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.BatchOptions.timeout:type_name -> google.protobuf.Duration
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_batch_options_proto_init() }
func file_pkg_common_proto_batch_options_proto_init() {
	if File_pkg_common_proto_batch_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_common_proto_batch_options_proto_rawDesc), len(file_pkg_common_proto_batch_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_common_proto_batch_options_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_batch_options_proto_depIdxs,
		MessageInfos:      file_pkg_common_proto_batch_options_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_batch_options_proto = out.File
	file_pkg_common_proto_batch_options_proto_goTypes = nil
	file_pkg_common_proto_batch_options_proto_depIdxs = nil
}
