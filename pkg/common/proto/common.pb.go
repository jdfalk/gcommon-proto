// file: pkg/common/proto/common.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pkg/common/proto/common.proto

//go:build !protoopaque

package commonpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standardized error codes following gRPC conventions
type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED         ErrorCode = 0
	ErrorCode_ERROR_CODE_INVALID_ARGUMENT    ErrorCode = 1
	ErrorCode_ERROR_CODE_NOT_FOUND           ErrorCode = 2
	ErrorCode_ERROR_CODE_ALREADY_EXISTS      ErrorCode = 3
	ErrorCode_ERROR_CODE_PERMISSION_DENIED   ErrorCode = 4
	ErrorCode_ERROR_CODE_UNAUTHENTICATED     ErrorCode = 5
	ErrorCode_ERROR_CODE_INTERNAL            ErrorCode = 6
	ErrorCode_ERROR_CODE_UNAVAILABLE         ErrorCode = 7
	ErrorCode_ERROR_CODE_TIMEOUT             ErrorCode = 8
	ErrorCode_ERROR_CODE_RESOURCE_EXHAUSTED  ErrorCode = 9
	ErrorCode_ERROR_CODE_FAILED_PRECONDITION ErrorCode = 10
	ErrorCode_ERROR_CODE_ABORTED             ErrorCode = 11
	ErrorCode_ERROR_CODE_OUT_OF_RANGE        ErrorCode = 12
	ErrorCode_ERROR_CODE_UNIMPLEMENTED       ErrorCode = 13
	ErrorCode_ERROR_CODE_DATA_LOSS           ErrorCode = 14
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_UNSPECIFIED",
		1:  "ERROR_CODE_INVALID_ARGUMENT",
		2:  "ERROR_CODE_NOT_FOUND",
		3:  "ERROR_CODE_ALREADY_EXISTS",
		4:  "ERROR_CODE_PERMISSION_DENIED",
		5:  "ERROR_CODE_UNAUTHENTICATED",
		6:  "ERROR_CODE_INTERNAL",
		7:  "ERROR_CODE_UNAVAILABLE",
		8:  "ERROR_CODE_TIMEOUT",
		9:  "ERROR_CODE_RESOURCE_EXHAUSTED",
		10: "ERROR_CODE_FAILED_PRECONDITION",
		11: "ERROR_CODE_ABORTED",
		12: "ERROR_CODE_OUT_OF_RANGE",
		13: "ERROR_CODE_UNIMPLEMENTED",
		14: "ERROR_CODE_DATA_LOSS",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":         0,
		"ERROR_CODE_INVALID_ARGUMENT":    1,
		"ERROR_CODE_NOT_FOUND":           2,
		"ERROR_CODE_ALREADY_EXISTS":      3,
		"ERROR_CODE_PERMISSION_DENIED":   4,
		"ERROR_CODE_UNAUTHENTICATED":     5,
		"ERROR_CODE_INTERNAL":            6,
		"ERROR_CODE_UNAVAILABLE":         7,
		"ERROR_CODE_TIMEOUT":             8,
		"ERROR_CODE_RESOURCE_EXHAUSTED":  9,
		"ERROR_CODE_FAILED_PRECONDITION": 10,
		"ERROR_CODE_ABORTED":             11,
		"ERROR_CODE_OUT_OF_RANGE":        12,
		"ERROR_CODE_UNIMPLEMENTED":       13,
		"ERROR_CODE_DATA_LOSS":           14,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Sort direction enumeration
type SortDirection int32

const (
	SortDirection_SORT_DIRECTION_UNSPECIFIED SortDirection = 0
	SortDirection_SORT_DIRECTION_ASC         SortDirection = 1
	SortDirection_SORT_DIRECTION_DESC        SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "SORT_DIRECTION_ASC",
		2: "SORT_DIRECTION_DESC",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED": 0,
		"SORT_DIRECTION_ASC":         1,
		"SORT_DIRECTION_DESC":        2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[1].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[1]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Filter operation types
type FilterOperation int32

const (
	FilterOperation_FILTER_OPERATION_UNSPECIFIED           FilterOperation = 0
	FilterOperation_FILTER_OPERATION_EQUALS                FilterOperation = 1
	FilterOperation_FILTER_OPERATION_NOT_EQUALS            FilterOperation = 2
	FilterOperation_FILTER_OPERATION_GREATER_THAN          FilterOperation = 3
	FilterOperation_FILTER_OPERATION_LESS_THAN             FilterOperation = 4
	FilterOperation_FILTER_OPERATION_GREATER_THAN_OR_EQUAL FilterOperation = 5
	FilterOperation_FILTER_OPERATION_LESS_THAN_OR_EQUAL    FilterOperation = 6
	FilterOperation_FILTER_OPERATION_CONTAINS              FilterOperation = 7
	FilterOperation_FILTER_OPERATION_STARTS_WITH           FilterOperation = 8
	FilterOperation_FILTER_OPERATION_ENDS_WITH             FilterOperation = 9
	FilterOperation_FILTER_OPERATION_IN                    FilterOperation = 10
	FilterOperation_FILTER_OPERATION_NOT_IN                FilterOperation = 11
)

// Enum value maps for FilterOperation.
var (
	FilterOperation_name = map[int32]string{
		0:  "FILTER_OPERATION_UNSPECIFIED",
		1:  "FILTER_OPERATION_EQUALS",
		2:  "FILTER_OPERATION_NOT_EQUALS",
		3:  "FILTER_OPERATION_GREATER_THAN",
		4:  "FILTER_OPERATION_LESS_THAN",
		5:  "FILTER_OPERATION_GREATER_THAN_OR_EQUAL",
		6:  "FILTER_OPERATION_LESS_THAN_OR_EQUAL",
		7:  "FILTER_OPERATION_CONTAINS",
		8:  "FILTER_OPERATION_STARTS_WITH",
		9:  "FILTER_OPERATION_ENDS_WITH",
		10: "FILTER_OPERATION_IN",
		11: "FILTER_OPERATION_NOT_IN",
	}
	FilterOperation_value = map[string]int32{
		"FILTER_OPERATION_UNSPECIFIED":           0,
		"FILTER_OPERATION_EQUALS":                1,
		"FILTER_OPERATION_NOT_EQUALS":            2,
		"FILTER_OPERATION_GREATER_THAN":          3,
		"FILTER_OPERATION_LESS_THAN":             4,
		"FILTER_OPERATION_GREATER_THAN_OR_EQUAL": 5,
		"FILTER_OPERATION_LESS_THAN_OR_EQUAL":    6,
		"FILTER_OPERATION_CONTAINS":              7,
		"FILTER_OPERATION_STARTS_WITH":           8,
		"FILTER_OPERATION_ENDS_WITH":             9,
		"FILTER_OPERATION_IN":                    10,
		"FILTER_OPERATION_NOT_IN":                11,
	}
)

func (x FilterOperation) Enum() *FilterOperation {
	p := new(FilterOperation)
	*p = x
	return p
}

func (x FilterOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[2].Descriptor()
}

func (FilterOperation) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[2]
}

func (x FilterOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Common health status used across modules
type HealthStatus int32

const (
	HealthStatus_HEALTH_STATUS_UNSPECIFIED HealthStatus = 0
	HealthStatus_HEALTH_STATUS_HEALTHY     HealthStatus = 1
	HealthStatus_HEALTH_STATUS_UNHEALTHY   HealthStatus = 2
	HealthStatus_HEALTH_STATUS_DEGRADED    HealthStatus = 3
	HealthStatus_HEALTH_STATUS_STARTING    HealthStatus = 4
	HealthStatus_HEALTH_STATUS_STOPPING    HealthStatus = 5
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "HEALTH_STATUS_UNSPECIFIED",
		1: "HEALTH_STATUS_HEALTHY",
		2: "HEALTH_STATUS_UNHEALTHY",
		3: "HEALTH_STATUS_DEGRADED",
		4: "HEALTH_STATUS_STARTING",
		5: "HEALTH_STATUS_STOPPING",
	}
	HealthStatus_value = map[string]int32{
		"HEALTH_STATUS_UNSPECIFIED": 0,
		"HEALTH_STATUS_HEALTHY":     1,
		"HEALTH_STATUS_UNHEALTHY":   2,
		"HEALTH_STATUS_DEGRADED":    3,
		"HEALTH_STATUS_STARTING":    4,
		"HEALTH_STATUS_STOPPING":    5,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[3].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[3]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Common resource status
type ResourceStatus int32

const (
	ResourceStatus_RESOURCE_STATUS_UNSPECIFIED ResourceStatus = 0
	ResourceStatus_RESOURCE_STATUS_ACTIVE      ResourceStatus = 1
	ResourceStatus_RESOURCE_STATUS_INACTIVE    ResourceStatus = 2
	ResourceStatus_RESOURCE_STATUS_PENDING     ResourceStatus = 3
	ResourceStatus_RESOURCE_STATUS_DELETED     ResourceStatus = 4
	ResourceStatus_RESOURCE_STATUS_ERROR       ResourceStatus = 5
)

// Enum value maps for ResourceStatus.
var (
	ResourceStatus_name = map[int32]string{
		0: "RESOURCE_STATUS_UNSPECIFIED",
		1: "RESOURCE_STATUS_ACTIVE",
		2: "RESOURCE_STATUS_INACTIVE",
		3: "RESOURCE_STATUS_PENDING",
		4: "RESOURCE_STATUS_DELETED",
		5: "RESOURCE_STATUS_ERROR",
	}
	ResourceStatus_value = map[string]int32{
		"RESOURCE_STATUS_UNSPECIFIED": 0,
		"RESOURCE_STATUS_ACTIVE":      1,
		"RESOURCE_STATUS_INACTIVE":    2,
		"RESOURCE_STATUS_PENDING":     3,
		"RESOURCE_STATUS_DELETED":     4,
		"RESOURCE_STATUS_ERROR":       5,
	}
)

func (x ResourceStatus) Enum() *ResourceStatus {
	p := new(ResourceStatus)
	*p = x
	return p
}

func (x ResourceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[4].Descriptor()
}

func (ResourceStatus) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[4]
}

func (x ResourceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Value type enumeration
type ValueType int32

const (
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0
	ValueType_VALUE_TYPE_STRING      ValueType = 1
	ValueType_VALUE_TYPE_INT         ValueType = 2
	ValueType_VALUE_TYPE_DOUBLE      ValueType = 3
	ValueType_VALUE_TYPE_BOOL        ValueType = 4
	ValueType_VALUE_TYPE_BYTES       ValueType = 5
	ValueType_VALUE_TYPE_JSON        ValueType = 6
	ValueType_VALUE_TYPE_YAML        ValueType = 7
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "VALUE_TYPE_STRING",
		2: "VALUE_TYPE_INT",
		3: "VALUE_TYPE_DOUBLE",
		4: "VALUE_TYPE_BOOL",
		5: "VALUE_TYPE_BYTES",
		6: "VALUE_TYPE_JSON",
		7: "VALUE_TYPE_YAML",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"VALUE_TYPE_STRING":      1,
		"VALUE_TYPE_INT":         2,
		"VALUE_TYPE_DOUBLE":      3,
		"VALUE_TYPE_BOOL":        4,
		"VALUE_TYPE_BYTES":       5,
		"VALUE_TYPE_JSON":        6,
		"VALUE_TYPE_YAML":        7,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[5].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[5]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Audit result enumeration
type AuditResult int32

const (
	AuditResult_AUDIT_RESULT_UNSPECIFIED AuditResult = 0
	AuditResult_AUDIT_RESULT_SUCCESS     AuditResult = 1
	AuditResult_AUDIT_RESULT_FAILURE     AuditResult = 2
	AuditResult_AUDIT_RESULT_PARTIAL     AuditResult = 3
)

// Enum value maps for AuditResult.
var (
	AuditResult_name = map[int32]string{
		0: "AUDIT_RESULT_UNSPECIFIED",
		1: "AUDIT_RESULT_SUCCESS",
		2: "AUDIT_RESULT_FAILURE",
		3: "AUDIT_RESULT_PARTIAL",
	}
	AuditResult_value = map[string]int32{
		"AUDIT_RESULT_UNSPECIFIED": 0,
		"AUDIT_RESULT_SUCCESS":     1,
		"AUDIT_RESULT_FAILURE":     2,
		"AUDIT_RESULT_PARTIAL":     3,
	}
)

func (x AuditResult) Enum() *AuditResult {
	p := new(AuditResult)
	*p = x
	return p
}

func (x AuditResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditResult) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[6].Descriptor()
}

func (AuditResult) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[6]
}

func (x AuditResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Subscription status enumeration
type SubscriptionStatus int32

const (
	SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED SubscriptionStatus = 0
	SubscriptionStatus_SUBSCRIPTION_STATUS_ACTIVE      SubscriptionStatus = 1
	SubscriptionStatus_SUBSCRIPTION_STATUS_PAUSED      SubscriptionStatus = 2
	SubscriptionStatus_SUBSCRIPTION_STATUS_CANCELLED   SubscriptionStatus = 3
	SubscriptionStatus_SUBSCRIPTION_STATUS_ERROR       SubscriptionStatus = 4
)

// Enum value maps for SubscriptionStatus.
var (
	SubscriptionStatus_name = map[int32]string{
		0: "SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "SUBSCRIPTION_STATUS_ACTIVE",
		2: "SUBSCRIPTION_STATUS_PAUSED",
		3: "SUBSCRIPTION_STATUS_CANCELLED",
		4: "SUBSCRIPTION_STATUS_ERROR",
	}
	SubscriptionStatus_value = map[string]int32{
		"SUBSCRIPTION_STATUS_UNSPECIFIED": 0,
		"SUBSCRIPTION_STATUS_ACTIVE":      1,
		"SUBSCRIPTION_STATUS_PAUSED":      2,
		"SUBSCRIPTION_STATUS_CANCELLED":   3,
		"SUBSCRIPTION_STATUS_ERROR":       4,
	}
)

func (x SubscriptionStatus) Enum() *SubscriptionStatus {
	p := new(SubscriptionStatus)
	*p = x
	return p
}

func (x SubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[7].Descriptor()
}

func (SubscriptionStatus) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[7]
}

func (x SubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Acknowledgment mode enumeration
type AckMode int32

const (
	AckMode_ACK_MODE_UNSPECIFIED AckMode = 0
	AckMode_ACK_MODE_MANUAL      AckMode = 1
	AckMode_ACK_MODE_AUTO        AckMode = 2
	AckMode_ACK_MODE_CLIENT      AckMode = 3
)

// Enum value maps for AckMode.
var (
	AckMode_name = map[int32]string{
		0: "ACK_MODE_UNSPECIFIED",
		1: "ACK_MODE_MANUAL",
		2: "ACK_MODE_AUTO",
		3: "ACK_MODE_CLIENT",
	}
	AckMode_value = map[string]int32{
		"ACK_MODE_UNSPECIFIED": 0,
		"ACK_MODE_MANUAL":      1,
		"ACK_MODE_AUTO":        2,
		"ACK_MODE_CLIENT":      3,
	}
)

func (x AckMode) Enum() *AckMode {
	p := new(AckMode)
	*p = x
	return p
}

func (x AckMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AckMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[8].Descriptor()
}

func (AckMode) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[8]
}

func (x AckMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Cache expiration policy
type ExpirationPolicy int32

const (
	ExpirationPolicy_EXPIRATION_POLICY_UNSPECIFIED ExpirationPolicy = 0
	ExpirationPolicy_EXPIRATION_POLICY_TTL         ExpirationPolicy = 1
	ExpirationPolicy_EXPIRATION_POLICY_IDLE        ExpirationPolicy = 2
	ExpirationPolicy_EXPIRATION_POLICY_WRITE       ExpirationPolicy = 3
	ExpirationPolicy_EXPIRATION_POLICY_NEVER       ExpirationPolicy = 4
)

// Enum value maps for ExpirationPolicy.
var (
	ExpirationPolicy_name = map[int32]string{
		0: "EXPIRATION_POLICY_UNSPECIFIED",
		1: "EXPIRATION_POLICY_TTL",
		2: "EXPIRATION_POLICY_IDLE",
		3: "EXPIRATION_POLICY_WRITE",
		4: "EXPIRATION_POLICY_NEVER",
	}
	ExpirationPolicy_value = map[string]int32{
		"EXPIRATION_POLICY_UNSPECIFIED": 0,
		"EXPIRATION_POLICY_TTL":         1,
		"EXPIRATION_POLICY_IDLE":        2,
		"EXPIRATION_POLICY_WRITE":       3,
		"EXPIRATION_POLICY_NEVER":       4,
	}
)

func (x ExpirationPolicy) Enum() *ExpirationPolicy {
	p := new(ExpirationPolicy)
	*p = x
	return p
}

func (x ExpirationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpirationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[9].Descriptor()
}

func (ExpirationPolicy) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[9]
}

func (x ExpirationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Cache eviction policy
type EvictionPolicy int32

const (
	EvictionPolicy_EVICTION_POLICY_UNSPECIFIED EvictionPolicy = 0
	EvictionPolicy_EVICTION_POLICY_LRU         EvictionPolicy = 1
	EvictionPolicy_EVICTION_POLICY_LFU         EvictionPolicy = 2
	EvictionPolicy_EVICTION_POLICY_FIFO        EvictionPolicy = 3
	EvictionPolicy_EVICTION_POLICY_RANDOM      EvictionPolicy = 4
)

// Enum value maps for EvictionPolicy.
var (
	EvictionPolicy_name = map[int32]string{
		0: "EVICTION_POLICY_UNSPECIFIED",
		1: "EVICTION_POLICY_LRU",
		2: "EVICTION_POLICY_LFU",
		3: "EVICTION_POLICY_FIFO",
		4: "EVICTION_POLICY_RANDOM",
	}
	EvictionPolicy_value = map[string]int32{
		"EVICTION_POLICY_UNSPECIFIED": 0,
		"EVICTION_POLICY_LRU":         1,
		"EVICTION_POLICY_LFU":         2,
		"EVICTION_POLICY_FIFO":        3,
		"EVICTION_POLICY_RANDOM":      4,
	}
)

func (x EvictionPolicy) Enum() *EvictionPolicy {
	p := new(EvictionPolicy)
	*p = x
	return p
}

func (x EvictionPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvictionPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[10].Descriptor()
}

func (EvictionPolicy) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[10]
}

func (x EvictionPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Circuit breaker state enumeration
type CircuitBreakerState int32

const (
	CircuitBreakerState_CIRCUIT_BREAKER_STATE_UNSPECIFIED CircuitBreakerState = 0
	CircuitBreakerState_CIRCUIT_BREAKER_STATE_CLOSED      CircuitBreakerState = 1
	CircuitBreakerState_CIRCUIT_BREAKER_STATE_OPEN        CircuitBreakerState = 2
	CircuitBreakerState_CIRCUIT_BREAKER_STATE_HALF_OPEN   CircuitBreakerState = 3
)

// Enum value maps for CircuitBreakerState.
var (
	CircuitBreakerState_name = map[int32]string{
		0: "CIRCUIT_BREAKER_STATE_UNSPECIFIED",
		1: "CIRCUIT_BREAKER_STATE_CLOSED",
		2: "CIRCUIT_BREAKER_STATE_OPEN",
		3: "CIRCUIT_BREAKER_STATE_HALF_OPEN",
	}
	CircuitBreakerState_value = map[string]int32{
		"CIRCUIT_BREAKER_STATE_UNSPECIFIED": 0,
		"CIRCUIT_BREAKER_STATE_CLOSED":      1,
		"CIRCUIT_BREAKER_STATE_OPEN":        2,
		"CIRCUIT_BREAKER_STATE_HALF_OPEN":   3,
	}
)

func (x CircuitBreakerState) Enum() *CircuitBreakerState {
	p := new(CircuitBreakerState)
	*p = x
	return p
}

func (x CircuitBreakerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircuitBreakerState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_common_proto_enumTypes[11].Descriptor()
}

func (CircuitBreakerState) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_common_proto_enumTypes[11]
}

func (x CircuitBreakerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Common error handling across all GCommon modules
type Error struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Standardized error code for programmatic handling
	Code *ErrorCode `protobuf:"varint,1,opt,name=code,enum=gcommon.v1.common.ErrorCode" json:"code,omitempty"`
	// Human-readable error message
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// Additional error details for debugging
	Details map[string]string `protobuf:"bytes,3,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Trace ID for request correlation
	TraceId *string `protobuf:"bytes,4,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// Timestamp when error occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	// Source module that generated the error
	Source        *string `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Error) GetCode() ErrorCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ErrorCode_ERROR_CODE_UNSPECIFIED
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Error) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Error) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *Error) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Error) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *Error) SetCode(v ErrorCode) {
	x.Code = &v
}

func (x *Error) SetMessage(v string) {
	x.Message = &v
}

func (x *Error) SetDetails(v map[string]string) {
	x.Details = v
}

func (x *Error) SetTraceId(v string) {
	x.TraceId = &v
}

func (x *Error) SetTimestamp(v *timestamppb.Timestamp) {
	x.Timestamp = v
}

func (x *Error) SetSource(v string) {
	x.Source = &v
}

func (x *Error) HasCode() bool {
	if x == nil {
		return false
	}
	return x.Code != nil
}

func (x *Error) HasMessage() bool {
	if x == nil {
		return false
	}
	return x.Message != nil
}

func (x *Error) HasTraceId() bool {
	if x == nil {
		return false
	}
	return x.TraceId != nil
}

func (x *Error) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.Timestamp != nil
}

func (x *Error) HasSource() bool {
	if x == nil {
		return false
	}
	return x.Source != nil
}

func (x *Error) ClearCode() {
	x.Code = nil
}

func (x *Error) ClearMessage() {
	x.Message = nil
}

func (x *Error) ClearTraceId() {
	x.TraceId = nil
}

func (x *Error) ClearTimestamp() {
	x.Timestamp = nil
}

func (x *Error) ClearSource() {
	x.Source = nil
}

type Error_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Standardized error code for programmatic handling
	Code *ErrorCode
	// Human-readable error message
	Message *string
	// Additional error details for debugging
	Details map[string]string
	// Trace ID for request correlation
	TraceId *string
	// Timestamp when error occurred
	Timestamp *timestamppb.Timestamp
	// Source module that generated the error
	Source *string
}

func (b0 Error_builder) Build() *Error {
	m0 := &Error{}
	b, x := &b0, m0
	_, _ = b, x
	x.Code = b.Code
	x.Message = b.Message
	x.Details = b.Details
	x.TraceId = b.TraceId
	x.Timestamp = b.Timestamp
	x.Source = b.Source
	return m0
}

// Common pagination parameters for list operations
type Pagination struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Maximum number of items to return (0 means use default)
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Token for the next page (empty for first page)
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// Optional: specific page number (alternative to page_token)
	PageNumber    *int32 `protobuf:"varint,3,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *Pagination) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *Pagination) GetPageNumber() int32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *Pagination) SetPageSize(v int32) {
	x.PageSize = &v
}

func (x *Pagination) SetPageToken(v string) {
	x.PageToken = &v
}

func (x *Pagination) SetPageNumber(v int32) {
	x.PageNumber = &v
}

func (x *Pagination) HasPageSize() bool {
	if x == nil {
		return false
	}
	return x.PageSize != nil
}

func (x *Pagination) HasPageToken() bool {
	if x == nil {
		return false
	}
	return x.PageToken != nil
}

func (x *Pagination) HasPageNumber() bool {
	if x == nil {
		return false
	}
	return x.PageNumber != nil
}

func (x *Pagination) ClearPageSize() {
	x.PageSize = nil
}

func (x *Pagination) ClearPageToken() {
	x.PageToken = nil
}

func (x *Pagination) ClearPageNumber() {
	x.PageNumber = nil
}

type Pagination_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum number of items to return (0 means use default)
	PageSize *int32
	// Token for the next page (empty for first page)
	PageToken *string
	// Optional: specific page number (alternative to page_token)
	PageNumber *int32
}

func (b0 Pagination_builder) Build() *Pagination {
	m0 := &Pagination{}
	b, x := &b0, m0
	_, _ = b, x
	x.PageSize = b.PageSize
	x.PageToken = b.PageToken
	x.PageNumber = b.PageNumber
	return m0
}

// Standard pagination response metadata
type PaginatedResponse struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Token for the next page (empty if no more pages)
	NextPageToken *string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// Token for the previous page (empty if first page)
	PrevPageToken *string `protobuf:"bytes,2,opt,name=prev_page_token,json=prevPageToken" json:"prev_page_token,omitempty"`
	// Total number of items across all pages
	TotalCount *int32 `protobuf:"varint,3,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Current page number
	CurrentPage *int32 `protobuf:"varint,4,opt,name=current_page,json=currentPage" json:"current_page,omitempty"`
	// Total number of pages
	TotalPages *int32 `protobuf:"varint,5,opt,name=total_pages,json=totalPages" json:"total_pages,omitempty"`
	// Number of items in current page
	PageSize      *int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaginatedResponse) Reset() {
	*x = PaginatedResponse{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedResponse) ProtoMessage() {}

func (x *PaginatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *PaginatedResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *PaginatedResponse) GetPrevPageToken() string {
	if x != nil && x.PrevPageToken != nil {
		return *x.PrevPageToken
	}
	return ""
}

func (x *PaginatedResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *PaginatedResponse) GetCurrentPage() int32 {
	if x != nil && x.CurrentPage != nil {
		return *x.CurrentPage
	}
	return 0
}

func (x *PaginatedResponse) GetTotalPages() int32 {
	if x != nil && x.TotalPages != nil {
		return *x.TotalPages
	}
	return 0
}

func (x *PaginatedResponse) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *PaginatedResponse) SetNextPageToken(v string) {
	x.NextPageToken = &v
}

func (x *PaginatedResponse) SetPrevPageToken(v string) {
	x.PrevPageToken = &v
}

func (x *PaginatedResponse) SetTotalCount(v int32) {
	x.TotalCount = &v
}

func (x *PaginatedResponse) SetCurrentPage(v int32) {
	x.CurrentPage = &v
}

func (x *PaginatedResponse) SetTotalPages(v int32) {
	x.TotalPages = &v
}

func (x *PaginatedResponse) SetPageSize(v int32) {
	x.PageSize = &v
}

func (x *PaginatedResponse) HasNextPageToken() bool {
	if x == nil {
		return false
	}
	return x.NextPageToken != nil
}

func (x *PaginatedResponse) HasPrevPageToken() bool {
	if x == nil {
		return false
	}
	return x.PrevPageToken != nil
}

func (x *PaginatedResponse) HasTotalCount() bool {
	if x == nil {
		return false
	}
	return x.TotalCount != nil
}

func (x *PaginatedResponse) HasCurrentPage() bool {
	if x == nil {
		return false
	}
	return x.CurrentPage != nil
}

func (x *PaginatedResponse) HasTotalPages() bool {
	if x == nil {
		return false
	}
	return x.TotalPages != nil
}

func (x *PaginatedResponse) HasPageSize() bool {
	if x == nil {
		return false
	}
	return x.PageSize != nil
}

func (x *PaginatedResponse) ClearNextPageToken() {
	x.NextPageToken = nil
}

func (x *PaginatedResponse) ClearPrevPageToken() {
	x.PrevPageToken = nil
}

func (x *PaginatedResponse) ClearTotalCount() {
	x.TotalCount = nil
}

func (x *PaginatedResponse) ClearCurrentPage() {
	x.CurrentPage = nil
}

func (x *PaginatedResponse) ClearTotalPages() {
	x.TotalPages = nil
}

func (x *PaginatedResponse) ClearPageSize() {
	x.PageSize = nil
}

type PaginatedResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Token for the next page (empty if no more pages)
	NextPageToken *string
	// Token for the previous page (empty if first page)
	PrevPageToken *string
	// Total number of items across all pages
	TotalCount *int32
	// Current page number
	CurrentPage *int32
	// Total number of pages
	TotalPages *int32
	// Number of items in current page
	PageSize *int32
}

func (b0 PaginatedResponse_builder) Build() *PaginatedResponse {
	m0 := &PaginatedResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.NextPageToken = b.NextPageToken
	x.PrevPageToken = b.PrevPageToken
	x.TotalCount = b.TotalCount
	x.CurrentPage = b.CurrentPage
	x.TotalPages = b.TotalPages
	x.PageSize = b.PageSize
	return m0
}

// Common request metadata for observability and security
type RequestMetadata struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Distributed tracing ID
	TraceId *string `protobuf:"bytes,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// User ID making the request
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Correlation ID for request grouping
	CorrelationId *string `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId" json:"correlation_id,omitempty"`
	// Request headers
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Client information
	Client *ClientInfo `protobuf:"bytes,5,opt,name=client" json:"client,omitempty"`
	// Request timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Session ID if applicable
	SessionId     *string `protobuf:"bytes,7,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestMetadata) Reset() {
	*x = RequestMetadata{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMetadata) ProtoMessage() {}

func (x *RequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RequestMetadata) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

func (x *RequestMetadata) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *RequestMetadata) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *RequestMetadata) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RequestMetadata) GetClient() *ClientInfo {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *RequestMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RequestMetadata) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *RequestMetadata) SetTraceId(v string) {
	x.TraceId = &v
}

func (x *RequestMetadata) SetUserId(v string) {
	x.UserId = &v
}

func (x *RequestMetadata) SetCorrelationId(v string) {
	x.CorrelationId = &v
}

func (x *RequestMetadata) SetHeaders(v map[string]string) {
	x.Headers = v
}

func (x *RequestMetadata) SetClient(v *ClientInfo) {
	x.Client = v
}

func (x *RequestMetadata) SetTimestamp(v *timestamppb.Timestamp) {
	x.Timestamp = v
}

func (x *RequestMetadata) SetSessionId(v string) {
	x.SessionId = &v
}

func (x *RequestMetadata) HasTraceId() bool {
	if x == nil {
		return false
	}
	return x.TraceId != nil
}

func (x *RequestMetadata) HasUserId() bool {
	if x == nil {
		return false
	}
	return x.UserId != nil
}

func (x *RequestMetadata) HasCorrelationId() bool {
	if x == nil {
		return false
	}
	return x.CorrelationId != nil
}

func (x *RequestMetadata) HasClient() bool {
	if x == nil {
		return false
	}
	return x.Client != nil
}

func (x *RequestMetadata) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.Timestamp != nil
}

func (x *RequestMetadata) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *RequestMetadata) ClearTraceId() {
	x.TraceId = nil
}

func (x *RequestMetadata) ClearUserId() {
	x.UserId = nil
}

func (x *RequestMetadata) ClearCorrelationId() {
	x.CorrelationId = nil
}

func (x *RequestMetadata) ClearClient() {
	x.Client = nil
}

func (x *RequestMetadata) ClearTimestamp() {
	x.Timestamp = nil
}

func (x *RequestMetadata) ClearSessionId() {
	x.SessionId = nil
}

type RequestMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Distributed tracing ID
	TraceId *string
	// User ID making the request
	UserId *string
	// Correlation ID for request grouping
	CorrelationId *string
	// Request headers
	Headers map[string]string
	// Client information
	Client *ClientInfo
	// Request timestamp
	Timestamp *timestamppb.Timestamp
	// Session ID if applicable
	SessionId *string
}

func (b0 RequestMetadata_builder) Build() *RequestMetadata {
	m0 := &RequestMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.TraceId = b.TraceId
	x.UserId = b.UserId
	x.CorrelationId = b.CorrelationId
	x.Headers = b.Headers
	x.Client = b.Client
	x.Timestamp = b.Timestamp
	x.SessionId = b.SessionId
	return m0
}

// Client information for requests
type ClientInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Client application name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Client version
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Client IP address
	IpAddress *string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// User agent string
	UserAgent *string `protobuf:"bytes,4,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	// Platform information
	Platform      *string `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ClientInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClientInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ClientInfo) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *ClientInfo) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *ClientInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *ClientInfo) SetName(v string) {
	x.Name = &v
}

func (x *ClientInfo) SetVersion(v string) {
	x.Version = &v
}

func (x *ClientInfo) SetIpAddress(v string) {
	x.IpAddress = &v
}

func (x *ClientInfo) SetUserAgent(v string) {
	x.UserAgent = &v
}

func (x *ClientInfo) SetPlatform(v string) {
	x.Platform = &v
}

func (x *ClientInfo) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ClientInfo) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *ClientInfo) HasIpAddress() bool {
	if x == nil {
		return false
	}
	return x.IpAddress != nil
}

func (x *ClientInfo) HasUserAgent() bool {
	if x == nil {
		return false
	}
	return x.UserAgent != nil
}

func (x *ClientInfo) HasPlatform() bool {
	if x == nil {
		return false
	}
	return x.Platform != nil
}

func (x *ClientInfo) ClearName() {
	x.Name = nil
}

func (x *ClientInfo) ClearVersion() {
	x.Version = nil
}

func (x *ClientInfo) ClearIpAddress() {
	x.IpAddress = nil
}

func (x *ClientInfo) ClearUserAgent() {
	x.UserAgent = nil
}

func (x *ClientInfo) ClearPlatform() {
	x.Platform = nil
}

type ClientInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Client application name
	Name *string
	// Client version
	Version *string
	// Client IP address
	IpAddress *string
	// User agent string
	UserAgent *string
	// Platform information
	Platform *string
}

func (b0 ClientInfo_builder) Build() *ClientInfo {
	m0 := &ClientInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Version = b.Version
	x.IpAddress = b.IpAddress
	x.UserAgent = b.UserAgent
	x.Platform = b.Platform
	return m0
}

// Common time range for filtering operations
type TimeRange struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Start time (inclusive)
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End time (exclusive)
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeRange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimeRange) SetStartTime(v *timestamppb.Timestamp) {
	x.StartTime = v
}

func (x *TimeRange) SetEndTime(v *timestamppb.Timestamp) {
	x.EndTime = v
}

func (x *TimeRange) HasStartTime() bool {
	if x == nil {
		return false
	}
	return x.StartTime != nil
}

func (x *TimeRange) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.EndTime != nil
}

func (x *TimeRange) ClearStartTime() {
	x.StartTime = nil
}

func (x *TimeRange) ClearEndTime() {
	x.EndTime = nil
}

type TimeRange_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Start time (inclusive)
	StartTime *timestamppb.Timestamp
	// End time (exclusive)
	EndTime *timestamppb.Timestamp
}

func (b0 TimeRange_builder) Build() *TimeRange {
	m0 := &TimeRange{}
	b, x := &b0, m0
	_, _ = b, x
	x.StartTime = b.StartTime
	x.EndTime = b.EndTime
	return m0
}

// Common sorting parameters
type SortOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Field to sort by
	Field *string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	// Sort direction
	Direction     *SortDirection `protobuf:"varint,2,opt,name=direction,enum=gcommon.v1.common.SortDirection" json:"direction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortOptions) Reset() {
	*x = SortOptions{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortOptions) ProtoMessage() {}

func (x *SortOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SortOptions) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *SortOptions) GetDirection() SortDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return SortDirection_SORT_DIRECTION_UNSPECIFIED
}

func (x *SortOptions) SetField(v string) {
	x.Field = &v
}

func (x *SortOptions) SetDirection(v SortDirection) {
	x.Direction = &v
}

func (x *SortOptions) HasField() bool {
	if x == nil {
		return false
	}
	return x.Field != nil
}

func (x *SortOptions) HasDirection() bool {
	if x == nil {
		return false
	}
	return x.Direction != nil
}

func (x *SortOptions) ClearField() {
	x.Field = nil
}

func (x *SortOptions) ClearDirection() {
	x.Direction = nil
}

type SortOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Field to sort by
	Field *string
	// Sort direction
	Direction *SortDirection
}

func (b0 SortOptions_builder) Build() *SortOptions {
	m0 := &SortOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.Field = b.Field
	x.Direction = b.Direction
	return m0
}

// Common filtering options
type FilterOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Field-based filters
	Filters map[string]*FilterValue `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Text search query
	SearchQuery *string `protobuf:"bytes,2,opt,name=search_query,json=searchQuery" json:"search_query,omitempty"`
	// Time range filter
	TimeRange     *TimeRange `protobuf:"bytes,3,opt,name=time_range,json=timeRange" json:"time_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterOptions) Reset() {
	*x = FilterOptions{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOptions) ProtoMessage() {}

func (x *FilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FilterOptions) GetFilters() map[string]*FilterValue {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FilterOptions) GetSearchQuery() string {
	if x != nil && x.SearchQuery != nil {
		return *x.SearchQuery
	}
	return ""
}

func (x *FilterOptions) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *FilterOptions) SetFilters(v map[string]*FilterValue) {
	x.Filters = v
}

func (x *FilterOptions) SetSearchQuery(v string) {
	x.SearchQuery = &v
}

func (x *FilterOptions) SetTimeRange(v *TimeRange) {
	x.TimeRange = v
}

func (x *FilterOptions) HasSearchQuery() bool {
	if x == nil {
		return false
	}
	return x.SearchQuery != nil
}

func (x *FilterOptions) HasTimeRange() bool {
	if x == nil {
		return false
	}
	return x.TimeRange != nil
}

func (x *FilterOptions) ClearSearchQuery() {
	x.SearchQuery = nil
}

func (x *FilterOptions) ClearTimeRange() {
	x.TimeRange = nil
}

type FilterOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Field-based filters
	Filters map[string]*FilterValue
	// Text search query
	SearchQuery *string
	// Time range filter
	TimeRange *TimeRange
}

func (b0 FilterOptions_builder) Build() *FilterOptions {
	m0 := &FilterOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.Filters = b.Filters
	x.SearchQuery = b.SearchQuery
	x.TimeRange = b.TimeRange
	return m0
}

// Filter value with multiple type support
type FilterValue struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*FilterValue_StringValue
	//	*FilterValue_IntValue
	//	*FilterValue_DoubleValue
	//	*FilterValue_BoolValue
	//	*FilterValue_StringArray
	//	*FilterValue_IntArray
	Value isFilterValue_Value `protobuf_oneof:"value"`
	// Filter operation type
	Operation     *FilterOperation `protobuf:"varint,7,opt,name=operation,enum=gcommon.v1.common.FilterOperation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterValue) Reset() {
	*x = FilterValue{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterValue) ProtoMessage() {}

func (x *FilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FilterValue) GetValue() isFilterValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FilterValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *FilterValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *FilterValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *FilterValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *FilterValue) GetStringArray() *StringArray {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_StringArray); ok {
			return x.StringArray
		}
	}
	return nil
}

func (x *FilterValue) GetIntArray() *Int64Array {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_IntArray); ok {
			return x.IntArray
		}
	}
	return nil
}

func (x *FilterValue) GetOperation() FilterOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return FilterOperation_FILTER_OPERATION_UNSPECIFIED
}

func (x *FilterValue) SetStringValue(v string) {
	x.Value = &FilterValue_StringValue{v}
}

func (x *FilterValue) SetIntValue(v int64) {
	x.Value = &FilterValue_IntValue{v}
}

func (x *FilterValue) SetDoubleValue(v float64) {
	x.Value = &FilterValue_DoubleValue{v}
}

func (x *FilterValue) SetBoolValue(v bool) {
	x.Value = &FilterValue_BoolValue{v}
}

func (x *FilterValue) SetStringArray(v *StringArray) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &FilterValue_StringArray{v}
}

func (x *FilterValue) SetIntArray(v *Int64Array) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &FilterValue_IntArray{v}
}

func (x *FilterValue) SetOperation(v FilterOperation) {
	x.Operation = &v
}

func (x *FilterValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *FilterValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_StringValue)
	return ok
}

func (x *FilterValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_IntValue)
	return ok
}

func (x *FilterValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_DoubleValue)
	return ok
}

func (x *FilterValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_BoolValue)
	return ok
}

func (x *FilterValue) HasStringArray() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_StringArray)
	return ok
}

func (x *FilterValue) HasIntArray() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*FilterValue_IntArray)
	return ok
}

func (x *FilterValue) HasOperation() bool {
	if x == nil {
		return false
	}
	return x.Operation != nil
}

func (x *FilterValue) ClearValue() {
	x.Value = nil
}

func (x *FilterValue) ClearStringValue() {
	if _, ok := x.Value.(*FilterValue_StringValue); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearIntValue() {
	if _, ok := x.Value.(*FilterValue_IntValue); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearDoubleValue() {
	if _, ok := x.Value.(*FilterValue_DoubleValue); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearBoolValue() {
	if _, ok := x.Value.(*FilterValue_BoolValue); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearStringArray() {
	if _, ok := x.Value.(*FilterValue_StringArray); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearIntArray() {
	if _, ok := x.Value.(*FilterValue_IntArray); ok {
		x.Value = nil
	}
}

func (x *FilterValue) ClearOperation() {
	x.Operation = nil
}

const FilterValue_Value_not_set_case case_FilterValue_Value = 0
const FilterValue_StringValue_case case_FilterValue_Value = 1
const FilterValue_IntValue_case case_FilterValue_Value = 2
const FilterValue_DoubleValue_case case_FilterValue_Value = 3
const FilterValue_BoolValue_case case_FilterValue_Value = 4
const FilterValue_StringArray_case case_FilterValue_Value = 5
const FilterValue_IntArray_case case_FilterValue_Value = 6

func (x *FilterValue) WhichValue() case_FilterValue_Value {
	if x == nil {
		return FilterValue_Value_not_set_case
	}
	switch x.Value.(type) {
	case *FilterValue_StringValue:
		return FilterValue_StringValue_case
	case *FilterValue_IntValue:
		return FilterValue_IntValue_case
	case *FilterValue_DoubleValue:
		return FilterValue_DoubleValue_case
	case *FilterValue_BoolValue:
		return FilterValue_BoolValue_case
	case *FilterValue_StringArray:
		return FilterValue_StringArray_case
	case *FilterValue_IntArray:
		return FilterValue_IntArray_case
	default:
		return FilterValue_Value_not_set_case
	}
}

type FilterValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Value:
	StringValue *string
	IntValue    *int64
	DoubleValue *float64
	BoolValue   *bool
	StringArray *StringArray
	IntArray    *Int64Array
	// -- end of Value
	// Filter operation type
	Operation *FilterOperation
}

func (b0 FilterValue_builder) Build() *FilterValue {
	m0 := &FilterValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StringValue != nil {
		x.Value = &FilterValue_StringValue{*b.StringValue}
	}
	if b.IntValue != nil {
		x.Value = &FilterValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.Value = &FilterValue_DoubleValue{*b.DoubleValue}
	}
	if b.BoolValue != nil {
		x.Value = &FilterValue_BoolValue{*b.BoolValue}
	}
	if b.StringArray != nil {
		x.Value = &FilterValue_StringArray{b.StringArray}
	}
	if b.IntArray != nil {
		x.Value = &FilterValue_IntArray{b.IntArray}
	}
	x.Operation = b.Operation
	return m0
}

type case_FilterValue_Value protoreflect.FieldNumber

func (x case_FilterValue_Value) String() string {
	md := file_pkg_common_proto_common_proto_msgTypes[8].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isFilterValue_Value interface {
	isFilterValue_Value()
}

type FilterValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}

type FilterValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type FilterValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

type FilterValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}

type FilterValue_StringArray struct {
	StringArray *StringArray `protobuf:"bytes,5,opt,name=string_array,json=stringArray,oneof"`
}

type FilterValue_IntArray struct {
	IntArray *Int64Array `protobuf:"bytes,6,opt,name=int_array,json=intArray,oneof"`
}

func (*FilterValue_StringValue) isFilterValue_Value() {}

func (*FilterValue_IntValue) isFilterValue_Value() {}

func (*FilterValue_DoubleValue) isFilterValue_Value() {}

func (*FilterValue_BoolValue) isFilterValue_Value() {}

func (*FilterValue_StringArray) isFilterValue_Value() {}

func (*FilterValue_IntArray) isFilterValue_Value() {}

// String array wrapper for oneof usage
type StringArray struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringArray) Reset() {
	*x = StringArray{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArray) ProtoMessage() {}

func (x *StringArray) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *StringArray) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StringArray) SetValues(v []string) {
	x.Values = v
}

type StringArray_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Values []string
}

func (b0 StringArray_builder) Build() *StringArray {
	m0 := &StringArray{}
	b, x := &b0, m0
	_, _ = b, x
	x.Values = b.Values
	return m0
}

// Int64 array wrapper for oneof usage
type Int64Array struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Values        []int64                `protobuf:"varint,1,rep,packed,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Array) Reset() {
	*x = Int64Array{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Array) ProtoMessage() {}

func (x *Int64Array) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Int64Array) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Int64Array) SetValues(v []int64) {
	x.Values = v
}

type Int64Array_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Values []int64
}

func (b0 Int64Array_builder) Build() *Int64Array {
	m0 := &Int64Array{}
	b, x := &b0, m0
	_, _ = b, x
	x.Values = b.Values
	return m0
}

// Generic key-value pair for metadata
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *KeyValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *KeyValue) SetKey(v string) {
	x.Key = &v
}

func (x *KeyValue) SetValue(v string) {
	x.Value = &v
}

func (x *KeyValue) HasKey() bool {
	if x == nil {
		return false
	}
	return x.Key != nil
}

func (x *KeyValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *KeyValue) ClearKey() {
	x.Key = nil
}

func (x *KeyValue) ClearValue() {
	x.Value = nil
}

type KeyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key   *string
	Value *string
}

func (b0 KeyValue_builder) Build() *KeyValue {
	m0 := &KeyValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.Key = b.Key
	x.Value = b.Value
	return m0
}

// Resource reference for cross-module operations
type ResourceReference struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Resource type (e.g., "user", "config", "queue")
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Resource ID
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Resource name (human-readable)
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Module that owns this resource
	Module        *string `protobuf:"bytes,4,opt,name=module" json:"module,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceReference) Reset() {
	*x = ResourceReference{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReference) ProtoMessage() {}

func (x *ResourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ResourceReference) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ResourceReference) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ResourceReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceReference) GetModule() string {
	if x != nil && x.Module != nil {
		return *x.Module
	}
	return ""
}

func (x *ResourceReference) SetType(v string) {
	x.Type = &v
}

func (x *ResourceReference) SetId(v string) {
	x.Id = &v
}

func (x *ResourceReference) SetName(v string) {
	x.Name = &v
}

func (x *ResourceReference) SetModule(v string) {
	x.Module = &v
}

func (x *ResourceReference) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *ResourceReference) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *ResourceReference) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ResourceReference) HasModule() bool {
	if x == nil {
		return false
	}
	return x.Module != nil
}

func (x *ResourceReference) ClearType() {
	x.Type = nil
}

func (x *ResourceReference) ClearId() {
	x.Id = nil
}

func (x *ResourceReference) ClearName() {
	x.Name = nil
}

func (x *ResourceReference) ClearModule() {
	x.Module = nil
}

type ResourceReference_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Resource type (e.g., "user", "config", "queue")
	Type *string
	// Resource ID
	Id *string
	// Resource name (human-readable)
	Name *string
	// Module that owns this resource
	Module *string
}

func (b0 ResourceReference_builder) Build() *ResourceReference {
	m0 := &ResourceReference{}
	b, x := &b0, m0
	_, _ = b, x
	x.Type = b.Type
	x.Id = b.Id
	x.Name = b.Name
	x.Module = b.Module
	return m0
}

// Common metrics data point
type MetricPoint struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Metric name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Metric value
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	// Timestamp when metric was recorded
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Metric labels
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Metric unit
	Unit          *string `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricPoint) Reset() {
	*x = MetricPoint{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricPoint) ProtoMessage() {}

func (x *MetricPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *MetricPoint) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MetricPoint) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MetricPoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetricPoint) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricPoint) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *MetricPoint) SetName(v string) {
	x.Name = &v
}

func (x *MetricPoint) SetValue(v float64) {
	x.Value = &v
}

func (x *MetricPoint) SetTimestamp(v *timestamppb.Timestamp) {
	x.Timestamp = v
}

func (x *MetricPoint) SetLabels(v map[string]string) {
	x.Labels = v
}

func (x *MetricPoint) SetUnit(v string) {
	x.Unit = &v
}

func (x *MetricPoint) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *MetricPoint) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *MetricPoint) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.Timestamp != nil
}

func (x *MetricPoint) HasUnit() bool {
	if x == nil {
		return false
	}
	return x.Unit != nil
}

func (x *MetricPoint) ClearName() {
	x.Name = nil
}

func (x *MetricPoint) ClearValue() {
	x.Value = nil
}

func (x *MetricPoint) ClearTimestamp() {
	x.Timestamp = nil
}

func (x *MetricPoint) ClearUnit() {
	x.Unit = nil
}

type MetricPoint_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Metric name
	Name *string
	// Metric value
	Value *float64
	// Timestamp when metric was recorded
	Timestamp *timestamppb.Timestamp
	// Metric labels
	Labels map[string]string
	// Metric unit
	Unit *string
}

func (b0 MetricPoint_builder) Build() *MetricPoint {
	m0 := &MetricPoint{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Value = b.Value
	x.Timestamp = b.Timestamp
	x.Labels = b.Labels
	x.Unit = b.Unit
	return m0
}

// Configuration value with type information
type ConfigValue struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*ConfigValue_StringValue
	//	*ConfigValue_IntValue
	//	*ConfigValue_DoubleValue
	//	*ConfigValue_BoolValue
	//	*ConfigValue_BytesValue
	//	*ConfigValue_AnyValue
	Value isConfigValue_Value `protobuf_oneof:"value"`
	// Value type for validation
	Type *ValueType `protobuf:"varint,7,opt,name=type,enum=gcommon.v1.common.ValueType" json:"type,omitempty"`
	// Whether value is encrypted
	Encrypted *bool `protobuf:"varint,8,opt,name=encrypted" json:"encrypted,omitempty"`
	// Value metadata
	Metadata      map[string]string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigValue) Reset() {
	*x = ConfigValue{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigValue) ProtoMessage() {}

func (x *ConfigValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ConfigValue) GetValue() isConfigValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ConfigValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *ConfigValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *ConfigValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *ConfigValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *ConfigValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *ConfigValue) GetAnyValue() *anypb.Any {
	if x != nil {
		if x, ok := x.Value.(*ConfigValue_AnyValue); ok {
			return x.AnyValue
		}
	}
	return nil
}

func (x *ConfigValue) GetType() ValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ValueType_VALUE_TYPE_UNSPECIFIED
}

func (x *ConfigValue) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

func (x *ConfigValue) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConfigValue) SetStringValue(v string) {
	x.Value = &ConfigValue_StringValue{v}
}

func (x *ConfigValue) SetIntValue(v int64) {
	x.Value = &ConfigValue_IntValue{v}
}

func (x *ConfigValue) SetDoubleValue(v float64) {
	x.Value = &ConfigValue_DoubleValue{v}
}

func (x *ConfigValue) SetBoolValue(v bool) {
	x.Value = &ConfigValue_BoolValue{v}
}

func (x *ConfigValue) SetBytesValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Value = &ConfigValue_BytesValue{v}
}

func (x *ConfigValue) SetAnyValue(v *anypb.Any) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &ConfigValue_AnyValue{v}
}

func (x *ConfigValue) SetType(v ValueType) {
	x.Type = &v
}

func (x *ConfigValue) SetEncrypted(v bool) {
	x.Encrypted = &v
}

func (x *ConfigValue) SetMetadata(v map[string]string) {
	x.Metadata = v
}

func (x *ConfigValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *ConfigValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_StringValue)
	return ok
}

func (x *ConfigValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_IntValue)
	return ok
}

func (x *ConfigValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_DoubleValue)
	return ok
}

func (x *ConfigValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_BoolValue)
	return ok
}

func (x *ConfigValue) HasBytesValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_BytesValue)
	return ok
}

func (x *ConfigValue) HasAnyValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*ConfigValue_AnyValue)
	return ok
}

func (x *ConfigValue) HasType() bool {
	if x == nil {
		return false
	}
	return x.Type != nil
}

func (x *ConfigValue) HasEncrypted() bool {
	if x == nil {
		return false
	}
	return x.Encrypted != nil
}

func (x *ConfigValue) ClearValue() {
	x.Value = nil
}

func (x *ConfigValue) ClearStringValue() {
	if _, ok := x.Value.(*ConfigValue_StringValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearIntValue() {
	if _, ok := x.Value.(*ConfigValue_IntValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearDoubleValue() {
	if _, ok := x.Value.(*ConfigValue_DoubleValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearBoolValue() {
	if _, ok := x.Value.(*ConfigValue_BoolValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearBytesValue() {
	if _, ok := x.Value.(*ConfigValue_BytesValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearAnyValue() {
	if _, ok := x.Value.(*ConfigValue_AnyValue); ok {
		x.Value = nil
	}
}

func (x *ConfigValue) ClearType() {
	x.Type = nil
}

func (x *ConfigValue) ClearEncrypted() {
	x.Encrypted = nil
}

const ConfigValue_Value_not_set_case case_ConfigValue_Value = 0
const ConfigValue_StringValue_case case_ConfigValue_Value = 1
const ConfigValue_IntValue_case case_ConfigValue_Value = 2
const ConfigValue_DoubleValue_case case_ConfigValue_Value = 3
const ConfigValue_BoolValue_case case_ConfigValue_Value = 4
const ConfigValue_BytesValue_case case_ConfigValue_Value = 5
const ConfigValue_AnyValue_case case_ConfigValue_Value = 6

func (x *ConfigValue) WhichValue() case_ConfigValue_Value {
	if x == nil {
		return ConfigValue_Value_not_set_case
	}
	switch x.Value.(type) {
	case *ConfigValue_StringValue:
		return ConfigValue_StringValue_case
	case *ConfigValue_IntValue:
		return ConfigValue_IntValue_case
	case *ConfigValue_DoubleValue:
		return ConfigValue_DoubleValue_case
	case *ConfigValue_BoolValue:
		return ConfigValue_BoolValue_case
	case *ConfigValue_BytesValue:
		return ConfigValue_BytesValue_case
	case *ConfigValue_AnyValue:
		return ConfigValue_AnyValue_case
	default:
		return ConfigValue_Value_not_set_case
	}
}

type ConfigValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof Value:
	StringValue *string
	IntValue    *int64
	DoubleValue *float64
	BoolValue   *bool
	BytesValue  []byte
	AnyValue    *anypb.Any
	// -- end of Value
	// Value type for validation
	Type *ValueType
	// Whether value is encrypted
	Encrypted *bool
	// Value metadata
	Metadata map[string]string
}

func (b0 ConfigValue_builder) Build() *ConfigValue {
	m0 := &ConfigValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StringValue != nil {
		x.Value = &ConfigValue_StringValue{*b.StringValue}
	}
	if b.IntValue != nil {
		x.Value = &ConfigValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.Value = &ConfigValue_DoubleValue{*b.DoubleValue}
	}
	if b.BoolValue != nil {
		x.Value = &ConfigValue_BoolValue{*b.BoolValue}
	}
	if b.BytesValue != nil {
		x.Value = &ConfigValue_BytesValue{b.BytesValue}
	}
	if b.AnyValue != nil {
		x.Value = &ConfigValue_AnyValue{b.AnyValue}
	}
	x.Type = b.Type
	x.Encrypted = b.Encrypted
	x.Metadata = b.Metadata
	return m0
}

type case_ConfigValue_Value protoreflect.FieldNumber

func (x case_ConfigValue_Value) String() string {
	md := file_pkg_common_proto_common_proto_msgTypes[14].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isConfigValue_Value interface {
	isConfigValue_Value()
}

type ConfigValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}

type ConfigValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type ConfigValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

type ConfigValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}

type ConfigValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,5,opt,name=bytes_value,json=bytesValue,oneof"`
}

type ConfigValue_AnyValue struct {
	AnyValue *anypb.Any `protobuf:"bytes,6,opt,name=any_value,json=anyValue,oneof"`
}

func (*ConfigValue_StringValue) isConfigValue_Value() {}

func (*ConfigValue_IntValue) isConfigValue_Value() {}

func (*ConfigValue_DoubleValue) isConfigValue_Value() {}

func (*ConfigValue_BoolValue) isConfigValue_Value() {}

func (*ConfigValue_BytesValue) isConfigValue_Value() {}

func (*ConfigValue_AnyValue) isConfigValue_Value() {}

// Rate limiting information
type RateLimit struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Maximum requests per window
	Limit *int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Time window duration
	Window *durationpb.Duration `protobuf:"bytes,2,opt,name=window" json:"window,omitempty"`
	// Remaining requests in current window
	Remaining *int32 `protobuf:"varint,3,opt,name=remaining" json:"remaining,omitempty"`
	// Time until window resets
	ResetTime     *durationpb.Duration `protobuf:"bytes,4,opt,name=reset_time,json=resetTime" json:"reset_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RateLimit) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *RateLimit) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *RateLimit) GetRemaining() int32 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *RateLimit) GetResetTime() *durationpb.Duration {
	if x != nil {
		return x.ResetTime
	}
	return nil
}

func (x *RateLimit) SetLimit(v int32) {
	x.Limit = &v
}

func (x *RateLimit) SetWindow(v *durationpb.Duration) {
	x.Window = v
}

func (x *RateLimit) SetRemaining(v int32) {
	x.Remaining = &v
}

func (x *RateLimit) SetResetTime(v *durationpb.Duration) {
	x.ResetTime = v
}

func (x *RateLimit) HasLimit() bool {
	if x == nil {
		return false
	}
	return x.Limit != nil
}

func (x *RateLimit) HasWindow() bool {
	if x == nil {
		return false
	}
	return x.Window != nil
}

func (x *RateLimit) HasRemaining() bool {
	if x == nil {
		return false
	}
	return x.Remaining != nil
}

func (x *RateLimit) HasResetTime() bool {
	if x == nil {
		return false
	}
	return x.ResetTime != nil
}

func (x *RateLimit) ClearLimit() {
	x.Limit = nil
}

func (x *RateLimit) ClearWindow() {
	x.Window = nil
}

func (x *RateLimit) ClearRemaining() {
	x.Remaining = nil
}

func (x *RateLimit) ClearResetTime() {
	x.ResetTime = nil
}

type RateLimit_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum requests per window
	Limit *int32
	// Time window duration
	Window *durationpb.Duration
	// Remaining requests in current window
	Remaining *int32
	// Time until window resets
	ResetTime *durationpb.Duration
}

func (b0 RateLimit_builder) Build() *RateLimit {
	m0 := &RateLimit{}
	b, x := &b0, m0
	_, _ = b, x
	x.Limit = b.Limit
	x.Window = b.Window
	x.Remaining = b.Remaining
	x.ResetTime = b.ResetTime
	return m0
}

// Service version information
type ServiceVersion struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Service name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Semantic version
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Build commit hash
	Commit *string `protobuf:"bytes,3,opt,name=commit" json:"commit,omitempty"`
	// Build timestamp
	BuildTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	// Go version used for build
	GoVersion     *string `protobuf:"bytes,5,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceVersion) Reset() {
	*x = ServiceVersion{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceVersion) ProtoMessage() {}

func (x *ServiceVersion) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ServiceVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ServiceVersion) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *ServiceVersion) GetBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildTime
	}
	return nil
}

func (x *ServiceVersion) GetGoVersion() string {
	if x != nil && x.GoVersion != nil {
		return *x.GoVersion
	}
	return ""
}

func (x *ServiceVersion) SetName(v string) {
	x.Name = &v
}

func (x *ServiceVersion) SetVersion(v string) {
	x.Version = &v
}

func (x *ServiceVersion) SetCommit(v string) {
	x.Commit = &v
}

func (x *ServiceVersion) SetBuildTime(v *timestamppb.Timestamp) {
	x.BuildTime = v
}

func (x *ServiceVersion) SetGoVersion(v string) {
	x.GoVersion = &v
}

func (x *ServiceVersion) HasName() bool {
	if x == nil {
		return false
	}
	return x.Name != nil
}

func (x *ServiceVersion) HasVersion() bool {
	if x == nil {
		return false
	}
	return x.Version != nil
}

func (x *ServiceVersion) HasCommit() bool {
	if x == nil {
		return false
	}
	return x.Commit != nil
}

func (x *ServiceVersion) HasBuildTime() bool {
	if x == nil {
		return false
	}
	return x.BuildTime != nil
}

func (x *ServiceVersion) HasGoVersion() bool {
	if x == nil {
		return false
	}
	return x.GoVersion != nil
}

func (x *ServiceVersion) ClearName() {
	x.Name = nil
}

func (x *ServiceVersion) ClearVersion() {
	x.Version = nil
}

func (x *ServiceVersion) ClearCommit() {
	x.Commit = nil
}

func (x *ServiceVersion) ClearBuildTime() {
	x.BuildTime = nil
}

func (x *ServiceVersion) ClearGoVersion() {
	x.GoVersion = nil
}

type ServiceVersion_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Service name
	Name *string
	// Semantic version
	Version *string
	// Build commit hash
	Commit *string
	// Build timestamp
	BuildTime *timestamppb.Timestamp
	// Go version used for build
	GoVersion *string
}

func (b0 ServiceVersion_builder) Build() *ServiceVersion {
	m0 := &ServiceVersion{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Version = b.Version
	x.Commit = b.Commit
	x.BuildTime = b.BuildTime
	x.GoVersion = b.GoVersion
	return m0
}

// Audit log entry for tracking operations across modules
type AuditLog struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique audit log ID
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// User who performed the action
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Action performed
	Action *string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	// Resource that was acted upon
	Resource *ResourceReference `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	// Timestamp of the action
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	// Source IP address
	SourceIp *string `protobuf:"bytes,6,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	// User agent
	UserAgent *string `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	// Additional metadata about the action
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Result of the action (success/failure)
	Result *AuditResult `protobuf:"varint,9,opt,name=result,enum=gcommon.v1.common.AuditResult" json:"result,omitempty"`
	// Session ID if applicable
	SessionId     *string `protobuf:"bytes,10,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AuditLog) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AuditLog) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AuditLog) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *AuditLog) GetResource() *ResourceReference {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *AuditLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AuditLog) GetSourceIp() string {
	if x != nil && x.SourceIp != nil {
		return *x.SourceIp
	}
	return ""
}

func (x *AuditLog) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *AuditLog) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AuditLog) GetResult() AuditResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return AuditResult_AUDIT_RESULT_UNSPECIFIED
}

func (x *AuditLog) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *AuditLog) SetId(v string) {
	x.Id = &v
}

func (x *AuditLog) SetUserId(v string) {
	x.UserId = &v
}

func (x *AuditLog) SetAction(v string) {
	x.Action = &v
}

func (x *AuditLog) SetResource(v *ResourceReference) {
	x.Resource = v
}

func (x *AuditLog) SetTimestamp(v *timestamppb.Timestamp) {
	x.Timestamp = v
}

func (x *AuditLog) SetSourceIp(v string) {
	x.SourceIp = &v
}

func (x *AuditLog) SetUserAgent(v string) {
	x.UserAgent = &v
}

func (x *AuditLog) SetMetadata(v map[string]string) {
	x.Metadata = v
}

func (x *AuditLog) SetResult(v AuditResult) {
	x.Result = &v
}

func (x *AuditLog) SetSessionId(v string) {
	x.SessionId = &v
}

func (x *AuditLog) HasId() bool {
	if x == nil {
		return false
	}
	return x.Id != nil
}

func (x *AuditLog) HasUserId() bool {
	if x == nil {
		return false
	}
	return x.UserId != nil
}

func (x *AuditLog) HasAction() bool {
	if x == nil {
		return false
	}
	return x.Action != nil
}

func (x *AuditLog) HasResource() bool {
	if x == nil {
		return false
	}
	return x.Resource != nil
}

func (x *AuditLog) HasTimestamp() bool {
	if x == nil {
		return false
	}
	return x.Timestamp != nil
}

func (x *AuditLog) HasSourceIp() bool {
	if x == nil {
		return false
	}
	return x.SourceIp != nil
}

func (x *AuditLog) HasUserAgent() bool {
	if x == nil {
		return false
	}
	return x.UserAgent != nil
}

func (x *AuditLog) HasResult() bool {
	if x == nil {
		return false
	}
	return x.Result != nil
}

func (x *AuditLog) HasSessionId() bool {
	if x == nil {
		return false
	}
	return x.SessionId != nil
}

func (x *AuditLog) ClearId() {
	x.Id = nil
}

func (x *AuditLog) ClearUserId() {
	x.UserId = nil
}

func (x *AuditLog) ClearAction() {
	x.Action = nil
}

func (x *AuditLog) ClearResource() {
	x.Resource = nil
}

func (x *AuditLog) ClearTimestamp() {
	x.Timestamp = nil
}

func (x *AuditLog) ClearSourceIp() {
	x.SourceIp = nil
}

func (x *AuditLog) ClearUserAgent() {
	x.UserAgent = nil
}

func (x *AuditLog) ClearResult() {
	x.Result = nil
}

func (x *AuditLog) ClearSessionId() {
	x.SessionId = nil
}

type AuditLog_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique audit log ID
	Id *string
	// User who performed the action
	UserId *string
	// Action performed
	Action *string
	// Resource that was acted upon
	Resource *ResourceReference
	// Timestamp of the action
	Timestamp *timestamppb.Timestamp
	// Source IP address
	SourceIp *string
	// User agent
	UserAgent *string
	// Additional metadata about the action
	Metadata map[string]string
	// Result of the action (success/failure)
	Result *AuditResult
	// Session ID if applicable
	SessionId *string
}

func (b0 AuditLog_builder) Build() *AuditLog {
	m0 := &AuditLog{}
	b, x := &b0, m0
	_, _ = b, x
	x.Id = b.Id
	x.UserId = b.UserId
	x.Action = b.Action
	x.Resource = b.Resource
	x.Timestamp = b.Timestamp
	x.SourceIp = b.SourceIp
	x.UserAgent = b.UserAgent
	x.Metadata = b.Metadata
	x.Result = b.Result
	x.SessionId = b.SessionId
	return m0
}

// Batch operation wrapper for bulk requests
type BatchOperation struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique batch ID
	BatchId *string `protobuf:"bytes,1,opt,name=batch_id,json=batchId" json:"batch_id,omitempty"`
	// Operation type
	OperationType *string `protobuf:"bytes,2,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	// Individual operations in the batch
	Operations []*anypb.Any `protobuf:"bytes,3,rep,name=operations" json:"operations,omitempty"`
	// Batch processing options
	Options *BatchOptions `protobuf:"bytes,4,opt,name=options" json:"options,omitempty"`
	// Request metadata
	Metadata      *RequestMetadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperation) Reset() {
	*x = BatchOperation{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperation) ProtoMessage() {}

func (x *BatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchOperation) GetBatchId() string {
	if x != nil && x.BatchId != nil {
		return *x.BatchId
	}
	return ""
}

func (x *BatchOperation) GetOperationType() string {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ""
}

func (x *BatchOperation) GetOperations() []*anypb.Any {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *BatchOperation) GetOptions() *BatchOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BatchOperation) GetMetadata() *RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BatchOperation) SetBatchId(v string) {
	x.BatchId = &v
}

func (x *BatchOperation) SetOperationType(v string) {
	x.OperationType = &v
}

func (x *BatchOperation) SetOperations(v []*anypb.Any) {
	x.Operations = v
}

func (x *BatchOperation) SetOptions(v *BatchOptions) {
	x.Options = v
}

func (x *BatchOperation) SetMetadata(v *RequestMetadata) {
	x.Metadata = v
}

func (x *BatchOperation) HasBatchId() bool {
	if x == nil {
		return false
	}
	return x.BatchId != nil
}

func (x *BatchOperation) HasOperationType() bool {
	if x == nil {
		return false
	}
	return x.OperationType != nil
}

func (x *BatchOperation) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.Options != nil
}

func (x *BatchOperation) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.Metadata != nil
}

func (x *BatchOperation) ClearBatchId() {
	x.BatchId = nil
}

func (x *BatchOperation) ClearOperationType() {
	x.OperationType = nil
}

func (x *BatchOperation) ClearOptions() {
	x.Options = nil
}

func (x *BatchOperation) ClearMetadata() {
	x.Metadata = nil
}

type BatchOperation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique batch ID
	BatchId *string
	// Operation type
	OperationType *string
	// Individual operations in the batch
	Operations []*anypb.Any
	// Batch processing options
	Options *BatchOptions
	// Request metadata
	Metadata *RequestMetadata
}

func (b0 BatchOperation_builder) Build() *BatchOperation {
	m0 := &BatchOperation{}
	b, x := &b0, m0
	_, _ = b, x
	x.BatchId = b.BatchId
	x.OperationType = b.OperationType
	x.Operations = b.Operations
	x.Options = b.Options
	x.Metadata = b.Metadata
	return m0
}

// Batch processing options
type BatchOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Maximum number of operations to process in parallel
	MaxParallel *int32 `protobuf:"varint,1,opt,name=max_parallel,json=maxParallel" json:"max_parallel,omitempty"`
	// Whether to stop on first error
	FailFast *bool `protobuf:"varint,2,opt,name=fail_fast,json=failFast" json:"fail_fast,omitempty"`
	// Timeout for the entire batch
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
	// Whether to return partial results on timeout
	ReturnPartial *bool `protobuf:"varint,4,opt,name=return_partial,json=returnPartial" json:"return_partial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOptions) Reset() {
	*x = BatchOptions{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOptions) ProtoMessage() {}

func (x *BatchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchOptions) GetMaxParallel() int32 {
	if x != nil && x.MaxParallel != nil {
		return *x.MaxParallel
	}
	return 0
}

func (x *BatchOptions) GetFailFast() bool {
	if x != nil && x.FailFast != nil {
		return *x.FailFast
	}
	return false
}

func (x *BatchOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *BatchOptions) GetReturnPartial() bool {
	if x != nil && x.ReturnPartial != nil {
		return *x.ReturnPartial
	}
	return false
}

func (x *BatchOptions) SetMaxParallel(v int32) {
	x.MaxParallel = &v
}

func (x *BatchOptions) SetFailFast(v bool) {
	x.FailFast = &v
}

func (x *BatchOptions) SetTimeout(v *durationpb.Duration) {
	x.Timeout = v
}

func (x *BatchOptions) SetReturnPartial(v bool) {
	x.ReturnPartial = &v
}

func (x *BatchOptions) HasMaxParallel() bool {
	if x == nil {
		return false
	}
	return x.MaxParallel != nil
}

func (x *BatchOptions) HasFailFast() bool {
	if x == nil {
		return false
	}
	return x.FailFast != nil
}

func (x *BatchOptions) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.Timeout != nil
}

func (x *BatchOptions) HasReturnPartial() bool {
	if x == nil {
		return false
	}
	return x.ReturnPartial != nil
}

func (x *BatchOptions) ClearMaxParallel() {
	x.MaxParallel = nil
}

func (x *BatchOptions) ClearFailFast() {
	x.FailFast = nil
}

func (x *BatchOptions) ClearTimeout() {
	x.Timeout = nil
}

func (x *BatchOptions) ClearReturnPartial() {
	x.ReturnPartial = nil
}

type BatchOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum number of operations to process in parallel
	MaxParallel *int32
	// Whether to stop on first error
	FailFast *bool
	// Timeout for the entire batch
	Timeout *durationpb.Duration
	// Whether to return partial results on timeout
	ReturnPartial *bool
}

func (b0 BatchOptions_builder) Build() *BatchOptions {
	m0 := &BatchOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.MaxParallel = b.MaxParallel
	x.FailFast = b.FailFast
	x.Timeout = b.Timeout
	x.ReturnPartial = b.ReturnPartial
	return m0
}

// Subscription information for streaming operations
type SubscriptionInfo struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Unique subscription ID
	SubscriptionId *string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	// Filter criteria for the subscription
	Filter *FilterOptions `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// Subscription start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Optional end time for the subscription
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// Subscriber information
	Subscriber *ClientInfo `protobuf:"bytes,5,opt,name=subscriber" json:"subscriber,omitempty"`
	// Subscription options
	Options *SubscriptionOptions `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
	// Current status of the subscription
	Status        *SubscriptionStatus `protobuf:"varint,7,opt,name=status,enum=gcommon.v1.common.SubscriptionStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionInfo) Reset() {
	*x = SubscriptionInfo{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionInfo) ProtoMessage() {}

func (x *SubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscriptionInfo) GetSubscriptionId() string {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return ""
}

func (x *SubscriptionInfo) GetFilter() *FilterOptions {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SubscriptionInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SubscriptionInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SubscriptionInfo) GetSubscriber() *ClientInfo {
	if x != nil {
		return x.Subscriber
	}
	return nil
}

func (x *SubscriptionInfo) GetOptions() *SubscriptionOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SubscriptionInfo) GetStatus() SubscriptionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *SubscriptionInfo) SetSubscriptionId(v string) {
	x.SubscriptionId = &v
}

func (x *SubscriptionInfo) SetFilter(v *FilterOptions) {
	x.Filter = v
}

func (x *SubscriptionInfo) SetStartTime(v *timestamppb.Timestamp) {
	x.StartTime = v
}

func (x *SubscriptionInfo) SetEndTime(v *timestamppb.Timestamp) {
	x.EndTime = v
}

func (x *SubscriptionInfo) SetSubscriber(v *ClientInfo) {
	x.Subscriber = v
}

func (x *SubscriptionInfo) SetOptions(v *SubscriptionOptions) {
	x.Options = v
}

func (x *SubscriptionInfo) SetStatus(v SubscriptionStatus) {
	x.Status = &v
}

func (x *SubscriptionInfo) HasSubscriptionId() bool {
	if x == nil {
		return false
	}
	return x.SubscriptionId != nil
}

func (x *SubscriptionInfo) HasFilter() bool {
	if x == nil {
		return false
	}
	return x.Filter != nil
}

func (x *SubscriptionInfo) HasStartTime() bool {
	if x == nil {
		return false
	}
	return x.StartTime != nil
}

func (x *SubscriptionInfo) HasEndTime() bool {
	if x == nil {
		return false
	}
	return x.EndTime != nil
}

func (x *SubscriptionInfo) HasSubscriber() bool {
	if x == nil {
		return false
	}
	return x.Subscriber != nil
}

func (x *SubscriptionInfo) HasOptions() bool {
	if x == nil {
		return false
	}
	return x.Options != nil
}

func (x *SubscriptionInfo) HasStatus() bool {
	if x == nil {
		return false
	}
	return x.Status != nil
}

func (x *SubscriptionInfo) ClearSubscriptionId() {
	x.SubscriptionId = nil
}

func (x *SubscriptionInfo) ClearFilter() {
	x.Filter = nil
}

func (x *SubscriptionInfo) ClearStartTime() {
	x.StartTime = nil
}

func (x *SubscriptionInfo) ClearEndTime() {
	x.EndTime = nil
}

func (x *SubscriptionInfo) ClearSubscriber() {
	x.Subscriber = nil
}

func (x *SubscriptionInfo) ClearOptions() {
	x.Options = nil
}

func (x *SubscriptionInfo) ClearStatus() {
	x.Status = nil
}

type SubscriptionInfo_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique subscription ID
	SubscriptionId *string
	// Filter criteria for the subscription
	Filter *FilterOptions
	// Subscription start time
	StartTime *timestamppb.Timestamp
	// Optional end time for the subscription
	EndTime *timestamppb.Timestamp
	// Subscriber information
	Subscriber *ClientInfo
	// Subscription options
	Options *SubscriptionOptions
	// Current status of the subscription
	Status *SubscriptionStatus
}

func (b0 SubscriptionInfo_builder) Build() *SubscriptionInfo {
	m0 := &SubscriptionInfo{}
	b, x := &b0, m0
	_, _ = b, x
	x.SubscriptionId = b.SubscriptionId
	x.Filter = b.Filter
	x.StartTime = b.StartTime
	x.EndTime = b.EndTime
	x.Subscriber = b.Subscriber
	x.Options = b.Options
	x.Status = b.Status
	return m0
}

// Subscription options
type SubscriptionOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to include historical data
	IncludeHistory *bool `protobuf:"varint,1,opt,name=include_history,json=includeHistory" json:"include_history,omitempty"`
	// Maximum events per batch
	MaxBatchSize *int32 `protobuf:"varint,2,opt,name=max_batch_size,json=maxBatchSize" json:"max_batch_size,omitempty"`
	// Acknowledgment mode
	AckMode *AckMode `protobuf:"varint,3,opt,name=ack_mode,json=ackMode,enum=gcommon.v1.common.AckMode" json:"ack_mode,omitempty"`
	// Keep alive interval
	KeepAlive     *durationpb.Duration `protobuf:"bytes,4,opt,name=keep_alive,json=keepAlive" json:"keep_alive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscriptionOptions) Reset() {
	*x = SubscriptionOptions{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionOptions) ProtoMessage() {}

func (x *SubscriptionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscriptionOptions) GetIncludeHistory() bool {
	if x != nil && x.IncludeHistory != nil {
		return *x.IncludeHistory
	}
	return false
}

func (x *SubscriptionOptions) GetMaxBatchSize() int32 {
	if x != nil && x.MaxBatchSize != nil {
		return *x.MaxBatchSize
	}
	return 0
}

func (x *SubscriptionOptions) GetAckMode() AckMode {
	if x != nil && x.AckMode != nil {
		return *x.AckMode
	}
	return AckMode_ACK_MODE_UNSPECIFIED
}

func (x *SubscriptionOptions) GetKeepAlive() *durationpb.Duration {
	if x != nil {
		return x.KeepAlive
	}
	return nil
}

func (x *SubscriptionOptions) SetIncludeHistory(v bool) {
	x.IncludeHistory = &v
}

func (x *SubscriptionOptions) SetMaxBatchSize(v int32) {
	x.MaxBatchSize = &v
}

func (x *SubscriptionOptions) SetAckMode(v AckMode) {
	x.AckMode = &v
}

func (x *SubscriptionOptions) SetKeepAlive(v *durationpb.Duration) {
	x.KeepAlive = v
}

func (x *SubscriptionOptions) HasIncludeHistory() bool {
	if x == nil {
		return false
	}
	return x.IncludeHistory != nil
}

func (x *SubscriptionOptions) HasMaxBatchSize() bool {
	if x == nil {
		return false
	}
	return x.MaxBatchSize != nil
}

func (x *SubscriptionOptions) HasAckMode() bool {
	if x == nil {
		return false
	}
	return x.AckMode != nil
}

func (x *SubscriptionOptions) HasKeepAlive() bool {
	if x == nil {
		return false
	}
	return x.KeepAlive != nil
}

func (x *SubscriptionOptions) ClearIncludeHistory() {
	x.IncludeHistory = nil
}

func (x *SubscriptionOptions) ClearMaxBatchSize() {
	x.MaxBatchSize = nil
}

func (x *SubscriptionOptions) ClearAckMode() {
	x.AckMode = nil
}

func (x *SubscriptionOptions) ClearKeepAlive() {
	x.KeepAlive = nil
}

type SubscriptionOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to include historical data
	IncludeHistory *bool
	// Maximum events per batch
	MaxBatchSize *int32
	// Acknowledgment mode
	AckMode *AckMode
	// Keep alive interval
	KeepAlive *durationpb.Duration
}

func (b0 SubscriptionOptions_builder) Build() *SubscriptionOptions {
	m0 := &SubscriptionOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.IncludeHistory = b.IncludeHistory
	x.MaxBatchSize = b.MaxBatchSize
	x.AckMode = b.AckMode
	x.KeepAlive = b.KeepAlive
	return m0
}

// Cache policy configuration
type CachePolicy struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Cache expiration policy
	Expiration *ExpirationPolicy `protobuf:"varint,1,opt,name=expiration,enum=gcommon.v1.common.ExpirationPolicy" json:"expiration,omitempty"`
	// Eviction policy when cache is full
	Eviction *EvictionPolicy `protobuf:"varint,2,opt,name=eviction,enum=gcommon.v1.common.EvictionPolicy" json:"eviction,omitempty"`
	// Maximum cache size (in bytes)
	MaxSizeBytes *int64 `protobuf:"varint,3,opt,name=max_size_bytes,json=maxSizeBytes" json:"max_size_bytes,omitempty"`
	// Maximum number of entries
	MaxEntries *int64 `protobuf:"varint,4,opt,name=max_entries,json=maxEntries" json:"max_entries,omitempty"`
	// Default TTL for cache entries
	DefaultTtl *durationpb.Duration `protobuf:"bytes,5,opt,name=default_ttl,json=defaultTtl" json:"default_ttl,omitempty"`
	// Whether to refresh entries before expiration
	RefreshAhead *bool `protobuf:"varint,6,opt,name=refresh_ahead,json=refreshAhead" json:"refresh_ahead,omitempty"`
	// Cache statistics collection enabled
	EnableStats   *bool `protobuf:"varint,7,opt,name=enable_stats,json=enableStats" json:"enable_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CachePolicy) Reset() {
	*x = CachePolicy{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CachePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePolicy) ProtoMessage() {}

func (x *CachePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CachePolicy) GetExpiration() ExpirationPolicy {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return ExpirationPolicy_EXPIRATION_POLICY_UNSPECIFIED
}

func (x *CachePolicy) GetEviction() EvictionPolicy {
	if x != nil && x.Eviction != nil {
		return *x.Eviction
	}
	return EvictionPolicy_EVICTION_POLICY_UNSPECIFIED
}

func (x *CachePolicy) GetMaxSizeBytes() int64 {
	if x != nil && x.MaxSizeBytes != nil {
		return *x.MaxSizeBytes
	}
	return 0
}

func (x *CachePolicy) GetMaxEntries() int64 {
	if x != nil && x.MaxEntries != nil {
		return *x.MaxEntries
	}
	return 0
}

func (x *CachePolicy) GetDefaultTtl() *durationpb.Duration {
	if x != nil {
		return x.DefaultTtl
	}
	return nil
}

func (x *CachePolicy) GetRefreshAhead() bool {
	if x != nil && x.RefreshAhead != nil {
		return *x.RefreshAhead
	}
	return false
}

func (x *CachePolicy) GetEnableStats() bool {
	if x != nil && x.EnableStats != nil {
		return *x.EnableStats
	}
	return false
}

func (x *CachePolicy) SetExpiration(v ExpirationPolicy) {
	x.Expiration = &v
}

func (x *CachePolicy) SetEviction(v EvictionPolicy) {
	x.Eviction = &v
}

func (x *CachePolicy) SetMaxSizeBytes(v int64) {
	x.MaxSizeBytes = &v
}

func (x *CachePolicy) SetMaxEntries(v int64) {
	x.MaxEntries = &v
}

func (x *CachePolicy) SetDefaultTtl(v *durationpb.Duration) {
	x.DefaultTtl = v
}

func (x *CachePolicy) SetRefreshAhead(v bool) {
	x.RefreshAhead = &v
}

func (x *CachePolicy) SetEnableStats(v bool) {
	x.EnableStats = &v
}

func (x *CachePolicy) HasExpiration() bool {
	if x == nil {
		return false
	}
	return x.Expiration != nil
}

func (x *CachePolicy) HasEviction() bool {
	if x == nil {
		return false
	}
	return x.Eviction != nil
}

func (x *CachePolicy) HasMaxSizeBytes() bool {
	if x == nil {
		return false
	}
	return x.MaxSizeBytes != nil
}

func (x *CachePolicy) HasMaxEntries() bool {
	if x == nil {
		return false
	}
	return x.MaxEntries != nil
}

func (x *CachePolicy) HasDefaultTtl() bool {
	if x == nil {
		return false
	}
	return x.DefaultTtl != nil
}

func (x *CachePolicy) HasRefreshAhead() bool {
	if x == nil {
		return false
	}
	return x.RefreshAhead != nil
}

func (x *CachePolicy) HasEnableStats() bool {
	if x == nil {
		return false
	}
	return x.EnableStats != nil
}

func (x *CachePolicy) ClearExpiration() {
	x.Expiration = nil
}

func (x *CachePolicy) ClearEviction() {
	x.Eviction = nil
}

func (x *CachePolicy) ClearMaxSizeBytes() {
	x.MaxSizeBytes = nil
}

func (x *CachePolicy) ClearMaxEntries() {
	x.MaxEntries = nil
}

func (x *CachePolicy) ClearDefaultTtl() {
	x.DefaultTtl = nil
}

func (x *CachePolicy) ClearRefreshAhead() {
	x.RefreshAhead = nil
}

func (x *CachePolicy) ClearEnableStats() {
	x.EnableStats = nil
}

type CachePolicy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Cache expiration policy
	Expiration *ExpirationPolicy
	// Eviction policy when cache is full
	Eviction *EvictionPolicy
	// Maximum cache size (in bytes)
	MaxSizeBytes *int64
	// Maximum number of entries
	MaxEntries *int64
	// Default TTL for cache entries
	DefaultTtl *durationpb.Duration
	// Whether to refresh entries before expiration
	RefreshAhead *bool
	// Cache statistics collection enabled
	EnableStats *bool
}

func (b0 CachePolicy_builder) Build() *CachePolicy {
	m0 := &CachePolicy{}
	b, x := &b0, m0
	_, _ = b, x
	x.Expiration = b.Expiration
	x.Eviction = b.Eviction
	x.MaxSizeBytes = b.MaxSizeBytes
	x.MaxEntries = b.MaxEntries
	x.DefaultTtl = b.DefaultTtl
	x.RefreshAhead = b.RefreshAhead
	x.EnableStats = b.EnableStats
	return m0
}

// Retry policy configuration
type RetryPolicy struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Maximum number of retry attempts
	MaxAttempts *int32 `protobuf:"varint,1,opt,name=max_attempts,json=maxAttempts" json:"max_attempts,omitempty"`
	// Initial retry delay
	InitialDelay *durationpb.Duration `protobuf:"bytes,2,opt,name=initial_delay,json=initialDelay" json:"initial_delay,omitempty"`
	// Maximum retry delay
	MaxDelay *durationpb.Duration `protobuf:"bytes,3,opt,name=max_delay,json=maxDelay" json:"max_delay,omitempty"`
	// Backoff multiplier (exponential backoff)
	BackoffMultiplier *float64 `protobuf:"fixed64,4,opt,name=backoff_multiplier,json=backoffMultiplier" json:"backoff_multiplier,omitempty"`
	// Jitter for retry timing
	EnableJitter *bool `protobuf:"varint,5,opt,name=enable_jitter,json=enableJitter" json:"enable_jitter,omitempty"`
	// Retryable error codes
	RetryableErrors []ErrorCode `protobuf:"varint,6,rep,packed,name=retryable_errors,json=retryableErrors,enum=gcommon.v1.common.ErrorCode" json:"retryable_errors,omitempty"`
	// Total timeout for all retry attempts
	TotalTimeout  *durationpb.Duration `protobuf:"bytes,7,opt,name=total_timeout,json=totalTimeout" json:"total_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RetryPolicy) GetMaxAttempts() int32 {
	if x != nil && x.MaxAttempts != nil {
		return *x.MaxAttempts
	}
	return 0
}

func (x *RetryPolicy) GetInitialDelay() *durationpb.Duration {
	if x != nil {
		return x.InitialDelay
	}
	return nil
}

func (x *RetryPolicy) GetMaxDelay() *durationpb.Duration {
	if x != nil {
		return x.MaxDelay
	}
	return nil
}

func (x *RetryPolicy) GetBackoffMultiplier() float64 {
	if x != nil && x.BackoffMultiplier != nil {
		return *x.BackoffMultiplier
	}
	return 0
}

func (x *RetryPolicy) GetEnableJitter() bool {
	if x != nil && x.EnableJitter != nil {
		return *x.EnableJitter
	}
	return false
}

func (x *RetryPolicy) GetRetryableErrors() []ErrorCode {
	if x != nil {
		return x.RetryableErrors
	}
	return nil
}

func (x *RetryPolicy) GetTotalTimeout() *durationpb.Duration {
	if x != nil {
		return x.TotalTimeout
	}
	return nil
}

func (x *RetryPolicy) SetMaxAttempts(v int32) {
	x.MaxAttempts = &v
}

func (x *RetryPolicy) SetInitialDelay(v *durationpb.Duration) {
	x.InitialDelay = v
}

func (x *RetryPolicy) SetMaxDelay(v *durationpb.Duration) {
	x.MaxDelay = v
}

func (x *RetryPolicy) SetBackoffMultiplier(v float64) {
	x.BackoffMultiplier = &v
}

func (x *RetryPolicy) SetEnableJitter(v bool) {
	x.EnableJitter = &v
}

func (x *RetryPolicy) SetRetryableErrors(v []ErrorCode) {
	x.RetryableErrors = v
}

func (x *RetryPolicy) SetTotalTimeout(v *durationpb.Duration) {
	x.TotalTimeout = v
}

func (x *RetryPolicy) HasMaxAttempts() bool {
	if x == nil {
		return false
	}
	return x.MaxAttempts != nil
}

func (x *RetryPolicy) HasInitialDelay() bool {
	if x == nil {
		return false
	}
	return x.InitialDelay != nil
}

func (x *RetryPolicy) HasMaxDelay() bool {
	if x == nil {
		return false
	}
	return x.MaxDelay != nil
}

func (x *RetryPolicy) HasBackoffMultiplier() bool {
	if x == nil {
		return false
	}
	return x.BackoffMultiplier != nil
}

func (x *RetryPolicy) HasEnableJitter() bool {
	if x == nil {
		return false
	}
	return x.EnableJitter != nil
}

func (x *RetryPolicy) HasTotalTimeout() bool {
	if x == nil {
		return false
	}
	return x.TotalTimeout != nil
}

func (x *RetryPolicy) ClearMaxAttempts() {
	x.MaxAttempts = nil
}

func (x *RetryPolicy) ClearInitialDelay() {
	x.InitialDelay = nil
}

func (x *RetryPolicy) ClearMaxDelay() {
	x.MaxDelay = nil
}

func (x *RetryPolicy) ClearBackoffMultiplier() {
	x.BackoffMultiplier = nil
}

func (x *RetryPolicy) ClearEnableJitter() {
	x.EnableJitter = nil
}

func (x *RetryPolicy) ClearTotalTimeout() {
	x.TotalTimeout = nil
}

type RetryPolicy_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Maximum number of retry attempts
	MaxAttempts *int32
	// Initial retry delay
	InitialDelay *durationpb.Duration
	// Maximum retry delay
	MaxDelay *durationpb.Duration
	// Backoff multiplier (exponential backoff)
	BackoffMultiplier *float64
	// Jitter for retry timing
	EnableJitter *bool
	// Retryable error codes
	RetryableErrors []ErrorCode
	// Total timeout for all retry attempts
	TotalTimeout *durationpb.Duration
}

func (b0 RetryPolicy_builder) Build() *RetryPolicy {
	m0 := &RetryPolicy{}
	b, x := &b0, m0
	_, _ = b, x
	x.MaxAttempts = b.MaxAttempts
	x.InitialDelay = b.InitialDelay
	x.MaxDelay = b.MaxDelay
	x.BackoffMultiplier = b.BackoffMultiplier
	x.EnableJitter = b.EnableJitter
	x.RetryableErrors = b.RetryableErrors
	x.TotalTimeout = b.TotalTimeout
	return m0
}

// Circuit breaker configuration
type CircuitBreakerConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Failure threshold to open circuit
	FailureThreshold *int32 `protobuf:"varint,1,opt,name=failure_threshold,json=failureThreshold" json:"failure_threshold,omitempty"`
	// Success threshold to close circuit
	SuccessThreshold *int32 `protobuf:"varint,2,opt,name=success_threshold,json=successThreshold" json:"success_threshold,omitempty"`
	// Timeout for circuit to remain open
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
	// Maximum number of concurrent requests in half-open state
	MaxRequests *int32 `protobuf:"varint,4,opt,name=max_requests,json=maxRequests" json:"max_requests,omitempty"`
	// Window size for failure counting
	WindowSize *durationpb.Duration `protobuf:"bytes,5,opt,name=window_size,json=windowSize" json:"window_size,omitempty"`
	// Current circuit breaker state
	State         *CircuitBreakerState `protobuf:"varint,6,opt,name=state,enum=gcommon.v1.common.CircuitBreakerState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CircuitBreakerConfig) Reset() {
	*x = CircuitBreakerConfig{}
	mi := &file_pkg_common_proto_common_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CircuitBreakerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerConfig) ProtoMessage() {}

func (x *CircuitBreakerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_common_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CircuitBreakerConfig) GetFailureThreshold() int32 {
	if x != nil && x.FailureThreshold != nil {
		return *x.FailureThreshold
	}
	return 0
}

func (x *CircuitBreakerConfig) GetSuccessThreshold() int32 {
	if x != nil && x.SuccessThreshold != nil {
		return *x.SuccessThreshold
	}
	return 0
}

func (x *CircuitBreakerConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *CircuitBreakerConfig) GetMaxRequests() int32 {
	if x != nil && x.MaxRequests != nil {
		return *x.MaxRequests
	}
	return 0
}

func (x *CircuitBreakerConfig) GetWindowSize() *durationpb.Duration {
	if x != nil {
		return x.WindowSize
	}
	return nil
}

func (x *CircuitBreakerConfig) GetState() CircuitBreakerState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return CircuitBreakerState_CIRCUIT_BREAKER_STATE_UNSPECIFIED
}

func (x *CircuitBreakerConfig) SetFailureThreshold(v int32) {
	x.FailureThreshold = &v
}

func (x *CircuitBreakerConfig) SetSuccessThreshold(v int32) {
	x.SuccessThreshold = &v
}

func (x *CircuitBreakerConfig) SetTimeout(v *durationpb.Duration) {
	x.Timeout = v
}

func (x *CircuitBreakerConfig) SetMaxRequests(v int32) {
	x.MaxRequests = &v
}

func (x *CircuitBreakerConfig) SetWindowSize(v *durationpb.Duration) {
	x.WindowSize = v
}

func (x *CircuitBreakerConfig) SetState(v CircuitBreakerState) {
	x.State = &v
}

func (x *CircuitBreakerConfig) HasFailureThreshold() bool {
	if x == nil {
		return false
	}
	return x.FailureThreshold != nil
}

func (x *CircuitBreakerConfig) HasSuccessThreshold() bool {
	if x == nil {
		return false
	}
	return x.SuccessThreshold != nil
}

func (x *CircuitBreakerConfig) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.Timeout != nil
}

func (x *CircuitBreakerConfig) HasMaxRequests() bool {
	if x == nil {
		return false
	}
	return x.MaxRequests != nil
}

func (x *CircuitBreakerConfig) HasWindowSize() bool {
	if x == nil {
		return false
	}
	return x.WindowSize != nil
}

func (x *CircuitBreakerConfig) HasState() bool {
	if x == nil {
		return false
	}
	return x.State != nil
}

func (x *CircuitBreakerConfig) ClearFailureThreshold() {
	x.FailureThreshold = nil
}

func (x *CircuitBreakerConfig) ClearSuccessThreshold() {
	x.SuccessThreshold = nil
}

func (x *CircuitBreakerConfig) ClearTimeout() {
	x.Timeout = nil
}

func (x *CircuitBreakerConfig) ClearMaxRequests() {
	x.MaxRequests = nil
}

func (x *CircuitBreakerConfig) ClearWindowSize() {
	x.WindowSize = nil
}

func (x *CircuitBreakerConfig) ClearState() {
	x.State = nil
}

type CircuitBreakerConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Failure threshold to open circuit
	FailureThreshold *int32
	// Success threshold to close circuit
	SuccessThreshold *int32
	// Timeout for circuit to remain open
	Timeout *durationpb.Duration
	// Maximum number of concurrent requests in half-open state
	MaxRequests *int32
	// Window size for failure counting
	WindowSize *durationpb.Duration
	// Current circuit breaker state
	State *CircuitBreakerState
}

func (b0 CircuitBreakerConfig_builder) Build() *CircuitBreakerConfig {
	m0 := &CircuitBreakerConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.FailureThreshold = b.FailureThreshold
	x.SuccessThreshold = b.SuccessThreshold
	x.Timeout = b.Timeout
	x.MaxRequests = b.MaxRequests
	x.WindowSize = b.WindowSize
	x.State = b.State
	return m0
}

var File_pkg_common_proto_common_proto protoreflect.FileDescriptor

const file_pkg_common_proto_common_proto_rawDesc = "" +
	"\n" +
	"\x1dpkg/common/proto/common.proto\x12\x11gcommon.v1.common\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x19google/protobuf/any.proto\x1a!google/protobuf/go_features.proto\"\xc5\x02\n" +
	"\x05Error\x120\n" +
	"\x04code\x18\x01 \x01(\x0e2\x1c.gcommon.v1.common.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12C\n" +
	"\adetails\x18\x03 \x03(\v2%.gcommon.v1.common.Error.DetailsEntryB\x02(\x01R\adetails\x12\x19\n" +
	"\btrace_id\x18\x04 \x01(\tR\atraceId\x12<\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\ttimestamp\x12\x16\n" +
	"\x06source\x18\x06 \x01(\tR\x06source\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"i\n" +
	"\n" +
	"Pagination\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12\x1f\n" +
	"\vpage_number\x18\x03 \x01(\x05R\n" +
	"pageNumber\"\xe5\x01\n" +
	"\x11PaginatedResponse\x12&\n" +
	"\x0fnext_page_token\x18\x01 \x01(\tR\rnextPageToken\x12&\n" +
	"\x0fprev_page_token\x18\x02 \x01(\tR\rprevPageToken\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\x12!\n" +
	"\fcurrent_page\x18\x04 \x01(\x05R\vcurrentPage\x12\x1f\n" +
	"\vtotal_pages\x18\x05 \x01(\x05R\n" +
	"totalPages\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"\x8f\x03\n" +
	"\x0fRequestMetadata\x12\x19\n" +
	"\btrace_id\x18\x01 \x01(\tR\atraceId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12%\n" +
	"\x0ecorrelation_id\x18\x03 \x01(\tR\rcorrelationId\x12M\n" +
	"\aheaders\x18\x04 \x03(\v2/.gcommon.v1.common.RequestMetadata.HeadersEntryB\x02(\x01R\aheaders\x129\n" +
	"\x06client\x18\x05 \x01(\v2\x1d.gcommon.v1.common.ClientInfoB\x02(\x01R\x06client\x12<\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\ttimestamp\x12\x1d\n" +
	"\n" +
	"session_id\x18\a \x01(\tR\tsessionId\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x01\n" +
	"\n" +
	"ClientInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1d\n" +
	"\n" +
	"ip_address\x18\x03 \x01(\tR\tipAddress\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x04 \x01(\tR\tuserAgent\x12\x1a\n" +
	"\bplatform\x18\x05 \x01(\tR\bplatform\"}\n" +
	"\tTimeRange\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"c\n" +
	"\vSortOptions\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12>\n" +
	"\tdirection\x18\x02 \x01(\x0e2 .gcommon.v1.common.SortDirectionR\tdirection\"\x9c\x02\n" +
	"\rFilterOptions\x12K\n" +
	"\afilters\x18\x01 \x03(\v2-.gcommon.v1.common.FilterOptions.FiltersEntryB\x02(\x01R\afilters\x12!\n" +
	"\fsearch_query\x18\x02 \x01(\tR\vsearchQuery\x12?\n" +
	"\n" +
	"time_range\x18\x03 \x01(\v2\x1c.gcommon.v1.common.TimeRangeB\x02(\x01R\ttimeRange\x1aZ\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x124\n" +
	"\x05value\x18\x02 \x01(\v2\x1e.gcommon.v1.common.FilterValueR\x05value:\x028\x01\"\xe5\x02\n" +
	"\vFilterValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x02 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x03 \x01(\x01H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x04 \x01(\bH\x00R\tboolValue\x12C\n" +
	"\fstring_array\x18\x05 \x01(\v2\x1e.gcommon.v1.common.StringArrayH\x00R\vstringArray\x12<\n" +
	"\tint_array\x18\x06 \x01(\v2\x1d.gcommon.v1.common.Int64ArrayH\x00R\bintArray\x12@\n" +
	"\toperation\x18\a \x01(\x0e2\".gcommon.v1.common.FilterOperationR\toperationB\a\n" +
	"\x05value\"%\n" +
	"\vStringArray\x12\x16\n" +
	"\x06values\x18\x01 \x03(\tR\x06values\"$\n" +
	"\n" +
	"Int64Array\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x03R\x06values\"2\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"c\n" +
	"\x11ResourceReference\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06module\x18\x04 \x01(\tR\x06module\"\x8c\x02\n" +
	"\vMetricPoint\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value\x12<\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\ttimestamp\x12F\n" +
	"\x06labels\x18\x04 \x03(\v2*.gcommon.v1.common.MetricPoint.LabelsEntryB\x02(\x01R\x06labels\x12\x12\n" +
	"\x04unit\x18\x05 \x01(\tR\x04unit\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd3\x03\n" +
	"\vConfigValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x02 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x03 \x01(\x01H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x04 \x01(\bH\x00R\tboolValue\x12!\n" +
	"\vbytes_value\x18\x05 \x01(\fH\x00R\n" +
	"bytesValue\x123\n" +
	"\tany_value\x18\x06 \x01(\v2\x14.google.protobuf.AnyH\x00R\banyValue\x120\n" +
	"\x04type\x18\a \x01(\x0e2\x1c.gcommon.v1.common.ValueTypeR\x04type\x12\x1c\n" +
	"\tencrypted\x18\b \x01(\bR\tencrypted\x12L\n" +
	"\bmetadata\x18\t \x03(\v2,.gcommon.v1.common.ConfigValue.MetadataEntryB\x02(\x01R\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\a\n" +
	"\x05value\"\xac\x01\n" +
	"\tRateLimit\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x121\n" +
	"\x06window\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x06window\x12\x1c\n" +
	"\tremaining\x18\x03 \x01(\x05R\tremaining\x128\n" +
	"\n" +
	"reset_time\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\tresetTime\"\xb0\x01\n" +
	"\x0eServiceVersion\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x16\n" +
	"\x06commit\x18\x03 \x01(\tR\x06commit\x129\n" +
	"\n" +
	"build_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tbuildTime\x12\x1d\n" +
	"\n" +
	"go_version\x18\x05 \x01(\tR\tgoVersion\"\xea\x03\n" +
	"\bAuditLog\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x16\n" +
	"\x06action\x18\x03 \x01(\tR\x06action\x12D\n" +
	"\bresource\x18\x04 \x01(\v2$.gcommon.v1.common.ResourceReferenceB\x02(\x01R\bresource\x12<\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\ttimestamp\x12\x1b\n" +
	"\tsource_ip\x18\x06 \x01(\tR\bsourceIp\x12\x1d\n" +
	"\n" +
	"user_agent\x18\a \x01(\tR\tuserAgent\x12I\n" +
	"\bmetadata\x18\b \x03(\v2).gcommon.v1.common.AuditLog.MetadataEntryB\x02(\x01R\bmetadata\x126\n" +
	"\x06result\x18\t \x01(\x0e2\x1e.gcommon.v1.common.AuditResultR\x06result\x12\x1d\n" +
	"\n" +
	"session_id\x18\n" +
	" \x01(\tR\tsessionId\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8f\x02\n" +
	"\x0eBatchOperation\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12%\n" +
	"\x0eoperation_type\x18\x02 \x01(\tR\roperationType\x128\n" +
	"\n" +
	"operations\x18\x03 \x03(\v2\x14.google.protobuf.AnyB\x02(\x01R\n" +
	"operations\x12=\n" +
	"\aoptions\x18\x04 \x01(\v2\x1f.gcommon.v1.common.BatchOptionsB\x02(\x01R\aoptions\x12B\n" +
	"\bmetadata\x18\x05 \x01(\v2\".gcommon.v1.common.RequestMetadataB\x02(\x01R\bmetadata\"\xaa\x01\n" +
	"\fBatchOptions\x12!\n" +
	"\fmax_parallel\x18\x01 \x01(\x05R\vmaxParallel\x12\x1b\n" +
	"\tfail_fast\x18\x02 \x01(\bR\bfailFast\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12%\n" +
	"\x0ereturn_partial\x18\x04 \x01(\bR\rreturnPartial\"\xbb\x03\n" +
	"\x10SubscriptionInfo\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12<\n" +
	"\x06filter\x18\x02 \x01(\v2 .gcommon.v1.common.FilterOptionsB\x02(\x01R\x06filter\x12=\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\tstartTime\x129\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x02(\x01R\aendTime\x12A\n" +
	"\n" +
	"subscriber\x18\x05 \x01(\v2\x1d.gcommon.v1.common.ClientInfoB\x02(\x01R\n" +
	"subscriber\x12D\n" +
	"\aoptions\x18\x06 \x01(\v2&.gcommon.v1.common.SubscriptionOptionsB\x02(\x01R\aoptions\x12=\n" +
	"\x06status\x18\a \x01(\x0e2%.gcommon.v1.common.SubscriptionStatusR\x06status\"\xd5\x01\n" +
	"\x13SubscriptionOptions\x12'\n" +
	"\x0finclude_history\x18\x01 \x01(\bR\x0eincludeHistory\x12$\n" +
	"\x0emax_batch_size\x18\x02 \x01(\x05R\fmaxBatchSize\x125\n" +
	"\back_mode\x18\x03 \x01(\x0e2\x1a.gcommon.v1.common.AckModeR\aackMode\x128\n" +
	"\n" +
	"keep_alive\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\tkeepAlive\"\xdc\x02\n" +
	"\vCachePolicy\x12C\n" +
	"\n" +
	"expiration\x18\x01 \x01(\x0e2#.gcommon.v1.common.ExpirationPolicyR\n" +
	"expiration\x12=\n" +
	"\beviction\x18\x02 \x01(\x0e2!.gcommon.v1.common.EvictionPolicyR\beviction\x12$\n" +
	"\x0emax_size_bytes\x18\x03 \x01(\x03R\fmaxSizeBytes\x12\x1f\n" +
	"\vmax_entries\x18\x04 \x01(\x03R\n" +
	"maxEntries\x12:\n" +
	"\vdefault_ttl\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"defaultTtl\x12#\n" +
	"\rrefresh_ahead\x18\x06 \x01(\bR\frefreshAhead\x12!\n" +
	"\fenable_stats\x18\a \x01(\bR\venableStats\"\x85\x03\n" +
	"\vRetryPolicy\x12!\n" +
	"\fmax_attempts\x18\x01 \x01(\x05R\vmaxAttempts\x12>\n" +
	"\rinitial_delay\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\finitialDelay\x126\n" +
	"\tmax_delay\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\bmaxDelay\x12-\n" +
	"\x12backoff_multiplier\x18\x04 \x01(\x01R\x11backoffMultiplier\x12#\n" +
	"\renable_jitter\x18\x05 \x01(\bR\fenableJitter\x12G\n" +
	"\x10retryable_errors\x18\x06 \x03(\x0e2\x1c.gcommon.v1.common.ErrorCodeR\x0fretryableErrors\x12>\n" +
	"\rtotal_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\ftotalTimeout\"\xc2\x02\n" +
	"\x14CircuitBreakerConfig\x12+\n" +
	"\x11failure_threshold\x18\x01 \x01(\x05R\x10failureThreshold\x12+\n" +
	"\x11success_threshold\x18\x02 \x01(\x05R\x10successThreshold\x123\n" +
	"\atimeout\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12!\n" +
	"\fmax_requests\x18\x04 \x01(\x05R\vmaxRequests\x12:\n" +
	"\vwindow_size\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\n" +
	"windowSize\x12<\n" +
	"\x05state\x18\x06 \x01(\x0e2&.gcommon.v1.common.CircuitBreakerStateR\x05state*\xc4\x03\n" +
	"\tErrorCode\x12\x1a\n" +
	"\x16ERROR_CODE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bERROR_CODE_INVALID_ARGUMENT\x10\x01\x12\x18\n" +
	"\x14ERROR_CODE_NOT_FOUND\x10\x02\x12\x1d\n" +
	"\x19ERROR_CODE_ALREADY_EXISTS\x10\x03\x12 \n" +
	"\x1cERROR_CODE_PERMISSION_DENIED\x10\x04\x12\x1e\n" +
	"\x1aERROR_CODE_UNAUTHENTICATED\x10\x05\x12\x17\n" +
	"\x13ERROR_CODE_INTERNAL\x10\x06\x12\x1a\n" +
	"\x16ERROR_CODE_UNAVAILABLE\x10\a\x12\x16\n" +
	"\x12ERROR_CODE_TIMEOUT\x10\b\x12!\n" +
	"\x1dERROR_CODE_RESOURCE_EXHAUSTED\x10\t\x12\"\n" +
	"\x1eERROR_CODE_FAILED_PRECONDITION\x10\n" +
	"\x12\x16\n" +
	"\x12ERROR_CODE_ABORTED\x10\v\x12\x1b\n" +
	"\x17ERROR_CODE_OUT_OF_RANGE\x10\f\x12\x1c\n" +
	"\x18ERROR_CODE_UNIMPLEMENTED\x10\r\x12\x18\n" +
	"\x14ERROR_CODE_DATA_LOSS\x10\x0e*`\n" +
	"\rSortDirection\x12\x1e\n" +
	"\x1aSORT_DIRECTION_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SORT_DIRECTION_ASC\x10\x01\x12\x17\n" +
	"\x13SORT_DIRECTION_DESC\x10\x02*\xa0\x03\n" +
	"\x0fFilterOperation\x12 \n" +
	"\x1cFILTER_OPERATION_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17FILTER_OPERATION_EQUALS\x10\x01\x12\x1f\n" +
	"\x1bFILTER_OPERATION_NOT_EQUALS\x10\x02\x12!\n" +
	"\x1dFILTER_OPERATION_GREATER_THAN\x10\x03\x12\x1e\n" +
	"\x1aFILTER_OPERATION_LESS_THAN\x10\x04\x12*\n" +
	"&FILTER_OPERATION_GREATER_THAN_OR_EQUAL\x10\x05\x12'\n" +
	"#FILTER_OPERATION_LESS_THAN_OR_EQUAL\x10\x06\x12\x1d\n" +
	"\x19FILTER_OPERATION_CONTAINS\x10\a\x12 \n" +
	"\x1cFILTER_OPERATION_STARTS_WITH\x10\b\x12\x1e\n" +
	"\x1aFILTER_OPERATION_ENDS_WITH\x10\t\x12\x17\n" +
	"\x13FILTER_OPERATION_IN\x10\n" +
	"\x12\x1b\n" +
	"\x17FILTER_OPERATION_NOT_IN\x10\v*\xb9\x01\n" +
	"\fHealthStatus\x12\x1d\n" +
	"\x19HEALTH_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15HEALTH_STATUS_HEALTHY\x10\x01\x12\x1b\n" +
	"\x17HEALTH_STATUS_UNHEALTHY\x10\x02\x12\x1a\n" +
	"\x16HEALTH_STATUS_DEGRADED\x10\x03\x12\x1a\n" +
	"\x16HEALTH_STATUS_STARTING\x10\x04\x12\x1a\n" +
	"\x16HEALTH_STATUS_STOPPING\x10\x05*\xc0\x01\n" +
	"\x0eResourceStatus\x12\x1f\n" +
	"\x1bRESOURCE_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16RESOURCE_STATUS_ACTIVE\x10\x01\x12\x1c\n" +
	"\x18RESOURCE_STATUS_INACTIVE\x10\x02\x12\x1b\n" +
	"\x17RESOURCE_STATUS_PENDING\x10\x03\x12\x1b\n" +
	"\x17RESOURCE_STATUS_DELETED\x10\x04\x12\x19\n" +
	"\x15RESOURCE_STATUS_ERROR\x10\x05*\xbe\x01\n" +
	"\tValueType\x12\x1a\n" +
	"\x16VALUE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11VALUE_TYPE_STRING\x10\x01\x12\x12\n" +
	"\x0eVALUE_TYPE_INT\x10\x02\x12\x15\n" +
	"\x11VALUE_TYPE_DOUBLE\x10\x03\x12\x13\n" +
	"\x0fVALUE_TYPE_BOOL\x10\x04\x12\x14\n" +
	"\x10VALUE_TYPE_BYTES\x10\x05\x12\x13\n" +
	"\x0fVALUE_TYPE_JSON\x10\x06\x12\x13\n" +
	"\x0fVALUE_TYPE_YAML\x10\a*y\n" +
	"\vAuditResult\x12\x1c\n" +
	"\x18AUDIT_RESULT_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AUDIT_RESULT_SUCCESS\x10\x01\x12\x18\n" +
	"\x14AUDIT_RESULT_FAILURE\x10\x02\x12\x18\n" +
	"\x14AUDIT_RESULT_PARTIAL\x10\x03*\xbb\x01\n" +
	"\x12SubscriptionStatus\x12#\n" +
	"\x1fSUBSCRIPTION_STATUS_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSUBSCRIPTION_STATUS_ACTIVE\x10\x01\x12\x1e\n" +
	"\x1aSUBSCRIPTION_STATUS_PAUSED\x10\x02\x12!\n" +
	"\x1dSUBSCRIPTION_STATUS_CANCELLED\x10\x03\x12\x1d\n" +
	"\x19SUBSCRIPTION_STATUS_ERROR\x10\x04*`\n" +
	"\aAckMode\x12\x18\n" +
	"\x14ACK_MODE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fACK_MODE_MANUAL\x10\x01\x12\x11\n" +
	"\rACK_MODE_AUTO\x10\x02\x12\x13\n" +
	"\x0fACK_MODE_CLIENT\x10\x03*\xa6\x01\n" +
	"\x10ExpirationPolicy\x12!\n" +
	"\x1dEXPIRATION_POLICY_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15EXPIRATION_POLICY_TTL\x10\x01\x12\x1a\n" +
	"\x16EXPIRATION_POLICY_IDLE\x10\x02\x12\x1b\n" +
	"\x17EXPIRATION_POLICY_WRITE\x10\x03\x12\x1b\n" +
	"\x17EXPIRATION_POLICY_NEVER\x10\x04*\x99\x01\n" +
	"\x0eEvictionPolicy\x12\x1f\n" +
	"\x1bEVICTION_POLICY_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13EVICTION_POLICY_LRU\x10\x01\x12\x17\n" +
	"\x13EVICTION_POLICY_LFU\x10\x02\x12\x18\n" +
	"\x14EVICTION_POLICY_FIFO\x10\x03\x12\x1a\n" +
	"\x16EVICTION_POLICY_RANDOM\x10\x04*\xa3\x01\n" +
	"\x13CircuitBreakerState\x12%\n" +
	"!CIRCUIT_BREAKER_STATE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCIRCUIT_BREAKER_STATE_CLOSED\x10\x01\x12\x1e\n" +
	"\x1aCIRCUIT_BREAKER_STATE_OPEN\x10\x02\x12#\n" +
	"\x1fCIRCUIT_BREAKER_STATE_HALF_OPEN\x10\x03B=Z3github.com/jdfalk/gcommon/pkg/common/proto;commonpb\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_common_proto_common_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_pkg_common_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pkg_common_proto_common_proto_goTypes = []any{
	(ErrorCode)(0),                // 0: gcommon.v1.common.ErrorCode
	(SortDirection)(0),            // 1: gcommon.v1.common.SortDirection
	(FilterOperation)(0),          // 2: gcommon.v1.common.FilterOperation
	(HealthStatus)(0),             // 3: gcommon.v1.common.HealthStatus
	(ResourceStatus)(0),           // 4: gcommon.v1.common.ResourceStatus
	(ValueType)(0),                // 5: gcommon.v1.common.ValueType
	(AuditResult)(0),              // 6: gcommon.v1.common.AuditResult
	(SubscriptionStatus)(0),       // 7: gcommon.v1.common.SubscriptionStatus
	(AckMode)(0),                  // 8: gcommon.v1.common.AckMode
	(ExpirationPolicy)(0),         // 9: gcommon.v1.common.ExpirationPolicy
	(EvictionPolicy)(0),           // 10: gcommon.v1.common.EvictionPolicy
	(CircuitBreakerState)(0),      // 11: gcommon.v1.common.CircuitBreakerState
	(*Error)(nil),                 // 12: gcommon.v1.common.Error
	(*Pagination)(nil),            // 13: gcommon.v1.common.Pagination
	(*PaginatedResponse)(nil),     // 14: gcommon.v1.common.PaginatedResponse
	(*RequestMetadata)(nil),       // 15: gcommon.v1.common.RequestMetadata
	(*ClientInfo)(nil),            // 16: gcommon.v1.common.ClientInfo
	(*TimeRange)(nil),             // 17: gcommon.v1.common.TimeRange
	(*SortOptions)(nil),           // 18: gcommon.v1.common.SortOptions
	(*FilterOptions)(nil),         // 19: gcommon.v1.common.FilterOptions
	(*FilterValue)(nil),           // 20: gcommon.v1.common.FilterValue
	(*StringArray)(nil),           // 21: gcommon.v1.common.StringArray
	(*Int64Array)(nil),            // 22: gcommon.v1.common.Int64Array
	(*KeyValue)(nil),              // 23: gcommon.v1.common.KeyValue
	(*ResourceReference)(nil),     // 24: gcommon.v1.common.ResourceReference
	(*MetricPoint)(nil),           // 25: gcommon.v1.common.MetricPoint
	(*ConfigValue)(nil),           // 26: gcommon.v1.common.ConfigValue
	(*RateLimit)(nil),             // 27: gcommon.v1.common.RateLimit
	(*ServiceVersion)(nil),        // 28: gcommon.v1.common.ServiceVersion
	(*AuditLog)(nil),              // 29: gcommon.v1.common.AuditLog
	(*BatchOperation)(nil),        // 30: gcommon.v1.common.BatchOperation
	(*BatchOptions)(nil),          // 31: gcommon.v1.common.BatchOptions
	(*SubscriptionInfo)(nil),      // 32: gcommon.v1.common.SubscriptionInfo
	(*SubscriptionOptions)(nil),   // 33: gcommon.v1.common.SubscriptionOptions
	(*CachePolicy)(nil),           // 34: gcommon.v1.common.CachePolicy
	(*RetryPolicy)(nil),           // 35: gcommon.v1.common.RetryPolicy
	(*CircuitBreakerConfig)(nil),  // 36: gcommon.v1.common.CircuitBreakerConfig
	nil,                           // 37: gcommon.v1.common.Error.DetailsEntry
	nil,                           // 38: gcommon.v1.common.RequestMetadata.HeadersEntry
	nil,                           // 39: gcommon.v1.common.FilterOptions.FiltersEntry
	nil,                           // 40: gcommon.v1.common.MetricPoint.LabelsEntry
	nil,                           // 41: gcommon.v1.common.ConfigValue.MetadataEntry
	nil,                           // 42: gcommon.v1.common.AuditLog.MetadataEntry
	(*timestamppb.Timestamp)(nil), // 43: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 44: google.protobuf.Any
	(*durationpb.Duration)(nil),   // 45: google.protobuf.Duration
}
var file_pkg_common_proto_common_proto_depIdxs = []int32{
	0,  // 0: gcommon.v1.common.Error.code:type_name -> gcommon.v1.common.ErrorCode
	37, // 1: gcommon.v1.common.Error.details:type_name -> gcommon.v1.common.Error.DetailsEntry
	43, // 2: gcommon.v1.common.Error.timestamp:type_name -> google.protobuf.Timestamp
	38, // 3: gcommon.v1.common.RequestMetadata.headers:type_name -> gcommon.v1.common.RequestMetadata.HeadersEntry
	16, // 4: gcommon.v1.common.RequestMetadata.client:type_name -> gcommon.v1.common.ClientInfo
	43, // 5: gcommon.v1.common.RequestMetadata.timestamp:type_name -> google.protobuf.Timestamp
	43, // 6: gcommon.v1.common.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	43, // 7: gcommon.v1.common.TimeRange.end_time:type_name -> google.protobuf.Timestamp
	1,  // 8: gcommon.v1.common.SortOptions.direction:type_name -> gcommon.v1.common.SortDirection
	39, // 9: gcommon.v1.common.FilterOptions.filters:type_name -> gcommon.v1.common.FilterOptions.FiltersEntry
	17, // 10: gcommon.v1.common.FilterOptions.time_range:type_name -> gcommon.v1.common.TimeRange
	21, // 11: gcommon.v1.common.FilterValue.string_array:type_name -> gcommon.v1.common.StringArray
	22, // 12: gcommon.v1.common.FilterValue.int_array:type_name -> gcommon.v1.common.Int64Array
	2,  // 13: gcommon.v1.common.FilterValue.operation:type_name -> gcommon.v1.common.FilterOperation
	43, // 14: gcommon.v1.common.MetricPoint.timestamp:type_name -> google.protobuf.Timestamp
	40, // 15: gcommon.v1.common.MetricPoint.labels:type_name -> gcommon.v1.common.MetricPoint.LabelsEntry
	44, // 16: gcommon.v1.common.ConfigValue.any_value:type_name -> google.protobuf.Any
	5,  // 17: gcommon.v1.common.ConfigValue.type:type_name -> gcommon.v1.common.ValueType
	41, // 18: gcommon.v1.common.ConfigValue.metadata:type_name -> gcommon.v1.common.ConfigValue.MetadataEntry
	45, // 19: gcommon.v1.common.RateLimit.window:type_name -> google.protobuf.Duration
	45, // 20: gcommon.v1.common.RateLimit.reset_time:type_name -> google.protobuf.Duration
	43, // 21: gcommon.v1.common.ServiceVersion.build_time:type_name -> google.protobuf.Timestamp
	24, // 22: gcommon.v1.common.AuditLog.resource:type_name -> gcommon.v1.common.ResourceReference
	43, // 23: gcommon.v1.common.AuditLog.timestamp:type_name -> google.protobuf.Timestamp
	42, // 24: gcommon.v1.common.AuditLog.metadata:type_name -> gcommon.v1.common.AuditLog.MetadataEntry
	6,  // 25: gcommon.v1.common.AuditLog.result:type_name -> gcommon.v1.common.AuditResult
	44, // 26: gcommon.v1.common.BatchOperation.operations:type_name -> google.protobuf.Any
	31, // 27: gcommon.v1.common.BatchOperation.options:type_name -> gcommon.v1.common.BatchOptions
	15, // 28: gcommon.v1.common.BatchOperation.metadata:type_name -> gcommon.v1.common.RequestMetadata
	45, // 29: gcommon.v1.common.BatchOptions.timeout:type_name -> google.protobuf.Duration
	19, // 30: gcommon.v1.common.SubscriptionInfo.filter:type_name -> gcommon.v1.common.FilterOptions
	43, // 31: gcommon.v1.common.SubscriptionInfo.start_time:type_name -> google.protobuf.Timestamp
	43, // 32: gcommon.v1.common.SubscriptionInfo.end_time:type_name -> google.protobuf.Timestamp
	16, // 33: gcommon.v1.common.SubscriptionInfo.subscriber:type_name -> gcommon.v1.common.ClientInfo
	33, // 34: gcommon.v1.common.SubscriptionInfo.options:type_name -> gcommon.v1.common.SubscriptionOptions
	7,  // 35: gcommon.v1.common.SubscriptionInfo.status:type_name -> gcommon.v1.common.SubscriptionStatus
	8,  // 36: gcommon.v1.common.SubscriptionOptions.ack_mode:type_name -> gcommon.v1.common.AckMode
	45, // 37: gcommon.v1.common.SubscriptionOptions.keep_alive:type_name -> google.protobuf.Duration
	9,  // 38: gcommon.v1.common.CachePolicy.expiration:type_name -> gcommon.v1.common.ExpirationPolicy
	10, // 39: gcommon.v1.common.CachePolicy.eviction:type_name -> gcommon.v1.common.EvictionPolicy
	45, // 40: gcommon.v1.common.CachePolicy.default_ttl:type_name -> google.protobuf.Duration
	45, // 41: gcommon.v1.common.RetryPolicy.initial_delay:type_name -> google.protobuf.Duration
	45, // 42: gcommon.v1.common.RetryPolicy.max_delay:type_name -> google.protobuf.Duration
	0,  // 43: gcommon.v1.common.RetryPolicy.retryable_errors:type_name -> gcommon.v1.common.ErrorCode
	45, // 44: gcommon.v1.common.RetryPolicy.total_timeout:type_name -> google.protobuf.Duration
	45, // 45: gcommon.v1.common.CircuitBreakerConfig.timeout:type_name -> google.protobuf.Duration
	45, // 46: gcommon.v1.common.CircuitBreakerConfig.window_size:type_name -> google.protobuf.Duration
	11, // 47: gcommon.v1.common.CircuitBreakerConfig.state:type_name -> gcommon.v1.common.CircuitBreakerState
	20, // 48: gcommon.v1.common.FilterOptions.FiltersEntry.value:type_name -> gcommon.v1.common.FilterValue
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_common_proto_init() }
func file_pkg_common_proto_common_proto_init() {
	if File_pkg_common_proto_common_proto != nil {
		return
	}
	file_pkg_common_proto_common_proto_msgTypes[8].OneofWrappers = []any{
		(*FilterValue_StringValue)(nil),
		(*FilterValue_IntValue)(nil),
		(*FilterValue_DoubleValue)(nil),
		(*FilterValue_BoolValue)(nil),
		(*FilterValue_StringArray)(nil),
		(*FilterValue_IntArray)(nil),
	}
	file_pkg_common_proto_common_proto_msgTypes[14].OneofWrappers = []any{
		(*ConfigValue_StringValue)(nil),
		(*ConfigValue_IntValue)(nil),
		(*ConfigValue_DoubleValue)(nil),
		(*ConfigValue_BoolValue)(nil),
		(*ConfigValue_BytesValue)(nil),
		(*ConfigValue_AnyValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_common_proto_common_proto_rawDesc), len(file_pkg_common_proto_common_proto_rawDesc)),
			NumEnums:      12,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_common_proto_common_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_common_proto_depIdxs,
		EnumInfos:         file_pkg_common_proto_common_proto_enumTypes,
		MessageInfos:      file_pkg_common_proto_common_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_common_proto = out.File
	file_pkg_common_proto_common_proto_goTypes = nil
	file_pkg_common_proto_common_proto_depIdxs = nil
}
