// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/common/proto/filter_value.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Filter value with multiple type support and operation specification.
// Enables type-safe filtering with various data types and comparison operations.
//
// Supports scalar values (string, int, double, bool) and array values
// for IN/NOT_IN operations, with explicit operation specification.
type FilterValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value to filter by (one of the supported types)
	//
	// Types that are valid to be assigned to Value:
	//
	//	*FilterValue_StringValue
	//	*FilterValue_IntValue
	//	*FilterValue_DoubleValue
	//	*FilterValue_BoolValue
	//	*FilterValue_StringArray
	//	*FilterValue_IntArray
	Value isFilterValue_Value `protobuf_oneof:"value"`
	// Filter operation type (equals, contains, greater than, etc.)
	Operation     *FilterOperation `protobuf:"varint,7,opt,name=operation,enum=gcommon.v1.common.FilterOperation" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterValue) Reset() {
	*x = FilterValue{}
	mi := &file_pkg_common_proto_filter_value_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterValue) ProtoMessage() {}

func (x *FilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_filter_value_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterValue.ProtoReflect.Descriptor instead.
func (*FilterValue) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_filter_value_proto_rawDescGZIP(), []int{0}
}

func (x *FilterValue) GetValue() isFilterValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FilterValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *FilterValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *FilterValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *FilterValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *FilterValue) GetStringArray() *StringArray {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_StringArray); ok {
			return x.StringArray
		}
	}
	return nil
}

func (x *FilterValue) GetIntArray() *Int64Array {
	if x != nil {
		if x, ok := x.Value.(*FilterValue_IntArray); ok {
			return x.IntArray
		}
	}
	return nil
}

func (x *FilterValue) GetOperation() FilterOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return FilterOperation_FILTER_OPERATION_UNSPECIFIED
}

type isFilterValue_Value interface {
	isFilterValue_Value()
}

type FilterValue_StringValue struct {
	// String value for text-based filtering
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}

type FilterValue_IntValue struct {
	// Integer value for numeric filtering
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type FilterValue_DoubleValue struct {
	// Double value for floating-point filtering
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

type FilterValue_BoolValue struct {
	// Boolean value for true/false filtering
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}

type FilterValue_StringArray struct {
	// Array of strings for multi-value filtering
	StringArray *StringArray `protobuf:"bytes,5,opt,name=string_array,json=stringArray,oneof"`
}

type FilterValue_IntArray struct {
	// Array of integers for multi-value filtering
	IntArray *Int64Array `protobuf:"bytes,6,opt,name=int_array,json=intArray,oneof"`
}

func (*FilterValue_StringValue) isFilterValue_Value() {}

func (*FilterValue_IntValue) isFilterValue_Value() {}

func (*FilterValue_DoubleValue) isFilterValue_Value() {}

func (*FilterValue_BoolValue) isFilterValue_Value() {}

func (*FilterValue_StringArray) isFilterValue_Value() {}

func (*FilterValue_IntArray) isFilterValue_Value() {}

var File_pkg_common_proto_filter_value_proto protoreflect.FileDescriptor

const file_pkg_common_proto_filter_value_proto_rawDesc = "" +
	"\n" +
	"#pkg/common/proto/filter_value.proto\x12\x11gcommon.v1.common\x1a'pkg/common/proto/filter_operation.proto\x1a\"pkg/common/proto/int64_array.proto\x1a#pkg/common/proto/string_array.proto\"\xed\x02\n" +
	"\vFilterValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1d\n" +
	"\tint_value\x18\x02 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x03 \x01(\x01H\x00R\vdoubleValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x04 \x01(\bH\x00R\tboolValue\x12G\n" +
	"\fstring_array\x18\x05 \x01(\v2\x1e.gcommon.v1.common.StringArrayB\x02(\x01H\x00R\vstringArray\x12@\n" +
	"\tint_array\x18\x06 \x01(\v2\x1d.gcommon.v1.common.Int64ArrayB\x02(\x01H\x00R\bintArray\x12@\n" +
	"\toperation\x18\a \x01(\x0e2\".gcommon.v1.common.FilterOperationR\toperationB\a\n" +
	"\x05valueB\xbb\x01\n" +
	"\x15com.gcommon.v1.commonB\x10FilterValueProtoP\x01Z*github.com/jdfalk/gcommon/pkg/common/proto\xa2\x02\x03GVC\xaa\x02\x11Gcommon.V1.Common\xca\x02\x11Gcommon\\V1\\Common\xe2\x02\x1dGcommon\\V1\\Common\\GPBMetadata\xea\x02\x13Gcommon::V1::Commonb\beditionsp\xe8\a"

var (
	file_pkg_common_proto_filter_value_proto_rawDescOnce sync.Once
	file_pkg_common_proto_filter_value_proto_rawDescData []byte
)

func file_pkg_common_proto_filter_value_proto_rawDescGZIP() []byte {
	file_pkg_common_proto_filter_value_proto_rawDescOnce.Do(func() {
		file_pkg_common_proto_filter_value_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_common_proto_filter_value_proto_rawDesc), len(file_pkg_common_proto_filter_value_proto_rawDesc)))
	})
	return file_pkg_common_proto_filter_value_proto_rawDescData
}

var file_pkg_common_proto_filter_value_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_common_proto_filter_value_proto_goTypes = []any{
	(*FilterValue)(nil),  // 0: gcommon.v1.common.FilterValue
	(*StringArray)(nil),  // 1: gcommon.v1.common.StringArray
	(*Int64Array)(nil),   // 2: gcommon.v1.common.Int64Array
	(FilterOperation)(0), // 3: gcommon.v1.common.FilterOperation
}
var file_pkg_common_proto_filter_value_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.common.FilterValue.string_array:type_name -> gcommon.v1.common.StringArray
	2, // 1: gcommon.v1.common.FilterValue.int_array:type_name -> gcommon.v1.common.Int64Array
	3, // 2: gcommon.v1.common.FilterValue.operation:type_name -> gcommon.v1.common.FilterOperation
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_filter_value_proto_init() }
func file_pkg_common_proto_filter_value_proto_init() {
	if File_pkg_common_proto_filter_value_proto != nil {
		return
	}
	file_pkg_common_proto_filter_operation_proto_init()
	file_pkg_common_proto_int64_array_proto_init()
	file_pkg_common_proto_string_array_proto_init()
	file_pkg_common_proto_filter_value_proto_msgTypes[0].OneofWrappers = []any{
		(*FilterValue_StringValue)(nil),
		(*FilterValue_IntValue)(nil),
		(*FilterValue_DoubleValue)(nil),
		(*FilterValue_BoolValue)(nil),
		(*FilterValue_StringArray)(nil),
		(*FilterValue_IntArray)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_common_proto_filter_value_proto_rawDesc), len(file_pkg_common_proto_filter_value_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_common_proto_filter_value_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_filter_value_proto_depIdxs,
		MessageInfos:      file_pkg_common_proto_filter_value_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_filter_value_proto = out.File
	file_pkg_common_proto_filter_value_proto_goTypes = nil
	file_pkg_common_proto_filter_value_proto_depIdxs = nil
}
