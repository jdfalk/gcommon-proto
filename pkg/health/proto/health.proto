edition = "2023";

package health;
import "google/protobuf/go_features.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/health/proto";
option features.(pb.go).api_level = API_HYBRID;

// HealthService defines the gRPC health checking service.
service HealthService {
  // Check performs a single health check and returns the status.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse) {}

  // Watch performs a streaming health check and reports status changes.
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse) {}

  // CheckAll executes all health checks and returns detailed results.
  rpc CheckAll(HealthCheckAllRequest) returns (HealthCheckAllResponse) {}
}

// HealthCheckRequest is the request message for health check operations.
message HealthCheckRequest {
  // Name of the service to check. If empty, the overall system health is checked.
  string service = 1;
}

// HealthCheckResponse is the response message for a health check operation.
message HealthCheckResponse {
  // Status of the checked service.
  ServingStatus status = 1;

  // Timestamp of when the check was performed (in RFC 3339 format).
  string timestamp = 2;

  // Additional details about the health status (optional).
  map<string, string> details = 3;
}

// HealthCheckAllRequest is the request message for checking all health checks.
message HealthCheckAllRequest {
  // Include detailed results for each check.
  bool include_details = 1;

  // Filter checks by type.
  repeated CheckType types = 2;
}

// HealthCheckAllResponse contains results from all health checks.
message HealthCheckAllResponse {
  // Overall status of the system.
  ServingStatus status = 1;

  // Timestamp of when the checks were performed.
  string timestamp = 2;

  // Results from individual checks.
  map<string, HealthCheckResult> results = 3;
}

// HealthCheckResult represents the result of a single health check.
message HealthCheckResult {
  // Status of this check.
  ServingStatus status = 1;

  // Type of check performed.
  CheckType type = 2;

  // Timestamp when the check was performed.
  string timestamp = 3;

  // Duration of the check in milliseconds.
  int64 duration_ms = 4;

  // Error message if the check failed.
  string error = 5;

  // Additional details about the check.
  map<string, string> details = 6;

  // Results of nested checks (if any).
  map<string, HealthCheckResult> children = 7;
}

// ServingStatus represents the health status of a service.
enum ServingStatus {
  // UNKNOWN indicates the health status could not be determined.
  UNKNOWN = 0;

  // SERVING indicates the service is healthy and serving requests.
  SERVING = 1;

  // NOT_SERVING indicates the service is unhealthy and not serving requests.
  NOT_SERVING = 2;

  // SERVING_DEGRADED indicates the service is partially healthy.
  SERVING_DEGRADED = 3;
}

// CheckType identifies the type of health check.
enum CheckType {
  // TYPE_UNSPECIFIED is the default, unspecified type.
  TYPE_UNSPECIFIED = 0;

  // LIVENESS indicates a liveness check.
  LIVENESS = 1;

  // READINESS indicates a readiness check.
  READINESS = 2;

  // STARTUP indicates a startup check.
  STARTUP = 3;

  // COMPONENT indicates a component check.
  COMPONENT = 4;

  // DEPENDENCY indicates a dependency check.
  DEPENDENCY = 5;
}

// HealthConfig represents the configuration for the health system.
message HealthConfig {
  // Whether the health check system is enabled.
  bool enabled = 1;

  // Base path for health endpoints.
  string endpoint = 2;

  // Path for liveness endpoint.
  string liveness_path = 3;

  // Path for readiness endpoint.
  string readiness_path = 4;

  // Path for detailed health info.
  string details_path = 5;

  // Enable the liveness endpoint.
  bool enable_liveness_endpoint = 6;

  // Enable the readiness endpoint.
  bool enable_readiness_endpoint = 7;

  // Require authentication for detailed health info.
  bool require_authentication = 8;

  // Authentication header value.
  string auth_header = 9;

  // Default timeout for health checks in milliseconds.
  int64 default_timeout_ms = 10;

  // Interval for background health checks in milliseconds.
  int64 check_interval_ms = 11;

  // Log status changes to health checks.
  bool log_status_changes = 12;

  // Enable metrics for health checks.
  bool metrics_enabled = 13;
}

// RemediationDetails contains information about a remediation attempt.
message RemediationDetails {
  // Name of the check being remediated.
  string check_name = 1;

  // Number of remediation attempts made.
  int32 attempt_count = 2;

  // Maximum allowed attempts.
  int32 max_attempts = 3;

  // Whether the remediation was successful.
  bool success = 4;

  // Error message if remediation failed.
  string error = 5;

  // Duration of the remediation attempt in milliseconds.
  int64 duration_ms = 6;

  // Timestamp when remediation was attempted.
  string timestamp = 7;
}
