// filepath: pkg/health/proto/services/health_admin_service.proto
// file: health/proto/services/health_admin_service.proto
//
// Administrative service definitions for health module
//
edition = "2023";

package gcommon.v1.health;

import "google/protobuf/go_features.proto";
import "google/protobuf/empty.proto";
import "pkg/health/proto/requests/configure_alerting_request.proto";
import "pkg/health/proto/requests/enable_check_request.proto";
import "pkg/health/proto/requests/disable_check_request.proto";
import "pkg/health/proto/requests/reset_health_stats_request.proto";
import "pkg/health/proto/requests/set_health_request.proto";
import "pkg/health/proto/requests/run_check_request.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/health/proto;healthpb";
option features.(pb.go).api_level = API_HYBRID;

/**
 * HealthAdminService provides administrative health operations
 * such as enabling or disabling checks and configuring alerting.
 */
service HealthAdminService {
  // Configure alerting for a check or service
  rpc ConfigureAlerting(ConfigureAlertingRequest) returns (google.protobuf.Empty);

  // Enable a previously disabled check
  rpc EnableCheck(EnableCheckRequest) returns (google.protobuf.Empty);

  // Disable an existing check
  rpc DisableCheck(DisableCheckRequest) returns (google.protobuf.Empty);

  // Manually run a health check
  rpc RunCheck(RunCheckRequest) returns (google.protobuf.Empty);

  // Reset stored health statistics
  rpc ResetHealthStats(ResetHealthStatsRequest) returns (google.protobuf.Empty);

  // Manually set the overall health status
  rpc SetHealth(SetHealthRequest) returns (google.protobuf.Empty);
}
