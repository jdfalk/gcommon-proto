// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/health/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHealthServiceClient creates a new instance of MockHealthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthServiceClient {
	mock := &MockHealthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthServiceClient is an autogenerated mock type for the HealthServiceClient type
type MockHealthServiceClient struct {
	mock.Mock
}

type MockHealthServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthServiceClient) EXPECT() *MockHealthServiceClient_Expecter {
	return &MockHealthServiceClient_Expecter{mock: &_m.Mock}
}

// Check provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) Check(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockHealthServiceClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.HealthCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) Check(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_Check_Call {
	return &MockHealthServiceClient_Check_Call{Call: _e.mock.On("Check",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_Check_Call) Run(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_Check_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockHealthServiceClient_Check_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_Check_Call) RunAndReturn(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error)) *MockHealthServiceClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealthMetrics provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) GetHealthMetrics(ctx context.Context, in *proto.GetHealthMetricsRequest, opts ...grpc.CallOption) (*proto.GetHealthMetricsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHealthMetrics")
	}

	var r0 *proto.GetHealthMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHealthMetricsRequest, ...grpc.CallOption) (*proto.GetHealthMetricsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHealthMetricsRequest, ...grpc.CallOption) *proto.GetHealthMetricsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetHealthMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetHealthMetricsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_GetHealthMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthMetrics'
type MockHealthServiceClient_GetHealthMetrics_Call struct {
	*mock.Call
}

// GetHealthMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetHealthMetricsRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) GetHealthMetrics(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_GetHealthMetrics_Call {
	return &MockHealthServiceClient_GetHealthMetrics_Call{Call: _e.mock.On("GetHealthMetrics",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_GetHealthMetrics_Call) Run(run func(ctx context.Context, in *proto.GetHealthMetricsRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_GetHealthMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetHealthMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetHealthMetricsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_GetHealthMetrics_Call) Return(getHealthMetricsResponse *proto.GetHealthMetricsResponse, err error) *MockHealthServiceClient_GetHealthMetrics_Call {
	_c.Call.Return(getHealthMetricsResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_GetHealthMetrics_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetHealthMetricsRequest, opts ...grpc.CallOption) (*proto.GetHealthMetricsResponse, error)) *MockHealthServiceClient_GetHealthMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceHealth provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) GetServiceHealth(ctx context.Context, in *proto.GetServiceHealthRequest, opts ...grpc.CallOption) (*proto.GetServiceHealthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetServiceHealth")
	}

	var r0 *proto.GetServiceHealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetServiceHealthRequest, ...grpc.CallOption) (*proto.GetServiceHealthResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetServiceHealthRequest, ...grpc.CallOption) *proto.GetServiceHealthResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetServiceHealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetServiceHealthRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_GetServiceHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceHealth'
type MockHealthServiceClient_GetServiceHealth_Call struct {
	*mock.Call
}

// GetServiceHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetServiceHealthRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) GetServiceHealth(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_GetServiceHealth_Call {
	return &MockHealthServiceClient_GetServiceHealth_Call{Call: _e.mock.On("GetServiceHealth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_GetServiceHealth_Call) Run(run func(ctx context.Context, in *proto.GetServiceHealthRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_GetServiceHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetServiceHealthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetServiceHealthRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_GetServiceHealth_Call) Return(getServiceHealthResponse *proto.GetServiceHealthResponse, err error) *MockHealthServiceClient_GetServiceHealth_Call {
	_c.Call.Return(getServiceHealthResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_GetServiceHealth_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetServiceHealthRequest, opts ...grpc.CallOption) (*proto.GetServiceHealthResponse, error)) *MockHealthServiceClient_GetServiceHealth_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) ListServices(ctx context.Context, in *proto.ListServicesRequest, opts ...grpc.CallOption) (*proto.ListServicesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *proto.ListServicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListServicesRequest, ...grpc.CallOption) (*proto.ListServicesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListServicesRequest, ...grpc.CallOption) *proto.ListServicesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListServicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListServicesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockHealthServiceClient_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListServicesRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) ListServices(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_ListServices_Call {
	return &MockHealthServiceClient_ListServices_Call{Call: _e.mock.On("ListServices",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_ListServices_Call) Run(run func(ctx context.Context, in *proto.ListServicesRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListServicesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListServicesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_ListServices_Call) Return(listServicesResponse *proto.ListServicesResponse, err error) *MockHealthServiceClient_ListServices_Call {
	_c.Call.Return(listServicesResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_ListServices_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListServicesRequest, opts ...grpc.CallOption) (*proto.ListServicesResponse, error)) *MockHealthServiceClient_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCheck provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) RegisterCheck(ctx context.Context, in *proto.RegisterCheckRequest, opts ...grpc.CallOption) (*proto.RegisterCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RegisterCheck")
	}

	var r0 *proto.RegisterCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterCheckRequest, ...grpc.CallOption) (*proto.RegisterCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterCheckRequest, ...grpc.CallOption) *proto.RegisterCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RegisterCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_RegisterCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCheck'
type MockHealthServiceClient_RegisterCheck_Call struct {
	*mock.Call
}

// RegisterCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RegisterCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) RegisterCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_RegisterCheck_Call {
	return &MockHealthServiceClient_RegisterCheck_Call{Call: _e.mock.On("RegisterCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_RegisterCheck_Call) Run(run func(ctx context.Context, in *proto.RegisterCheckRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_RegisterCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RegisterCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RegisterCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_RegisterCheck_Call) Return(registerCheckResponse *proto.RegisterCheckResponse, err error) *MockHealthServiceClient_RegisterCheck_Call {
	_c.Call.Return(registerCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_RegisterCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.RegisterCheckRequest, opts ...grpc.CallOption) (*proto.RegisterCheckResponse, error)) *MockHealthServiceClient_RegisterCheck_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterCheck provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) UnregisterCheck(ctx context.Context, in *proto.UnregisterCheckRequest, opts ...grpc.CallOption) (*proto.UnregisterCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UnregisterCheck")
	}

	var r0 *proto.UnregisterCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterCheckRequest, ...grpc.CallOption) (*proto.UnregisterCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterCheckRequest, ...grpc.CallOption) *proto.UnregisterCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UnregisterCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UnregisterCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_UnregisterCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterCheck'
type MockHealthServiceClient_UnregisterCheck_Call struct {
	*mock.Call
}

// UnregisterCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.UnregisterCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) UnregisterCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_UnregisterCheck_Call {
	return &MockHealthServiceClient_UnregisterCheck_Call{Call: _e.mock.On("UnregisterCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_UnregisterCheck_Call) Run(run func(ctx context.Context, in *proto.UnregisterCheckRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_UnregisterCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UnregisterCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UnregisterCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_UnregisterCheck_Call) Return(unregisterCheckResponse *proto.UnregisterCheckResponse, err error) *MockHealthServiceClient_UnregisterCheck_Call {
	_c.Call.Return(unregisterCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceClient_UnregisterCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.UnregisterCheckRequest, opts ...grpc.CallOption) (*proto.UnregisterCheckResponse, error)) *MockHealthServiceClient_UnregisterCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockHealthServiceClient
func (_mock *MockHealthServiceClient) Watch(ctx context.Context, in *proto.WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchResponse], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 grpc.ServerStreamingClient[proto.WatchResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.WatchRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.WatchResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.WatchResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.WatchRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockHealthServiceClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.WatchRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthServiceClient_Expecter) Watch(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthServiceClient_Watch_Call {
	return &MockHealthServiceClient_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthServiceClient_Watch_Call) Run(run func(ctx context.Context, in *proto.WatchRequest, opts ...grpc.CallOption)) *MockHealthServiceClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.WatchRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.WatchRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthServiceClient_Watch_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.WatchResponse], err error) *MockHealthServiceClient_Watch_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockHealthServiceClient_Watch_Call) RunAndReturn(run func(ctx context.Context, in *proto.WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.WatchResponse], error)) *MockHealthServiceClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}
