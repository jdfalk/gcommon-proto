// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/health/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHealthAdminServiceServer creates a new instance of MockHealthAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthAdminServiceServer {
	mock := &MockHealthAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthAdminServiceServer is an autogenerated mock type for the HealthAdminServiceServer type
type MockHealthAdminServiceServer struct {
	mock.Mock
}

type MockHealthAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthAdminServiceServer) EXPECT() *MockHealthAdminServiceServer_Expecter {
	return &MockHealthAdminServiceServer_Expecter{mock: &_m.Mock}
}

// ConfigureAlerting provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) ConfigureAlerting(context1 context.Context, configureAlertingRequest *proto.ConfigureAlertingRequest) (*proto.ConfigureAlertingResponse, error) {
	ret := _mock.Called(context1, configureAlertingRequest)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureAlerting")
	}

	var r0 *proto.ConfigureAlertingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureAlertingRequest) (*proto.ConfigureAlertingResponse, error)); ok {
		return returnFunc(context1, configureAlertingRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureAlertingRequest) *proto.ConfigureAlertingResponse); ok {
		r0 = returnFunc(context1, configureAlertingRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigureAlertingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigureAlertingRequest) error); ok {
		r1 = returnFunc(context1, configureAlertingRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_ConfigureAlerting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureAlerting'
type MockHealthAdminServiceServer_ConfigureAlerting_Call struct {
	*mock.Call
}

// ConfigureAlerting is a helper method to define mock.On call
//   - context1 context.Context
//   - configureAlertingRequest *proto.ConfigureAlertingRequest
func (_e *MockHealthAdminServiceServer_Expecter) ConfigureAlerting(context1 interface{}, configureAlertingRequest interface{}) *MockHealthAdminServiceServer_ConfigureAlerting_Call {
	return &MockHealthAdminServiceServer_ConfigureAlerting_Call{Call: _e.mock.On("ConfigureAlerting", context1, configureAlertingRequest)}
}

func (_c *MockHealthAdminServiceServer_ConfigureAlerting_Call) Run(run func(context1 context.Context, configureAlertingRequest *proto.ConfigureAlertingRequest)) *MockHealthAdminServiceServer_ConfigureAlerting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigureAlertingRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigureAlertingRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_ConfigureAlerting_Call) Return(configureAlertingResponse *proto.ConfigureAlertingResponse, err error) *MockHealthAdminServiceServer_ConfigureAlerting_Call {
	_c.Call.Return(configureAlertingResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_ConfigureAlerting_Call) RunAndReturn(run func(context1 context.Context, configureAlertingRequest *proto.ConfigureAlertingRequest) (*proto.ConfigureAlertingResponse, error)) *MockHealthAdminServiceServer_ConfigureAlerting_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCheck provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) DisableCheck(context1 context.Context, disableCheckRequest *proto.DisableCheckRequest) (*proto.DisableCheckResponse, error) {
	ret := _mock.Called(context1, disableCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for DisableCheck")
	}

	var r0 *proto.DisableCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DisableCheckRequest) (*proto.DisableCheckResponse, error)); ok {
		return returnFunc(context1, disableCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DisableCheckRequest) *proto.DisableCheckResponse); ok {
		r0 = returnFunc(context1, disableCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DisableCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DisableCheckRequest) error); ok {
		r1 = returnFunc(context1, disableCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_DisableCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCheck'
type MockHealthAdminServiceServer_DisableCheck_Call struct {
	*mock.Call
}

// DisableCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - disableCheckRequest *proto.DisableCheckRequest
func (_e *MockHealthAdminServiceServer_Expecter) DisableCheck(context1 interface{}, disableCheckRequest interface{}) *MockHealthAdminServiceServer_DisableCheck_Call {
	return &MockHealthAdminServiceServer_DisableCheck_Call{Call: _e.mock.On("DisableCheck", context1, disableCheckRequest)}
}

func (_c *MockHealthAdminServiceServer_DisableCheck_Call) Run(run func(context1 context.Context, disableCheckRequest *proto.DisableCheckRequest)) *MockHealthAdminServiceServer_DisableCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DisableCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DisableCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_DisableCheck_Call) Return(disableCheckResponse *proto.DisableCheckResponse, err error) *MockHealthAdminServiceServer_DisableCheck_Call {
	_c.Call.Return(disableCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_DisableCheck_Call) RunAndReturn(run func(context1 context.Context, disableCheckRequest *proto.DisableCheckRequest) (*proto.DisableCheckResponse, error)) *MockHealthAdminServiceServer_DisableCheck_Call {
	_c.Call.Return(run)
	return _c
}

// EnableCheck provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) EnableCheck(context1 context.Context, enableCheckRequest *proto.EnableCheckRequest) (*proto.EnableCheckResponse, error) {
	ret := _mock.Called(context1, enableCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for EnableCheck")
	}

	var r0 *proto.EnableCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnableCheckRequest) (*proto.EnableCheckResponse, error)); ok {
		return returnFunc(context1, enableCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnableCheckRequest) *proto.EnableCheckResponse); ok {
		r0 = returnFunc(context1, enableCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EnableCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.EnableCheckRequest) error); ok {
		r1 = returnFunc(context1, enableCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_EnableCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableCheck'
type MockHealthAdminServiceServer_EnableCheck_Call struct {
	*mock.Call
}

// EnableCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - enableCheckRequest *proto.EnableCheckRequest
func (_e *MockHealthAdminServiceServer_Expecter) EnableCheck(context1 interface{}, enableCheckRequest interface{}) *MockHealthAdminServiceServer_EnableCheck_Call {
	return &MockHealthAdminServiceServer_EnableCheck_Call{Call: _e.mock.On("EnableCheck", context1, enableCheckRequest)}
}

func (_c *MockHealthAdminServiceServer_EnableCheck_Call) Run(run func(context1 context.Context, enableCheckRequest *proto.EnableCheckRequest)) *MockHealthAdminServiceServer_EnableCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.EnableCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.EnableCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_EnableCheck_Call) Return(enableCheckResponse *proto.EnableCheckResponse, err error) *MockHealthAdminServiceServer_EnableCheck_Call {
	_c.Call.Return(enableCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_EnableCheck_Call) RunAndReturn(run func(context1 context.Context, enableCheckRequest *proto.EnableCheckRequest) (*proto.EnableCheckResponse, error)) *MockHealthAdminServiceServer_EnableCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ResetHealthStats provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) ResetHealthStats(context1 context.Context, resetHealthStatsRequest *proto.ResetHealthStatsRequest) (*proto.ResetHealthStatsResponse, error) {
	ret := _mock.Called(context1, resetHealthStatsRequest)

	if len(ret) == 0 {
		panic("no return value specified for ResetHealthStats")
	}

	var r0 *proto.ResetHealthStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetHealthStatsRequest) (*proto.ResetHealthStatsResponse, error)); ok {
		return returnFunc(context1, resetHealthStatsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetHealthStatsRequest) *proto.ResetHealthStatsResponse); ok {
		r0 = returnFunc(context1, resetHealthStatsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResetHealthStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResetHealthStatsRequest) error); ok {
		r1 = returnFunc(context1, resetHealthStatsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_ResetHealthStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetHealthStats'
type MockHealthAdminServiceServer_ResetHealthStats_Call struct {
	*mock.Call
}

// ResetHealthStats is a helper method to define mock.On call
//   - context1 context.Context
//   - resetHealthStatsRequest *proto.ResetHealthStatsRequest
func (_e *MockHealthAdminServiceServer_Expecter) ResetHealthStats(context1 interface{}, resetHealthStatsRequest interface{}) *MockHealthAdminServiceServer_ResetHealthStats_Call {
	return &MockHealthAdminServiceServer_ResetHealthStats_Call{Call: _e.mock.On("ResetHealthStats", context1, resetHealthStatsRequest)}
}

func (_c *MockHealthAdminServiceServer_ResetHealthStats_Call) Run(run func(context1 context.Context, resetHealthStatsRequest *proto.ResetHealthStatsRequest)) *MockHealthAdminServiceServer_ResetHealthStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResetHealthStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResetHealthStatsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_ResetHealthStats_Call) Return(resetHealthStatsResponse *proto.ResetHealthStatsResponse, err error) *MockHealthAdminServiceServer_ResetHealthStats_Call {
	_c.Call.Return(resetHealthStatsResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_ResetHealthStats_Call) RunAndReturn(run func(context1 context.Context, resetHealthStatsRequest *proto.ResetHealthStatsRequest) (*proto.ResetHealthStatsResponse, error)) *MockHealthAdminServiceServer_ResetHealthStats_Call {
	_c.Call.Return(run)
	return _c
}

// RunCheck provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) RunCheck(context1 context.Context, runCheckRequest *proto.RunCheckRequest) (*proto.RunCheckResponse, error) {
	ret := _mock.Called(context1, runCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for RunCheck")
	}

	var r0 *proto.RunCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RunCheckRequest) (*proto.RunCheckResponse, error)); ok {
		return returnFunc(context1, runCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RunCheckRequest) *proto.RunCheckResponse); ok {
		r0 = returnFunc(context1, runCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RunCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RunCheckRequest) error); ok {
		r1 = returnFunc(context1, runCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_RunCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCheck'
type MockHealthAdminServiceServer_RunCheck_Call struct {
	*mock.Call
}

// RunCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - runCheckRequest *proto.RunCheckRequest
func (_e *MockHealthAdminServiceServer_Expecter) RunCheck(context1 interface{}, runCheckRequest interface{}) *MockHealthAdminServiceServer_RunCheck_Call {
	return &MockHealthAdminServiceServer_RunCheck_Call{Call: _e.mock.On("RunCheck", context1, runCheckRequest)}
}

func (_c *MockHealthAdminServiceServer_RunCheck_Call) Run(run func(context1 context.Context, runCheckRequest *proto.RunCheckRequest)) *MockHealthAdminServiceServer_RunCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RunCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RunCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_RunCheck_Call) Return(runCheckResponse *proto.RunCheckResponse, err error) *MockHealthAdminServiceServer_RunCheck_Call {
	_c.Call.Return(runCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_RunCheck_Call) RunAndReturn(run func(context1 context.Context, runCheckRequest *proto.RunCheckRequest) (*proto.RunCheckResponse, error)) *MockHealthAdminServiceServer_RunCheck_Call {
	_c.Call.Return(run)
	return _c
}

// SetHealth provides a mock function for the type MockHealthAdminServiceServer
func (_mock *MockHealthAdminServiceServer) SetHealth(context1 context.Context, setHealthRequest *proto.SetHealthRequest) (*proto.SetHealthResponse, error) {
	ret := _mock.Called(context1, setHealthRequest)

	if len(ret) == 0 {
		panic("no return value specified for SetHealth")
	}

	var r0 *proto.SetHealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetHealthRequest) (*proto.SetHealthResponse, error)); ok {
		return returnFunc(context1, setHealthRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetHealthRequest) *proto.SetHealthResponse); ok {
		r0 = returnFunc(context1, setHealthRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetHealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetHealthRequest) error); ok {
		r1 = returnFunc(context1, setHealthRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceServer_SetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHealth'
type MockHealthAdminServiceServer_SetHealth_Call struct {
	*mock.Call
}

// SetHealth is a helper method to define mock.On call
//   - context1 context.Context
//   - setHealthRequest *proto.SetHealthRequest
func (_e *MockHealthAdminServiceServer_Expecter) SetHealth(context1 interface{}, setHealthRequest interface{}) *MockHealthAdminServiceServer_SetHealth_Call {
	return &MockHealthAdminServiceServer_SetHealth_Call{Call: _e.mock.On("SetHealth", context1, setHealthRequest)}
}

func (_c *MockHealthAdminServiceServer_SetHealth_Call) Run(run func(context1 context.Context, setHealthRequest *proto.SetHealthRequest)) *MockHealthAdminServiceServer_SetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetHealthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetHealthRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceServer_SetHealth_Call) Return(setHealthResponse *proto.SetHealthResponse, err error) *MockHealthAdminServiceServer_SetHealth_Call {
	_c.Call.Return(setHealthResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceServer_SetHealth_Call) RunAndReturn(run func(context1 context.Context, setHealthRequest *proto.SetHealthRequest) (*proto.SetHealthResponse, error)) *MockHealthAdminServiceServer_SetHealth_Call {
	_c.Call.Return(run)
	return _c
}
