// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/health/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHealthAdminServiceClient creates a new instance of MockHealthAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthAdminServiceClient {
	mock := &MockHealthAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthAdminServiceClient is an autogenerated mock type for the HealthAdminServiceClient type
type MockHealthAdminServiceClient struct {
	mock.Mock
}

type MockHealthAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthAdminServiceClient) EXPECT() *MockHealthAdminServiceClient_Expecter {
	return &MockHealthAdminServiceClient_Expecter{mock: &_m.Mock}
}

// ConfigureAlerting provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) ConfigureAlerting(ctx context.Context, in *proto.ConfigureAlertingRequest, opts ...grpc.CallOption) (*proto.ConfigureAlertingResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ConfigureAlerting")
	}

	var r0 *proto.ConfigureAlertingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureAlertingRequest, ...grpc.CallOption) (*proto.ConfigureAlertingResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ConfigureAlertingRequest, ...grpc.CallOption) *proto.ConfigureAlertingResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ConfigureAlertingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ConfigureAlertingRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_ConfigureAlerting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureAlerting'
type MockHealthAdminServiceClient_ConfigureAlerting_Call struct {
	*mock.Call
}

// ConfigureAlerting is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ConfigureAlertingRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) ConfigureAlerting(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_ConfigureAlerting_Call {
	return &MockHealthAdminServiceClient_ConfigureAlerting_Call{Call: _e.mock.On("ConfigureAlerting",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_ConfigureAlerting_Call) Run(run func(ctx context.Context, in *proto.ConfigureAlertingRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_ConfigureAlerting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ConfigureAlertingRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ConfigureAlertingRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_ConfigureAlerting_Call) Return(configureAlertingResponse *proto.ConfigureAlertingResponse, err error) *MockHealthAdminServiceClient_ConfigureAlerting_Call {
	_c.Call.Return(configureAlertingResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_ConfigureAlerting_Call) RunAndReturn(run func(ctx context.Context, in *proto.ConfigureAlertingRequest, opts ...grpc.CallOption) (*proto.ConfigureAlertingResponse, error)) *MockHealthAdminServiceClient_ConfigureAlerting_Call {
	_c.Call.Return(run)
	return _c
}

// DisableCheck provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) DisableCheck(ctx context.Context, in *proto.DisableCheckRequest, opts ...grpc.CallOption) (*proto.DisableCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DisableCheck")
	}

	var r0 *proto.DisableCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DisableCheckRequest, ...grpc.CallOption) (*proto.DisableCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DisableCheckRequest, ...grpc.CallOption) *proto.DisableCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.DisableCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DisableCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_DisableCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableCheck'
type MockHealthAdminServiceClient_DisableCheck_Call struct {
	*mock.Call
}

// DisableCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DisableCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) DisableCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_DisableCheck_Call {
	return &MockHealthAdminServiceClient_DisableCheck_Call{Call: _e.mock.On("DisableCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_DisableCheck_Call) Run(run func(ctx context.Context, in *proto.DisableCheckRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_DisableCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DisableCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DisableCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_DisableCheck_Call) Return(disableCheckResponse *proto.DisableCheckResponse, err error) *MockHealthAdminServiceClient_DisableCheck_Call {
	_c.Call.Return(disableCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_DisableCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.DisableCheckRequest, opts ...grpc.CallOption) (*proto.DisableCheckResponse, error)) *MockHealthAdminServiceClient_DisableCheck_Call {
	_c.Call.Return(run)
	return _c
}

// EnableCheck provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) EnableCheck(ctx context.Context, in *proto.EnableCheckRequest, opts ...grpc.CallOption) (*proto.EnableCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for EnableCheck")
	}

	var r0 *proto.EnableCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnableCheckRequest, ...grpc.CallOption) (*proto.EnableCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.EnableCheckRequest, ...grpc.CallOption) *proto.EnableCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.EnableCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.EnableCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_EnableCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableCheck'
type MockHealthAdminServiceClient_EnableCheck_Call struct {
	*mock.Call
}

// EnableCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.EnableCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) EnableCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_EnableCheck_Call {
	return &MockHealthAdminServiceClient_EnableCheck_Call{Call: _e.mock.On("EnableCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_EnableCheck_Call) Run(run func(ctx context.Context, in *proto.EnableCheckRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_EnableCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.EnableCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.EnableCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_EnableCheck_Call) Return(enableCheckResponse *proto.EnableCheckResponse, err error) *MockHealthAdminServiceClient_EnableCheck_Call {
	_c.Call.Return(enableCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_EnableCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.EnableCheckRequest, opts ...grpc.CallOption) (*proto.EnableCheckResponse, error)) *MockHealthAdminServiceClient_EnableCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ResetHealthStats provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) ResetHealthStats(ctx context.Context, in *proto.ResetHealthStatsRequest, opts ...grpc.CallOption) (*proto.ResetHealthStatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ResetHealthStats")
	}

	var r0 *proto.ResetHealthStatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetHealthStatsRequest, ...grpc.CallOption) (*proto.ResetHealthStatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ResetHealthStatsRequest, ...grpc.CallOption) *proto.ResetHealthStatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ResetHealthStatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ResetHealthStatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_ResetHealthStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetHealthStats'
type MockHealthAdminServiceClient_ResetHealthStats_Call struct {
	*mock.Call
}

// ResetHealthStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ResetHealthStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) ResetHealthStats(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_ResetHealthStats_Call {
	return &MockHealthAdminServiceClient_ResetHealthStats_Call{Call: _e.mock.On("ResetHealthStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_ResetHealthStats_Call) Run(run func(ctx context.Context, in *proto.ResetHealthStatsRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_ResetHealthStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ResetHealthStatsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ResetHealthStatsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_ResetHealthStats_Call) Return(resetHealthStatsResponse *proto.ResetHealthStatsResponse, err error) *MockHealthAdminServiceClient_ResetHealthStats_Call {
	_c.Call.Return(resetHealthStatsResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_ResetHealthStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.ResetHealthStatsRequest, opts ...grpc.CallOption) (*proto.ResetHealthStatsResponse, error)) *MockHealthAdminServiceClient_ResetHealthStats_Call {
	_c.Call.Return(run)
	return _c
}

// RunCheck provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) RunCheck(ctx context.Context, in *proto.RunCheckRequest, opts ...grpc.CallOption) (*proto.RunCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RunCheck")
	}

	var r0 *proto.RunCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RunCheckRequest, ...grpc.CallOption) (*proto.RunCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RunCheckRequest, ...grpc.CallOption) *proto.RunCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RunCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RunCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_RunCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunCheck'
type MockHealthAdminServiceClient_RunCheck_Call struct {
	*mock.Call
}

// RunCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.RunCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) RunCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_RunCheck_Call {
	return &MockHealthAdminServiceClient_RunCheck_Call{Call: _e.mock.On("RunCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_RunCheck_Call) Run(run func(ctx context.Context, in *proto.RunCheckRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_RunCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RunCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RunCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_RunCheck_Call) Return(runCheckResponse *proto.RunCheckResponse, err error) *MockHealthAdminServiceClient_RunCheck_Call {
	_c.Call.Return(runCheckResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_RunCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.RunCheckRequest, opts ...grpc.CallOption) (*proto.RunCheckResponse, error)) *MockHealthAdminServiceClient_RunCheck_Call {
	_c.Call.Return(run)
	return _c
}

// SetHealth provides a mock function for the type MockHealthAdminServiceClient
func (_mock *MockHealthAdminServiceClient) SetHealth(ctx context.Context, in *proto.SetHealthRequest, opts ...grpc.CallOption) (*proto.SetHealthResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SetHealth")
	}

	var r0 *proto.SetHealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetHealthRequest, ...grpc.CallOption) (*proto.SetHealthResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.SetHealthRequest, ...grpc.CallOption) *proto.SetHealthResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetHealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.SetHealthRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthAdminServiceClient_SetHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHealth'
type MockHealthAdminServiceClient_SetHealth_Call struct {
	*mock.Call
}

// SetHealth is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.SetHealthRequest
//   - opts ...grpc.CallOption
func (_e *MockHealthAdminServiceClient_Expecter) SetHealth(ctx interface{}, in interface{}, opts ...interface{}) *MockHealthAdminServiceClient_SetHealth_Call {
	return &MockHealthAdminServiceClient_SetHealth_Call{Call: _e.mock.On("SetHealth",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockHealthAdminServiceClient_SetHealth_Call) Run(run func(ctx context.Context, in *proto.SetHealthRequest, opts ...grpc.CallOption)) *MockHealthAdminServiceClient_SetHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.SetHealthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.SetHealthRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockHealthAdminServiceClient_SetHealth_Call) Return(setHealthResponse *proto.SetHealthResponse, err error) *MockHealthAdminServiceClient_SetHealth_Call {
	_c.Call.Return(setHealthResponse, err)
	return _c
}

func (_c *MockHealthAdminServiceClient_SetHealth_Call) RunAndReturn(run func(ctx context.Context, in *proto.SetHealthRequest, opts ...grpc.CallOption) (*proto.SetHealthResponse, error)) *MockHealthAdminServiceClient_SetHealth_Call {
	_c.Call.Return(run)
	return _c
}
