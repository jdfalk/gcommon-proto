// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/health/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHealthServiceServer creates a new instance of MockHealthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthServiceServer {
	mock := &MockHealthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthServiceServer is an autogenerated mock type for the HealthServiceServer type
type MockHealthServiceServer struct {
	mock.Mock
}

type MockHealthServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthServiceServer) EXPECT() *MockHealthServiceServer_Expecter {
	return &MockHealthServiceServer_Expecter{mock: &_m.Mock}
}

// Check provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) Check(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error) {
	ret := _mock.Called(context1, healthCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(context1, healthCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(context1, healthCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest) error); ok {
		r1 = returnFunc(context1, healthCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockHealthServiceServer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - context1
//   - healthCheckRequest
func (_e *MockHealthServiceServer_Expecter) Check(context1 interface{}, healthCheckRequest interface{}) *MockHealthServiceServer_Check_Call {
	return &MockHealthServiceServer_Check_Call{Call: _e.mock.On("Check", context1, healthCheckRequest)}
}

func (_c *MockHealthServiceServer_Check_Call) Run(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest)) *MockHealthServiceServer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.HealthCheckRequest))
	})
	return _c
}

func (_c *MockHealthServiceServer_Check_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockHealthServiceServer_Check_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_Check_Call) RunAndReturn(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)) *MockHealthServiceServer_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAll provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) CheckAll(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error) {
	ret := _mock.Called(context1, healthCheckAllRequest)

	if len(ret) == 0 {
		panic("no return value specified for CheckAll")
	}

	var r0 *proto.HealthCheckAllResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error)); ok {
		return returnFunc(context1, healthCheckAllRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckAllRequest) *proto.HealthCheckAllResponse); ok {
		r0 = returnFunc(context1, healthCheckAllRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckAllResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckAllRequest) error); ok {
		r1 = returnFunc(context1, healthCheckAllRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_CheckAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAll'
type MockHealthServiceServer_CheckAll_Call struct {
	*mock.Call
}

// CheckAll is a helper method to define mock.On call
//   - context1
//   - healthCheckAllRequest
func (_e *MockHealthServiceServer_Expecter) CheckAll(context1 interface{}, healthCheckAllRequest interface{}) *MockHealthServiceServer_CheckAll_Call {
	return &MockHealthServiceServer_CheckAll_Call{Call: _e.mock.On("CheckAll", context1, healthCheckAllRequest)}
}

func (_c *MockHealthServiceServer_CheckAll_Call) Run(run func(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest)) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.HealthCheckAllRequest))
	})
	return _c
}

func (_c *MockHealthServiceServer_CheckAll_Call) Return(healthCheckAllResponse *proto.HealthCheckAllResponse, err error) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Return(healthCheckAllResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_CheckAll_Call) RunAndReturn(run func(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error)) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) Watch(healthCheckRequest *proto.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[proto.HealthCheckResponse]) error {
	ret := _mock.Called(healthCheckRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.HealthCheckRequest, grpc.ServerStreamingServer[proto.HealthCheckResponse]) error); ok {
		r0 = returnFunc(healthCheckRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHealthServiceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockHealthServiceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - healthCheckRequest
//   - serverStreamingServer
func (_e *MockHealthServiceServer_Expecter) Watch(healthCheckRequest interface{}, serverStreamingServer interface{}) *MockHealthServiceServer_Watch_Call {
	return &MockHealthServiceServer_Watch_Call{Call: _e.mock.On("Watch", healthCheckRequest, serverStreamingServer)}
}

func (_c *MockHealthServiceServer_Watch_Call) Run(run func(healthCheckRequest *proto.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[proto.HealthCheckResponse])) *MockHealthServiceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.HealthCheckRequest), args[1].(grpc.ServerStreamingServer[proto.HealthCheckResponse]))
	})
	return _c
}

func (_c *MockHealthServiceServer_Watch_Call) Return(err error) *MockHealthServiceServer_Watch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHealthServiceServer_Watch_Call) RunAndReturn(run func(healthCheckRequest *proto.HealthCheckRequest, serverStreamingServer grpc.ServerStreamingServer[proto.HealthCheckResponse]) error) *MockHealthServiceServer_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedHealthServiceServer provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) mustEmbedUnimplementedHealthServiceServer() {
	_mock.Called()
	return
}

// MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedHealthServiceServer'
type MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedHealthServiceServer is a helper method to define mock.On call
func (_e *MockHealthServiceServer_Expecter) mustEmbedUnimplementedHealthServiceServer() *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call {
	return &MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedHealthServiceServer")}
}

func (_c *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call) Run(run func()) *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call) Return() *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call) RunAndReturn(run func()) *MockHealthServiceServer_mustEmbedUnimplementedHealthServiceServer_Call {
	_c.Run(run)
	return _c
}
