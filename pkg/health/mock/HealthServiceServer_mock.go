// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/health/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockHealthServiceServer creates a new instance of MockHealthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthServiceServer {
	mock := &MockHealthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthServiceServer is an autogenerated mock type for the HealthServiceServer type
type MockHealthServiceServer struct {
	mock.Mock
}

type MockHealthServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthServiceServer) EXPECT() *MockHealthServiceServer_Expecter {
	return &MockHealthServiceServer_Expecter{mock: &_m.Mock}
}

// Check provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) Check(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error) {
	ret := _mock.Called(context1, healthCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(context1, healthCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(context1, healthCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest) error); ok {
		r1 = returnFunc(context1, healthCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockHealthServiceServer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - context1 context.Context
//   - healthCheckRequest *proto.HealthCheckRequest
func (_e *MockHealthServiceServer_Expecter) Check(context1 interface{}, healthCheckRequest interface{}) *MockHealthServiceServer_Check_Call {
	return &MockHealthServiceServer_Check_Call{Call: _e.mock.On("Check", context1, healthCheckRequest)}
}

func (_c *MockHealthServiceServer_Check_Call) Run(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest)) *MockHealthServiceServer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_Check_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockHealthServiceServer_Check_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_Check_Call) RunAndReturn(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)) *MockHealthServiceServer_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAll provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) CheckAll(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error) {
	ret := _mock.Called(context1, healthCheckAllRequest)

	if len(ret) == 0 {
		panic("no return value specified for CheckAll")
	}

	var r0 *proto.HealthCheckAllResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error)); ok {
		return returnFunc(context1, healthCheckAllRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckAllRequest) *proto.HealthCheckAllResponse); ok {
		r0 = returnFunc(context1, healthCheckAllRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckAllResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckAllRequest) error); ok {
		r1 = returnFunc(context1, healthCheckAllRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_CheckAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAll'
type MockHealthServiceServer_CheckAll_Call struct {
	*mock.Call
}

// CheckAll is a helper method to define mock.On call
//   - context1 context.Context
//   - healthCheckAllRequest *proto.HealthCheckAllRequest
func (_e *MockHealthServiceServer_Expecter) CheckAll(context1 interface{}, healthCheckAllRequest interface{}) *MockHealthServiceServer_CheckAll_Call {
	return &MockHealthServiceServer_CheckAll_Call{Call: _e.mock.On("CheckAll", context1, healthCheckAllRequest)}
}

func (_c *MockHealthServiceServer_CheckAll_Call) Run(run func(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest)) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckAllRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckAllRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_CheckAll_Call) Return(healthCheckAllResponse *proto.HealthCheckAllResponse, err error) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Return(healthCheckAllResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_CheckAll_Call) RunAndReturn(run func(context1 context.Context, healthCheckAllRequest *proto.HealthCheckAllRequest) (*proto.HealthCheckAllResponse, error)) *MockHealthServiceServer_CheckAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetHealthMetrics provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) GetHealthMetrics(context1 context.Context, getHealthMetricsRequest *proto.GetHealthMetricsRequest) (*proto.GetHealthMetricsResponse, error) {
	ret := _mock.Called(context1, getHealthMetricsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthMetrics")
	}

	var r0 *proto.GetHealthMetricsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHealthMetricsRequest) (*proto.GetHealthMetricsResponse, error)); ok {
		return returnFunc(context1, getHealthMetricsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetHealthMetricsRequest) *proto.GetHealthMetricsResponse); ok {
		r0 = returnFunc(context1, getHealthMetricsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetHealthMetricsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetHealthMetricsRequest) error); ok {
		r1 = returnFunc(context1, getHealthMetricsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_GetHealthMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHealthMetrics'
type MockHealthServiceServer_GetHealthMetrics_Call struct {
	*mock.Call
}

// GetHealthMetrics is a helper method to define mock.On call
//   - context1 context.Context
//   - getHealthMetricsRequest *proto.GetHealthMetricsRequest
func (_e *MockHealthServiceServer_Expecter) GetHealthMetrics(context1 interface{}, getHealthMetricsRequest interface{}) *MockHealthServiceServer_GetHealthMetrics_Call {
	return &MockHealthServiceServer_GetHealthMetrics_Call{Call: _e.mock.On("GetHealthMetrics", context1, getHealthMetricsRequest)}
}

func (_c *MockHealthServiceServer_GetHealthMetrics_Call) Run(run func(context1 context.Context, getHealthMetricsRequest *proto.GetHealthMetricsRequest)) *MockHealthServiceServer_GetHealthMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetHealthMetricsRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetHealthMetricsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_GetHealthMetrics_Call) Return(getHealthMetricsResponse *proto.GetHealthMetricsResponse, err error) *MockHealthServiceServer_GetHealthMetrics_Call {
	_c.Call.Return(getHealthMetricsResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_GetHealthMetrics_Call) RunAndReturn(run func(context1 context.Context, getHealthMetricsRequest *proto.GetHealthMetricsRequest) (*proto.GetHealthMetricsResponse, error)) *MockHealthServiceServer_GetHealthMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceHealth provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) GetServiceHealth(context1 context.Context, getServiceHealthRequest *proto.GetServiceHealthRequest) (*proto.GetServiceHealthResponse, error) {
	ret := _mock.Called(context1, getServiceHealthRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceHealth")
	}

	var r0 *proto.GetServiceHealthResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetServiceHealthRequest) (*proto.GetServiceHealthResponse, error)); ok {
		return returnFunc(context1, getServiceHealthRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetServiceHealthRequest) *proto.GetServiceHealthResponse); ok {
		r0 = returnFunc(context1, getServiceHealthRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetServiceHealthResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetServiceHealthRequest) error); ok {
		r1 = returnFunc(context1, getServiceHealthRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_GetServiceHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceHealth'
type MockHealthServiceServer_GetServiceHealth_Call struct {
	*mock.Call
}

// GetServiceHealth is a helper method to define mock.On call
//   - context1 context.Context
//   - getServiceHealthRequest *proto.GetServiceHealthRequest
func (_e *MockHealthServiceServer_Expecter) GetServiceHealth(context1 interface{}, getServiceHealthRequest interface{}) *MockHealthServiceServer_GetServiceHealth_Call {
	return &MockHealthServiceServer_GetServiceHealth_Call{Call: _e.mock.On("GetServiceHealth", context1, getServiceHealthRequest)}
}

func (_c *MockHealthServiceServer_GetServiceHealth_Call) Run(run func(context1 context.Context, getServiceHealthRequest *proto.GetServiceHealthRequest)) *MockHealthServiceServer_GetServiceHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetServiceHealthRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetServiceHealthRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_GetServiceHealth_Call) Return(getServiceHealthResponse *proto.GetServiceHealthResponse, err error) *MockHealthServiceServer_GetServiceHealth_Call {
	_c.Call.Return(getServiceHealthResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_GetServiceHealth_Call) RunAndReturn(run func(context1 context.Context, getServiceHealthRequest *proto.GetServiceHealthRequest) (*proto.GetServiceHealthResponse, error)) *MockHealthServiceServer_GetServiceHealth_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) ListServices(context1 context.Context, listServicesRequest *proto.ListServicesRequest) (*proto.ListServicesResponse, error) {
	ret := _mock.Called(context1, listServicesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *proto.ListServicesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListServicesRequest) (*proto.ListServicesResponse, error)); ok {
		return returnFunc(context1, listServicesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListServicesRequest) *proto.ListServicesResponse); ok {
		r0 = returnFunc(context1, listServicesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListServicesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListServicesRequest) error); ok {
		r1 = returnFunc(context1, listServicesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockHealthServiceServer_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - context1 context.Context
//   - listServicesRequest *proto.ListServicesRequest
func (_e *MockHealthServiceServer_Expecter) ListServices(context1 interface{}, listServicesRequest interface{}) *MockHealthServiceServer_ListServices_Call {
	return &MockHealthServiceServer_ListServices_Call{Call: _e.mock.On("ListServices", context1, listServicesRequest)}
}

func (_c *MockHealthServiceServer_ListServices_Call) Run(run func(context1 context.Context, listServicesRequest *proto.ListServicesRequest)) *MockHealthServiceServer_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListServicesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListServicesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_ListServices_Call) Return(listServicesResponse *proto.ListServicesResponse, err error) *MockHealthServiceServer_ListServices_Call {
	_c.Call.Return(listServicesResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_ListServices_Call) RunAndReturn(run func(context1 context.Context, listServicesRequest *proto.ListServicesRequest) (*proto.ListServicesResponse, error)) *MockHealthServiceServer_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCheck provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) RegisterCheck(context1 context.Context, registerCheckRequest *proto.RegisterCheckRequest) (*proto.RegisterCheckResponse, error) {
	ret := _mock.Called(context1, registerCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCheck")
	}

	var r0 *proto.RegisterCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterCheckRequest) (*proto.RegisterCheckResponse, error)); ok {
		return returnFunc(context1, registerCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.RegisterCheckRequest) *proto.RegisterCheckResponse); ok {
		r0 = returnFunc(context1, registerCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.RegisterCheckRequest) error); ok {
		r1 = returnFunc(context1, registerCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_RegisterCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCheck'
type MockHealthServiceServer_RegisterCheck_Call struct {
	*mock.Call
}

// RegisterCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - registerCheckRequest *proto.RegisterCheckRequest
func (_e *MockHealthServiceServer_Expecter) RegisterCheck(context1 interface{}, registerCheckRequest interface{}) *MockHealthServiceServer_RegisterCheck_Call {
	return &MockHealthServiceServer_RegisterCheck_Call{Call: _e.mock.On("RegisterCheck", context1, registerCheckRequest)}
}

func (_c *MockHealthServiceServer_RegisterCheck_Call) Run(run func(context1 context.Context, registerCheckRequest *proto.RegisterCheckRequest)) *MockHealthServiceServer_RegisterCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.RegisterCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.RegisterCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_RegisterCheck_Call) Return(registerCheckResponse *proto.RegisterCheckResponse, err error) *MockHealthServiceServer_RegisterCheck_Call {
	_c.Call.Return(registerCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_RegisterCheck_Call) RunAndReturn(run func(context1 context.Context, registerCheckRequest *proto.RegisterCheckRequest) (*proto.RegisterCheckResponse, error)) *MockHealthServiceServer_RegisterCheck_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterCheck provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) UnregisterCheck(context1 context.Context, unregisterCheckRequest *proto.UnregisterCheckRequest) (*proto.UnregisterCheckResponse, error) {
	ret := _mock.Called(context1, unregisterCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterCheck")
	}

	var r0 *proto.UnregisterCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterCheckRequest) (*proto.UnregisterCheckResponse, error)); ok {
		return returnFunc(context1, unregisterCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.UnregisterCheckRequest) *proto.UnregisterCheckResponse); ok {
		r0 = returnFunc(context1, unregisterCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.UnregisterCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.UnregisterCheckRequest) error); ok {
		r1 = returnFunc(context1, unregisterCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHealthServiceServer_UnregisterCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterCheck'
type MockHealthServiceServer_UnregisterCheck_Call struct {
	*mock.Call
}

// UnregisterCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - unregisterCheckRequest *proto.UnregisterCheckRequest
func (_e *MockHealthServiceServer_Expecter) UnregisterCheck(context1 interface{}, unregisterCheckRequest interface{}) *MockHealthServiceServer_UnregisterCheck_Call {
	return &MockHealthServiceServer_UnregisterCheck_Call{Call: _e.mock.On("UnregisterCheck", context1, unregisterCheckRequest)}
}

func (_c *MockHealthServiceServer_UnregisterCheck_Call) Run(run func(context1 context.Context, unregisterCheckRequest *proto.UnregisterCheckRequest)) *MockHealthServiceServer_UnregisterCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.UnregisterCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.UnregisterCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_UnregisterCheck_Call) Return(unregisterCheckResponse *proto.UnregisterCheckResponse, err error) *MockHealthServiceServer_UnregisterCheck_Call {
	_c.Call.Return(unregisterCheckResponse, err)
	return _c
}

func (_c *MockHealthServiceServer_UnregisterCheck_Call) RunAndReturn(run func(context1 context.Context, unregisterCheckRequest *proto.UnregisterCheckRequest) (*proto.UnregisterCheckResponse, error)) *MockHealthServiceServer_UnregisterCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type MockHealthServiceServer
func (_mock *MockHealthServiceServer) Watch(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse]) error {
	ret := _mock.Called(watchRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.WatchRequest, grpc.ServerStreamingServer[proto.WatchResponse]) error); ok {
		r0 = returnFunc(watchRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHealthServiceServer_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockHealthServiceServer_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - watchRequest *proto.WatchRequest
//   - serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse]
func (_e *MockHealthServiceServer_Expecter) Watch(watchRequest interface{}, serverStreamingServer interface{}) *MockHealthServiceServer_Watch_Call {
	return &MockHealthServiceServer_Watch_Call{Call: _e.mock.On("Watch", watchRequest, serverStreamingServer)}
}

func (_c *MockHealthServiceServer_Watch_Call) Run(run func(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse])) *MockHealthServiceServer_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *proto.WatchRequest
		if args[0] != nil {
			arg0 = args[0].(*proto.WatchRequest)
		}
		var arg1 grpc.ServerStreamingServer[proto.WatchResponse]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[proto.WatchResponse])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHealthServiceServer_Watch_Call) Return(err error) *MockHealthServiceServer_Watch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHealthServiceServer_Watch_Call) RunAndReturn(run func(watchRequest *proto.WatchRequest, serverStreamingServer grpc.ServerStreamingServer[proto.WatchResponse]) error) *MockHealthServiceServer_Watch_Call {
	_c.Call.Return(run)
	return _c
}
