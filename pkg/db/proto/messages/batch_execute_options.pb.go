// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/db/proto/messages/batch_execute_options.proto

//go:build !protoopaque

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchExecuteOptions configures behavior for batch database operations.
// Controls error handling, timeouts, and parallelism for batch execution.
type BatchExecuteOptions struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Whether to stop execution on the first error
	FailFast *bool `protobuf:"varint,1,opt,name=fail_fast,json=failFast" json:"fail_fast,omitempty"`
	// Timeout for the entire batch operation
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout" json:"timeout,omitempty"`
	// Maximum number of operations to execute in parallel
	MaxParallel   *int32 `protobuf:"varint,3,opt,name=max_parallel,json=maxParallel" json:"max_parallel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchExecuteOptions) Reset() {
	*x = BatchExecuteOptions{}
	mi := &file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchExecuteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecuteOptions) ProtoMessage() {}

func (x *BatchExecuteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchExecuteOptions) GetFailFast() bool {
	if x != nil && x.FailFast != nil {
		return *x.FailFast
	}
	return false
}

func (x *BatchExecuteOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *BatchExecuteOptions) GetMaxParallel() int32 {
	if x != nil && x.MaxParallel != nil {
		return *x.MaxParallel
	}
	return 0
}

func (x *BatchExecuteOptions) SetFailFast(v bool) {
	x.FailFast = &v
}

func (x *BatchExecuteOptions) SetTimeout(v *durationpb.Duration) {
	x.Timeout = v
}

func (x *BatchExecuteOptions) SetMaxParallel(v int32) {
	x.MaxParallel = &v
}

func (x *BatchExecuteOptions) HasFailFast() bool {
	if x == nil {
		return false
	}
	return x.FailFast != nil
}

func (x *BatchExecuteOptions) HasTimeout() bool {
	if x == nil {
		return false
	}
	return x.Timeout != nil
}

func (x *BatchExecuteOptions) HasMaxParallel() bool {
	if x == nil {
		return false
	}
	return x.MaxParallel != nil
}

func (x *BatchExecuteOptions) ClearFailFast() {
	x.FailFast = nil
}

func (x *BatchExecuteOptions) ClearTimeout() {
	x.Timeout = nil
}

func (x *BatchExecuteOptions) ClearMaxParallel() {
	x.MaxParallel = nil
}

type BatchExecuteOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to stop execution on the first error
	FailFast *bool
	// Timeout for the entire batch operation
	Timeout *durationpb.Duration
	// Maximum number of operations to execute in parallel
	MaxParallel *int32
}

func (b0 BatchExecuteOptions_builder) Build() *BatchExecuteOptions {
	m0 := &BatchExecuteOptions{}
	b, x := &b0, m0
	_, _ = b, x
	x.FailFast = b.FailFast
	x.Timeout = b.Timeout
	x.MaxParallel = b.MaxParallel
	return m0
}

var File_pkg_db_proto_messages_batch_execute_options_proto protoreflect.FileDescriptor

const file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc = "" +
	"\n" +
	"1pkg/db/proto/messages/batch_execute_options.proto\x12\x13gcommon.v1.database\x1a\x1egoogle/protobuf/duration.proto\x1a!google/protobuf/go_features.proto\"\x8e\x01\n" +
	"\x13BatchExecuteOptions\x12\x1b\n" +
	"\tfail_fast\x18\x01 \x01(\bR\bfailFast\x127\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\x02(\x01R\atimeout\x12!\n" +
	"\fmax_parallel\x18\x03 \x01(\x05R\vmaxParallelB\xda\x01\n" +
	"\x17com.gcommon.v1.databaseB\x18BatchExecuteOptionsProtoP\x01Z/github.com/jdfalk/gcommon/pkg/db/proto/messages\xa2\x02\x03GVD\xaa\x02\x13Gcommon.V1.Database\xca\x02\x13Gcommon\\V1\\Database\xe2\x02\x1fGcommon\\V1\\Database\\GPBMetadata\xea\x02\x15Gcommon::V1::Database\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_db_proto_messages_batch_execute_options_proto_goTypes = []any{
	(*BatchExecuteOptions)(nil), // 0: gcommon.v1.database.BatchExecuteOptions
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.database.BatchExecuteOptions.timeout:type_name -> google.protobuf.Duration
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_db_proto_messages_batch_execute_options_proto_init() }
func file_pkg_db_proto_messages_batch_execute_options_proto_init() {
	if File_pkg_db_proto_messages_batch_execute_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc), len(file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_db_proto_messages_batch_execute_options_proto_goTypes,
		DependencyIndexes: file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs,
		MessageInfos:      file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes,
	}.Build()
	File_pkg_db_proto_messages_batch_execute_options_proto = out.File
	file_pkg_db_proto_messages_batch_execute_options_proto_goTypes = nil
	file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs = nil
}
