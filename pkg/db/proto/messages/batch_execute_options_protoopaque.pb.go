// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/db/proto/messages/batch_execute_options.proto

//go:build protoopaque

package dbpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchExecuteOptions configures behavior for batch database operations.
// Controls error handling, timeouts, and parallelism for batch execution.
type BatchExecuteOptions struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_FailFast    bool                   `protobuf:"varint,1,opt,name=fail_fast,json=failFast"`
	xxx_hidden_Timeout     *durationpb.Duration   `protobuf:"bytes,2,opt,name=timeout"`
	xxx_hidden_MaxParallel int32                  `protobuf:"varint,3,opt,name=max_parallel,json=maxParallel"`
	// Deprecated: Do not use. This will be deleted in the near future.
	XXX_lazyUnmarshalInfo  protoimpl.LazyUnmarshalInfo
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BatchExecuteOptions) Reset() {
	*x = BatchExecuteOptions{}
	mi := &file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchExecuteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecuteOptions) ProtoMessage() {}

func (x *BatchExecuteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchExecuteOptions) GetFailFast() bool {
	if x != nil {
		return x.xxx_hidden_FailFast
	}
	return false
}

func (x *BatchExecuteOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			if protoimpl.X.AtomicCheckPointerIsNil(&x.xxx_hidden_Timeout) {
				protoimpl.X.UnmarshalField(x, 2)
			}
			var rv *durationpb.Duration
			protoimpl.X.AtomicLoadPointer(protoimpl.Pointer(&x.xxx_hidden_Timeout), protoimpl.Pointer(&rv))
			return rv
		}
	}
	return nil
}

func (x *BatchExecuteOptions) GetMaxParallel() int32 {
	if x != nil {
		return x.xxx_hidden_MaxParallel
	}
	return 0
}

func (x *BatchExecuteOptions) SetFailFast(v bool) {
	x.xxx_hidden_FailFast = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *BatchExecuteOptions) SetTimeout(v *durationpb.Duration) {
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Timeout, v)
	if v == nil {
		protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	} else {
		protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
	}
}

func (x *BatchExecuteOptions) SetMaxParallel(v int32) {
	x.xxx_hidden_MaxParallel = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *BatchExecuteOptions) HasFailFast() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *BatchExecuteOptions) HasTimeout() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *BatchExecuteOptions) HasMaxParallel() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *BatchExecuteOptions) ClearFailFast() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_FailFast = false
}

func (x *BatchExecuteOptions) ClearTimeout() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	protoimpl.X.AtomicSetPointer(&x.xxx_hidden_Timeout, (*durationpb.Duration)(nil))
}

func (x *BatchExecuteOptions) ClearMaxParallel() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_MaxParallel = 0
}

type BatchExecuteOptions_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Whether to stop execution on the first error
	FailFast *bool
	// Timeout for the entire batch operation
	Timeout *durationpb.Duration
	// Maximum number of operations to execute in parallel
	MaxParallel *int32
}

func (b0 BatchExecuteOptions_builder) Build() *BatchExecuteOptions {
	m0 := &BatchExecuteOptions{}
	b, x := &b0, m0
	_, _ = b, x
	if b.FailFast != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_FailFast = *b.FailFast
	}
	if b.Timeout != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Timeout = b.Timeout
	}
	if b.MaxParallel != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_MaxParallel = *b.MaxParallel
	}
	return m0
}

var File_pkg_db_proto_messages_batch_execute_options_proto protoreflect.FileDescriptor

const file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc = "" +
	"\n" +
	"1pkg/db/proto/messages/batch_execute_options.proto\x12\x13gcommon.v1.database\x1a\x1egoogle/protobuf/duration.proto\x1a!google/protobuf/go_features.proto\"\x8e\x01\n" +
	"\x13BatchExecuteOptions\x12\x1b\n" +
	"\tfail_fast\x18\x01 \x01(\bR\bfailFast\x127\n" +
	"\atimeout\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\x02(\x01R\atimeout\x12!\n" +
	"\fmax_parallel\x18\x03 \x01(\x05R\vmaxParallelB\xd6\x01\n" +
	"\x17com.gcommon.v1.databaseB\x18BatchExecuteOptionsProtoP\x01Z+github.com/jdfalk/gcommon/pkg/db/proto;dbpb\xa2\x02\x03GVD\xaa\x02\x13Gcommon.V1.Database\xca\x02\x13Gcommon\\V1\\Database\xe2\x02\x1fGcommon\\V1\\Database\\GPBMetadata\xea\x02\x15Gcommon::V1::Database\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_db_proto_messages_batch_execute_options_proto_goTypes = []any{
	(*BatchExecuteOptions)(nil), // 0: gcommon.v1.database.BatchExecuteOptions
	(*durationpb.Duration)(nil), // 1: google.protobuf.Duration
}
var file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.database.BatchExecuteOptions.timeout:type_name -> google.protobuf.Duration
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_db_proto_messages_batch_execute_options_proto_init() }
func file_pkg_db_proto_messages_batch_execute_options_proto_init() {
	if File_pkg_db_proto_messages_batch_execute_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc), len(file_pkg_db_proto_messages_batch_execute_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_db_proto_messages_batch_execute_options_proto_goTypes,
		DependencyIndexes: file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs,
		MessageInfos:      file_pkg_db_proto_messages_batch_execute_options_proto_msgTypes,
	}.Build()
	File_pkg_db_proto_messages_batch_execute_options_proto = out.File
	file_pkg_db_proto_messages_batch_execute_options_proto_goTypes = nil
	file_pkg_db_proto_messages_batch_execute_options_proto_depIdxs = nil
}
