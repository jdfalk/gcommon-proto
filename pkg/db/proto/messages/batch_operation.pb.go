// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/db/proto/messages/batch_operation.proto

//go:build !protoopaque

package messages

import (
	types "github.com/jdfalk/gcommon/pkg/db/proto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// BatchOperation represents a single operation within a batch execution.
// Contains the SQL statement and its parameters for batch processing.
type BatchOperation struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// SQL statement or database operation to execute
	Statement *string `protobuf:"bytes,1,opt,name=statement" json:"statement,omitempty"`
	// Parameters for the statement
	Parameters    []*types.QueryParameter `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperation) Reset() {
	*x = BatchOperation{}
	mi := &file_pkg_db_proto_messages_batch_operation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperation) ProtoMessage() {}

func (x *BatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_db_proto_messages_batch_operation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BatchOperation) GetStatement() string {
	if x != nil && x.Statement != nil {
		return *x.Statement
	}
	return ""
}

func (x *BatchOperation) GetParameters() []*types.QueryParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *BatchOperation) SetStatement(v string) {
	x.Statement = &v
}

func (x *BatchOperation) SetParameters(v []*types.QueryParameter) {
	x.Parameters = v
}

func (x *BatchOperation) HasStatement() bool {
	if x == nil {
		return false
	}
	return x.Statement != nil
}

func (x *BatchOperation) ClearStatement() {
	x.Statement = nil
}

type BatchOperation_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// SQL statement or database operation to execute
	Statement *string
	// Parameters for the statement
	Parameters []*types.QueryParameter
}

func (b0 BatchOperation_builder) Build() *BatchOperation {
	m0 := &BatchOperation{}
	b, x := &b0, m0
	_, _ = b, x
	x.Statement = b.Statement
	x.Parameters = b.Parameters
	return m0
}

var File_pkg_db_proto_messages_batch_operation_proto protoreflect.FileDescriptor

const file_pkg_db_proto_messages_batch_operation_proto_rawDesc = "" +
	"\n" +
	"+pkg/db/proto/messages/batch_operation.proto\x12\x13gcommon.v1.database\x1a(pkg/db/proto/types/query_parameter.proto\x1a!google/protobuf/go_features.proto\"w\n" +
	"\x0eBatchOperation\x12\x1c\n" +
	"\tstatement\x18\x01 \x01(\tR\tstatement\x12G\n" +
	"\n" +
	"parameters\x18\x02 \x03(\v2#.gcommon.v1.database.QueryParameterB\x02(\x01R\n" +
	"parametersB\xd5\x01\n" +
	"\x17com.gcommon.v1.databaseB\x13BatchOperationProtoP\x01Z/github.com/jdfalk/gcommon/pkg/db/proto/messages\xa2\x02\x03GVD\xaa\x02\x13Gcommon.V1.Database\xca\x02\x13Gcommon\\V1\\Database\xe2\x02\x1fGcommon\\V1\\Database\\GPBMetadata\xea\x02\x15Gcommon::V1::Database\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_db_proto_messages_batch_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_db_proto_messages_batch_operation_proto_goTypes = []any{
	(*BatchOperation)(nil),       // 0: gcommon.v1.database.BatchOperation
	(*types.QueryParameter)(nil), // 1: gcommon.v1.database.QueryParameter
}
var file_pkg_db_proto_messages_batch_operation_proto_depIdxs = []int32{
	1, // 0: gcommon.v1.database.BatchOperation.parameters:type_name -> gcommon.v1.database.QueryParameter
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_db_proto_messages_batch_operation_proto_init() }
func file_pkg_db_proto_messages_batch_operation_proto_init() {
	if File_pkg_db_proto_messages_batch_operation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_db_proto_messages_batch_operation_proto_rawDesc), len(file_pkg_db_proto_messages_batch_operation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_db_proto_messages_batch_operation_proto_goTypes,
		DependencyIndexes: file_pkg_db_proto_messages_batch_operation_proto_depIdxs,
		MessageInfos:      file_pkg_db_proto_messages_batch_operation_proto_msgTypes,
	}.Build()
	File_pkg_db_proto_messages_batch_operation_proto = out.File
	file_pkg_db_proto_messages_batch_operation_proto_goTypes = nil
	file_pkg_db_proto_messages_batch_operation_proto_depIdxs = nil
}
