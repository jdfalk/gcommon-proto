// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pkg/db/proto/messages/cockroach_config.proto

//go:build !protoopaque

package dbpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// CockroachConfig provides CockroachDB-specific connection configuration.
// Includes retry behavior and identification options for robust connections.
type CockroachConfig struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Host is the database host.
	Host *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// Port is the database port.
	Port *int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// User is the database user.
	User *string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// Password is the database password.
	Password *string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	// Database is the database name.
	Database *string `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	// SSLMode is the SSL mode.
	SslMode *string `protobuf:"bytes,6,opt,name=ssl_mode,json=sslMode" json:"ssl_mode,omitempty"`
	// ApplicationName is the application name.
	ApplicationName *string `protobuf:"bytes,7,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	// RetryBackoffFactor is the retry backoff factor.
	RetryBackoffFactor *float32 `protobuf:"fixed32,8,opt,name=retry_backoff_factor,json=retryBackoffFactor" json:"retry_backoff_factor,omitempty"`
	// MaxRetries is the maximum number of retries.
	MaxRetries    *int32 `protobuf:"varint,9,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CockroachConfig) Reset() {
	*x = CockroachConfig{}
	mi := &file_pkg_db_proto_messages_cockroach_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CockroachConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CockroachConfig) ProtoMessage() {}

func (x *CockroachConfig) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_db_proto_messages_cockroach_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CockroachConfig) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CockroachConfig) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CockroachConfig) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *CockroachConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CockroachConfig) GetDatabase() string {
	if x != nil && x.Database != nil {
		return *x.Database
	}
	return ""
}

func (x *CockroachConfig) GetSslMode() string {
	if x != nil && x.SslMode != nil {
		return *x.SslMode
	}
	return ""
}

func (x *CockroachConfig) GetApplicationName() string {
	if x != nil && x.ApplicationName != nil {
		return *x.ApplicationName
	}
	return ""
}

func (x *CockroachConfig) GetRetryBackoffFactor() float32 {
	if x != nil && x.RetryBackoffFactor != nil {
		return *x.RetryBackoffFactor
	}
	return 0
}

func (x *CockroachConfig) GetMaxRetries() int32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *CockroachConfig) SetHost(v string) {
	x.Host = &v
}

func (x *CockroachConfig) SetPort(v int32) {
	x.Port = &v
}

func (x *CockroachConfig) SetUser(v string) {
	x.User = &v
}

func (x *CockroachConfig) SetPassword(v string) {
	x.Password = &v
}

func (x *CockroachConfig) SetDatabase(v string) {
	x.Database = &v
}

func (x *CockroachConfig) SetSslMode(v string) {
	x.SslMode = &v
}

func (x *CockroachConfig) SetApplicationName(v string) {
	x.ApplicationName = &v
}

func (x *CockroachConfig) SetRetryBackoffFactor(v float32) {
	x.RetryBackoffFactor = &v
}

func (x *CockroachConfig) SetMaxRetries(v int32) {
	x.MaxRetries = &v
}

func (x *CockroachConfig) HasHost() bool {
	if x == nil {
		return false
	}
	return x.Host != nil
}

func (x *CockroachConfig) HasPort() bool {
	if x == nil {
		return false
	}
	return x.Port != nil
}

func (x *CockroachConfig) HasUser() bool {
	if x == nil {
		return false
	}
	return x.User != nil
}

func (x *CockroachConfig) HasPassword() bool {
	if x == nil {
		return false
	}
	return x.Password != nil
}

func (x *CockroachConfig) HasDatabase() bool {
	if x == nil {
		return false
	}
	return x.Database != nil
}

func (x *CockroachConfig) HasSslMode() bool {
	if x == nil {
		return false
	}
	return x.SslMode != nil
}

func (x *CockroachConfig) HasApplicationName() bool {
	if x == nil {
		return false
	}
	return x.ApplicationName != nil
}

func (x *CockroachConfig) HasRetryBackoffFactor() bool {
	if x == nil {
		return false
	}
	return x.RetryBackoffFactor != nil
}

func (x *CockroachConfig) HasMaxRetries() bool {
	if x == nil {
		return false
	}
	return x.MaxRetries != nil
}

func (x *CockroachConfig) ClearHost() {
	x.Host = nil
}

func (x *CockroachConfig) ClearPort() {
	x.Port = nil
}

func (x *CockroachConfig) ClearUser() {
	x.User = nil
}

func (x *CockroachConfig) ClearPassword() {
	x.Password = nil
}

func (x *CockroachConfig) ClearDatabase() {
	x.Database = nil
}

func (x *CockroachConfig) ClearSslMode() {
	x.SslMode = nil
}

func (x *CockroachConfig) ClearApplicationName() {
	x.ApplicationName = nil
}

func (x *CockroachConfig) ClearRetryBackoffFactor() {
	x.RetryBackoffFactor = nil
}

func (x *CockroachConfig) ClearMaxRetries() {
	x.MaxRetries = nil
}

type CockroachConfig_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Host is the database host.
	Host *string
	// Port is the database port.
	Port *int32
	// User is the database user.
	User *string
	// Password is the database password.
	Password *string
	// Database is the database name.
	Database *string
	// SSLMode is the SSL mode.
	SslMode *string
	// ApplicationName is the application name.
	ApplicationName *string
	// RetryBackoffFactor is the retry backoff factor.
	RetryBackoffFactor *float32
	// MaxRetries is the maximum number of retries.
	MaxRetries *int32
}

func (b0 CockroachConfig_builder) Build() *CockroachConfig {
	m0 := &CockroachConfig{}
	b, x := &b0, m0
	_, _ = b, x
	x.Host = b.Host
	x.Port = b.Port
	x.User = b.User
	x.Password = b.Password
	x.Database = b.Database
	x.SslMode = b.SslMode
	x.ApplicationName = b.ApplicationName
	x.RetryBackoffFactor = b.RetryBackoffFactor
	x.MaxRetries = b.MaxRetries
	return m0
}

var File_pkg_db_proto_messages_cockroach_config_proto protoreflect.FileDescriptor

const file_pkg_db_proto_messages_cockroach_config_proto_rawDesc = "" +
	"\n" +
	",pkg/db/proto/messages/cockroach_config.proto\x12\x13gcommon.v1.database\x1a!google/protobuf/go_features.proto\"\x9e\x02\n" +
	"\x0fCockroachConfig\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\x12\x1a\n" +
	"\bdatabase\x18\x05 \x01(\tR\bdatabase\x12\x19\n" +
	"\bssl_mode\x18\x06 \x01(\tR\asslMode\x12)\n" +
	"\x10application_name\x18\a \x01(\tR\x0fapplicationName\x120\n" +
	"\x14retry_backoff_factor\x18\b \x01(\x02R\x12retryBackoffFactor\x12\x1f\n" +
	"\vmax_retries\x18\t \x01(\x05R\n" +
	"maxRetriesB\xc4\x01\n" +
	"\x17com.gcommon.v1.databaseB\x14CockroachConfigProtoP\x01Z\x1d../../../../pkg/db/proto;dbpb\xa2\x02\x03GVD\xaa\x02\x13Gcommon.V1.Database\xca\x02\x13Gcommon\\V1\\Database\xe2\x02\x1fGcommon\\V1\\Database\\GPBMetadata\xea\x02\x15Gcommon::V1::Database\x92\x03\x05\xd2>\x02\x10\x02b\beditionsp\xe8\a"

var file_pkg_db_proto_messages_cockroach_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pkg_db_proto_messages_cockroach_config_proto_goTypes = []any{
	(*CockroachConfig)(nil), // 0: gcommon.v1.database.CockroachConfig
}
var file_pkg_db_proto_messages_cockroach_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pkg_db_proto_messages_cockroach_config_proto_init() }
func file_pkg_db_proto_messages_cockroach_config_proto_init() {
	if File_pkg_db_proto_messages_cockroach_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_db_proto_messages_cockroach_config_proto_rawDesc), len(file_pkg_db_proto_messages_cockroach_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_db_proto_messages_cockroach_config_proto_goTypes,
		DependencyIndexes: file_pkg_db_proto_messages_cockroach_config_proto_depIdxs,
		MessageInfos:      file_pkg_db_proto_messages_cockroach_config_proto_msgTypes,
	}.Build()
	File_pkg_db_proto_messages_cockroach_config_proto = out.File
	file_pkg_db_proto_messages_cockroach_config_proto_goTypes = nil
	file_pkg_db_proto_messages_cockroach_config_proto_depIdxs = nil
}
