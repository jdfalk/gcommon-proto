// file: pkg/db/proto/services/database_service.proto
edition = "2023";

package gcommon.v1.database;

import "google/protobuf/go_features.proto";
import "pkg/db/proto/execute_batch_request.proto";
import "pkg/db/proto/execute_batch_response.proto";
import "pkg/db/proto/execute_request.proto";
import "pkg/db/proto/execute_response.proto";
import "pkg/db/proto/get_connection_info_request.proto";
import "pkg/db/proto/get_connection_info_response.proto";
import "pkg/db/proto/health_check_request.proto";
import "pkg/db/proto/health_check_response.proto";
import "pkg/db/proto/query_request.proto";
import "pkg/db/proto/query_response.proto";
import "pkg/db/proto/query_row_request.proto";
import "pkg/db/proto/query_row_response.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/pkg/db/proto";

/**
 * DatabaseService provides comprehensive database operations including
 * queries, transactions, batch operations, and health monitoring.
 */
service DatabaseService {
  // Execute a read-only query and return results
  rpc Query(QueryRequest) returns (QueryResponse);

  // Execute a query expected to return at most one row
  rpc QueryRow(QueryRowRequest) returns (QueryRowResponse);

  // Execute a write operation (INSERT, UPDATE, DELETE)
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);

  // Execute multiple operations in a single batch
  rpc ExecuteBatch(ExecuteBatchRequest) returns (ExecuteBatchResponse);

  // Get information about database connection pool
  rpc GetConnectionInfo(GetConnectionInfoRequest) returns (GetConnectionInfoResponse);

  // Check database connectivity and health
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}
