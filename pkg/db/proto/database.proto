// file: pkg/db/proto/database.proto
edition = "2023";

package gcommon.v1.database;

import "pkg/common/proto/common.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/go_features.proto";

option go_package = "github.com/jdfalk/gcommon/pkg/db/proto;dbpb";
option features.(pb.go).api_level = API_HYBRID;

// DatabaseService provides comprehensive database operations
service DatabaseService {
  // Query executes a read-only query
  rpc Query(QueryRequest) returns (QueryResponse);

  // Execute runs a write operation (INSERT, UPDATE, DELETE)
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);

  // ExecuteBatch runs multiple operations in a batch
  rpc ExecuteBatch(ExecuteBatchRequest) returns (ExecuteBatchResponse);

  // BeginTransaction starts a new transaction
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);

  // CommitTransaction commits a transaction
  rpc CommitTransaction(CommitTransactionRequest) returns (google.protobuf.Empty);

  // RollbackTransaction rolls back a transaction
  rpc RollbackTransaction(RollbackTransactionRequest) returns (google.protobuf.Empty);

  // GetConnectionInfo returns connection pool information
  rpc GetConnectionInfo(GetConnectionInfoRequest) returns (GetConnectionInfoResponse);

  // Health check for database connectivity
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Database admin service for management operations
service DatabaseAdminService {
  // CreateDatabase creates a new database
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);

  // DropDatabase removes a database
  rpc DropDatabase(DropDatabaseRequest) returns (google.protobuf.Empty);

  // ListDatabases returns available databases
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);

  // GetDatabaseInfo returns database metadata
  rpc GetDatabaseInfo(GetDatabaseInfoRequest) returns (GetDatabaseInfoResponse);

  // CreateSchema creates a new schema
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);

  // DropSchema removes a schema
  rpc DropSchema(DropSchemaRequest) returns (google.protobuf.Empty);

  // ListSchemas returns available schemas
  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse);

  // RunMigration executes database migrations
  rpc RunMigration(RunMigrationRequest) returns (RunMigrationResponse);

  // GetMigrationStatus returns migration status
  rpc GetMigrationStatus(GetMigrationStatusRequest) returns (GetMigrationStatusResponse);
}

// Query request for read operations
message QueryRequest {
  // SQL query or NoSQL query
  string query = 1;

  // Query parameters
  repeated QueryParameter parameters = 2;

  // Database name (optional)
  string database = 3;

  // Query options
  QueryOptions options = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;

  // Transaction ID if part of transaction
  string transaction_id = 6;
}

// Query response with results
message QueryResponse {
  // Query result set
  ResultSet result_set = 1;

  // Query execution statistics
  QueryStats stats = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Execute request for write operations
message ExecuteRequest {
  // SQL statement or NoSQL operation
  string statement = 1;

  // Statement parameters
  repeated QueryParameter parameters = 2;

  // Database name (optional)
  string database = 3;

  // Execution options
  ExecuteOptions options = 4;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 5;

  // Transaction ID if part of transaction
  string transaction_id = 6;
}

// Execute response with operation result
message ExecuteResponse {
  // Number of affected rows
  int64 affected_rows = 1;

  // Generated keys (for INSERT operations)
  repeated google.protobuf.Any generated_keys = 2;

  // Execution statistics
  ExecuteStats stats = 3;

  // Error information
  gcommon.v1.common.Error error = 4;
}

// Query parameter for parameterized queries
message QueryParameter {
  // Parameter name
  string name = 1;

  // Parameter value
  google.protobuf.Any value = 2;

  // Parameter type hint
  string type = 3;
}

// Query options
message QueryOptions {
  // Maximum number of rows to return
  int32 limit = 1;

  // Number of rows to skip
  int32 offset = 2;

  // Query timeout
  google.protobuf.Duration timeout = 3;

  // Whether to include column metadata
  bool include_metadata = 4;

  // Read consistency level
  ConsistencyLevel consistency = 5;
}

// Execute options
message ExecuteOptions {
  // Execution timeout
  google.protobuf.Duration timeout = 1;

  // Whether to return generated keys
  bool return_generated_keys = 2;

  // Isolation level for transaction
  IsolationLevel isolation = 3;
}

// Result set for query results
message ResultSet {
  // Column metadata
  repeated ColumnMetadata columns = 1;

  // Result rows
  repeated Row rows = 2;

  // Total row count (if known)
  int64 total_count = 3;

  // Whether more rows are available
  bool has_more = 4;
}

// Column metadata
message ColumnMetadata {
  // Column name
  string name = 1;

  // Column type
  string type = 2;

  // Whether column allows null values
  bool nullable = 3;

  // Column size/precision
  int32 size = 4;

  // Column scale (for decimal types)
  int32 scale = 5;

  // Additional metadata
  map<string, string> metadata = 6;
}

// Result row
message Row {
  // Column values in order
  repeated google.protobuf.Any values = 1;
}

// Query execution statistics
message QueryStats {
  // Execution time
  google.protobuf.Duration execution_time = 1;

  // Number of rows returned
  int64 row_count = 2;

  // Number of columns
  int32 column_count = 3;

  // Query plan (if available)
  string query_plan = 4;

  // Cost estimate
  double cost_estimate = 5;
}

// Execute operation statistics
message ExecuteStats {
  // Execution time
  google.protobuf.Duration execution_time = 1;

  // Number of affected rows
  int64 affected_rows = 2;

  // Cost estimate
  double cost_estimate = 3;
}

// Consistency level enumeration
enum ConsistencyLevel {
  CONSISTENCY_LEVEL_UNSPECIFIED = 0;
  CONSISTENCY_LEVEL_EVENTUAL = 1;
  CONSISTENCY_LEVEL_STRONG = 2;
  CONSISTENCY_LEVEL_BOUNDED_STALENESS = 3;
}

// Isolation level enumeration
enum IsolationLevel {
  ISOLATION_LEVEL_UNSPECIFIED = 0;
  ISOLATION_LEVEL_READ_UNCOMMITTED = 1;
  ISOLATION_LEVEL_READ_COMMITTED = 2;
  ISOLATION_LEVEL_REPEATABLE_READ = 3;
  ISOLATION_LEVEL_SERIALIZABLE = 4;
}

// Batch execute request
message ExecuteBatchRequest {
  // Batch operations
  repeated BatchOperation operations = 1;

  // Database name (optional)
  string database = 2;

  // Batch options
  BatchExecuteOptions options = 3;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 4;

  // Transaction ID if part of transaction
  string transaction_id = 5;
}

// Batch operation
message BatchOperation {
  // SQL statement or operation
  string statement = 1;

  // Statement parameters
  repeated QueryParameter parameters = 2;
}

// Batch execute options
message BatchExecuteOptions {
  // Whether to stop on first error
  bool fail_fast = 1;

  // Execution timeout for entire batch
  google.protobuf.Duration timeout = 2;

  // Maximum parallel operations
  int32 max_parallel = 3;
}

// Batch execute response
message ExecuteBatchResponse {
  // Results for each operation
  repeated BatchOperationResult results = 1;

  // Overall batch statistics
  BatchStats stats = 2;

  // Error information
  gcommon.v1.common.Error error = 3;
}

// Result for individual batch operation
message BatchOperationResult {
  // Whether operation succeeded
  bool success = 1;

  // Number of affected rows
  int64 affected_rows = 2;

  // Generated keys (for INSERT operations)
  repeated google.protobuf.Any generated_keys = 3;

  // Error if operation failed
  gcommon.v1.common.Error error = 4;
}

// Batch execution statistics
message BatchStats {
  // Total execution time
  google.protobuf.Duration total_time = 1;

  // Number of successful operations
  int32 successful_operations = 2;

  // Number of failed operations
  int32 failed_operations = 3;

  // Total affected rows
  int64 total_affected_rows = 4;
}

// Transaction management messages
message BeginTransactionRequest {
  // Database name (optional)
  string database = 1;

  // Transaction options
  TransactionOptions options = 2;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 3;
}

message BeginTransactionResponse {
  // Transaction ID
  string transaction_id = 1;

  // Transaction timestamp
  google.protobuf.Timestamp started_at = 2;
}

// Transaction options
message TransactionOptions {
  // Isolation level
  IsolationLevel isolation = 1;

  // Transaction timeout
  google.protobuf.Duration timeout = 2;

  // Read-only transaction
  bool read_only = 3;
}

message CommitTransactionRequest {
  // Transaction ID
  string transaction_id = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

message RollbackTransactionRequest {
  // Transaction ID
  string transaction_id = 1;

  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 2;
}

// Connection info messages
message GetConnectionInfoRequest {
  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 1;
}

message GetConnectionInfoResponse {
  // Connection pool information
  ConnectionPoolInfo pool_info = 1;

  // Database information
  DatabaseInfo database_info = 2;
}

// Connection pool information
message ConnectionPoolInfo {
  // Maximum connections
  int32 max_connections = 1;

  // Active connections
  int32 active_connections = 2;

  // Idle connections
  int32 idle_connections = 3;

  // Average connection lifetime
  google.protobuf.Duration avg_lifetime = 4;

  // Connection pool statistics
  PoolStats stats = 5;
}

// Pool statistics
message PoolStats {
  // Total connections created
  int64 total_created = 1;

  // Total connections closed
  int64 total_closed = 2;

  // Connection acquisition failures
  int64 acquisition_failures = 3;

  // Average acquisition time
  google.protobuf.Duration avg_acquisition_time = 4;
}

// Database information
message DatabaseInfo {
  // Database name
  string name = 1;

  // Database version
  string version = 2;

  // Database type/vendor
  string type = 3;

  // Connection string (sanitized)
  string connection_string = 4;

  // Database features
  repeated string features = 5;
}

// Health check messages
message HealthCheckRequest {
  // Request metadata
  gcommon.v1.common.RequestMetadata metadata = 1;
}

message HealthCheckResponse {
  // Health status
  gcommon.v1.common.HealthStatus status = 1;

  // Connection check result
  bool connection_ok = 2;

  // Response time
  google.protobuf.Duration response_time = 3;

  // Error information if unhealthy
  gcommon.v1.common.Error error = 4;
}

// Admin service messages (abbreviated for space)
message CreateDatabaseRequest {
  string name = 1;
  map<string, string> options = 2;
  gcommon.v1.common.RequestMetadata metadata = 3;
}

message CreateDatabaseResponse {
  bool success = 1;
  gcommon.v1.common.Error error = 2;
}

message DropDatabaseRequest {
  string name = 1;
  gcommon.v1.common.RequestMetadata metadata = 2;
}

message ListDatabasesRequest {
  gcommon.v1.common.RequestMetadata metadata = 1;
}

message ListDatabasesResponse {
  repeated string databases = 1;
}

message GetDatabaseInfoRequest {
  string name = 1;
  gcommon.v1.common.RequestMetadata metadata = 2;
}

message GetDatabaseInfoResponse {
  DatabaseInfo info = 1;
}

message CreateSchemaRequest {
  string database = 1;
  string schema = 2;
  gcommon.v1.common.RequestMetadata metadata = 3;
}

message CreateSchemaResponse {
  bool success = 1;
  gcommon.v1.common.Error error = 2;
}

message DropSchemaRequest {
  string database = 1;
  string schema = 2;
  gcommon.v1.common.RequestMetadata metadata = 3;
}

message ListSchemasRequest {
  string database = 1;
  gcommon.v1.common.RequestMetadata metadata = 2;
}

message ListSchemasResponse {
  repeated string schemas = 1;
}

message RunMigrationRequest {
  string database = 1;
  repeated MigrationScript scripts = 2;
  gcommon.v1.common.RequestMetadata metadata = 3;
}

message MigrationScript {
  string version = 1;
  string script = 2;
  string description = 3;
}

message RunMigrationResponse {
  bool success = 1;
  repeated string applied_versions = 2;
  gcommon.v1.common.Error error = 3;
}

message GetMigrationStatusRequest {
  string database = 1;
  gcommon.v1.common.RequestMetadata metadata = 2;
}

message GetMigrationStatusResponse {
  string current_version = 1;
  repeated string applied_versions = 2;
  repeated string pending_versions = 3;
}
