// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/db/proto/services/database_admin_service.proto

package services

import (
	context "context"
	requests "github.com/jdfalk/gcommon/pkg/db/proto/requests"
	responses "github.com/jdfalk/gcommon/pkg/db/proto/responses"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseAdminService_CreateDatabase_FullMethodName     = "/gcommon.v1.database.DatabaseAdminService/CreateDatabase"
	DatabaseAdminService_DropDatabase_FullMethodName       = "/gcommon.v1.database.DatabaseAdminService/DropDatabase"
	DatabaseAdminService_ListDatabases_FullMethodName      = "/gcommon.v1.database.DatabaseAdminService/ListDatabases"
	DatabaseAdminService_GetDatabaseInfo_FullMethodName    = "/gcommon.v1.database.DatabaseAdminService/GetDatabaseInfo"
	DatabaseAdminService_CreateSchema_FullMethodName       = "/gcommon.v1.database.DatabaseAdminService/CreateSchema"
	DatabaseAdminService_DropSchema_FullMethodName         = "/gcommon.v1.database.DatabaseAdminService/DropSchema"
	DatabaseAdminService_ListSchemas_FullMethodName        = "/gcommon.v1.database.DatabaseAdminService/ListSchemas"
	DatabaseAdminService_RunMigration_FullMethodName       = "/gcommon.v1.database.DatabaseAdminService/RunMigration"
	DatabaseAdminService_GetMigrationStatus_FullMethodName = "/gcommon.v1.database.DatabaseAdminService/GetMigrationStatus"
)

// DatabaseAdminServiceClient is the client API for DatabaseAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// DatabaseAdminService provides administrative operations for database
// management including schema operations and migrations.
type DatabaseAdminServiceClient interface {
	// Create a new database
	CreateDatabase(ctx context.Context, in *requests.CreateDatabaseRequest, opts ...grpc.CallOption) (*responses.CreateDatabaseResponse, error)
	// Remove an existing database
	DropDatabase(ctx context.Context, in *requests.DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all available databases
	ListDatabases(ctx context.Context, in *requests.ListDatabasesRequest, opts ...grpc.CallOption) (*responses.ListDatabasesResponse, error)
	// Get metadata about a specific database
	GetDatabaseInfo(ctx context.Context, in *requests.GetDatabaseInfoRequest, opts ...grpc.CallOption) (*responses.GetDatabaseInfoResponse, error)
	// Create a new schema within a database
	CreateSchema(ctx context.Context, in *requests.CreateSchemaRequest, opts ...grpc.CallOption) (*responses.CreateSchemaResponse, error)
	// Remove a schema from a database
	DropSchema(ctx context.Context, in *requests.DropSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all schemas in a database
	ListSchemas(ctx context.Context, in *requests.ListSchemasRequest, opts ...grpc.CallOption) (*responses.ListSchemasResponse, error)
	// Execute database migration scripts
	RunMigration(ctx context.Context, in *requests.RunMigrationRequest, opts ...grpc.CallOption) (*responses.RunMigrationResponse, error)
	// Get current migration status for a database
	GetMigrationStatus(ctx context.Context, in *requests.GetMigrationStatusRequest, opts ...grpc.CallOption) (*responses.GetMigrationStatusResponse, error)
}

type databaseAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseAdminServiceClient(cc grpc.ClientConnInterface) DatabaseAdminServiceClient {
	return &databaseAdminServiceClient{cc}
}

func (c *databaseAdminServiceClient) CreateDatabase(ctx context.Context, in *requests.CreateDatabaseRequest, opts ...grpc.CallOption) (*responses.CreateDatabaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CreateDatabaseResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_CreateDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) DropDatabase(ctx context.Context, in *requests.DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DatabaseAdminService_DropDatabase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) ListDatabases(ctx context.Context, in *requests.ListDatabasesRequest, opts ...grpc.CallOption) (*responses.ListDatabasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListDatabasesResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_ListDatabases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) GetDatabaseInfo(ctx context.Context, in *requests.GetDatabaseInfoRequest, opts ...grpc.CallOption) (*responses.GetDatabaseInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetDatabaseInfoResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_GetDatabaseInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) CreateSchema(ctx context.Context, in *requests.CreateSchemaRequest, opts ...grpc.CallOption) (*responses.CreateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.CreateSchemaResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_CreateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) DropSchema(ctx context.Context, in *requests.DropSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DatabaseAdminService_DropSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) ListSchemas(ctx context.Context, in *requests.ListSchemasRequest, opts ...grpc.CallOption) (*responses.ListSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.ListSchemasResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_ListSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) RunMigration(ctx context.Context, in *requests.RunMigrationRequest, opts ...grpc.CallOption) (*responses.RunMigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.RunMigrationResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_RunMigration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAdminServiceClient) GetMigrationStatus(ctx context.Context, in *requests.GetMigrationStatusRequest, opts ...grpc.CallOption) (*responses.GetMigrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(responses.GetMigrationStatusResponse)
	err := c.cc.Invoke(ctx, DatabaseAdminService_GetMigrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseAdminServiceServer is the server API for DatabaseAdminService service.
// All implementations should embed UnimplementedDatabaseAdminServiceServer
// for forward compatibility.
//
// *
// DatabaseAdminService provides administrative operations for database
// management including schema operations and migrations.
type DatabaseAdminServiceServer interface {
	// Create a new database
	CreateDatabase(context.Context, *requests.CreateDatabaseRequest) (*responses.CreateDatabaseResponse, error)
	// Remove an existing database
	DropDatabase(context.Context, *requests.DropDatabaseRequest) (*emptypb.Empty, error)
	// List all available databases
	ListDatabases(context.Context, *requests.ListDatabasesRequest) (*responses.ListDatabasesResponse, error)
	// Get metadata about a specific database
	GetDatabaseInfo(context.Context, *requests.GetDatabaseInfoRequest) (*responses.GetDatabaseInfoResponse, error)
	// Create a new schema within a database
	CreateSchema(context.Context, *requests.CreateSchemaRequest) (*responses.CreateSchemaResponse, error)
	// Remove a schema from a database
	DropSchema(context.Context, *requests.DropSchemaRequest) (*emptypb.Empty, error)
	// List all schemas in a database
	ListSchemas(context.Context, *requests.ListSchemasRequest) (*responses.ListSchemasResponse, error)
	// Execute database migration scripts
	RunMigration(context.Context, *requests.RunMigrationRequest) (*responses.RunMigrationResponse, error)
	// Get current migration status for a database
	GetMigrationStatus(context.Context, *requests.GetMigrationStatusRequest) (*responses.GetMigrationStatusResponse, error)
}

// UnimplementedDatabaseAdminServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseAdminServiceServer struct{}

func (UnimplementedDatabaseAdminServiceServer) CreateDatabase(context.Context, *requests.CreateDatabaseRequest) (*responses.CreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) DropDatabase(context.Context, *requests.DropDatabaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) ListDatabases(context.Context, *requests.ListDatabasesRequest) (*responses.ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) GetDatabaseInfo(context.Context, *requests.GetDatabaseInfoRequest) (*responses.GetDatabaseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseInfo not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) CreateSchema(context.Context, *requests.CreateSchemaRequest) (*responses.CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) DropSchema(context.Context, *requests.DropSchemaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropSchema not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) ListSchemas(context.Context, *requests.ListSchemasRequest) (*responses.ListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) RunMigration(context.Context, *requests.RunMigrationRequest) (*responses.RunMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMigration not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) GetMigrationStatus(context.Context, *requests.GetMigrationStatusRequest) (*responses.GetMigrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrationStatus not implemented")
}
func (UnimplementedDatabaseAdminServiceServer) testEmbeddedByValue() {}

// UnsafeDatabaseAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseAdminServiceServer will
// result in compilation errors.
type UnsafeDatabaseAdminServiceServer interface {
	mustEmbedUnimplementedDatabaseAdminServiceServer()
}

func RegisterDatabaseAdminServiceServer(s grpc.ServiceRegistrar, srv DatabaseAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseAdminService_ServiceDesc, srv)
}

func _DatabaseAdminService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).CreateDatabase(ctx, req.(*requests.CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_DropDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).DropDatabase(ctx, req.(*requests.DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).ListDatabases(ctx, req.(*requests.ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_GetDatabaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetDatabaseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).GetDatabaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_GetDatabaseInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).GetDatabaseInfo(ctx, req.(*requests.GetDatabaseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_CreateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).CreateSchema(ctx, req.(*requests.CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_DropSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.DropSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).DropSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_DropSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).DropSchema(ctx, req.(*requests.DropSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.ListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_ListSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).ListSchemas(ctx, req.(*requests.ListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_RunMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.RunMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).RunMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_RunMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).RunMigration(ctx, req.(*requests.RunMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAdminService_GetMigrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(requests.GetMigrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAdminServiceServer).GetMigrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseAdminService_GetMigrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAdminServiceServer).GetMigrationStatus(ctx, req.(*requests.GetMigrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseAdminService_ServiceDesc is the grpc.ServiceDesc for DatabaseAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gcommon.v1.database.DatabaseAdminService",
	HandlerType: (*DatabaseAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDatabase",
			Handler:    _DatabaseAdminService_CreateDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _DatabaseAdminService_DropDatabase_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _DatabaseAdminService_ListDatabases_Handler,
		},
		{
			MethodName: "GetDatabaseInfo",
			Handler:    _DatabaseAdminService_GetDatabaseInfo_Handler,
		},
		{
			MethodName: "CreateSchema",
			Handler:    _DatabaseAdminService_CreateSchema_Handler,
		},
		{
			MethodName: "DropSchema",
			Handler:    _DatabaseAdminService_DropSchema_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _DatabaseAdminService_ListSchemas_Handler,
		},
		{
			MethodName: "RunMigration",
			Handler:    _DatabaseAdminService_RunMigration_Handler,
		},
		{
			MethodName: "GetMigrationStatus",
			Handler:    _DatabaseAdminService_GetMigrationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/db/proto/services/database_admin_service.proto",
}
