// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockDatabaseServiceClient creates a new instance of MockDatabaseServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseServiceClient {
	mock := &MockDatabaseServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseServiceClient is an autogenerated mock type for the DatabaseServiceClient type
type MockDatabaseServiceClient struct {
	mock.Mock
}

type MockDatabaseServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseServiceClient) EXPECT() *MockDatabaseServiceClient_Expecter {
	return &MockDatabaseServiceClient_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) Execute(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption) (*proto.ExecuteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *proto.ExecuteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) (*proto.ExecuteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) *proto.ExecuteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDatabaseServiceClient_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ExecuteRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) Execute(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_Execute_Call {
	return &MockDatabaseServiceClient_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_Execute_Call) Run(run func(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExecuteRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExecuteRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_Execute_Call) Return(executeResponse *proto.ExecuteResponse, err error) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Return(executeResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_Execute_Call) RunAndReturn(run func(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption) (*proto.ExecuteResponse, error)) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteBatch provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) ExecuteBatch(ctx context.Context, in *proto.ExecuteBatchRequest, opts ...grpc.CallOption) (*proto.ExecuteBatchResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecuteBatch")
	}

	var r0 *proto.ExecuteBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteBatchRequest, ...grpc.CallOption) (*proto.ExecuteBatchResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteBatchRequest, ...grpc.CallOption) *proto.ExecuteBatchResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteBatchRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_ExecuteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteBatch'
type MockDatabaseServiceClient_ExecuteBatch_Call struct {
	*mock.Call
}

// ExecuteBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ExecuteBatchRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) ExecuteBatch(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_ExecuteBatch_Call {
	return &MockDatabaseServiceClient_ExecuteBatch_Call{Call: _e.mock.On("ExecuteBatch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_ExecuteBatch_Call) Run(run func(ctx context.Context, in *proto.ExecuteBatchRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_ExecuteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExecuteBatchRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExecuteBatchRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_ExecuteBatch_Call) Return(executeBatchResponse *proto.ExecuteBatchResponse, err error) *MockDatabaseServiceClient_ExecuteBatch_Call {
	_c.Call.Return(executeBatchResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_ExecuteBatch_Call) RunAndReturn(run func(ctx context.Context, in *proto.ExecuteBatchRequest, opts ...grpc.CallOption) (*proto.ExecuteBatchResponse, error)) *MockDatabaseServiceClient_ExecuteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionInfo provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) GetConnectionInfo(ctx context.Context, in *proto.GetConnectionInfoRequest, opts ...grpc.CallOption) (*proto.GetConnectionInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionInfo")
	}

	var r0 *proto.GetConnectionInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConnectionInfoRequest, ...grpc.CallOption) (*proto.GetConnectionInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConnectionInfoRequest, ...grpc.CallOption) *proto.GetConnectionInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetConnectionInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetConnectionInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_GetConnectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionInfo'
type MockDatabaseServiceClient_GetConnectionInfo_Call struct {
	*mock.Call
}

// GetConnectionInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetConnectionInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) GetConnectionInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_GetConnectionInfo_Call {
	return &MockDatabaseServiceClient_GetConnectionInfo_Call{Call: _e.mock.On("GetConnectionInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_GetConnectionInfo_Call) Run(run func(ctx context.Context, in *proto.GetConnectionInfoRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_GetConnectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetConnectionInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetConnectionInfoRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_GetConnectionInfo_Call) Return(getConnectionInfoResponse *proto.GetConnectionInfoResponse, err error) *MockDatabaseServiceClient_GetConnectionInfo_Call {
	_c.Call.Return(getConnectionInfoResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_GetConnectionInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetConnectionInfoRequest, opts ...grpc.CallOption) (*proto.GetConnectionInfoResponse, error)) *MockDatabaseServiceClient_GetConnectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) HealthCheck(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockDatabaseServiceClient_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.HealthCheckRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) HealthCheck(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_HealthCheck_Call {
	return &MockDatabaseServiceClient_HealthCheck_Call{Call: _e.mock.On("HealthCheck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_HealthCheck_Call) Run(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_HealthCheck_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockDatabaseServiceClient_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_HealthCheck_Call) RunAndReturn(run func(ctx context.Context, in *proto.HealthCheckRequest, opts ...grpc.CallOption) (*proto.HealthCheckResponse, error)) *MockDatabaseServiceClient_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) Query(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (*proto.QueryResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *proto.QueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) (*proto.QueryResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) *proto.QueryResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabaseServiceClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.QueryRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) Query(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_Query_Call {
	return &MockDatabaseServiceClient_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_Query_Call) Run(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_Query_Call) Return(queryResponse *proto.QueryResponse, err error) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Return(queryResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_Query_Call) RunAndReturn(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (*proto.QueryResponse, error)) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) QueryRow(ctx context.Context, in *proto.QueryRowRequest, opts ...grpc.CallOption) (*proto.QueryRowResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *proto.QueryRowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRowRequest, ...grpc.CallOption) (*proto.QueryRowResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRowRequest, ...grpc.CallOption) *proto.QueryRowResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryRowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRowRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDatabaseServiceClient_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.QueryRowRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseServiceClient_Expecter) QueryRow(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_QueryRow_Call {
	return &MockDatabaseServiceClient_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) Run(run func(ctx context.Context, in *proto.QueryRowRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryRowRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryRowRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) Return(queryRowResponse *proto.QueryRowResponse, err error) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Return(queryRowResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) RunAndReturn(run func(ctx context.Context, in *proto.QueryRowRequest, opts ...grpc.CallOption) (*proto.QueryRowResponse, error)) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}
