// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockDatabaseServiceClient creates a new instance of MockDatabaseServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseServiceClient {
	mock := &MockDatabaseServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseServiceClient is an autogenerated mock type for the DatabaseServiceClient type
type MockDatabaseServiceClient struct {
	mock.Mock
}

type MockDatabaseServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseServiceClient) EXPECT() *MockDatabaseServiceClient_Expecter {
	return &MockDatabaseServiceClient_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) BeginTransaction(ctx context.Context, in *proto.BeginTransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.BeginTransactionRequest, ...grpc.CallOption) (*proto.TransactionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.BeginTransactionRequest, ...grpc.CallOption) *proto.TransactionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.BeginTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockDatabaseServiceClient_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) BeginTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_BeginTransaction_Call {
	return &MockDatabaseServiceClient_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_BeginTransaction_Call) Run(run func(ctx context.Context, in *proto.BeginTransactionRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.BeginTransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_BeginTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceClient_BeginTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_BeginTransaction_Call) RunAndReturn(run func(ctx context.Context, in *proto.BeginTransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error)) *MockDatabaseServiceClient_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) CommitTransaction(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) (*proto.TransactionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) *proto.TransactionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockDatabaseServiceClient_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) CommitTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_CommitTransaction_Call {
	return &MockDatabaseServiceClient_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_CommitTransaction_Call) Run(run func(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.TransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_CommitTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceClient_CommitTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_CommitTransaction_Call) RunAndReturn(run func(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error)) *MockDatabaseServiceClient_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) Execute(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption) (*proto.ExecuteResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *proto.ExecuteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) (*proto.ExecuteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) *proto.ExecuteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDatabaseServiceClient_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) Execute(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_Execute_Call {
	return &MockDatabaseServiceClient_Execute_Call{Call: _e.mock.On("Execute",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_Execute_Call) Run(run func(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.ExecuteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_Execute_Call) Return(executeResponse *proto.ExecuteResponse, err error) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Return(executeResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_Execute_Call) RunAndReturn(run func(ctx context.Context, in *proto.ExecuteRequest, opts ...grpc.CallOption) (*proto.ExecuteResponse, error)) *MockDatabaseServiceClient_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) GetStats(ctx context.Context, in *proto.StatsRequest, opts ...grpc.CallOption) (*proto.StatsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *proto.StatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest, ...grpc.CallOption) (*proto.StatsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest, ...grpc.CallOption) *proto.StatsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StatsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockDatabaseServiceClient_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) GetStats(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_GetStats_Call {
	return &MockDatabaseServiceClient_GetStats_Call{Call: _e.mock.On("GetStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_GetStats_Call) Run(run func(ctx context.Context, in *proto.StatsRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.StatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_GetStats_Call) Return(statsResponse *proto.StatsResponse, err error) *MockDatabaseServiceClient_GetStats_Call {
	_c.Call.Return(statsResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_GetStats_Call) RunAndReturn(run func(ctx context.Context, in *proto.StatsRequest, opts ...grpc.CallOption) (*proto.StatsResponse, error)) *MockDatabaseServiceClient_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) Ping(ctx context.Context, in *proto.PingRequest, opts ...grpc.CallOption) (*proto.PingResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *proto.PingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PingRequest, ...grpc.CallOption) (*proto.PingResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PingRequest, ...grpc.CallOption) *proto.PingResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PingRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDatabaseServiceClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_Ping_Call {
	return &MockDatabaseServiceClient_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_Ping_Call) Run(run func(ctx context.Context, in *proto.PingRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.PingRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_Ping_Call) Return(pingResponse *proto.PingResponse, err error) *MockDatabaseServiceClient_Ping_Call {
	_c.Call.Return(pingResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_Ping_Call) RunAndReturn(run func(ctx context.Context, in *proto.PingRequest, opts ...grpc.CallOption) (*proto.PingResponse, error)) *MockDatabaseServiceClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) Query(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.QueryResponse], error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 grpc.ServerStreamingClient[proto.QueryResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[proto.QueryResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) grpc.ServerStreamingClient[proto.QueryResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[proto.QueryResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabaseServiceClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) Query(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_Query_Call {
	return &MockDatabaseServiceClient_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_Query_Call) Run(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.QueryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_Query_Call) Return(serverStreamingClient grpc.ServerStreamingClient[proto.QueryResponse], err error) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *MockDatabaseServiceClient_Query_Call) RunAndReturn(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[proto.QueryResponse], error)) *MockDatabaseServiceClient_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) QueryRow(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (*proto.QueryRowResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *proto.QueryRowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) (*proto.QueryRowResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) *proto.QueryRowResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryRowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDatabaseServiceClient_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) QueryRow(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_QueryRow_Call {
	return &MockDatabaseServiceClient_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) Run(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.QueryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) Return(queryRowResponse *proto.QueryRowResponse, err error) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Return(queryRowResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_QueryRow_Call) RunAndReturn(run func(ctx context.Context, in *proto.QueryRequest, opts ...grpc.CallOption) (*proto.QueryRowResponse, error)) *MockDatabaseServiceClient_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTransaction provides a mock function for the type MockDatabaseServiceClient
func (_mock *MockDatabaseServiceClient) RollbackTransaction(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) (*proto.TransactionResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) *proto.TransactionResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TransactionRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceClient_RollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTransaction'
type MockDatabaseServiceClient_RollbackTransaction_Call struct {
	*mock.Call
}

// RollbackTransaction is a helper method to define mock.On call
//   - ctx
//   - in
//   - opts
func (_e *MockDatabaseServiceClient_Expecter) RollbackTransaction(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseServiceClient_RollbackTransaction_Call {
	return &MockDatabaseServiceClient_RollbackTransaction_Call{Call: _e.mock.On("RollbackTransaction",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseServiceClient_RollbackTransaction_Call) Run(run func(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption)) *MockDatabaseServiceClient_RollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]grpc.CallOption)
		run(args[0].(context.Context), args[1].(*proto.TransactionRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockDatabaseServiceClient_RollbackTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceClient_RollbackTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceClient_RollbackTransaction_Call) RunAndReturn(run func(ctx context.Context, in *proto.TransactionRequest, opts ...grpc.CallOption) (*proto.TransactionResponse, error)) *MockDatabaseServiceClient_RollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}
