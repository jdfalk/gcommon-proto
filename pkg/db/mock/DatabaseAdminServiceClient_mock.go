// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockDatabaseAdminServiceClient creates a new instance of MockDatabaseAdminServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseAdminServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseAdminServiceClient {
	mock := &MockDatabaseAdminServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseAdminServiceClient is an autogenerated mock type for the DatabaseAdminServiceClient type
type MockDatabaseAdminServiceClient struct {
	mock.Mock
}

type MockDatabaseAdminServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseAdminServiceClient) EXPECT() *MockDatabaseAdminServiceClient_Expecter {
	return &MockDatabaseAdminServiceClient_Expecter{mock: &_m.Mock}
}

// CreateDatabase provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) CreateDatabase(ctx context.Context, in *proto.CreateDatabaseRequest, opts ...grpc.CallOption) (*proto.CreateDatabaseResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 *proto.CreateDatabaseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDatabaseRequest, ...grpc.CallOption) (*proto.CreateDatabaseResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDatabaseRequest, ...grpc.CallOption) *proto.CreateDatabaseResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDatabaseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateDatabaseRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type MockDatabaseAdminServiceClient_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateDatabaseRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) CreateDatabase(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_CreateDatabase_Call {
	return &MockDatabaseAdminServiceClient_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_CreateDatabase_Call) Run(run func(ctx context.Context, in *proto.CreateDatabaseRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateDatabaseRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateDatabaseRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_CreateDatabase_Call) Return(createDatabaseResponse *proto.CreateDatabaseResponse, err error) *MockDatabaseAdminServiceClient_CreateDatabase_Call {
	_c.Call.Return(createDatabaseResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_CreateDatabase_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateDatabaseRequest, opts ...grpc.CallOption) (*proto.CreateDatabaseResponse, error)) *MockDatabaseAdminServiceClient_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSchema provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) CreateSchema(ctx context.Context, in *proto.CreateSchemaRequest, opts ...grpc.CallOption) (*proto.CreateSchemaResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 *proto.CreateSchemaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSchemaRequest, ...grpc.CallOption) (*proto.CreateSchemaResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSchemaRequest, ...grpc.CallOption) *proto.CreateSchemaResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateSchemaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateSchemaRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_CreateSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchema'
type MockDatabaseAdminServiceClient_CreateSchema_Call struct {
	*mock.Call
}

// CreateSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.CreateSchemaRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) CreateSchema(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_CreateSchema_Call {
	return &MockDatabaseAdminServiceClient_CreateSchema_Call{Call: _e.mock.On("CreateSchema",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_CreateSchema_Call) Run(run func(ctx context.Context, in *proto.CreateSchemaRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_CreateSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateSchemaRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_CreateSchema_Call) Return(createSchemaResponse *proto.CreateSchemaResponse, err error) *MockDatabaseAdminServiceClient_CreateSchema_Call {
	_c.Call.Return(createSchemaResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_CreateSchema_Call) RunAndReturn(run func(ctx context.Context, in *proto.CreateSchemaRequest, opts ...grpc.CallOption) (*proto.CreateSchemaResponse, error)) *MockDatabaseAdminServiceClient_CreateSchema_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabase provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) DropDatabase(ctx context.Context, in *proto.DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DropDatabase")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropDatabaseRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropDatabaseRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DropDatabaseRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_DropDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabase'
type MockDatabaseAdminServiceClient_DropDatabase_Call struct {
	*mock.Call
}

// DropDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DropDatabaseRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) DropDatabase(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_DropDatabase_Call {
	return &MockDatabaseAdminServiceClient_DropDatabase_Call{Call: _e.mock.On("DropDatabase",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_DropDatabase_Call) Run(run func(ctx context.Context, in *proto.DropDatabaseRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_DropDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DropDatabaseRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DropDatabaseRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_DropDatabase_Call) Return(empty *emptypb.Empty, err error) *MockDatabaseAdminServiceClient_DropDatabase_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_DropDatabase_Call) RunAndReturn(run func(ctx context.Context, in *proto.DropDatabaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockDatabaseAdminServiceClient_DropDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropSchema provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) DropSchema(ctx context.Context, in *proto.DropSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DropSchema")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropSchemaRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropSchemaRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DropSchemaRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_DropSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropSchema'
type MockDatabaseAdminServiceClient_DropSchema_Call struct {
	*mock.Call
}

// DropSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.DropSchemaRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) DropSchema(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_DropSchema_Call {
	return &MockDatabaseAdminServiceClient_DropSchema_Call{Call: _e.mock.On("DropSchema",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_DropSchema_Call) Run(run func(ctx context.Context, in *proto.DropSchemaRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_DropSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DropSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DropSchemaRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_DropSchema_Call) Return(empty *emptypb.Empty, err error) *MockDatabaseAdminServiceClient_DropSchema_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_DropSchema_Call) RunAndReturn(run func(ctx context.Context, in *proto.DropSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)) *MockDatabaseAdminServiceClient_DropSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInfo provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) GetDatabaseInfo(ctx context.Context, in *proto.GetDatabaseInfoRequest, opts ...grpc.CallOption) (*proto.GetDatabaseInfoResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInfo")
	}

	var r0 *proto.GetDatabaseInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDatabaseInfoRequest, ...grpc.CallOption) (*proto.GetDatabaseInfoResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDatabaseInfoRequest, ...grpc.CallOption) *proto.GetDatabaseInfoResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetDatabaseInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetDatabaseInfoRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_GetDatabaseInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInfo'
type MockDatabaseAdminServiceClient_GetDatabaseInfo_Call struct {
	*mock.Call
}

// GetDatabaseInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.GetDatabaseInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) GetDatabaseInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call {
	return &MockDatabaseAdminServiceClient_GetDatabaseInfo_Call{Call: _e.mock.On("GetDatabaseInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call) Run(run func(ctx context.Context, in *proto.GetDatabaseInfoRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetDatabaseInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetDatabaseInfoRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call) Return(getDatabaseInfoResponse *proto.GetDatabaseInfoResponse, err error) *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call {
	_c.Call.Return(getDatabaseInfoResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call) RunAndReturn(run func(ctx context.Context, in *proto.GetDatabaseInfoRequest, opts ...grpc.CallOption) (*proto.GetDatabaseInfoResponse, error)) *MockDatabaseAdminServiceClient_GetDatabaseInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) ListDatabases(ctx context.Context, in *proto.ListDatabasesRequest, opts ...grpc.CallOption) (*proto.ListDatabasesResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 *proto.ListDatabasesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDatabasesRequest, ...grpc.CallOption) (*proto.ListDatabasesResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDatabasesRequest, ...grpc.CallOption) *proto.ListDatabasesResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDatabasesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListDatabasesRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockDatabaseAdminServiceClient_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListDatabasesRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) ListDatabases(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_ListDatabases_Call {
	return &MockDatabaseAdminServiceClient_ListDatabases_Call{Call: _e.mock.On("ListDatabases",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_ListDatabases_Call) Run(run func(ctx context.Context, in *proto.ListDatabasesRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListDatabasesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListDatabasesRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_ListDatabases_Call) Return(listDatabasesResponse *proto.ListDatabasesResponse, err error) *MockDatabaseAdminServiceClient_ListDatabases_Call {
	_c.Call.Return(listDatabasesResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_ListDatabases_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListDatabasesRequest, opts ...grpc.CallOption) (*proto.ListDatabasesResponse, error)) *MockDatabaseAdminServiceClient_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchemas provides a mock function for the type MockDatabaseAdminServiceClient
func (_mock *MockDatabaseAdminServiceClient) ListSchemas(ctx context.Context, in *proto.ListSchemasRequest, opts ...grpc.CallOption) (*proto.ListSchemasResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListSchemas")
	}

	var r0 *proto.ListSchemasResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSchemasRequest, ...grpc.CallOption) (*proto.ListSchemasResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSchemasRequest, ...grpc.CallOption) *proto.ListSchemasResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListSchemasResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListSchemasRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceClient_ListSchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchemas'
type MockDatabaseAdminServiceClient_ListSchemas_Call struct {
	*mock.Call
}

// ListSchemas is a helper method to define mock.On call
//   - ctx context.Context
//   - in *proto.ListSchemasRequest
//   - opts ...grpc.CallOption
func (_e *MockDatabaseAdminServiceClient_Expecter) ListSchemas(ctx interface{}, in interface{}, opts ...interface{}) *MockDatabaseAdminServiceClient_ListSchemas_Call {
	return &MockDatabaseAdminServiceClient_ListSchemas_Call{Call: _e.mock.On("ListSchemas",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockDatabaseAdminServiceClient_ListSchemas_Call) Run(run func(ctx context.Context, in *proto.ListSchemasRequest, opts ...grpc.CallOption)) *MockDatabaseAdminServiceClient_ListSchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListSchemasRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListSchemasRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceClient_ListSchemas_Call) Return(listSchemasResponse *proto.ListSchemasResponse, err error) *MockDatabaseAdminServiceClient_ListSchemas_Call {
	_c.Call.Return(listSchemasResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceClient_ListSchemas_Call) RunAndReturn(run func(ctx context.Context, in *proto.ListSchemasRequest, opts ...grpc.CallOption) (*proto.ListSchemasResponse, error)) *MockDatabaseAdminServiceClient_ListSchemas_Call {
	_c.Call.Return(run)
	return _c
}
