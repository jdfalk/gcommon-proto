// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"
)

// NewMockDatabaseAdminServiceServer creates a new instance of MockDatabaseAdminServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseAdminServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseAdminServiceServer {
	mock := &MockDatabaseAdminServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseAdminServiceServer is an autogenerated mock type for the DatabaseAdminServiceServer type
type MockDatabaseAdminServiceServer struct {
	mock.Mock
}

type MockDatabaseAdminServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseAdminServiceServer) EXPECT() *MockDatabaseAdminServiceServer_Expecter {
	return &MockDatabaseAdminServiceServer_Expecter{mock: &_m.Mock}
}

// CreateDatabase provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) CreateDatabase(context1 context.Context, createDatabaseRequest *proto.CreateDatabaseRequest) (*proto.CreateDatabaseResponse, error) {
	ret := _mock.Called(context1, createDatabaseRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 *proto.CreateDatabaseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDatabaseRequest) (*proto.CreateDatabaseResponse, error)); ok {
		return returnFunc(context1, createDatabaseRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateDatabaseRequest) *proto.CreateDatabaseResponse); ok {
		r0 = returnFunc(context1, createDatabaseRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateDatabaseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateDatabaseRequest) error); ok {
		r1 = returnFunc(context1, createDatabaseRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type MockDatabaseAdminServiceServer_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//   - context1 context.Context
//   - createDatabaseRequest *proto.CreateDatabaseRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) CreateDatabase(context1 interface{}, createDatabaseRequest interface{}) *MockDatabaseAdminServiceServer_CreateDatabase_Call {
	return &MockDatabaseAdminServiceServer_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase", context1, createDatabaseRequest)}
}

func (_c *MockDatabaseAdminServiceServer_CreateDatabase_Call) Run(run func(context1 context.Context, createDatabaseRequest *proto.CreateDatabaseRequest)) *MockDatabaseAdminServiceServer_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateDatabaseRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateDatabaseRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_CreateDatabase_Call) Return(createDatabaseResponse *proto.CreateDatabaseResponse, err error) *MockDatabaseAdminServiceServer_CreateDatabase_Call {
	_c.Call.Return(createDatabaseResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_CreateDatabase_Call) RunAndReturn(run func(context1 context.Context, createDatabaseRequest *proto.CreateDatabaseRequest) (*proto.CreateDatabaseResponse, error)) *MockDatabaseAdminServiceServer_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSchema provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) CreateSchema(context1 context.Context, createSchemaRequest *proto.CreateSchemaRequest) (*proto.CreateSchemaResponse, error) {
	ret := _mock.Called(context1, createSchemaRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 *proto.CreateSchemaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSchemaRequest) (*proto.CreateSchemaResponse, error)); ok {
		return returnFunc(context1, createSchemaRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.CreateSchemaRequest) *proto.CreateSchemaResponse); ok {
		r0 = returnFunc(context1, createSchemaRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateSchemaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.CreateSchemaRequest) error); ok {
		r1 = returnFunc(context1, createSchemaRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_CreateSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchema'
type MockDatabaseAdminServiceServer_CreateSchema_Call struct {
	*mock.Call
}

// CreateSchema is a helper method to define mock.On call
//   - context1 context.Context
//   - createSchemaRequest *proto.CreateSchemaRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) CreateSchema(context1 interface{}, createSchemaRequest interface{}) *MockDatabaseAdminServiceServer_CreateSchema_Call {
	return &MockDatabaseAdminServiceServer_CreateSchema_Call{Call: _e.mock.On("CreateSchema", context1, createSchemaRequest)}
}

func (_c *MockDatabaseAdminServiceServer_CreateSchema_Call) Run(run func(context1 context.Context, createSchemaRequest *proto.CreateSchemaRequest)) *MockDatabaseAdminServiceServer_CreateSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.CreateSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.CreateSchemaRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_CreateSchema_Call) Return(createSchemaResponse *proto.CreateSchemaResponse, err error) *MockDatabaseAdminServiceServer_CreateSchema_Call {
	_c.Call.Return(createSchemaResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_CreateSchema_Call) RunAndReturn(run func(context1 context.Context, createSchemaRequest *proto.CreateSchemaRequest) (*proto.CreateSchemaResponse, error)) *MockDatabaseAdminServiceServer_CreateSchema_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabase provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) DropDatabase(context1 context.Context, dropDatabaseRequest *proto.DropDatabaseRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, dropDatabaseRequest)

	if len(ret) == 0 {
		panic("no return value specified for DropDatabase")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropDatabaseRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, dropDatabaseRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropDatabaseRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, dropDatabaseRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DropDatabaseRequest) error); ok {
		r1 = returnFunc(context1, dropDatabaseRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_DropDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabase'
type MockDatabaseAdminServiceServer_DropDatabase_Call struct {
	*mock.Call
}

// DropDatabase is a helper method to define mock.On call
//   - context1 context.Context
//   - dropDatabaseRequest *proto.DropDatabaseRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) DropDatabase(context1 interface{}, dropDatabaseRequest interface{}) *MockDatabaseAdminServiceServer_DropDatabase_Call {
	return &MockDatabaseAdminServiceServer_DropDatabase_Call{Call: _e.mock.On("DropDatabase", context1, dropDatabaseRequest)}
}

func (_c *MockDatabaseAdminServiceServer_DropDatabase_Call) Run(run func(context1 context.Context, dropDatabaseRequest *proto.DropDatabaseRequest)) *MockDatabaseAdminServiceServer_DropDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DropDatabaseRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DropDatabaseRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_DropDatabase_Call) Return(empty *emptypb.Empty, err error) *MockDatabaseAdminServiceServer_DropDatabase_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_DropDatabase_Call) RunAndReturn(run func(context1 context.Context, dropDatabaseRequest *proto.DropDatabaseRequest) (*emptypb.Empty, error)) *MockDatabaseAdminServiceServer_DropDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropSchema provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) DropSchema(context1 context.Context, dropSchemaRequest *proto.DropSchemaRequest) (*emptypb.Empty, error) {
	ret := _mock.Called(context1, dropSchemaRequest)

	if len(ret) == 0 {
		panic("no return value specified for DropSchema")
	}

	var r0 *emptypb.Empty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropSchemaRequest) (*emptypb.Empty, error)); ok {
		return returnFunc(context1, dropSchemaRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.DropSchemaRequest) *emptypb.Empty); ok {
		r0 = returnFunc(context1, dropSchemaRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.DropSchemaRequest) error); ok {
		r1 = returnFunc(context1, dropSchemaRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_DropSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropSchema'
type MockDatabaseAdminServiceServer_DropSchema_Call struct {
	*mock.Call
}

// DropSchema is a helper method to define mock.On call
//   - context1 context.Context
//   - dropSchemaRequest *proto.DropSchemaRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) DropSchema(context1 interface{}, dropSchemaRequest interface{}) *MockDatabaseAdminServiceServer_DropSchema_Call {
	return &MockDatabaseAdminServiceServer_DropSchema_Call{Call: _e.mock.On("DropSchema", context1, dropSchemaRequest)}
}

func (_c *MockDatabaseAdminServiceServer_DropSchema_Call) Run(run func(context1 context.Context, dropSchemaRequest *proto.DropSchemaRequest)) *MockDatabaseAdminServiceServer_DropSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.DropSchemaRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.DropSchemaRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_DropSchema_Call) Return(empty *emptypb.Empty, err error) *MockDatabaseAdminServiceServer_DropSchema_Call {
	_c.Call.Return(empty, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_DropSchema_Call) RunAndReturn(run func(context1 context.Context, dropSchemaRequest *proto.DropSchemaRequest) (*emptypb.Empty, error)) *MockDatabaseAdminServiceServer_DropSchema_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseInfo provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) GetDatabaseInfo(context1 context.Context, getDatabaseInfoRequest *proto.GetDatabaseInfoRequest) (*proto.GetDatabaseInfoResponse, error) {
	ret := _mock.Called(context1, getDatabaseInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseInfo")
	}

	var r0 *proto.GetDatabaseInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDatabaseInfoRequest) (*proto.GetDatabaseInfoResponse, error)); ok {
		return returnFunc(context1, getDatabaseInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetDatabaseInfoRequest) *proto.GetDatabaseInfoResponse); ok {
		r0 = returnFunc(context1, getDatabaseInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetDatabaseInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetDatabaseInfoRequest) error); ok {
		r1 = returnFunc(context1, getDatabaseInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_GetDatabaseInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseInfo'
type MockDatabaseAdminServiceServer_GetDatabaseInfo_Call struct {
	*mock.Call
}

// GetDatabaseInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getDatabaseInfoRequest *proto.GetDatabaseInfoRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) GetDatabaseInfo(context1 interface{}, getDatabaseInfoRequest interface{}) *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call {
	return &MockDatabaseAdminServiceServer_GetDatabaseInfo_Call{Call: _e.mock.On("GetDatabaseInfo", context1, getDatabaseInfoRequest)}
}

func (_c *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call) Run(run func(context1 context.Context, getDatabaseInfoRequest *proto.GetDatabaseInfoRequest)) *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetDatabaseInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetDatabaseInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call) Return(getDatabaseInfoResponse *proto.GetDatabaseInfoResponse, err error) *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call {
	_c.Call.Return(getDatabaseInfoResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call) RunAndReturn(run func(context1 context.Context, getDatabaseInfoRequest *proto.GetDatabaseInfoRequest) (*proto.GetDatabaseInfoResponse, error)) *MockDatabaseAdminServiceServer_GetDatabaseInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) ListDatabases(context1 context.Context, listDatabasesRequest *proto.ListDatabasesRequest) (*proto.ListDatabasesResponse, error) {
	ret := _mock.Called(context1, listDatabasesRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 *proto.ListDatabasesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDatabasesRequest) (*proto.ListDatabasesResponse, error)); ok {
		return returnFunc(context1, listDatabasesRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListDatabasesRequest) *proto.ListDatabasesResponse); ok {
		r0 = returnFunc(context1, listDatabasesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListDatabasesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListDatabasesRequest) error); ok {
		r1 = returnFunc(context1, listDatabasesRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockDatabaseAdminServiceServer_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - context1 context.Context
//   - listDatabasesRequest *proto.ListDatabasesRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) ListDatabases(context1 interface{}, listDatabasesRequest interface{}) *MockDatabaseAdminServiceServer_ListDatabases_Call {
	return &MockDatabaseAdminServiceServer_ListDatabases_Call{Call: _e.mock.On("ListDatabases", context1, listDatabasesRequest)}
}

func (_c *MockDatabaseAdminServiceServer_ListDatabases_Call) Run(run func(context1 context.Context, listDatabasesRequest *proto.ListDatabasesRequest)) *MockDatabaseAdminServiceServer_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListDatabasesRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListDatabasesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_ListDatabases_Call) Return(listDatabasesResponse *proto.ListDatabasesResponse, err error) *MockDatabaseAdminServiceServer_ListDatabases_Call {
	_c.Call.Return(listDatabasesResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_ListDatabases_Call) RunAndReturn(run func(context1 context.Context, listDatabasesRequest *proto.ListDatabasesRequest) (*proto.ListDatabasesResponse, error)) *MockDatabaseAdminServiceServer_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchemas provides a mock function for the type MockDatabaseAdminServiceServer
func (_mock *MockDatabaseAdminServiceServer) ListSchemas(context1 context.Context, listSchemasRequest *proto.ListSchemasRequest) (*proto.ListSchemasResponse, error) {
	ret := _mock.Called(context1, listSchemasRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemas")
	}

	var r0 *proto.ListSchemasResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSchemasRequest) (*proto.ListSchemasResponse, error)); ok {
		return returnFunc(context1, listSchemasRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ListSchemasRequest) *proto.ListSchemasResponse); ok {
		r0 = returnFunc(context1, listSchemasRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ListSchemasResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ListSchemasRequest) error); ok {
		r1 = returnFunc(context1, listSchemasRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseAdminServiceServer_ListSchemas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchemas'
type MockDatabaseAdminServiceServer_ListSchemas_Call struct {
	*mock.Call
}

// ListSchemas is a helper method to define mock.On call
//   - context1 context.Context
//   - listSchemasRequest *proto.ListSchemasRequest
func (_e *MockDatabaseAdminServiceServer_Expecter) ListSchemas(context1 interface{}, listSchemasRequest interface{}) *MockDatabaseAdminServiceServer_ListSchemas_Call {
	return &MockDatabaseAdminServiceServer_ListSchemas_Call{Call: _e.mock.On("ListSchemas", context1, listSchemasRequest)}
}

func (_c *MockDatabaseAdminServiceServer_ListSchemas_Call) Run(run func(context1 context.Context, listSchemasRequest *proto.ListSchemasRequest)) *MockDatabaseAdminServiceServer_ListSchemas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ListSchemasRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ListSchemasRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseAdminServiceServer_ListSchemas_Call) Return(listSchemasResponse *proto.ListSchemasResponse, err error) *MockDatabaseAdminServiceServer_ListSchemas_Call {
	_c.Call.Return(listSchemasResponse, err)
	return _c
}

func (_c *MockDatabaseAdminServiceServer_ListSchemas_Call) RunAndReturn(run func(context1 context.Context, listSchemasRequest *proto.ListSchemasRequest) (*proto.ListSchemasResponse, error)) *MockDatabaseAdminServiceServer_ListSchemas_Call {
	_c.Call.Return(run)
	return _c
}
