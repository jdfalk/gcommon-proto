// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	"github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabaseServiceServer creates a new instance of MockDatabaseServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseServiceServer {
	mock := &MockDatabaseServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseServiceServer is an autogenerated mock type for the DatabaseServiceServer type
type MockDatabaseServiceServer struct {
	mock.Mock
}

type MockDatabaseServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseServiceServer) EXPECT() *MockDatabaseServiceServer_Expecter {
	return &MockDatabaseServiceServer_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) Execute(context1 context.Context, executeRequest *proto.ExecuteRequest) (*proto.ExecuteResponse, error) {
	ret := _mock.Called(context1, executeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *proto.ExecuteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest) (*proto.ExecuteResponse, error)); ok {
		return returnFunc(context1, executeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest) *proto.ExecuteResponse); ok {
		r0 = returnFunc(context1, executeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteRequest) error); ok {
		r1 = returnFunc(context1, executeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDatabaseServiceServer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - context1 context.Context
//   - executeRequest *proto.ExecuteRequest
func (_e *MockDatabaseServiceServer_Expecter) Execute(context1 interface{}, executeRequest interface{}) *MockDatabaseServiceServer_Execute_Call {
	return &MockDatabaseServiceServer_Execute_Call{Call: _e.mock.On("Execute", context1, executeRequest)}
}

func (_c *MockDatabaseServiceServer_Execute_Call) Run(run func(context1 context.Context, executeRequest *proto.ExecuteRequest)) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExecuteRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExecuteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_Execute_Call) Return(executeResponse *proto.ExecuteResponse, err error) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Return(executeResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_Execute_Call) RunAndReturn(run func(context1 context.Context, executeRequest *proto.ExecuteRequest) (*proto.ExecuteResponse, error)) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteBatch provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) ExecuteBatch(context1 context.Context, executeBatchRequest *proto.ExecuteBatchRequest) (*proto.ExecuteBatchResponse, error) {
	ret := _mock.Called(context1, executeBatchRequest)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteBatch")
	}

	var r0 *proto.ExecuteBatchResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteBatchRequest) (*proto.ExecuteBatchResponse, error)); ok {
		return returnFunc(context1, executeBatchRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteBatchRequest) *proto.ExecuteBatchResponse); ok {
		r0 = returnFunc(context1, executeBatchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteBatchResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteBatchRequest) error); ok {
		r1 = returnFunc(context1, executeBatchRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_ExecuteBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteBatch'
type MockDatabaseServiceServer_ExecuteBatch_Call struct {
	*mock.Call
}

// ExecuteBatch is a helper method to define mock.On call
//   - context1 context.Context
//   - executeBatchRequest *proto.ExecuteBatchRequest
func (_e *MockDatabaseServiceServer_Expecter) ExecuteBatch(context1 interface{}, executeBatchRequest interface{}) *MockDatabaseServiceServer_ExecuteBatch_Call {
	return &MockDatabaseServiceServer_ExecuteBatch_Call{Call: _e.mock.On("ExecuteBatch", context1, executeBatchRequest)}
}

func (_c *MockDatabaseServiceServer_ExecuteBatch_Call) Run(run func(context1 context.Context, executeBatchRequest *proto.ExecuteBatchRequest)) *MockDatabaseServiceServer_ExecuteBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.ExecuteBatchRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.ExecuteBatchRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_ExecuteBatch_Call) Return(executeBatchResponse *proto.ExecuteBatchResponse, err error) *MockDatabaseServiceServer_ExecuteBatch_Call {
	_c.Call.Return(executeBatchResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_ExecuteBatch_Call) RunAndReturn(run func(context1 context.Context, executeBatchRequest *proto.ExecuteBatchRequest) (*proto.ExecuteBatchResponse, error)) *MockDatabaseServiceServer_ExecuteBatch_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectionInfo provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) GetConnectionInfo(context1 context.Context, getConnectionInfoRequest *proto.GetConnectionInfoRequest) (*proto.GetConnectionInfoResponse, error) {
	ret := _mock.Called(context1, getConnectionInfoRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionInfo")
	}

	var r0 *proto.GetConnectionInfoResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConnectionInfoRequest) (*proto.GetConnectionInfoResponse, error)); ok {
		return returnFunc(context1, getConnectionInfoRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.GetConnectionInfoRequest) *proto.GetConnectionInfoResponse); ok {
		r0 = returnFunc(context1, getConnectionInfoRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetConnectionInfoResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.GetConnectionInfoRequest) error); ok {
		r1 = returnFunc(context1, getConnectionInfoRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_GetConnectionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectionInfo'
type MockDatabaseServiceServer_GetConnectionInfo_Call struct {
	*mock.Call
}

// GetConnectionInfo is a helper method to define mock.On call
//   - context1 context.Context
//   - getConnectionInfoRequest *proto.GetConnectionInfoRequest
func (_e *MockDatabaseServiceServer_Expecter) GetConnectionInfo(context1 interface{}, getConnectionInfoRequest interface{}) *MockDatabaseServiceServer_GetConnectionInfo_Call {
	return &MockDatabaseServiceServer_GetConnectionInfo_Call{Call: _e.mock.On("GetConnectionInfo", context1, getConnectionInfoRequest)}
}

func (_c *MockDatabaseServiceServer_GetConnectionInfo_Call) Run(run func(context1 context.Context, getConnectionInfoRequest *proto.GetConnectionInfoRequest)) *MockDatabaseServiceServer_GetConnectionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.GetConnectionInfoRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.GetConnectionInfoRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_GetConnectionInfo_Call) Return(getConnectionInfoResponse *proto.GetConnectionInfoResponse, err error) *MockDatabaseServiceServer_GetConnectionInfo_Call {
	_c.Call.Return(getConnectionInfoResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_GetConnectionInfo_Call) RunAndReturn(run func(context1 context.Context, getConnectionInfoRequest *proto.GetConnectionInfoRequest) (*proto.GetConnectionInfoResponse, error)) *MockDatabaseServiceServer_GetConnectionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) HealthCheck(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error) {
	ret := _mock.Called(context1, healthCheckRequest)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 *proto.HealthCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)); ok {
		return returnFunc(context1, healthCheckRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.HealthCheckRequest) *proto.HealthCheckResponse); ok {
		r0 = returnFunc(context1, healthCheckRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.HealthCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.HealthCheckRequest) error); ok {
		r1 = returnFunc(context1, healthCheckRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockDatabaseServiceServer_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - context1 context.Context
//   - healthCheckRequest *proto.HealthCheckRequest
func (_e *MockDatabaseServiceServer_Expecter) HealthCheck(context1 interface{}, healthCheckRequest interface{}) *MockDatabaseServiceServer_HealthCheck_Call {
	return &MockDatabaseServiceServer_HealthCheck_Call{Call: _e.mock.On("HealthCheck", context1, healthCheckRequest)}
}

func (_c *MockDatabaseServiceServer_HealthCheck_Call) Run(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest)) *MockDatabaseServiceServer_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.HealthCheckRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.HealthCheckRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_HealthCheck_Call) Return(healthCheckResponse *proto.HealthCheckResponse, err error) *MockDatabaseServiceServer_HealthCheck_Call {
	_c.Call.Return(healthCheckResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_HealthCheck_Call) RunAndReturn(run func(context1 context.Context, healthCheckRequest *proto.HealthCheckRequest) (*proto.HealthCheckResponse, error)) *MockDatabaseServiceServer_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) Query(context1 context.Context, queryRequest *proto.QueryRequest) (*proto.QueryResponse, error) {
	ret := _mock.Called(context1, queryRequest)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *proto.QueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest) (*proto.QueryResponse, error)); ok {
		return returnFunc(context1, queryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest) *proto.QueryResponse); ok {
		r0 = returnFunc(context1, queryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRequest) error); ok {
		r1 = returnFunc(context1, queryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabaseServiceServer_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1 context.Context
//   - queryRequest *proto.QueryRequest
func (_e *MockDatabaseServiceServer_Expecter) Query(context1 interface{}, queryRequest interface{}) *MockDatabaseServiceServer_Query_Call {
	return &MockDatabaseServiceServer_Query_Call{Call: _e.mock.On("Query", context1, queryRequest)}
}

func (_c *MockDatabaseServiceServer_Query_Call) Run(run func(context1 context.Context, queryRequest *proto.QueryRequest)) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_Query_Call) Return(queryResponse *proto.QueryResponse, err error) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Return(queryResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_Query_Call) RunAndReturn(run func(context1 context.Context, queryRequest *proto.QueryRequest) (*proto.QueryResponse, error)) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) QueryRow(context1 context.Context, queryRowRequest *proto.QueryRowRequest) (*proto.QueryRowResponse, error) {
	ret := _mock.Called(context1, queryRowRequest)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *proto.QueryRowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRowRequest) (*proto.QueryRowResponse, error)); ok {
		return returnFunc(context1, queryRowRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRowRequest) *proto.QueryRowResponse); ok {
		r0 = returnFunc(context1, queryRowRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryRowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRowRequest) error); ok {
		r1 = returnFunc(context1, queryRowRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDatabaseServiceServer_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - context1 context.Context
//   - queryRowRequest *proto.QueryRowRequest
func (_e *MockDatabaseServiceServer_Expecter) QueryRow(context1 interface{}, queryRowRequest interface{}) *MockDatabaseServiceServer_QueryRow_Call {
	return &MockDatabaseServiceServer_QueryRow_Call{Call: _e.mock.On("QueryRow", context1, queryRowRequest)}
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) Run(run func(context1 context.Context, queryRowRequest *proto.QueryRowRequest)) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *proto.QueryRowRequest
		if args[1] != nil {
			arg1 = args[1].(*proto.QueryRowRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) Return(queryRowResponse *proto.QueryRowResponse, err error) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Return(queryRowResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) RunAndReturn(run func(context1 context.Context, queryRowRequest *proto.QueryRowRequest) (*proto.QueryRowResponse, error)) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}
