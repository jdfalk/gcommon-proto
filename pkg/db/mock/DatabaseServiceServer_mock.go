// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	proto "github.com/jdfalk/gcommon/pkg/db/proto"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockDatabaseServiceServer creates a new instance of MockDatabaseServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabaseServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabaseServiceServer {
	mock := &MockDatabaseServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabaseServiceServer is an autogenerated mock type for the DatabaseServiceServer type
type MockDatabaseServiceServer struct {
	mock.Mock
}

type MockDatabaseServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabaseServiceServer) EXPECT() *MockDatabaseServiceServer_Expecter {
	return &MockDatabaseServiceServer_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) BeginTransaction(context1 context.Context, beginTransactionRequest *proto.BeginTransactionRequest) (*proto.TransactionResponse, error) {
	ret := _mock.Called(context1, beginTransactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.BeginTransactionRequest) (*proto.TransactionResponse, error)); ok {
		return returnFunc(context1, beginTransactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.BeginTransactionRequest) *proto.TransactionResponse); ok {
		r0 = returnFunc(context1, beginTransactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.BeginTransactionRequest) error); ok {
		r1 = returnFunc(context1, beginTransactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockDatabaseServiceServer_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - context1
//   - beginTransactionRequest
func (_e *MockDatabaseServiceServer_Expecter) BeginTransaction(context1 interface{}, beginTransactionRequest interface{}) *MockDatabaseServiceServer_BeginTransaction_Call {
	return &MockDatabaseServiceServer_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", context1, beginTransactionRequest)}
}

func (_c *MockDatabaseServiceServer_BeginTransaction_Call) Run(run func(context1 context.Context, beginTransactionRequest *proto.BeginTransactionRequest)) *MockDatabaseServiceServer_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.BeginTransactionRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_BeginTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceServer_BeginTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_BeginTransaction_Call) RunAndReturn(run func(context1 context.Context, beginTransactionRequest *proto.BeginTransactionRequest) (*proto.TransactionResponse, error)) *MockDatabaseServiceServer_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) CommitTransaction(context1 context.Context, transactionRequest *proto.TransactionRequest) (*proto.TransactionResponse, error) {
	ret := _mock.Called(context1, transactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) (*proto.TransactionResponse, error)); ok {
		return returnFunc(context1, transactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) *proto.TransactionResponse); ok {
		r0 = returnFunc(context1, transactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TransactionRequest) error); ok {
		r1 = returnFunc(context1, transactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockDatabaseServiceServer_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - context1
//   - transactionRequest
func (_e *MockDatabaseServiceServer_Expecter) CommitTransaction(context1 interface{}, transactionRequest interface{}) *MockDatabaseServiceServer_CommitTransaction_Call {
	return &MockDatabaseServiceServer_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", context1, transactionRequest)}
}

func (_c *MockDatabaseServiceServer_CommitTransaction_Call) Run(run func(context1 context.Context, transactionRequest *proto.TransactionRequest)) *MockDatabaseServiceServer_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.TransactionRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_CommitTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceServer_CommitTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_CommitTransaction_Call) RunAndReturn(run func(context1 context.Context, transactionRequest *proto.TransactionRequest) (*proto.TransactionResponse, error)) *MockDatabaseServiceServer_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) Execute(context1 context.Context, executeRequest *proto.ExecuteRequest) (*proto.ExecuteResponse, error) {
	ret := _mock.Called(context1, executeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *proto.ExecuteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest) (*proto.ExecuteResponse, error)); ok {
		return returnFunc(context1, executeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.ExecuteRequest) *proto.ExecuteResponse); ok {
		r0 = returnFunc(context1, executeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ExecuteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.ExecuteRequest) error); ok {
		r1 = returnFunc(context1, executeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockDatabaseServiceServer_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - context1
//   - executeRequest
func (_e *MockDatabaseServiceServer_Expecter) Execute(context1 interface{}, executeRequest interface{}) *MockDatabaseServiceServer_Execute_Call {
	return &MockDatabaseServiceServer_Execute_Call{Call: _e.mock.On("Execute", context1, executeRequest)}
}

func (_c *MockDatabaseServiceServer_Execute_Call) Run(run func(context1 context.Context, executeRequest *proto.ExecuteRequest)) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ExecuteRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_Execute_Call) Return(executeResponse *proto.ExecuteResponse, err error) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Return(executeResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_Execute_Call) RunAndReturn(run func(context1 context.Context, executeRequest *proto.ExecuteRequest) (*proto.ExecuteResponse, error)) *MockDatabaseServiceServer_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) GetStats(context1 context.Context, statsRequest *proto.StatsRequest) (*proto.StatsResponse, error) {
	ret := _mock.Called(context1, statsRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *proto.StatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest) (*proto.StatsResponse, error)); ok {
		return returnFunc(context1, statsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.StatsRequest) *proto.StatsResponse); ok {
		r0 = returnFunc(context1, statsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.StatsRequest) error); ok {
		r1 = returnFunc(context1, statsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockDatabaseServiceServer_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
//   - context1
//   - statsRequest
func (_e *MockDatabaseServiceServer_Expecter) GetStats(context1 interface{}, statsRequest interface{}) *MockDatabaseServiceServer_GetStats_Call {
	return &MockDatabaseServiceServer_GetStats_Call{Call: _e.mock.On("GetStats", context1, statsRequest)}
}

func (_c *MockDatabaseServiceServer_GetStats_Call) Run(run func(context1 context.Context, statsRequest *proto.StatsRequest)) *MockDatabaseServiceServer_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.StatsRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_GetStats_Call) Return(statsResponse *proto.StatsResponse, err error) *MockDatabaseServiceServer_GetStats_Call {
	_c.Call.Return(statsResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_GetStats_Call) RunAndReturn(run func(context1 context.Context, statsRequest *proto.StatsRequest) (*proto.StatsResponse, error)) *MockDatabaseServiceServer_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) Ping(context1 context.Context, pingRequest *proto.PingRequest) (*proto.PingResponse, error) {
	ret := _mock.Called(context1, pingRequest)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *proto.PingResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PingRequest) (*proto.PingResponse, error)); ok {
		return returnFunc(context1, pingRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.PingRequest) *proto.PingResponse); ok {
		r0 = returnFunc(context1, pingRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.PingResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.PingRequest) error); ok {
		r1 = returnFunc(context1, pingRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockDatabaseServiceServer_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - context1
//   - pingRequest
func (_e *MockDatabaseServiceServer_Expecter) Ping(context1 interface{}, pingRequest interface{}) *MockDatabaseServiceServer_Ping_Call {
	return &MockDatabaseServiceServer_Ping_Call{Call: _e.mock.On("Ping", context1, pingRequest)}
}

func (_c *MockDatabaseServiceServer_Ping_Call) Run(run func(context1 context.Context, pingRequest *proto.PingRequest)) *MockDatabaseServiceServer_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.PingRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_Ping_Call) Return(pingResponse *proto.PingResponse, err error) *MockDatabaseServiceServer_Ping_Call {
	_c.Call.Return(pingResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_Ping_Call) RunAndReturn(run func(context1 context.Context, pingRequest *proto.PingRequest) (*proto.PingResponse, error)) *MockDatabaseServiceServer_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) Query(queryRequest *proto.QueryRequest, serverStreamingServer grpc.ServerStreamingServer[proto.QueryResponse]) error {
	ret := _mock.Called(queryRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*proto.QueryRequest, grpc.ServerStreamingServer[proto.QueryResponse]) error); ok {
		r0 = returnFunc(queryRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDatabaseServiceServer_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDatabaseServiceServer_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - queryRequest
//   - serverStreamingServer
func (_e *MockDatabaseServiceServer_Expecter) Query(queryRequest interface{}, serverStreamingServer interface{}) *MockDatabaseServiceServer_Query_Call {
	return &MockDatabaseServiceServer_Query_Call{Call: _e.mock.On("Query", queryRequest, serverStreamingServer)}
}

func (_c *MockDatabaseServiceServer_Query_Call) Run(run func(queryRequest *proto.QueryRequest, serverStreamingServer grpc.ServerStreamingServer[proto.QueryResponse])) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.QueryRequest), args[1].(grpc.ServerStreamingServer[proto.QueryResponse]))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_Query_Call) Return(err error) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDatabaseServiceServer_Query_Call) RunAndReturn(run func(queryRequest *proto.QueryRequest, serverStreamingServer grpc.ServerStreamingServer[proto.QueryResponse]) error) *MockDatabaseServiceServer_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) QueryRow(context1 context.Context, queryRequest *proto.QueryRequest) (*proto.QueryRowResponse, error) {
	ret := _mock.Called(context1, queryRequest)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *proto.QueryRowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest) (*proto.QueryRowResponse, error)); ok {
		return returnFunc(context1, queryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.QueryRequest) *proto.QueryRowResponse); ok {
		r0 = returnFunc(context1, queryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QueryRowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.QueryRequest) error); ok {
		r1 = returnFunc(context1, queryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockDatabaseServiceServer_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - context1
//   - queryRequest
func (_e *MockDatabaseServiceServer_Expecter) QueryRow(context1 interface{}, queryRequest interface{}) *MockDatabaseServiceServer_QueryRow_Call {
	return &MockDatabaseServiceServer_QueryRow_Call{Call: _e.mock.On("QueryRow", context1, queryRequest)}
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) Run(run func(context1 context.Context, queryRequest *proto.QueryRequest)) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.QueryRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) Return(queryRowResponse *proto.QueryRowResponse, err error) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Return(queryRowResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_QueryRow_Call) RunAndReturn(run func(context1 context.Context, queryRequest *proto.QueryRequest) (*proto.QueryRowResponse, error)) *MockDatabaseServiceServer_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTransaction provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) RollbackTransaction(context1 context.Context, transactionRequest *proto.TransactionRequest) (*proto.TransactionResponse, error) {
	ret := _mock.Called(context1, transactionRequest)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 *proto.TransactionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) (*proto.TransactionResponse, error)); ok {
		return returnFunc(context1, transactionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *proto.TransactionRequest) *proto.TransactionResponse); ok {
		r0 = returnFunc(context1, transactionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TransactionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *proto.TransactionRequest) error); ok {
		r1 = returnFunc(context1, transactionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDatabaseServiceServer_RollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTransaction'
type MockDatabaseServiceServer_RollbackTransaction_Call struct {
	*mock.Call
}

// RollbackTransaction is a helper method to define mock.On call
//   - context1
//   - transactionRequest
func (_e *MockDatabaseServiceServer_Expecter) RollbackTransaction(context1 interface{}, transactionRequest interface{}) *MockDatabaseServiceServer_RollbackTransaction_Call {
	return &MockDatabaseServiceServer_RollbackTransaction_Call{Call: _e.mock.On("RollbackTransaction", context1, transactionRequest)}
}

func (_c *MockDatabaseServiceServer_RollbackTransaction_Call) Run(run func(context1 context.Context, transactionRequest *proto.TransactionRequest)) *MockDatabaseServiceServer_RollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.TransactionRequest))
	})
	return _c
}

func (_c *MockDatabaseServiceServer_RollbackTransaction_Call) Return(transactionResponse *proto.TransactionResponse, err error) *MockDatabaseServiceServer_RollbackTransaction_Call {
	_c.Call.Return(transactionResponse, err)
	return _c
}

func (_c *MockDatabaseServiceServer_RollbackTransaction_Call) RunAndReturn(run func(context1 context.Context, transactionRequest *proto.TransactionRequest) (*proto.TransactionResponse, error)) *MockDatabaseServiceServer_RollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedDatabaseServiceServer provides a mock function for the type MockDatabaseServiceServer
func (_mock *MockDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {
	_mock.Called()
	return
}

// MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedDatabaseServiceServer'
type MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedDatabaseServiceServer is a helper method to define mock.On call
func (_e *MockDatabaseServiceServer_Expecter) mustEmbedUnimplementedDatabaseServiceServer() *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call {
	return &MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedDatabaseServiceServer")}
}

func (_c *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call) Run(run func()) *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call) Return() *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call) RunAndReturn(run func()) *MockDatabaseServiceServer_mustEmbedUnimplementedDatabaseServiceServer_Call {
	_c.Run(run)
	return _c
}
