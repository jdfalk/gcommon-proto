{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Buf Generate with Output",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"buf",
				"generate"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Generate Module",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"buf",
				"generate",
				"--module",
				"${input:module}"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Lint with Output",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"buf",
				"lint"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Lint Module",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"buf",
				"lint",
				"--module",
				"${input:module}"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Add All",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"add"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Add Selective",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"add",
				"${input:filePattern}"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Push",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"push"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Status",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"status"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Add All Auto",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"add",
				"."
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Commit Auto",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"commit",
				"-m",
				"fix: systematic protobuf import fixes"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Check All Proto Files",
			"type": "shell",
			"command": "sh",
			"args": [
				"-c",
				"find pkg -name '*.proto' -type f | while read file; do echo \"=== $file ===\"; buf lint --path \"$file\" 2>&1 | grep -E '(error|Error|file does not exist)' || echo 'OK'; done"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Generate with Args File",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"--args-file",
				"copilot-util-args",
				"buf",
				"generate"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Buf Lint with Args File",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"--args-file",
				"copilot-util-args",
				"buf",
				"lint"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Add All with Args File",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"--args-file",
				"copilot-util-args",
				"git",
				"add"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Push with Args File",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"--args-file",
				"copilot-util-args",
				"git",
				"push"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Status with Args File",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"--args-file",
				"copilot-util-args",
				"git",
				"status"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"group": "build",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Git Remove Legacy Sync Shell Scripts",
			"type": "shell",
			"command": "git",
			"args": [
				"rm",
				"-f",
				".github/scripts/sync-determine-target-repos.sh",
				".github/scripts/sync-dispatch-events.sh",
				".github/scripts/sync-generate-summary.sh",
				".github/scripts/sync-receiver-check-changes.sh",
				".github/scripts/sync-receiver-commit-push.sh",
				".github/scripts/sync-receiver-generate-summary.sh",
				".github/scripts/sync-receiver-sync-files.sh"
			],
			"isBackground": false,
			"group": "build"
		},
		{
			"label": "Git Commit Dependabot Setup",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"commit",
				"-m",
				"feat(deps): comprehensive dependabot.yml setup for all repositories\n\nCreated automated script to generate language-aware dependabot configurations across all repositories with support for Go, Rust, Python, Node.js, Docker, and GitHub Actions.\n\nFiles changed:\n- setup_dependabot_all_repos.py - Main automation script for creating dependabot.yml files\n- .github/dependabot.yml - Updated gcommon dependabot configuration\n- labels-current.json - Updated dependency labels\n- scripts/dismiss-sdk-alerts.sh - SDK alert management script\n- scripts/dismiss_sdk_unused_import_alerts.py - Python script for SDK alert cleanup"
			]
		},
		{
			"label": "Git Commit Workflow Improvements",
			"type": "shell",
			"command": "copilot-agent-util",
			"args": [
				"git",
				"commit",
				"-m",
				"feat(ci): implement comprehensive protobuf generation and autoversioning workflows\n\nAdded dedicated protocol buffer generation workflow with automated versioning and enhanced CI integration for seamless buf generate execution with post-processing.\n\nIssues Addressed:\n\nfeat(workflows): add dedicated protobuf generation workflow\n- .github/workflows/protobuf-generation.yml - Comprehensive workflow for buf generate automation\n- Automated protocol buffer generation with change detection\n- Integration with post-buf-generate.py and setup-go-modules.py scripts\n- Semantic versioning with automatic tag creation and GitHub releases\n- Manual workflow dispatch with configurable version bump types\n- Intelligent change detection to optimize workflow execution\n\nfeat(ci): enhance CI workflow with protobuf generation\n- .github/workflows/ci.yml - Added buf generate step to build process\n- Integrated protobuf file change detection\n- Automatic installation of buf CLI and protoc plugins\n- Post-generation processing with Python automation scripts\n- Enhanced Go build process with protobuf regeneration\n\nfeature(automation): comprehensive workflow features\n- Change detection for proto files, buf configuration, and automation scripts\n- Conditional workflow execution based on file changes\n- Automated semantic versioning (patch/minor/major)\n- GitHub release creation with detailed changelogs\n- Workflow summary reporting for transparency\n- Support for manual triggers with version type selection\n\nGenerated by: Enhanced CI/CD automation system\nIntegration: buf generate + post-processing + versioning + releases"
			]
		}
	],
	"inputs": [
		{
			"id": "module",
			"description": "Module to generate (e.g., auth, config, metrics)",
			"default": "auth",
			"type": "promptString"
		},
		{
			"id": "filePattern",
			"description": "File pattern to add (e.g., '*.proto', 'pkg/auth/', '**/*.go')",
			"default": "*.proto",
			"type": "promptString"
		}
	]
}