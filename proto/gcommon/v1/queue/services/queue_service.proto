// file: proto/gcommon/v1/queue/services/queue_service.proto
// version: 1.0.0
// guid: 1f2e3d4c-5b6a-7980-1e2f-3a4b5c6d7e8f

edition = "2023";

package gcommon.v1.queue;

import "gcommon/v1/queue/messages/dequeue_request.proto";
import "gcommon/v1/queue/messages/dequeue_response.proto";
import "gcommon/v1/queue/messages/enqueue_request.proto";
import "gcommon/v1/queue/messages/enqueue_response.proto";
import "gcommon/v1/queue/messages/get_queue_info_request.proto";
import "gcommon/v1/queue/messages/get_queue_info_response.proto";
import "gcommon/v1/queue/messages/peek_request.proto";
import "gcommon/v1/queue/messages/peek_response.proto";
import "gcommon/v1/queue/messages/publish_request.proto";
import "gcommon/v1/queue/messages/publish_response.proto";
import "gcommon/v1/queue/messages/subscribe_request.proto";
import "gcommon/v1/queue/messages/subscribe_response.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/sdks/go/queue";

/**
 * QueueService provides core queue operations for message handling,
 * task distribution, and asynchronous processing.
 */
service QueueService {
  // Enqueue a message or task
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);

  // Dequeue a message or task
  rpc Dequeue(DequeueRequest) returns (DequeueResponse);

  // Peek at the next message without removing it
  rpc Peek(PeekRequest) returns (PeekResponse);

  // Get information about a queue
  rpc GetQueueInfo(GetQueueInfoRequest) returns (GetQueueInfoResponse);

  // Subscribe to queue messages (streaming)
  rpc Subscribe(QueueSubscribeRequest) returns (stream SubscribeResponse);

  // Publish message to queue topic
  rpc Publish(QueuePublishRequest) returns (PublishResponse);
}
