// file: proto/gcommon/v1/common/services/authorization_service.proto
edition = "2023";

package gcommon.v1.common.services;

import "google/protobuf/go_features.proto";
import "proto/gcommon/v1/web/messages/authorize_request.proto";
import "proto/gcommon/v1/web/messages/authorize_response.proto";
import "proto/gcommon/v1/common/messages/get_user_permissions_request.proto";
import "proto/gcommon/v1/common/messages/get_user_permissions_response.proto";
import "proto/gcommon/v1/common/messages/get_user_roles_request.proto";
import "proto/gcommon/v1/common/messages/get_user_roles_response.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/proto/gcommon/v1/common/services";

/**
 * AuthorizationService provides authorization and permission management.
 * Handles role-based access control (RBAC), permission checking,
 * and role lifecycle management for fine-grained access control.
 */
service AuthorizationService {
  // Check if a user is authorized for a specific action on a resource
  rpc Authorize(AuthAuthorizeRequest) returns (AuthAuthorizeResponse);

  // Get all permissions granted to a user (direct and via roles)
  rpc GetUserPermissions(GetUserPermissionsRequest) returns (GetUserPermissionsResponse);

  // Get all roles assigned to a user
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
}
