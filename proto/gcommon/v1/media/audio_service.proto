// file: proto/gcommon/v1/media/audio_service.proto
// version: 1.0.0
// guid: 0123456-789a-bcde-e7f8-a9b0c1d2e3f4

edition = "2023";

package gcommon.v1.media;

import "gcommon/v1/media/analyze_audio_quality_request.proto";
import "gcommon/v1/media/analyze_audio_quality_response.proto";
import "gcommon/v1/media/detect_chapters_request.proto";
import "gcommon/v1/media/detect_chapters_response.proto";
import "gcommon/v1/media/merge_audio_request.proto";
import "gcommon/v1/media/merge_audio_response.proto";
import "gcommon/v1/media/normalize_audio_request.proto";
import "gcommon/v1/media/normalize_audio_response.proto";
import "gcommon/v1/media/split_audio_request.proto";
import "gcommon/v1/media/split_audio_response.proto";
import "google/protobuf/go_features.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "github.com/jdfalk/gcommon/sdks/go/v1/media";

/**
 * AudioService provides audio-specific operations including
 * chapter detection, audio processing, and quality analysis.
 */
service AudioService {
  // Detect chapters in audiobook files
  rpc DetectChapters(DetectChaptersRequest) returns (DetectChaptersResponse);

  // Normalize audio levels
  rpc NormalizeAudio(NormalizeAudioRequest) returns (NormalizeAudioResponse);

  // Split audio file into segments
  rpc SplitAudio(SplitAudioRequest) returns (SplitAudioResponse);

  // Merge multiple audio files
  rpc MergeAudio(MergeAudioRequest) returns (MergeAudioResponse);

  // Analyze audio quality metrics
  rpc AnalyzeAudioQuality(AnalyzeAudioQualityRequest) returns (AnalyzeAudioQualityResponse);
}
