// file: proto/gcommon/v1/database/services/database_admin_service.proto
edition = "2023";

package gcommon.v1.database.services;

import "google/protobuf/empty.proto";
import "google/protobuf/go_features.proto";
import "proto/gcommon/v1/database/api/create_database_request.proto";
import "proto/gcommon/v1/database/api/create_database_response.proto";
import "proto/gcommon/v1/database/api/create_schema_request.proto";
import "proto/gcommon/v1/database/api/create_schema_response.proto";
import "proto/gcommon/v1/database/api/drop_database_request.proto";
import "proto/gcommon/v1/database/api/drop_schema_request.proto";
import "proto/gcommon/v1/database/api/get_database_info_request.proto";
import "proto/gcommon/v1/database/api/get_database_info_response.proto";
import "proto/gcommon/v1/database/api/list_databases_request.proto";
import "proto/gcommon/v1/database/api/list_databases_response.proto";
import "proto/gcommon/v1/database/api/list_schemas_request.proto";
import "proto/gcommon/v1/database/api/list_schemas_response.proto";

option features.(pb.go).api_level = API_OPAQUE;
option go_package = "gcommon.v1.database.services";

/**
 * DatabaseAdminService provides administrative operations for database
 * management including schema operations and migrations.
 */
service DatabaseAdminService {
  // Create a new database
  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);

  // Remove an existing database
  rpc DropDatabase(DropDatabaseRequest) returns (google.protobuf.Empty);

  // List all available databases
  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);

  // Get metadata about a specific database
  rpc GetDatabaseInfo(GetDatabaseInfoRequest) returns (GetDatabaseInfoResponse);

  // Create a new schema within a database
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);

  // Remove a schema from a database
  rpc DropSchema(DropSchemaRequest) returns (google.protobuf.Empty);

  // List all schemas in a database
  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse);
}
